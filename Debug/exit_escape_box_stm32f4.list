
exit_escape_box_stm32f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003954  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003aec  08003aec  00013aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b10  08003b10  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003b10  08003b10  00013b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b18  08003b18  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b18  08003b18  00013b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b1c  08003b1c  00013b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003b20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  2000000c  08003b2c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08003b2c  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b64c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a86  00000000  00000000  0002b688  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ab0  00000000  00000000  0002d110  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009d8  00000000  00000000  0002dbc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016c84  00000000  00000000  0002e598  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000874a  00000000  00000000  0004521c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d22f  00000000  00000000  0004d966  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dab95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c0c  00000000  00000000  000dac10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003ad4 	.word	0x08003ad4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08003ad4 	.word	0x08003ad4

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b972 	b.w	80004e4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9e08      	ldr	r6, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	4688      	mov	r8, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14b      	bne.n	80002be <__udivmoddi4+0xa6>
 8000226:	428a      	cmp	r2, r1
 8000228:	4615      	mov	r5, r2
 800022a:	d967      	bls.n	80002fc <__udivmoddi4+0xe4>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0720 	rsb	r7, r2, #32
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	fa20 f707 	lsr.w	r7, r0, r7
 800023e:	4095      	lsls	r5, r2
 8000240:	ea47 0803 	orr.w	r8, r7, r3
 8000244:	4094      	lsls	r4, r2
 8000246:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024a:	0c23      	lsrs	r3, r4, #16
 800024c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000250:	fa1f fc85 	uxth.w	ip, r5
 8000254:	fb0e 8817 	mls	r8, lr, r7, r8
 8000258:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800025c:	fb07 f10c 	mul.w	r1, r7, ip
 8000260:	4299      	cmp	r1, r3
 8000262:	d909      	bls.n	8000278 <__udivmoddi4+0x60>
 8000264:	18eb      	adds	r3, r5, r3
 8000266:	f107 30ff 	add.w	r0, r7, #4294967295
 800026a:	f080 811b 	bcs.w	80004a4 <__udivmoddi4+0x28c>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 8118 	bls.w	80004a4 <__udivmoddi4+0x28c>
 8000274:	3f02      	subs	r7, #2
 8000276:	442b      	add	r3, r5
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000280:	fb0e 3310 	mls	r3, lr, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 fc0c 	mul.w	ip, r0, ip
 800028c:	45a4      	cmp	ip, r4
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x8c>
 8000290:	192c      	adds	r4, r5, r4
 8000292:	f100 33ff 	add.w	r3, r0, #4294967295
 8000296:	f080 8107 	bcs.w	80004a8 <__udivmoddi4+0x290>
 800029a:	45a4      	cmp	ip, r4
 800029c:	f240 8104 	bls.w	80004a8 <__udivmoddi4+0x290>
 80002a0:	3802      	subs	r0, #2
 80002a2:	442c      	add	r4, r5
 80002a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a8:	eba4 040c 	sub.w	r4, r4, ip
 80002ac:	2700      	movs	r7, #0
 80002ae:	b11e      	cbz	r6, 80002b8 <__udivmoddi4+0xa0>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c6 4300 	strd	r4, r3, [r6]
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xbe>
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	f000 80eb 	beq.w	800049e <__udivmoddi4+0x286>
 80002c8:	2700      	movs	r7, #0
 80002ca:	e9c6 0100 	strd	r0, r1, [r6]
 80002ce:	4638      	mov	r0, r7
 80002d0:	4639      	mov	r1, r7
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f783 	clz	r7, r3
 80002da:	2f00      	cmp	r7, #0
 80002dc:	d147      	bne.n	800036e <__udivmoddi4+0x156>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd0>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80fa 	bhi.w	80004dc <__udivmoddi4+0x2c4>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	4698      	mov	r8, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa0>
 80002f6:	e9c6 4800 	strd	r4, r8, [r6]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa0>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xe8>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 808f 	bne.w	8000428 <__udivmoddi4+0x210>
 800030a:	1b49      	subs	r1, r1, r5
 800030c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000310:	fa1f f885 	uxth.w	r8, r5
 8000314:	2701      	movs	r7, #1
 8000316:	fbb1 fcfe 	udiv	ip, r1, lr
 800031a:	0c23      	lsrs	r3, r4, #16
 800031c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb08 f10c 	mul.w	r1, r8, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x124>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x122>
 8000334:	4299      	cmp	r1, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2bc>
 800033a:	4684      	mov	ip, r0
 800033c:	1a59      	subs	r1, r3, r1
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb1 f0fe 	udiv	r0, r1, lr
 8000344:	fb0e 1410 	mls	r4, lr, r0, r1
 8000348:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800034c:	fb08 f800 	mul.w	r8, r8, r0
 8000350:	45a0      	cmp	r8, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x14c>
 8000354:	192c      	adds	r4, r5, r4
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x14a>
 800035c:	45a0      	cmp	r8, r4
 800035e:	f200 80b6 	bhi.w	80004ce <__udivmoddi4+0x2b6>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 0408 	sub.w	r4, r4, r8
 8000368:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800036c:	e79f      	b.n	80002ae <__udivmoddi4+0x96>
 800036e:	f1c7 0c20 	rsb	ip, r7, #32
 8000372:	40bb      	lsls	r3, r7
 8000374:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000378:	ea4e 0e03 	orr.w	lr, lr, r3
 800037c:	fa01 f407 	lsl.w	r4, r1, r7
 8000380:	fa20 f50c 	lsr.w	r5, r0, ip
 8000384:	fa21 f30c 	lsr.w	r3, r1, ip
 8000388:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800038c:	4325      	orrs	r5, r4
 800038e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000392:	0c2c      	lsrs	r4, r5, #16
 8000394:	fb08 3319 	mls	r3, r8, r9, r3
 8000398:	fa1f fa8e 	uxth.w	sl, lr
 800039c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a0:	fb09 f40a 	mul.w	r4, r9, sl
 80003a4:	429c      	cmp	r4, r3
 80003a6:	fa02 f207 	lsl.w	r2, r2, r7
 80003aa:	fa00 f107 	lsl.w	r1, r0, r7
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b0>
 80003b0:	eb1e 0303 	adds.w	r3, lr, r3
 80003b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b8:	f080 8087 	bcs.w	80004ca <__udivmoddi4+0x2b2>
 80003bc:	429c      	cmp	r4, r3
 80003be:	f240 8084 	bls.w	80004ca <__udivmoddi4+0x2b2>
 80003c2:	f1a9 0902 	sub.w	r9, r9, #2
 80003c6:	4473      	add	r3, lr
 80003c8:	1b1b      	subs	r3, r3, r4
 80003ca:	b2ad      	uxth	r5, r5
 80003cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d0:	fb08 3310 	mls	r3, r8, r0, r3
 80003d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003dc:	45a2      	cmp	sl, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1da>
 80003e0:	eb1e 0404 	adds.w	r4, lr, r4
 80003e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e8:	d26b      	bcs.n	80004c2 <__udivmoddi4+0x2aa>
 80003ea:	45a2      	cmp	sl, r4
 80003ec:	d969      	bls.n	80004c2 <__udivmoddi4+0x2aa>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4474      	add	r4, lr
 80003f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003f6:	fba0 8902 	umull	r8, r9, r0, r2
 80003fa:	eba4 040a 	sub.w	r4, r4, sl
 80003fe:	454c      	cmp	r4, r9
 8000400:	46c2      	mov	sl, r8
 8000402:	464b      	mov	r3, r9
 8000404:	d354      	bcc.n	80004b0 <__udivmoddi4+0x298>
 8000406:	d051      	beq.n	80004ac <__udivmoddi4+0x294>
 8000408:	2e00      	cmp	r6, #0
 800040a:	d069      	beq.n	80004e0 <__udivmoddi4+0x2c8>
 800040c:	ebb1 050a 	subs.w	r5, r1, sl
 8000410:	eb64 0403 	sbc.w	r4, r4, r3
 8000414:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000418:	40fd      	lsrs	r5, r7
 800041a:	40fc      	lsrs	r4, r7
 800041c:	ea4c 0505 	orr.w	r5, ip, r5
 8000420:	e9c6 5400 	strd	r5, r4, [r6]
 8000424:	2700      	movs	r7, #0
 8000426:	e747      	b.n	80002b8 <__udivmoddi4+0xa0>
 8000428:	f1c2 0320 	rsb	r3, r2, #32
 800042c:	fa20 f703 	lsr.w	r7, r0, r3
 8000430:	4095      	lsls	r5, r2
 8000432:	fa01 f002 	lsl.w	r0, r1, r2
 8000436:	fa21 f303 	lsr.w	r3, r1, r3
 800043a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800043e:	4338      	orrs	r0, r7
 8000440:	0c01      	lsrs	r1, r0, #16
 8000442:	fbb3 f7fe 	udiv	r7, r3, lr
 8000446:	fa1f f885 	uxth.w	r8, r5
 800044a:	fb0e 3317 	mls	r3, lr, r7, r3
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb07 f308 	mul.w	r3, r7, r8
 8000456:	428b      	cmp	r3, r1
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x256>
 800045e:	1869      	adds	r1, r5, r1
 8000460:	f107 3cff 	add.w	ip, r7, #4294967295
 8000464:	d22f      	bcs.n	80004c6 <__udivmoddi4+0x2ae>
 8000466:	428b      	cmp	r3, r1
 8000468:	d92d      	bls.n	80004c6 <__udivmoddi4+0x2ae>
 800046a:	3f02      	subs	r7, #2
 800046c:	4429      	add	r1, r5
 800046e:	1acb      	subs	r3, r1, r3
 8000470:	b281      	uxth	r1, r0
 8000472:	fbb3 f0fe 	udiv	r0, r3, lr
 8000476:	fb0e 3310 	mls	r3, lr, r0, r3
 800047a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047e:	fb00 f308 	mul.w	r3, r0, r8
 8000482:	428b      	cmp	r3, r1
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x27e>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f100 3cff 	add.w	ip, r0, #4294967295
 800048c:	d217      	bcs.n	80004be <__udivmoddi4+0x2a6>
 800048e:	428b      	cmp	r3, r1
 8000490:	d915      	bls.n	80004be <__udivmoddi4+0x2a6>
 8000492:	3802      	subs	r0, #2
 8000494:	4429      	add	r1, r5
 8000496:	1ac9      	subs	r1, r1, r3
 8000498:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800049c:	e73b      	b.n	8000316 <__udivmoddi4+0xfe>
 800049e:	4637      	mov	r7, r6
 80004a0:	4630      	mov	r0, r6
 80004a2:	e709      	b.n	80002b8 <__udivmoddi4+0xa0>
 80004a4:	4607      	mov	r7, r0
 80004a6:	e6e7      	b.n	8000278 <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fb      	b.n	80002a4 <__udivmoddi4+0x8c>
 80004ac:	4541      	cmp	r1, r8
 80004ae:	d2ab      	bcs.n	8000408 <__udivmoddi4+0x1f0>
 80004b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b4:	eb69 020e 	sbc.w	r2, r9, lr
 80004b8:	3801      	subs	r0, #1
 80004ba:	4613      	mov	r3, r2
 80004bc:	e7a4      	b.n	8000408 <__udivmoddi4+0x1f0>
 80004be:	4660      	mov	r0, ip
 80004c0:	e7e9      	b.n	8000496 <__udivmoddi4+0x27e>
 80004c2:	4618      	mov	r0, r3
 80004c4:	e795      	b.n	80003f2 <__udivmoddi4+0x1da>
 80004c6:	4667      	mov	r7, ip
 80004c8:	e7d1      	b.n	800046e <__udivmoddi4+0x256>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e77c      	b.n	80003c8 <__udivmoddi4+0x1b0>
 80004ce:	3802      	subs	r0, #2
 80004d0:	442c      	add	r4, r5
 80004d2:	e747      	b.n	8000364 <__udivmoddi4+0x14c>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	442b      	add	r3, r5
 80004da:	e72f      	b.n	800033c <__udivmoddi4+0x124>
 80004dc:	4638      	mov	r0, r7
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xda>
 80004e0:	4637      	mov	r7, r6
 80004e2:	e6e9      	b.n	80002b8 <__udivmoddi4+0xa0>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004ec:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <HAL_Init+0x40>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a0d      	ldr	r2, [pc, #52]	; (8000528 <HAL_Init+0x40>)
 80004f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004f8:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <HAL_Init+0x40>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a0a      	ldr	r2, [pc, #40]	; (8000528 <HAL_Init+0x40>)
 80004fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000502:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000504:	4b08      	ldr	r3, [pc, #32]	; (8000528 <HAL_Init+0x40>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a07      	ldr	r2, [pc, #28]	; (8000528 <HAL_Init+0x40>)
 800050a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800050e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000510:	2003      	movs	r0, #3
 8000512:	f000 f933 	bl	800077c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000516:	200f      	movs	r0, #15
 8000518:	f000 f810 	bl	800053c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800051c:	f000 f806 	bl	800052c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000520:	2300      	movs	r3, #0
}
 8000522:	4618      	mov	r0, r3
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40023c00 	.word	0x40023c00

0800052c <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
	...

0800053c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000544:	4b12      	ldr	r3, [pc, #72]	; (8000590 <HAL_InitTick+0x54>)
 8000546:	681a      	ldr	r2, [r3, #0]
 8000548:	4b12      	ldr	r3, [pc, #72]	; (8000594 <HAL_InitTick+0x58>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	4619      	mov	r1, r3
 800054e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000552:	fbb3 f3f1 	udiv	r3, r3, r1
 8000556:	fbb2 f3f3 	udiv	r3, r2, r3
 800055a:	4618      	mov	r0, r3
 800055c:	f000 f943 	bl	80007e6 <HAL_SYSTICK_Config>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000566:	2301      	movs	r3, #1
 8000568:	e00e      	b.n	8000588 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2b0f      	cmp	r3, #15
 800056e:	d80a      	bhi.n	8000586 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000570:	2200      	movs	r2, #0
 8000572:	6879      	ldr	r1, [r7, #4]
 8000574:	f04f 30ff 	mov.w	r0, #4294967295
 8000578:	f000 f90b 	bl	8000792 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800057c:	4a06      	ldr	r2, [pc, #24]	; (8000598 <HAL_InitTick+0x5c>)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000582:	2300      	movs	r3, #0
 8000584:	e000      	b.n	8000588 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000586:	2301      	movs	r3, #1
}
 8000588:	4618      	mov	r0, r3
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20000008 	.word	0x20000008
 8000594:	20000004 	.word	0x20000004
 8000598:	20000000 	.word	0x20000000

0800059c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <HAL_IncTick+0x20>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	461a      	mov	r2, r3
 80005a6:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <HAL_IncTick+0x24>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4413      	add	r3, r2
 80005ac:	4a04      	ldr	r2, [pc, #16]	; (80005c0 <HAL_IncTick+0x24>)
 80005ae:	6013      	str	r3, [r2, #0]
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	20000004 	.word	0x20000004
 80005c0:	20000028 	.word	0x20000028

080005c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  return uwTick;
 80005c8:	4b03      	ldr	r3, [pc, #12]	; (80005d8 <HAL_GetTick+0x14>)
 80005ca:	681b      	ldr	r3, [r3, #0]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000028 	.word	0x20000028

080005dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	f003 0307 	and.w	r3, r3, #7
 80005ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005ec:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <__NVIC_SetPriorityGrouping+0x44>)
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005f2:	68ba      	ldr	r2, [r7, #8]
 80005f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005f8:	4013      	ands	r3, r2
 80005fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800060c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800060e:	4a04      	ldr	r2, [pc, #16]	; (8000620 <__NVIC_SetPriorityGrouping+0x44>)
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	60d3      	str	r3, [r2, #12]
}
 8000614:	bf00      	nop
 8000616:	3714      	adds	r7, #20
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000628:	4b04      	ldr	r3, [pc, #16]	; (800063c <__NVIC_GetPriorityGrouping+0x18>)
 800062a:	68db      	ldr	r3, [r3, #12]
 800062c:	0a1b      	lsrs	r3, r3, #8
 800062e:	f003 0307 	and.w	r3, r3, #7
}
 8000632:	4618      	mov	r0, r3
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800064a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064e:	2b00      	cmp	r3, #0
 8000650:	db0b      	blt.n	800066a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	f003 021f 	and.w	r2, r3, #31
 8000658:	4907      	ldr	r1, [pc, #28]	; (8000678 <__NVIC_EnableIRQ+0x38>)
 800065a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065e:	095b      	lsrs	r3, r3, #5
 8000660:	2001      	movs	r0, #1
 8000662:	fa00 f202 	lsl.w	r2, r0, r2
 8000666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800066a:	bf00      	nop
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	e000e100 	.word	0xe000e100

0800067c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	6039      	str	r1, [r7, #0]
 8000686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068c:	2b00      	cmp	r3, #0
 800068e:	db0a      	blt.n	80006a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	b2da      	uxtb	r2, r3
 8000694:	490c      	ldr	r1, [pc, #48]	; (80006c8 <__NVIC_SetPriority+0x4c>)
 8000696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069a:	0112      	lsls	r2, r2, #4
 800069c:	b2d2      	uxtb	r2, r2
 800069e:	440b      	add	r3, r1
 80006a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006a4:	e00a      	b.n	80006bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	b2da      	uxtb	r2, r3
 80006aa:	4908      	ldr	r1, [pc, #32]	; (80006cc <__NVIC_SetPriority+0x50>)
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	f003 030f 	and.w	r3, r3, #15
 80006b2:	3b04      	subs	r3, #4
 80006b4:	0112      	lsls	r2, r2, #4
 80006b6:	b2d2      	uxtb	r2, r2
 80006b8:	440b      	add	r3, r1
 80006ba:	761a      	strb	r2, [r3, #24]
}
 80006bc:	bf00      	nop
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	e000e100 	.word	0xe000e100
 80006cc:	e000ed00 	.word	0xe000ed00

080006d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b089      	sub	sp, #36	; 0x24
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	60f8      	str	r0, [r7, #12]
 80006d8:	60b9      	str	r1, [r7, #8]
 80006da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	f003 0307 	and.w	r3, r3, #7
 80006e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006e4:	69fb      	ldr	r3, [r7, #28]
 80006e6:	f1c3 0307 	rsb	r3, r3, #7
 80006ea:	2b04      	cmp	r3, #4
 80006ec:	bf28      	it	cs
 80006ee:	2304      	movcs	r3, #4
 80006f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006f2:	69fb      	ldr	r3, [r7, #28]
 80006f4:	3304      	adds	r3, #4
 80006f6:	2b06      	cmp	r3, #6
 80006f8:	d902      	bls.n	8000700 <NVIC_EncodePriority+0x30>
 80006fa:	69fb      	ldr	r3, [r7, #28]
 80006fc:	3b03      	subs	r3, #3
 80006fe:	e000      	b.n	8000702 <NVIC_EncodePriority+0x32>
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000704:	f04f 32ff 	mov.w	r2, #4294967295
 8000708:	69bb      	ldr	r3, [r7, #24]
 800070a:	fa02 f303 	lsl.w	r3, r2, r3
 800070e:	43da      	mvns	r2, r3
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	401a      	ands	r2, r3
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000718:	f04f 31ff 	mov.w	r1, #4294967295
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	fa01 f303 	lsl.w	r3, r1, r3
 8000722:	43d9      	mvns	r1, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000728:	4313      	orrs	r3, r2
         );
}
 800072a:	4618      	mov	r0, r3
 800072c:	3724      	adds	r7, #36	; 0x24
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
	...

08000738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	3b01      	subs	r3, #1
 8000744:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000748:	d301      	bcc.n	800074e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800074a:	2301      	movs	r3, #1
 800074c:	e00f      	b.n	800076e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800074e:	4a0a      	ldr	r2, [pc, #40]	; (8000778 <SysTick_Config+0x40>)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	3b01      	subs	r3, #1
 8000754:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000756:	210f      	movs	r1, #15
 8000758:	f04f 30ff 	mov.w	r0, #4294967295
 800075c:	f7ff ff8e 	bl	800067c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000760:	4b05      	ldr	r3, [pc, #20]	; (8000778 <SysTick_Config+0x40>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000766:	4b04      	ldr	r3, [pc, #16]	; (8000778 <SysTick_Config+0x40>)
 8000768:	2207      	movs	r2, #7
 800076a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800076c:	2300      	movs	r3, #0
}
 800076e:	4618      	mov	r0, r3
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	e000e010 	.word	0xe000e010

0800077c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f7ff ff29 	bl	80005dc <__NVIC_SetPriorityGrouping>
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000792:	b580      	push	{r7, lr}
 8000794:	b086      	sub	sp, #24
 8000796:	af00      	add	r7, sp, #0
 8000798:	4603      	mov	r3, r0
 800079a:	60b9      	str	r1, [r7, #8]
 800079c:	607a      	str	r2, [r7, #4]
 800079e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007a4:	f7ff ff3e 	bl	8000624 <__NVIC_GetPriorityGrouping>
 80007a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	68b9      	ldr	r1, [r7, #8]
 80007ae:	6978      	ldr	r0, [r7, #20]
 80007b0:	f7ff ff8e 	bl	80006d0 <NVIC_EncodePriority>
 80007b4:	4602      	mov	r2, r0
 80007b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ba:	4611      	mov	r1, r2
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff ff5d 	bl	800067c <__NVIC_SetPriority>
}
 80007c2:	bf00      	nop
 80007c4:	3718      	adds	r7, #24
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b082      	sub	sp, #8
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	4603      	mov	r3, r0
 80007d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff ff31 	bl	8000640 <__NVIC_EnableIRQ>
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b082      	sub	sp, #8
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f7ff ffa2 	bl	8000738 <SysTick_Config>
 80007f4:	4603      	mov	r3, r0
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800080c:	f7ff feda 	bl	80005c4 <HAL_GetTick>
 8000810:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d101      	bne.n	800081c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000818:	2301      	movs	r3, #1
 800081a:	e099      	b.n	8000950 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2200      	movs	r2, #0
 8000820:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2202      	movs	r2, #2
 8000828:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	f022 0201 	bic.w	r2, r2, #1
 800083a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800083c:	e00f      	b.n	800085e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800083e:	f7ff fec1 	bl	80005c4 <HAL_GetTick>
 8000842:	4602      	mov	r2, r0
 8000844:	693b      	ldr	r3, [r7, #16]
 8000846:	1ad3      	subs	r3, r2, r3
 8000848:	2b05      	cmp	r3, #5
 800084a:	d908      	bls.n	800085e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2220      	movs	r2, #32
 8000850:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2203      	movs	r2, #3
 8000856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800085a:	2303      	movs	r3, #3
 800085c:	e078      	b.n	8000950 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f003 0301 	and.w	r3, r3, #1
 8000868:	2b00      	cmp	r3, #0
 800086a:	d1e8      	bne.n	800083e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000874:	697a      	ldr	r2, [r7, #20]
 8000876:	4b38      	ldr	r3, [pc, #224]	; (8000958 <HAL_DMA_Init+0x158>)
 8000878:	4013      	ands	r3, r2
 800087a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	685a      	ldr	r2, [r3, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	689b      	ldr	r3, [r3, #8]
 8000884:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800088a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	691b      	ldr	r3, [r3, #16]
 8000890:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000896:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	6a1b      	ldr	r3, [r3, #32]
 80008a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008aa:	697a      	ldr	r2, [r7, #20]
 80008ac:	4313      	orrs	r3, r2
 80008ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008b4:	2b04      	cmp	r3, #4
 80008b6:	d107      	bne.n	80008c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c0:	4313      	orrs	r3, r2
 80008c2:	697a      	ldr	r2, [r7, #20]
 80008c4:	4313      	orrs	r3, r2
 80008c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	697a      	ldr	r2, [r7, #20]
 80008ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	695b      	ldr	r3, [r3, #20]
 80008d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	f023 0307 	bic.w	r3, r3, #7
 80008de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008e4:	697a      	ldr	r2, [r7, #20]
 80008e6:	4313      	orrs	r3, r2
 80008e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ee:	2b04      	cmp	r3, #4
 80008f0:	d117      	bne.n	8000922 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008f6:	697a      	ldr	r2, [r7, #20]
 80008f8:	4313      	orrs	r3, r2
 80008fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000900:	2b00      	cmp	r3, #0
 8000902:	d00e      	beq.n	8000922 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000904:	6878      	ldr	r0, [r7, #4]
 8000906:	f000 f907 	bl	8000b18 <DMA_CheckFifoParam>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d008      	beq.n	8000922 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2240      	movs	r2, #64	; 0x40
 8000914:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2201      	movs	r2, #1
 800091a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800091e:	2301      	movs	r3, #1
 8000920:	e016      	b.n	8000950 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	697a      	ldr	r2, [r7, #20]
 8000928:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f000 f8be 	bl	8000aac <DMA_CalcBaseAndBitshift>
 8000930:	4603      	mov	r3, r0
 8000932:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000938:	223f      	movs	r2, #63	; 0x3f
 800093a:	409a      	lsls	r2, r3
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2200      	movs	r2, #0
 8000944:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2201      	movs	r2, #1
 800094a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800094e:	2300      	movs	r3, #0
}
 8000950:	4618      	mov	r0, r3
 8000952:	3718      	adds	r7, #24
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	f010803f 	.word	0xf010803f

0800095c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
 8000968:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800096a:	2300      	movs	r3, #0
 800096c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000972:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800097a:	2b01      	cmp	r3, #1
 800097c:	d101      	bne.n	8000982 <HAL_DMA_Start_IT+0x26>
 800097e:	2302      	movs	r3, #2
 8000980:	e040      	b.n	8000a04 <HAL_DMA_Start_IT+0xa8>
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	2201      	movs	r2, #1
 8000986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000990:	b2db      	uxtb	r3, r3
 8000992:	2b01      	cmp	r3, #1
 8000994:	d12f      	bne.n	80009f6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	2202      	movs	r2, #2
 800099a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	2200      	movs	r2, #0
 80009a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	687a      	ldr	r2, [r7, #4]
 80009a8:	68b9      	ldr	r1, [r7, #8]
 80009aa:	68f8      	ldr	r0, [r7, #12]
 80009ac:	f000 f850 	bl	8000a50 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009b4:	223f      	movs	r2, #63	; 0x3f
 80009b6:	409a      	lsls	r2, r3
 80009b8:	693b      	ldr	r3, [r7, #16]
 80009ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f042 0216 	orr.w	r2, r2, #22
 80009ca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d007      	beq.n	80009e4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f042 0208 	orr.w	r2, r2, #8
 80009e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f042 0201 	orr.w	r2, r2, #1
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	e005      	b.n	8000a02 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	2200      	movs	r2, #0
 80009fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80009fe:	2302      	movs	r3, #2
 8000a00:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000a02:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3718      	adds	r7, #24
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	2b02      	cmp	r3, #2
 8000a1e:	d004      	beq.n	8000a2a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2280      	movs	r2, #128	; 0x80
 8000a24:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
 8000a28:	e00c      	b.n	8000a44 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2205      	movs	r2, #5
 8000a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f022 0201 	bic.w	r2, r2, #1
 8000a40:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000a42:	2300      	movs	r3, #0
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]
 8000a5c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000a6c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	683a      	ldr	r2, [r7, #0]
 8000a74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	689b      	ldr	r3, [r3, #8]
 8000a7a:	2b40      	cmp	r3, #64	; 0x40
 8000a7c:	d108      	bne.n	8000a90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	68ba      	ldr	r2, [r7, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8000a8e:	e007      	b.n	8000aa0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	68ba      	ldr	r2, [r7, #8]
 8000a96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	60da      	str	r2, [r3, #12]
}
 8000aa0:	bf00      	nop
 8000aa2:	3714      	adds	r7, #20
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	3b10      	subs	r3, #16
 8000abc:	4a14      	ldr	r2, [pc, #80]	; (8000b10 <DMA_CalcBaseAndBitshift+0x64>)
 8000abe:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac2:	091b      	lsrs	r3, r3, #4
 8000ac4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000ac6:	4a13      	ldr	r2, [pc, #76]	; (8000b14 <DMA_CalcBaseAndBitshift+0x68>)
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	4413      	add	r3, r2
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	461a      	mov	r2, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	2b03      	cmp	r3, #3
 8000ad8:	d909      	bls.n	8000aee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000ae2:	f023 0303 	bic.w	r3, r3, #3
 8000ae6:	1d1a      	adds	r2, r3, #4
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	659a      	str	r2, [r3, #88]	; 0x58
 8000aec:	e007      	b.n	8000afe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000af6:	f023 0303 	bic.w	r3, r3, #3
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	aaaaaaab 	.word	0xaaaaaaab
 8000b14:	08003af0 	.word	0x08003af0

08000b18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b20:	2300      	movs	r3, #0
 8000b22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	699b      	ldr	r3, [r3, #24]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d11f      	bne.n	8000b72 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	2b03      	cmp	r3, #3
 8000b36:	d855      	bhi.n	8000be4 <DMA_CheckFifoParam+0xcc>
 8000b38:	a201      	add	r2, pc, #4	; (adr r2, 8000b40 <DMA_CheckFifoParam+0x28>)
 8000b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b3e:	bf00      	nop
 8000b40:	08000b51 	.word	0x08000b51
 8000b44:	08000b63 	.word	0x08000b63
 8000b48:	08000b51 	.word	0x08000b51
 8000b4c:	08000be5 	.word	0x08000be5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d045      	beq.n	8000be8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000b60:	e042      	b.n	8000be8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000b6a:	d13f      	bne.n	8000bec <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000b70:	e03c      	b.n	8000bec <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b7a:	d121      	bne.n	8000bc0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	2b03      	cmp	r3, #3
 8000b80:	d836      	bhi.n	8000bf0 <DMA_CheckFifoParam+0xd8>
 8000b82:	a201      	add	r2, pc, #4	; (adr r2, 8000b88 <DMA_CheckFifoParam+0x70>)
 8000b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b88:	08000b99 	.word	0x08000b99
 8000b8c:	08000b9f 	.word	0x08000b9f
 8000b90:	08000b99 	.word	0x08000b99
 8000b94:	08000bb1 	.word	0x08000bb1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	73fb      	strb	r3, [r7, #15]
      break;
 8000b9c:	e02f      	b.n	8000bfe <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d024      	beq.n	8000bf4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000bae:	e021      	b.n	8000bf4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bb4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000bb8:	d11e      	bne.n	8000bf8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000bbe:	e01b      	b.n	8000bf8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	2b02      	cmp	r3, #2
 8000bc4:	d902      	bls.n	8000bcc <DMA_CheckFifoParam+0xb4>
 8000bc6:	2b03      	cmp	r3, #3
 8000bc8:	d003      	beq.n	8000bd2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000bca:	e018      	b.n	8000bfe <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	73fb      	strb	r3, [r7, #15]
      break;
 8000bd0:	e015      	b.n	8000bfe <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d00e      	beq.n	8000bfc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	73fb      	strb	r3, [r7, #15]
      break;
 8000be2:	e00b      	b.n	8000bfc <DMA_CheckFifoParam+0xe4>
      break;
 8000be4:	bf00      	nop
 8000be6:	e00a      	b.n	8000bfe <DMA_CheckFifoParam+0xe6>
      break;
 8000be8:	bf00      	nop
 8000bea:	e008      	b.n	8000bfe <DMA_CheckFifoParam+0xe6>
      break;
 8000bec:	bf00      	nop
 8000bee:	e006      	b.n	8000bfe <DMA_CheckFifoParam+0xe6>
      break;
 8000bf0:	bf00      	nop
 8000bf2:	e004      	b.n	8000bfe <DMA_CheckFifoParam+0xe6>
      break;
 8000bf4:	bf00      	nop
 8000bf6:	e002      	b.n	8000bfe <DMA_CheckFifoParam+0xe6>
      break;   
 8000bf8:	bf00      	nop
 8000bfa:	e000      	b.n	8000bfe <DMA_CheckFifoParam+0xe6>
      break;
 8000bfc:	bf00      	nop
    }
  } 
  
  return status; 
 8000bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3714      	adds	r7, #20
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b089      	sub	sp, #36	; 0x24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
 8000c26:	e159      	b.n	8000edc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c28:	2201      	movs	r2, #1
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	697a      	ldr	r2, [r7, #20]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f040 8148 	bne.w	8000ed6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d00b      	beq.n	8000c66 <HAL_GPIO_Init+0x5a>
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d007      	beq.n	8000c66 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c5a:	2b11      	cmp	r3, #17
 8000c5c:	d003      	beq.n	8000c66 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	2b12      	cmp	r3, #18
 8000c64:	d130      	bne.n	8000cc8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	2203      	movs	r2, #3
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43db      	mvns	r3, r3
 8000c78:	69ba      	ldr	r2, [r7, #24]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	68da      	ldr	r2, [r3, #12]
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	69ba      	ldr	r2, [r7, #24]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	091b      	lsrs	r3, r3, #4
 8000cb2:	f003 0201 	and.w	r2, r3, #1
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	2203      	movs	r2, #3
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	689a      	ldr	r2, [r3, #8]
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d003      	beq.n	8000d08 <HAL_GPIO_Init+0xfc>
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	2b12      	cmp	r3, #18
 8000d06:	d123      	bne.n	8000d50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	08da      	lsrs	r2, r3, #3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3208      	adds	r2, #8
 8000d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	f003 0307 	and.w	r3, r3, #7
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	220f      	movs	r2, #15
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	691a      	ldr	r2, [r3, #16]
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	08da      	lsrs	r2, r3, #3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	3208      	adds	r2, #8
 8000d4a:	69b9      	ldr	r1, [r7, #24]
 8000d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	4013      	ands	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f003 0203 	and.w	r2, r3, #3
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	f000 80a2 	beq.w	8000ed6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	4b56      	ldr	r3, [pc, #344]	; (8000ef0 <HAL_GPIO_Init+0x2e4>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	4a55      	ldr	r2, [pc, #340]	; (8000ef0 <HAL_GPIO_Init+0x2e4>)
 8000d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da0:	6453      	str	r3, [r2, #68]	; 0x44
 8000da2:	4b53      	ldr	r3, [pc, #332]	; (8000ef0 <HAL_GPIO_Init+0x2e4>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dae:	4a51      	ldr	r2, [pc, #324]	; (8000ef4 <HAL_GPIO_Init+0x2e8>)
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	089b      	lsrs	r3, r3, #2
 8000db4:	3302      	adds	r3, #2
 8000db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f003 0303 	and.w	r3, r3, #3
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	220f      	movs	r2, #15
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a48      	ldr	r2, [pc, #288]	; (8000ef8 <HAL_GPIO_Init+0x2ec>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d019      	beq.n	8000e0e <HAL_GPIO_Init+0x202>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a47      	ldr	r2, [pc, #284]	; (8000efc <HAL_GPIO_Init+0x2f0>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d013      	beq.n	8000e0a <HAL_GPIO_Init+0x1fe>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a46      	ldr	r2, [pc, #280]	; (8000f00 <HAL_GPIO_Init+0x2f4>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d00d      	beq.n	8000e06 <HAL_GPIO_Init+0x1fa>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a45      	ldr	r2, [pc, #276]	; (8000f04 <HAL_GPIO_Init+0x2f8>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d007      	beq.n	8000e02 <HAL_GPIO_Init+0x1f6>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a44      	ldr	r2, [pc, #272]	; (8000f08 <HAL_GPIO_Init+0x2fc>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d101      	bne.n	8000dfe <HAL_GPIO_Init+0x1f2>
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	e008      	b.n	8000e10 <HAL_GPIO_Init+0x204>
 8000dfe:	2307      	movs	r3, #7
 8000e00:	e006      	b.n	8000e10 <HAL_GPIO_Init+0x204>
 8000e02:	2303      	movs	r3, #3
 8000e04:	e004      	b.n	8000e10 <HAL_GPIO_Init+0x204>
 8000e06:	2302      	movs	r3, #2
 8000e08:	e002      	b.n	8000e10 <HAL_GPIO_Init+0x204>
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e000      	b.n	8000e10 <HAL_GPIO_Init+0x204>
 8000e0e:	2300      	movs	r3, #0
 8000e10:	69fa      	ldr	r2, [r7, #28]
 8000e12:	f002 0203 	and.w	r2, r2, #3
 8000e16:	0092      	lsls	r2, r2, #2
 8000e18:	4093      	lsls	r3, r2
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e20:	4934      	ldr	r1, [pc, #208]	; (8000ef4 <HAL_GPIO_Init+0x2e8>)
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	089b      	lsrs	r3, r3, #2
 8000e26:	3302      	adds	r3, #2
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e2e:	4b37      	ldr	r3, [pc, #220]	; (8000f0c <HAL_GPIO_Init+0x300>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	43db      	mvns	r3, r3
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d003      	beq.n	8000e52 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e52:	4a2e      	ldr	r2, [pc, #184]	; (8000f0c <HAL_GPIO_Init+0x300>)
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e58:	4b2c      	ldr	r3, [pc, #176]	; (8000f0c <HAL_GPIO_Init+0x300>)
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	43db      	mvns	r3, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4013      	ands	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d003      	beq.n	8000e7c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e7c:	4a23      	ldr	r2, [pc, #140]	; (8000f0c <HAL_GPIO_Init+0x300>)
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e82:	4b22      	ldr	r3, [pc, #136]	; (8000f0c <HAL_GPIO_Init+0x300>)
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ea6:	4a19      	ldr	r2, [pc, #100]	; (8000f0c <HAL_GPIO_Init+0x300>)
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000eac:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <HAL_GPIO_Init+0x300>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d003      	beq.n	8000ed0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ed0:	4a0e      	ldr	r2, [pc, #56]	; (8000f0c <HAL_GPIO_Init+0x300>)
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	61fb      	str	r3, [r7, #28]
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	2b0f      	cmp	r3, #15
 8000ee0:	f67f aea2 	bls.w	8000c28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ee4:	bf00      	nop
 8000ee6:	3724      	adds	r7, #36	; 0x24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40013800 	.word	0x40013800
 8000ef8:	40020000 	.word	0x40020000
 8000efc:	40020400 	.word	0x40020400
 8000f00:	40020800 	.word	0x40020800
 8000f04:	40020c00 	.word	0x40020c00
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	40013c00 	.word	0x40013c00

08000f10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	460b      	mov	r3, r1
 8000f1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	691a      	ldr	r2, [r3, #16]
 8000f20:	887b      	ldrh	r3, [r7, #2]
 8000f22:	4013      	ands	r3, r2
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d002      	beq.n	8000f2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	73fb      	strb	r3, [r7, #15]
 8000f2c:	e001      	b.n	8000f32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	460b      	mov	r3, r1
 8000f4a:	807b      	strh	r3, [r7, #2]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f50:	787b      	ldrb	r3, [r7, #1]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f56:	887a      	ldrh	r2, [r7, #2]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f5c:	e003      	b.n	8000f66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f5e:	887b      	ldrh	r3, [r7, #2]
 8000f60:	041a      	lsls	r2, r3, #16
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	619a      	str	r2, [r3, #24]
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
	...

08000f74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d101      	bne.n	8000f86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e25b      	b.n	800143e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d075      	beq.n	800107e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f92:	4ba3      	ldr	r3, [pc, #652]	; (8001220 <HAL_RCC_OscConfig+0x2ac>)
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	f003 030c 	and.w	r3, r3, #12
 8000f9a:	2b04      	cmp	r3, #4
 8000f9c:	d00c      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f9e:	4ba0      	ldr	r3, [pc, #640]	; (8001220 <HAL_RCC_OscConfig+0x2ac>)
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fa6:	2b08      	cmp	r3, #8
 8000fa8:	d112      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000faa:	4b9d      	ldr	r3, [pc, #628]	; (8001220 <HAL_RCC_OscConfig+0x2ac>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000fb6:	d10b      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb8:	4b99      	ldr	r3, [pc, #612]	; (8001220 <HAL_RCC_OscConfig+0x2ac>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d05b      	beq.n	800107c <HAL_RCC_OscConfig+0x108>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d157      	bne.n	800107c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e236      	b.n	800143e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fd8:	d106      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x74>
 8000fda:	4b91      	ldr	r3, [pc, #580]	; (8001220 <HAL_RCC_OscConfig+0x2ac>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a90      	ldr	r2, [pc, #576]	; (8001220 <HAL_RCC_OscConfig+0x2ac>)
 8000fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe4:	6013      	str	r3, [r2, #0]
 8000fe6:	e01d      	b.n	8001024 <HAL_RCC_OscConfig+0xb0>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ff0:	d10c      	bne.n	800100c <HAL_RCC_OscConfig+0x98>
 8000ff2:	4b8b      	ldr	r3, [pc, #556]	; (8001220 <HAL_RCC_OscConfig+0x2ac>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a8a      	ldr	r2, [pc, #552]	; (8001220 <HAL_RCC_OscConfig+0x2ac>)
 8000ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ffc:	6013      	str	r3, [r2, #0]
 8000ffe:	4b88      	ldr	r3, [pc, #544]	; (8001220 <HAL_RCC_OscConfig+0x2ac>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a87      	ldr	r2, [pc, #540]	; (8001220 <HAL_RCC_OscConfig+0x2ac>)
 8001004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001008:	6013      	str	r3, [r2, #0]
 800100a:	e00b      	b.n	8001024 <HAL_RCC_OscConfig+0xb0>
 800100c:	4b84      	ldr	r3, [pc, #528]	; (8001220 <HAL_RCC_OscConfig+0x2ac>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a83      	ldr	r2, [pc, #524]	; (8001220 <HAL_RCC_OscConfig+0x2ac>)
 8001012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	4b81      	ldr	r3, [pc, #516]	; (8001220 <HAL_RCC_OscConfig+0x2ac>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a80      	ldr	r2, [pc, #512]	; (8001220 <HAL_RCC_OscConfig+0x2ac>)
 800101e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001022:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d013      	beq.n	8001054 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800102c:	f7ff faca 	bl	80005c4 <HAL_GetTick>
 8001030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001032:	e008      	b.n	8001046 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001034:	f7ff fac6 	bl	80005c4 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b64      	cmp	r3, #100	; 0x64
 8001040:	d901      	bls.n	8001046 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e1fb      	b.n	800143e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001046:	4b76      	ldr	r3, [pc, #472]	; (8001220 <HAL_RCC_OscConfig+0x2ac>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d0f0      	beq.n	8001034 <HAL_RCC_OscConfig+0xc0>
 8001052:	e014      	b.n	800107e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001054:	f7ff fab6 	bl	80005c4 <HAL_GetTick>
 8001058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800105a:	e008      	b.n	800106e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800105c:	f7ff fab2 	bl	80005c4 <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	2b64      	cmp	r3, #100	; 0x64
 8001068:	d901      	bls.n	800106e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e1e7      	b.n	800143e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800106e:	4b6c      	ldr	r3, [pc, #432]	; (8001220 <HAL_RCC_OscConfig+0x2ac>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1f0      	bne.n	800105c <HAL_RCC_OscConfig+0xe8>
 800107a:	e000      	b.n	800107e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800107c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d063      	beq.n	8001152 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800108a:	4b65      	ldr	r3, [pc, #404]	; (8001220 <HAL_RCC_OscConfig+0x2ac>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f003 030c 	and.w	r3, r3, #12
 8001092:	2b00      	cmp	r3, #0
 8001094:	d00b      	beq.n	80010ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001096:	4b62      	ldr	r3, [pc, #392]	; (8001220 <HAL_RCC_OscConfig+0x2ac>)
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800109e:	2b08      	cmp	r3, #8
 80010a0:	d11c      	bne.n	80010dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010a2:	4b5f      	ldr	r3, [pc, #380]	; (8001220 <HAL_RCC_OscConfig+0x2ac>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d116      	bne.n	80010dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ae:	4b5c      	ldr	r3, [pc, #368]	; (8001220 <HAL_RCC_OscConfig+0x2ac>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d005      	beq.n	80010c6 <HAL_RCC_OscConfig+0x152>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d001      	beq.n	80010c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e1bb      	b.n	800143e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010c6:	4b56      	ldr	r3, [pc, #344]	; (8001220 <HAL_RCC_OscConfig+0x2ac>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	691b      	ldr	r3, [r3, #16]
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	4952      	ldr	r1, [pc, #328]	; (8001220 <HAL_RCC_OscConfig+0x2ac>)
 80010d6:	4313      	orrs	r3, r2
 80010d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010da:	e03a      	b.n	8001152 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d020      	beq.n	8001126 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010e4:	4b4f      	ldr	r3, [pc, #316]	; (8001224 <HAL_RCC_OscConfig+0x2b0>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ea:	f7ff fa6b 	bl	80005c4 <HAL_GetTick>
 80010ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010f0:	e008      	b.n	8001104 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010f2:	f7ff fa67 	bl	80005c4 <HAL_GetTick>
 80010f6:	4602      	mov	r2, r0
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d901      	bls.n	8001104 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001100:	2303      	movs	r3, #3
 8001102:	e19c      	b.n	800143e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001104:	4b46      	ldr	r3, [pc, #280]	; (8001220 <HAL_RCC_OscConfig+0x2ac>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0302 	and.w	r3, r3, #2
 800110c:	2b00      	cmp	r3, #0
 800110e:	d0f0      	beq.n	80010f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001110:	4b43      	ldr	r3, [pc, #268]	; (8001220 <HAL_RCC_OscConfig+0x2ac>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	691b      	ldr	r3, [r3, #16]
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	4940      	ldr	r1, [pc, #256]	; (8001220 <HAL_RCC_OscConfig+0x2ac>)
 8001120:	4313      	orrs	r3, r2
 8001122:	600b      	str	r3, [r1, #0]
 8001124:	e015      	b.n	8001152 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001126:	4b3f      	ldr	r3, [pc, #252]	; (8001224 <HAL_RCC_OscConfig+0x2b0>)
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800112c:	f7ff fa4a 	bl	80005c4 <HAL_GetTick>
 8001130:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001132:	e008      	b.n	8001146 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001134:	f7ff fa46 	bl	80005c4 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b02      	cmp	r3, #2
 8001140:	d901      	bls.n	8001146 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e17b      	b.n	800143e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001146:	4b36      	ldr	r3, [pc, #216]	; (8001220 <HAL_RCC_OscConfig+0x2ac>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d1f0      	bne.n	8001134 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0308 	and.w	r3, r3, #8
 800115a:	2b00      	cmp	r3, #0
 800115c:	d030      	beq.n	80011c0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d016      	beq.n	8001194 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001166:	4b30      	ldr	r3, [pc, #192]	; (8001228 <HAL_RCC_OscConfig+0x2b4>)
 8001168:	2201      	movs	r2, #1
 800116a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800116c:	f7ff fa2a 	bl	80005c4 <HAL_GetTick>
 8001170:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001172:	e008      	b.n	8001186 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001174:	f7ff fa26 	bl	80005c4 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	2b02      	cmp	r3, #2
 8001180:	d901      	bls.n	8001186 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001182:	2303      	movs	r3, #3
 8001184:	e15b      	b.n	800143e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001186:	4b26      	ldr	r3, [pc, #152]	; (8001220 <HAL_RCC_OscConfig+0x2ac>)
 8001188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d0f0      	beq.n	8001174 <HAL_RCC_OscConfig+0x200>
 8001192:	e015      	b.n	80011c0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001194:	4b24      	ldr	r3, [pc, #144]	; (8001228 <HAL_RCC_OscConfig+0x2b4>)
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800119a:	f7ff fa13 	bl	80005c4 <HAL_GetTick>
 800119e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011a0:	e008      	b.n	80011b4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011a2:	f7ff fa0f 	bl	80005c4 <HAL_GetTick>
 80011a6:	4602      	mov	r2, r0
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d901      	bls.n	80011b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80011b0:	2303      	movs	r3, #3
 80011b2:	e144      	b.n	800143e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011b4:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <HAL_RCC_OscConfig+0x2ac>)
 80011b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011b8:	f003 0302 	and.w	r3, r3, #2
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d1f0      	bne.n	80011a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0304 	and.w	r3, r3, #4
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	f000 80a0 	beq.w	800130e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011ce:	2300      	movs	r3, #0
 80011d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011d2:	4b13      	ldr	r3, [pc, #76]	; (8001220 <HAL_RCC_OscConfig+0x2ac>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d10f      	bne.n	80011fe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <HAL_RCC_OscConfig+0x2ac>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	4a0e      	ldr	r2, [pc, #56]	; (8001220 <HAL_RCC_OscConfig+0x2ac>)
 80011e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ec:	6413      	str	r3, [r2, #64]	; 0x40
 80011ee:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <HAL_RCC_OscConfig+0x2ac>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011fa:	2301      	movs	r3, #1
 80011fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011fe:	4b0b      	ldr	r3, [pc, #44]	; (800122c <HAL_RCC_OscConfig+0x2b8>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001206:	2b00      	cmp	r3, #0
 8001208:	d121      	bne.n	800124e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800120a:	4b08      	ldr	r3, [pc, #32]	; (800122c <HAL_RCC_OscConfig+0x2b8>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a07      	ldr	r2, [pc, #28]	; (800122c <HAL_RCC_OscConfig+0x2b8>)
 8001210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001214:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001216:	f7ff f9d5 	bl	80005c4 <HAL_GetTick>
 800121a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800121c:	e011      	b.n	8001242 <HAL_RCC_OscConfig+0x2ce>
 800121e:	bf00      	nop
 8001220:	40023800 	.word	0x40023800
 8001224:	42470000 	.word	0x42470000
 8001228:	42470e80 	.word	0x42470e80
 800122c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001230:	f7ff f9c8 	bl	80005c4 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e0fd      	b.n	800143e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001242:	4b81      	ldr	r3, [pc, #516]	; (8001448 <HAL_RCC_OscConfig+0x4d4>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800124a:	2b00      	cmp	r3, #0
 800124c:	d0f0      	beq.n	8001230 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d106      	bne.n	8001264 <HAL_RCC_OscConfig+0x2f0>
 8001256:	4b7d      	ldr	r3, [pc, #500]	; (800144c <HAL_RCC_OscConfig+0x4d8>)
 8001258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800125a:	4a7c      	ldr	r2, [pc, #496]	; (800144c <HAL_RCC_OscConfig+0x4d8>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	6713      	str	r3, [r2, #112]	; 0x70
 8001262:	e01c      	b.n	800129e <HAL_RCC_OscConfig+0x32a>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	2b05      	cmp	r3, #5
 800126a:	d10c      	bne.n	8001286 <HAL_RCC_OscConfig+0x312>
 800126c:	4b77      	ldr	r3, [pc, #476]	; (800144c <HAL_RCC_OscConfig+0x4d8>)
 800126e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001270:	4a76      	ldr	r2, [pc, #472]	; (800144c <HAL_RCC_OscConfig+0x4d8>)
 8001272:	f043 0304 	orr.w	r3, r3, #4
 8001276:	6713      	str	r3, [r2, #112]	; 0x70
 8001278:	4b74      	ldr	r3, [pc, #464]	; (800144c <HAL_RCC_OscConfig+0x4d8>)
 800127a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800127c:	4a73      	ldr	r2, [pc, #460]	; (800144c <HAL_RCC_OscConfig+0x4d8>)
 800127e:	f043 0301 	orr.w	r3, r3, #1
 8001282:	6713      	str	r3, [r2, #112]	; 0x70
 8001284:	e00b      	b.n	800129e <HAL_RCC_OscConfig+0x32a>
 8001286:	4b71      	ldr	r3, [pc, #452]	; (800144c <HAL_RCC_OscConfig+0x4d8>)
 8001288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800128a:	4a70      	ldr	r2, [pc, #448]	; (800144c <HAL_RCC_OscConfig+0x4d8>)
 800128c:	f023 0301 	bic.w	r3, r3, #1
 8001290:	6713      	str	r3, [r2, #112]	; 0x70
 8001292:	4b6e      	ldr	r3, [pc, #440]	; (800144c <HAL_RCC_OscConfig+0x4d8>)
 8001294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001296:	4a6d      	ldr	r2, [pc, #436]	; (800144c <HAL_RCC_OscConfig+0x4d8>)
 8001298:	f023 0304 	bic.w	r3, r3, #4
 800129c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d015      	beq.n	80012d2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012a6:	f7ff f98d 	bl	80005c4 <HAL_GetTick>
 80012aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ac:	e00a      	b.n	80012c4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012ae:	f7ff f989 	bl	80005c4 <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012bc:	4293      	cmp	r3, r2
 80012be:	d901      	bls.n	80012c4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	e0bc      	b.n	800143e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012c4:	4b61      	ldr	r3, [pc, #388]	; (800144c <HAL_RCC_OscConfig+0x4d8>)
 80012c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d0ee      	beq.n	80012ae <HAL_RCC_OscConfig+0x33a>
 80012d0:	e014      	b.n	80012fc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012d2:	f7ff f977 	bl	80005c4 <HAL_GetTick>
 80012d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012d8:	e00a      	b.n	80012f0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012da:	f7ff f973 	bl	80005c4 <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d901      	bls.n	80012f0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	e0a6      	b.n	800143e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012f0:	4b56      	ldr	r3, [pc, #344]	; (800144c <HAL_RCC_OscConfig+0x4d8>)
 80012f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1ee      	bne.n	80012da <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012fc:	7dfb      	ldrb	r3, [r7, #23]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d105      	bne.n	800130e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001302:	4b52      	ldr	r3, [pc, #328]	; (800144c <HAL_RCC_OscConfig+0x4d8>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	4a51      	ldr	r2, [pc, #324]	; (800144c <HAL_RCC_OscConfig+0x4d8>)
 8001308:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800130c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	2b00      	cmp	r3, #0
 8001314:	f000 8092 	beq.w	800143c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001318:	4b4c      	ldr	r3, [pc, #304]	; (800144c <HAL_RCC_OscConfig+0x4d8>)
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	f003 030c 	and.w	r3, r3, #12
 8001320:	2b08      	cmp	r3, #8
 8001322:	d05c      	beq.n	80013de <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	2b02      	cmp	r3, #2
 800132a:	d141      	bne.n	80013b0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800132c:	4b48      	ldr	r3, [pc, #288]	; (8001450 <HAL_RCC_OscConfig+0x4dc>)
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001332:	f7ff f947 	bl	80005c4 <HAL_GetTick>
 8001336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001338:	e008      	b.n	800134c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800133a:	f7ff f943 	bl	80005c4 <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d901      	bls.n	800134c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e078      	b.n	800143e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800134c:	4b3f      	ldr	r3, [pc, #252]	; (800144c <HAL_RCC_OscConfig+0x4d8>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1f0      	bne.n	800133a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	69da      	ldr	r2, [r3, #28]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a1b      	ldr	r3, [r3, #32]
 8001360:	431a      	orrs	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001366:	019b      	lsls	r3, r3, #6
 8001368:	431a      	orrs	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800136e:	085b      	lsrs	r3, r3, #1
 8001370:	3b01      	subs	r3, #1
 8001372:	041b      	lsls	r3, r3, #16
 8001374:	431a      	orrs	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137a:	061b      	lsls	r3, r3, #24
 800137c:	4933      	ldr	r1, [pc, #204]	; (800144c <HAL_RCC_OscConfig+0x4d8>)
 800137e:	4313      	orrs	r3, r2
 8001380:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001382:	4b33      	ldr	r3, [pc, #204]	; (8001450 <HAL_RCC_OscConfig+0x4dc>)
 8001384:	2201      	movs	r2, #1
 8001386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001388:	f7ff f91c 	bl	80005c4 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001390:	f7ff f918 	bl	80005c4 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e04d      	b.n	800143e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013a2:	4b2a      	ldr	r3, [pc, #168]	; (800144c <HAL_RCC_OscConfig+0x4d8>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0f0      	beq.n	8001390 <HAL_RCC_OscConfig+0x41c>
 80013ae:	e045      	b.n	800143c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013b0:	4b27      	ldr	r3, [pc, #156]	; (8001450 <HAL_RCC_OscConfig+0x4dc>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b6:	f7ff f905 	bl	80005c4 <HAL_GetTick>
 80013ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013bc:	e008      	b.n	80013d0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013be:	f7ff f901 	bl	80005c4 <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e036      	b.n	800143e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013d0:	4b1e      	ldr	r3, [pc, #120]	; (800144c <HAL_RCC_OscConfig+0x4d8>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1f0      	bne.n	80013be <HAL_RCC_OscConfig+0x44a>
 80013dc:	e02e      	b.n	800143c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d101      	bne.n	80013ea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e029      	b.n	800143e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80013ea:	4b18      	ldr	r3, [pc, #96]	; (800144c <HAL_RCC_OscConfig+0x4d8>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d11c      	bne.n	8001438 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001408:	429a      	cmp	r2, r3
 800140a:	d115      	bne.n	8001438 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800140c:	68fa      	ldr	r2, [r7, #12]
 800140e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001412:	4013      	ands	r3, r2
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001418:	4293      	cmp	r3, r2
 800141a:	d10d      	bne.n	8001438 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001426:	429a      	cmp	r2, r3
 8001428:	d106      	bne.n	8001438 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001434:	429a      	cmp	r2, r3
 8001436:	d001      	beq.n	800143c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e000      	b.n	800143e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40007000 	.word	0x40007000
 800144c:	40023800 	.word	0x40023800
 8001450:	42470060 	.word	0x42470060

08001454 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d101      	bne.n	8001468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e0cc      	b.n	8001602 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001468:	4b68      	ldr	r3, [pc, #416]	; (800160c <HAL_RCC_ClockConfig+0x1b8>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 030f 	and.w	r3, r3, #15
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	429a      	cmp	r2, r3
 8001474:	d90c      	bls.n	8001490 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001476:	4b65      	ldr	r3, [pc, #404]	; (800160c <HAL_RCC_ClockConfig+0x1b8>)
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	b2d2      	uxtb	r2, r2
 800147c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800147e:	4b63      	ldr	r3, [pc, #396]	; (800160c <HAL_RCC_ClockConfig+0x1b8>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 030f 	and.w	r3, r3, #15
 8001486:	683a      	ldr	r2, [r7, #0]
 8001488:	429a      	cmp	r2, r3
 800148a:	d001      	beq.n	8001490 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e0b8      	b.n	8001602 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d020      	beq.n	80014de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0304 	and.w	r3, r3, #4
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d005      	beq.n	80014b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014a8:	4b59      	ldr	r3, [pc, #356]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	4a58      	ldr	r2, [pc, #352]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80014ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0308 	and.w	r3, r3, #8
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d005      	beq.n	80014cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014c0:	4b53      	ldr	r3, [pc, #332]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	4a52      	ldr	r2, [pc, #328]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80014c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014cc:	4b50      	ldr	r3, [pc, #320]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	494d      	ldr	r1, [pc, #308]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d044      	beq.n	8001574 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d107      	bne.n	8001502 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f2:	4b47      	ldr	r3, [pc, #284]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d119      	bne.n	8001532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e07f      	b.n	8001602 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	2b02      	cmp	r3, #2
 8001508:	d003      	beq.n	8001512 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800150e:	2b03      	cmp	r3, #3
 8001510:	d107      	bne.n	8001522 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001512:	4b3f      	ldr	r3, [pc, #252]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d109      	bne.n	8001532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e06f      	b.n	8001602 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001522:	4b3b      	ldr	r3, [pc, #236]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e067      	b.n	8001602 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001532:	4b37      	ldr	r3, [pc, #220]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f023 0203 	bic.w	r2, r3, #3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	4934      	ldr	r1, [pc, #208]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 8001540:	4313      	orrs	r3, r2
 8001542:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001544:	f7ff f83e 	bl	80005c4 <HAL_GetTick>
 8001548:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800154a:	e00a      	b.n	8001562 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800154c:	f7ff f83a 	bl	80005c4 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	f241 3288 	movw	r2, #5000	; 0x1388
 800155a:	4293      	cmp	r3, r2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e04f      	b.n	8001602 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001562:	4b2b      	ldr	r3, [pc, #172]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 020c 	and.w	r2, r3, #12
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	429a      	cmp	r2, r3
 8001572:	d1eb      	bne.n	800154c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001574:	4b25      	ldr	r3, [pc, #148]	; (800160c <HAL_RCC_ClockConfig+0x1b8>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 030f 	and.w	r3, r3, #15
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	429a      	cmp	r2, r3
 8001580:	d20c      	bcs.n	800159c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001582:	4b22      	ldr	r3, [pc, #136]	; (800160c <HAL_RCC_ClockConfig+0x1b8>)
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800158a:	4b20      	ldr	r3, [pc, #128]	; (800160c <HAL_RCC_ClockConfig+0x1b8>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 030f 	and.w	r3, r3, #15
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	429a      	cmp	r2, r3
 8001596:	d001      	beq.n	800159c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e032      	b.n	8001602 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d008      	beq.n	80015ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015a8:	4b19      	ldr	r3, [pc, #100]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	4916      	ldr	r1, [pc, #88]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0308 	and.w	r3, r3, #8
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d009      	beq.n	80015da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015c6:	4b12      	ldr	r3, [pc, #72]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	490e      	ldr	r1, [pc, #56]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015da:	f000 f821 	bl	8001620 <HAL_RCC_GetSysClockFreq>
 80015de:	4601      	mov	r1, r0
 80015e0:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	091b      	lsrs	r3, r3, #4
 80015e6:	f003 030f 	and.w	r3, r3, #15
 80015ea:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <HAL_RCC_ClockConfig+0x1c0>)
 80015ec:	5cd3      	ldrb	r3, [r2, r3]
 80015ee:	fa21 f303 	lsr.w	r3, r1, r3
 80015f2:	4a09      	ldr	r2, [pc, #36]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 80015f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015f6:	4b09      	ldr	r3, [pc, #36]	; (800161c <HAL_RCC_ClockConfig+0x1c8>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe ff9e 	bl	800053c <HAL_InitTick>

  return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40023c00 	.word	0x40023c00
 8001610:	40023800 	.word	0x40023800
 8001614:	08003af8 	.word	0x08003af8
 8001618:	20000008 	.word	0x20000008
 800161c:	20000000 	.word	0x20000000

08001620 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001626:	2300      	movs	r3, #0
 8001628:	607b      	str	r3, [r7, #4]
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	2300      	movs	r3, #0
 8001630:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001632:	2300      	movs	r3, #0
 8001634:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001636:	4b63      	ldr	r3, [pc, #396]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 030c 	and.w	r3, r3, #12
 800163e:	2b04      	cmp	r3, #4
 8001640:	d007      	beq.n	8001652 <HAL_RCC_GetSysClockFreq+0x32>
 8001642:	2b08      	cmp	r3, #8
 8001644:	d008      	beq.n	8001658 <HAL_RCC_GetSysClockFreq+0x38>
 8001646:	2b00      	cmp	r3, #0
 8001648:	f040 80b4 	bne.w	80017b4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800164c:	4b5e      	ldr	r3, [pc, #376]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800164e:	60bb      	str	r3, [r7, #8]
       break;
 8001650:	e0b3      	b.n	80017ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001652:	4b5e      	ldr	r3, [pc, #376]	; (80017cc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001654:	60bb      	str	r3, [r7, #8]
      break;
 8001656:	e0b0      	b.n	80017ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001658:	4b5a      	ldr	r3, [pc, #360]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001660:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001662:	4b58      	ldr	r3, [pc, #352]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d04a      	beq.n	8001704 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800166e:	4b55      	ldr	r3, [pc, #340]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	099b      	lsrs	r3, r3, #6
 8001674:	f04f 0400 	mov.w	r4, #0
 8001678:	f240 11ff 	movw	r1, #511	; 0x1ff
 800167c:	f04f 0200 	mov.w	r2, #0
 8001680:	ea03 0501 	and.w	r5, r3, r1
 8001684:	ea04 0602 	and.w	r6, r4, r2
 8001688:	4629      	mov	r1, r5
 800168a:	4632      	mov	r2, r6
 800168c:	f04f 0300 	mov.w	r3, #0
 8001690:	f04f 0400 	mov.w	r4, #0
 8001694:	0154      	lsls	r4, r2, #5
 8001696:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800169a:	014b      	lsls	r3, r1, #5
 800169c:	4619      	mov	r1, r3
 800169e:	4622      	mov	r2, r4
 80016a0:	1b49      	subs	r1, r1, r5
 80016a2:	eb62 0206 	sbc.w	r2, r2, r6
 80016a6:	f04f 0300 	mov.w	r3, #0
 80016aa:	f04f 0400 	mov.w	r4, #0
 80016ae:	0194      	lsls	r4, r2, #6
 80016b0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80016b4:	018b      	lsls	r3, r1, #6
 80016b6:	1a5b      	subs	r3, r3, r1
 80016b8:	eb64 0402 	sbc.w	r4, r4, r2
 80016bc:	f04f 0100 	mov.w	r1, #0
 80016c0:	f04f 0200 	mov.w	r2, #0
 80016c4:	00e2      	lsls	r2, r4, #3
 80016c6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80016ca:	00d9      	lsls	r1, r3, #3
 80016cc:	460b      	mov	r3, r1
 80016ce:	4614      	mov	r4, r2
 80016d0:	195b      	adds	r3, r3, r5
 80016d2:	eb44 0406 	adc.w	r4, r4, r6
 80016d6:	f04f 0100 	mov.w	r1, #0
 80016da:	f04f 0200 	mov.w	r2, #0
 80016de:	0262      	lsls	r2, r4, #9
 80016e0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80016e4:	0259      	lsls	r1, r3, #9
 80016e6:	460b      	mov	r3, r1
 80016e8:	4614      	mov	r4, r2
 80016ea:	4618      	mov	r0, r3
 80016ec:	4621      	mov	r1, r4
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f04f 0400 	mov.w	r4, #0
 80016f4:	461a      	mov	r2, r3
 80016f6:	4623      	mov	r3, r4
 80016f8:	f7fe fd76 	bl	80001e8 <__aeabi_uldivmod>
 80016fc:	4603      	mov	r3, r0
 80016fe:	460c      	mov	r4, r1
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	e049      	b.n	8001798 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001704:	4b2f      	ldr	r3, [pc, #188]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	099b      	lsrs	r3, r3, #6
 800170a:	f04f 0400 	mov.w	r4, #0
 800170e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001712:	f04f 0200 	mov.w	r2, #0
 8001716:	ea03 0501 	and.w	r5, r3, r1
 800171a:	ea04 0602 	and.w	r6, r4, r2
 800171e:	4629      	mov	r1, r5
 8001720:	4632      	mov	r2, r6
 8001722:	f04f 0300 	mov.w	r3, #0
 8001726:	f04f 0400 	mov.w	r4, #0
 800172a:	0154      	lsls	r4, r2, #5
 800172c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001730:	014b      	lsls	r3, r1, #5
 8001732:	4619      	mov	r1, r3
 8001734:	4622      	mov	r2, r4
 8001736:	1b49      	subs	r1, r1, r5
 8001738:	eb62 0206 	sbc.w	r2, r2, r6
 800173c:	f04f 0300 	mov.w	r3, #0
 8001740:	f04f 0400 	mov.w	r4, #0
 8001744:	0194      	lsls	r4, r2, #6
 8001746:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800174a:	018b      	lsls	r3, r1, #6
 800174c:	1a5b      	subs	r3, r3, r1
 800174e:	eb64 0402 	sbc.w	r4, r4, r2
 8001752:	f04f 0100 	mov.w	r1, #0
 8001756:	f04f 0200 	mov.w	r2, #0
 800175a:	00e2      	lsls	r2, r4, #3
 800175c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001760:	00d9      	lsls	r1, r3, #3
 8001762:	460b      	mov	r3, r1
 8001764:	4614      	mov	r4, r2
 8001766:	195b      	adds	r3, r3, r5
 8001768:	eb44 0406 	adc.w	r4, r4, r6
 800176c:	f04f 0100 	mov.w	r1, #0
 8001770:	f04f 0200 	mov.w	r2, #0
 8001774:	02a2      	lsls	r2, r4, #10
 8001776:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800177a:	0299      	lsls	r1, r3, #10
 800177c:	460b      	mov	r3, r1
 800177e:	4614      	mov	r4, r2
 8001780:	4618      	mov	r0, r3
 8001782:	4621      	mov	r1, r4
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f04f 0400 	mov.w	r4, #0
 800178a:	461a      	mov	r2, r3
 800178c:	4623      	mov	r3, r4
 800178e:	f7fe fd2b 	bl	80001e8 <__aeabi_uldivmod>
 8001792:	4603      	mov	r3, r0
 8001794:	460c      	mov	r4, r1
 8001796:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001798:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	0c1b      	lsrs	r3, r3, #16
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	3301      	adds	r3, #1
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80017a8:	68fa      	ldr	r2, [r7, #12]
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b0:	60bb      	str	r3, [r7, #8]
      break;
 80017b2:	e002      	b.n	80017ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017b4:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80017b6:	60bb      	str	r3, [r7, #8]
      break;
 80017b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017ba:	68bb      	ldr	r3, [r7, #8]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017c4:	40023800 	.word	0x40023800
 80017c8:	00f42400 	.word	0x00f42400
 80017cc:	007a1200 	.word	0x007a1200

080017d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017d4:	4b03      	ldr	r3, [pc, #12]	; (80017e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80017d6:	681b      	ldr	r3, [r3, #0]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	20000008 	.word	0x20000008

080017e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80017ec:	f7ff fff0 	bl	80017d0 <HAL_RCC_GetHCLKFreq>
 80017f0:	4601      	mov	r1, r0
 80017f2:	4b05      	ldr	r3, [pc, #20]	; (8001808 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	0a9b      	lsrs	r3, r3, #10
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	4a03      	ldr	r2, [pc, #12]	; (800180c <HAL_RCC_GetPCLK1Freq+0x24>)
 80017fe:	5cd3      	ldrb	r3, [r2, r3]
 8001800:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001804:	4618      	mov	r0, r3
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40023800 	.word	0x40023800
 800180c:	08003b08 	.word	0x08003b08

08001810 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001814:	f7ff ffdc 	bl	80017d0 <HAL_RCC_GetHCLKFreq>
 8001818:	4601      	mov	r1, r0
 800181a:	4b05      	ldr	r3, [pc, #20]	; (8001830 <HAL_RCC_GetPCLK2Freq+0x20>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	0b5b      	lsrs	r3, r3, #13
 8001820:	f003 0307 	and.w	r3, r3, #7
 8001824:	4a03      	ldr	r2, [pc, #12]	; (8001834 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001826:	5cd3      	ldrb	r3, [r2, r3]
 8001828:	fa21 f303 	lsr.w	r3, r1, r3
}
 800182c:	4618      	mov	r0, r3
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40023800 	.word	0x40023800
 8001834:	08003b08 	.word	0x08003b08

08001838 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e01d      	b.n	8001886 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	d106      	bne.n	8001864 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f001 fbac 	bl	8002fbc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2202      	movs	r2, #2
 8001868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3304      	adds	r3, #4
 8001874:	4619      	mov	r1, r3
 8001876:	4610      	mov	r0, r2
 8001878:	f000 fb1c 	bl	8001eb4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2201      	movs	r2, #1
 8001880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
 800189c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d101      	bne.n	80018ae <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 80018aa:	2302      	movs	r3, #2
 80018ac:	e0e9      	b.n	8001a82 <HAL_TIM_PWM_Start_DMA+0x1f2>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d10b      	bne.n	80018d2 <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d104      	bne.n	80018ca <HAL_TIM_PWM_Start_DMA+0x3a>
 80018c0:	887b      	ldrh	r3, [r7, #2]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e0db      	b.n	8001a82 <HAL_TIM_PWM_Start_DMA+0x1f2>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2202      	movs	r2, #2
 80018ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	2b0c      	cmp	r3, #12
 80018d6:	f200 80ad 	bhi.w	8001a34 <HAL_TIM_PWM_Start_DMA+0x1a4>
 80018da:	a201      	add	r2, pc, #4	; (adr r2, 80018e0 <HAL_TIM_PWM_Start_DMA+0x50>)
 80018dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e0:	08001915 	.word	0x08001915
 80018e4:	08001a35 	.word	0x08001a35
 80018e8:	08001a35 	.word	0x08001a35
 80018ec:	08001a35 	.word	0x08001a35
 80018f0:	0800195d 	.word	0x0800195d
 80018f4:	08001a35 	.word	0x08001a35
 80018f8:	08001a35 	.word	0x08001a35
 80018fc:	08001a35 	.word	0x08001a35
 8001900:	080019a5 	.word	0x080019a5
 8001904:	08001a35 	.word	0x08001a35
 8001908:	08001a35 	.word	0x08001a35
 800190c:	08001a35 	.word	0x08001a35
 8001910:	080019ed 	.word	0x080019ed
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001918:	4a5c      	ldr	r2, [pc, #368]	; (8001a8c <HAL_TIM_PWM_Start_DMA+0x1fc>)
 800191a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001920:	4a5b      	ldr	r2, [pc, #364]	; (8001a90 <HAL_TIM_PWM_Start_DMA+0x200>)
 8001922:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001928:	4a5a      	ldr	r2, [pc, #360]	; (8001a94 <HAL_TIM_PWM_Start_DMA+0x204>)
 800192a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001930:	6879      	ldr	r1, [r7, #4]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	3334      	adds	r3, #52	; 0x34
 8001938:	461a      	mov	r2, r3
 800193a:	887b      	ldrh	r3, [r7, #2]
 800193c:	f7ff f80e 	bl	800095c <HAL_DMA_Start_IT>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e09b      	b.n	8001a82 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68da      	ldr	r2, [r3, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001958:	60da      	str	r2, [r3, #12]
      break;
 800195a:	e06c      	b.n	8001a36 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001960:	4a4a      	ldr	r2, [pc, #296]	; (8001a8c <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8001962:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001968:	4a49      	ldr	r2, [pc, #292]	; (8001a90 <HAL_TIM_PWM_Start_DMA+0x200>)
 800196a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001970:	4a48      	ldr	r2, [pc, #288]	; (8001a94 <HAL_TIM_PWM_Start_DMA+0x204>)
 8001972:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001978:	6879      	ldr	r1, [r7, #4]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	3338      	adds	r3, #56	; 0x38
 8001980:	461a      	mov	r2, r3
 8001982:	887b      	ldrh	r3, [r7, #2]
 8001984:	f7fe ffea 	bl	800095c <HAL_DMA_Start_IT>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e077      	b.n	8001a82 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	68da      	ldr	r2, [r3, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80019a0:	60da      	str	r2, [r3, #12]
      break;
 80019a2:	e048      	b.n	8001a36 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a8:	4a38      	ldr	r2, [pc, #224]	; (8001a8c <HAL_TIM_PWM_Start_DMA+0x1fc>)
 80019aa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b0:	4a37      	ldr	r2, [pc, #220]	; (8001a90 <HAL_TIM_PWM_Start_DMA+0x200>)
 80019b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b8:	4a36      	ldr	r2, [pc, #216]	; (8001a94 <HAL_TIM_PWM_Start_DMA+0x204>)
 80019ba:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80019c0:	6879      	ldr	r1, [r7, #4]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	333c      	adds	r3, #60	; 0x3c
 80019c8:	461a      	mov	r2, r3
 80019ca:	887b      	ldrh	r3, [r7, #2]
 80019cc:	f7fe ffc6 	bl	800095c <HAL_DMA_Start_IT>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e053      	b.n	8001a82 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68da      	ldr	r2, [r3, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019e8:	60da      	str	r2, [r3, #12]
      break;
 80019ea:	e024      	b.n	8001a36 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f0:	4a26      	ldr	r2, [pc, #152]	; (8001a8c <HAL_TIM_PWM_Start_DMA+0x1fc>)
 80019f2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f8:	4a25      	ldr	r2, [pc, #148]	; (8001a90 <HAL_TIM_PWM_Start_DMA+0x200>)
 80019fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a00:	4a24      	ldr	r2, [pc, #144]	; (8001a94 <HAL_TIM_PWM_Start_DMA+0x204>)
 8001a02:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001a08:	6879      	ldr	r1, [r7, #4]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	3340      	adds	r3, #64	; 0x40
 8001a10:	461a      	mov	r2, r3
 8001a12:	887b      	ldrh	r3, [r7, #2]
 8001a14:	f7fe ffa2 	bl	800095c <HAL_DMA_Start_IT>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e02f      	b.n	8001a82 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68da      	ldr	r2, [r3, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001a30:	60da      	str	r2, [r3, #12]
      break;
 8001a32:	e000      	b.n	8001a36 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 8001a34:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	68b9      	ldr	r1, [r7, #8]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f000 fc44 	bl	80022cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a13      	ldr	r2, [pc, #76]	; (8001a98 <HAL_TIM_PWM_Start_DMA+0x208>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d107      	bne.n	8001a5e <HAL_TIM_PWM_Start_DMA+0x1ce>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 0307 	and.w	r3, r3, #7
 8001a68:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	2b06      	cmp	r3, #6
 8001a6e:	d007      	beq.n	8001a80 <HAL_TIM_PWM_Start_DMA+0x1f0>
  {
    __HAL_TIM_ENABLE(htim);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f042 0201 	orr.w	r2, r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	08001dd5 	.word	0x08001dd5
 8001a90:	08001e45 	.word	0x08001e45
 8001a94:	08001db1 	.word	0x08001db1
 8001a98:	40010000 	.word	0x40010000

08001a9c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	2b0c      	cmp	r3, #12
 8001aaa:	d855      	bhi.n	8001b58 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8001aac:	a201      	add	r2, pc, #4	; (adr r2, 8001ab4 <HAL_TIM_PWM_Stop_DMA+0x18>)
 8001aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab2:	bf00      	nop
 8001ab4:	08001ae9 	.word	0x08001ae9
 8001ab8:	08001b59 	.word	0x08001b59
 8001abc:	08001b59 	.word	0x08001b59
 8001ac0:	08001b59 	.word	0x08001b59
 8001ac4:	08001b05 	.word	0x08001b05
 8001ac8:	08001b59 	.word	0x08001b59
 8001acc:	08001b59 	.word	0x08001b59
 8001ad0:	08001b59 	.word	0x08001b59
 8001ad4:	08001b21 	.word	0x08001b21
 8001ad8:	08001b59 	.word	0x08001b59
 8001adc:	08001b59 	.word	0x08001b59
 8001ae0:	08001b59 	.word	0x08001b59
 8001ae4:	08001b3d 	.word	0x08001b3d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	68da      	ldr	r2, [r3, #12]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001af6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7fe ff85 	bl	8000a0c <HAL_DMA_Abort_IT>
      break;
 8001b02:	e02a      	b.n	8001b5a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68da      	ldr	r2, [r3, #12]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b12:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7fe ff77 	bl	8000a0c <HAL_DMA_Abort_IT>
      break;
 8001b1e:	e01c      	b.n	8001b5a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68da      	ldr	r2, [r3, #12]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b2e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7fe ff69 	bl	8000a0c <HAL_DMA_Abort_IT>
      break;
 8001b3a:	e00e      	b.n	8001b5a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68da      	ldr	r2, [r3, #12]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b4a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7fe ff5b 	bl	8000a0c <HAL_DMA_Abort_IT>
      break;
 8001b56:	e000      	b.n	8001b5a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8001b58:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	6839      	ldr	r1, [r7, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f000 fbb2 	bl	80022cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a1d      	ldr	r2, [pc, #116]	; (8001be4 <HAL_TIM_PWM_Stop_DMA+0x148>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d117      	bne.n	8001ba2 <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	6a1a      	ldr	r2, [r3, #32]
 8001b78:	f241 1311 	movw	r3, #4369	; 0x1111
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10f      	bne.n	8001ba2 <HAL_TIM_PWM_Stop_DMA+0x106>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6a1a      	ldr	r2, [r3, #32]
 8001b88:	f240 4344 	movw	r3, #1092	; 0x444
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d107      	bne.n	8001ba2 <HAL_TIM_PWM_Stop_DMA+0x106>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ba0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6a1a      	ldr	r2, [r3, #32]
 8001ba8:	f241 1311 	movw	r3, #4369	; 0x1111
 8001bac:	4013      	ands	r3, r2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d10f      	bne.n	8001bd2 <HAL_TIM_PWM_Stop_DMA+0x136>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6a1a      	ldr	r2, [r3, #32]
 8001bb8:	f240 4344 	movw	r3, #1092	; 0x444
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d107      	bne.n	8001bd2 <HAL_TIM_PWM_Stop_DMA+0x136>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 0201 	bic.w	r2, r2, #1
 8001bd0:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40010000 	.word	0x40010000

08001be8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d101      	bne.n	8001c02 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001bfe:	2302      	movs	r3, #2
 8001c00:	e0b4      	b.n	8001d6c <HAL_TIM_PWM_ConfigChannel+0x184>
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2202      	movs	r2, #2
 8001c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b0c      	cmp	r3, #12
 8001c16:	f200 809f 	bhi.w	8001d58 <HAL_TIM_PWM_ConfigChannel+0x170>
 8001c1a:	a201      	add	r2, pc, #4	; (adr r2, 8001c20 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c20:	08001c55 	.word	0x08001c55
 8001c24:	08001d59 	.word	0x08001d59
 8001c28:	08001d59 	.word	0x08001d59
 8001c2c:	08001d59 	.word	0x08001d59
 8001c30:	08001c95 	.word	0x08001c95
 8001c34:	08001d59 	.word	0x08001d59
 8001c38:	08001d59 	.word	0x08001d59
 8001c3c:	08001d59 	.word	0x08001d59
 8001c40:	08001cd7 	.word	0x08001cd7
 8001c44:	08001d59 	.word	0x08001d59
 8001c48:	08001d59 	.word	0x08001d59
 8001c4c:	08001d59 	.word	0x08001d59
 8001c50:	08001d17 	.word	0x08001d17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68b9      	ldr	r1, [r7, #8]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 f9aa 	bl	8001fb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	699a      	ldr	r2, [r3, #24]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f042 0208 	orr.w	r2, r2, #8
 8001c6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	699a      	ldr	r2, [r3, #24]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0204 	bic.w	r2, r2, #4
 8001c7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6999      	ldr	r1, [r3, #24]
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	691a      	ldr	r2, [r3, #16]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	619a      	str	r2, [r3, #24]
      break;
 8001c92:	e062      	b.n	8001d5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68b9      	ldr	r1, [r7, #8]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f000 f9f0 	bl	8002080 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	699a      	ldr	r2, [r3, #24]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	699a      	ldr	r2, [r3, #24]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6999      	ldr	r1, [r3, #24]
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	021a      	lsls	r2, r3, #8
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	619a      	str	r2, [r3, #24]
      break;
 8001cd4:	e041      	b.n	8001d5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68b9      	ldr	r1, [r7, #8]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f000 fa3b 	bl	8002158 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	69da      	ldr	r2, [r3, #28]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f042 0208 	orr.w	r2, r2, #8
 8001cf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	69da      	ldr	r2, [r3, #28]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f022 0204 	bic.w	r2, r2, #4
 8001d00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	69d9      	ldr	r1, [r3, #28]
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	691a      	ldr	r2, [r3, #16]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	61da      	str	r2, [r3, #28]
      break;
 8001d14:	e021      	b.n	8001d5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68b9      	ldr	r1, [r7, #8]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f000 fa85 	bl	800222c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	69da      	ldr	r2, [r3, #28]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	69da      	ldr	r2, [r3, #28]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	69d9      	ldr	r1, [r3, #28]
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	021a      	lsls	r2, r3, #8
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	430a      	orrs	r2, r1
 8001d54:	61da      	str	r2, [r3, #28]
      break;
 8001d56:	e000      	b.n	8001d5a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8001d58:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dbc:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f7ff ffe8 	bl	8001d9c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8001dcc:	bf00      	nop
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de0:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d103      	bne.n	8001dfc <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2201      	movs	r2, #1
 8001df8:	771a      	strb	r2, [r3, #28]
 8001dfa:	e019      	b.n	8001e30 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d103      	bne.n	8001e0e <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2202      	movs	r2, #2
 8001e0a:	771a      	strb	r2, [r3, #28]
 8001e0c:	e010      	b.n	8001e30 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d103      	bne.n	8001e20 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2204      	movs	r2, #4
 8001e1c:	771a      	strb	r2, [r3, #28]
 8001e1e:	e007      	b.n	8001e30 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d102      	bne.n	8001e30 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2208      	movs	r2, #8
 8001e2e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e30:	68f8      	ldr	r0, [r7, #12]
 8001e32:	f7ff ff9f 	bl	8001d74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	771a      	strb	r2, [r3, #28]
}
 8001e3c:	bf00      	nop
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e50:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d103      	bne.n	8001e6c <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2201      	movs	r2, #1
 8001e68:	771a      	strb	r2, [r3, #28]
 8001e6a:	e019      	b.n	8001ea0 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d103      	bne.n	8001e7e <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2202      	movs	r2, #2
 8001e7a:	771a      	strb	r2, [r3, #28]
 8001e7c:	e010      	b.n	8001ea0 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d103      	bne.n	8001e90 <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2204      	movs	r2, #4
 8001e8c:	771a      	strb	r2, [r3, #28]
 8001e8e:	e007      	b.n	8001ea0 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d102      	bne.n	8001ea0 <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2208      	movs	r2, #8
 8001e9e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8001ea0:	68f8      	ldr	r0, [r7, #12]
 8001ea2:	f7ff ff71 	bl	8001d88 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	771a      	strb	r2, [r3, #28]
}
 8001eac:	bf00      	nop
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a34      	ldr	r2, [pc, #208]	; (8001f98 <TIM_Base_SetConfig+0xe4>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d00f      	beq.n	8001eec <TIM_Base_SetConfig+0x38>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ed2:	d00b      	beq.n	8001eec <TIM_Base_SetConfig+0x38>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a31      	ldr	r2, [pc, #196]	; (8001f9c <TIM_Base_SetConfig+0xe8>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d007      	beq.n	8001eec <TIM_Base_SetConfig+0x38>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a30      	ldr	r2, [pc, #192]	; (8001fa0 <TIM_Base_SetConfig+0xec>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d003      	beq.n	8001eec <TIM_Base_SetConfig+0x38>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a2f      	ldr	r2, [pc, #188]	; (8001fa4 <TIM_Base_SetConfig+0xf0>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d108      	bne.n	8001efe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ef2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a25      	ldr	r2, [pc, #148]	; (8001f98 <TIM_Base_SetConfig+0xe4>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d01b      	beq.n	8001f3e <TIM_Base_SetConfig+0x8a>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f0c:	d017      	beq.n	8001f3e <TIM_Base_SetConfig+0x8a>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a22      	ldr	r2, [pc, #136]	; (8001f9c <TIM_Base_SetConfig+0xe8>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d013      	beq.n	8001f3e <TIM_Base_SetConfig+0x8a>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a21      	ldr	r2, [pc, #132]	; (8001fa0 <TIM_Base_SetConfig+0xec>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d00f      	beq.n	8001f3e <TIM_Base_SetConfig+0x8a>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a20      	ldr	r2, [pc, #128]	; (8001fa4 <TIM_Base_SetConfig+0xf0>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d00b      	beq.n	8001f3e <TIM_Base_SetConfig+0x8a>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a1f      	ldr	r2, [pc, #124]	; (8001fa8 <TIM_Base_SetConfig+0xf4>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d007      	beq.n	8001f3e <TIM_Base_SetConfig+0x8a>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a1e      	ldr	r2, [pc, #120]	; (8001fac <TIM_Base_SetConfig+0xf8>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d003      	beq.n	8001f3e <TIM_Base_SetConfig+0x8a>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a1d      	ldr	r2, [pc, #116]	; (8001fb0 <TIM_Base_SetConfig+0xfc>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d108      	bne.n	8001f50 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a08      	ldr	r2, [pc, #32]	; (8001f98 <TIM_Base_SetConfig+0xe4>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d103      	bne.n	8001f84 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	691a      	ldr	r2, [r3, #16]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	615a      	str	r2, [r3, #20]
}
 8001f8a:	bf00      	nop
 8001f8c:	3714      	adds	r7, #20
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	40010000 	.word	0x40010000
 8001f9c:	40000400 	.word	0x40000400
 8001fa0:	40000800 	.word	0x40000800
 8001fa4:	40000c00 	.word	0x40000c00
 8001fa8:	40014000 	.word	0x40014000
 8001fac:	40014400 	.word	0x40014400
 8001fb0:	40014800 	.word	0x40014800

08001fb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b087      	sub	sp, #28
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	f023 0201 	bic.w	r2, r3, #1
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
 8001fce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f023 0303 	bic.w	r3, r3, #3
 8001fea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	f023 0302 	bic.w	r3, r3, #2
 8001ffc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	4313      	orrs	r3, r2
 8002006:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a1c      	ldr	r2, [pc, #112]	; (800207c <TIM_OC1_SetConfig+0xc8>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d10c      	bne.n	800202a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	f023 0308 	bic.w	r3, r3, #8
 8002016:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	4313      	orrs	r3, r2
 8002020:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f023 0304 	bic.w	r3, r3, #4
 8002028:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a13      	ldr	r2, [pc, #76]	; (800207c <TIM_OC1_SetConfig+0xc8>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d111      	bne.n	8002056 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002038:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002040:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	4313      	orrs	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	4313      	orrs	r3, r2
 8002054:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	621a      	str	r2, [r3, #32]
}
 8002070:	bf00      	nop
 8002072:	371c      	adds	r7, #28
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	40010000 	.word	0x40010000

08002080 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002080:	b480      	push	{r7}
 8002082:	b087      	sub	sp, #28
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	f023 0210 	bic.w	r2, r3, #16
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	021b      	lsls	r3, r3, #8
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	f023 0320 	bic.w	r3, r3, #32
 80020ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	011b      	lsls	r3, r3, #4
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a1e      	ldr	r2, [pc, #120]	; (8002154 <TIM_OC2_SetConfig+0xd4>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d10d      	bne.n	80020fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	011b      	lsls	r3, r3, #4
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a15      	ldr	r2, [pc, #84]	; (8002154 <TIM_OC2_SetConfig+0xd4>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d113      	bne.n	800212c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800210a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002112:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	4313      	orrs	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	4313      	orrs	r3, r2
 800212a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	621a      	str	r2, [r3, #32]
}
 8002146:	bf00      	nop
 8002148:	371c      	adds	r7, #28
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	40010000 	.word	0x40010000

08002158 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002158:	b480      	push	{r7}
 800215a:	b087      	sub	sp, #28
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a1b      	ldr	r3, [r3, #32]
 8002166:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f023 0303 	bic.w	r3, r3, #3
 800218e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	4313      	orrs	r3, r2
 8002198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80021a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	021b      	lsls	r3, r3, #8
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a1d      	ldr	r2, [pc, #116]	; (8002228 <TIM_OC3_SetConfig+0xd0>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d10d      	bne.n	80021d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80021bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	021b      	lsls	r3, r3, #8
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a14      	ldr	r2, [pc, #80]	; (8002228 <TIM_OC3_SetConfig+0xd0>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d113      	bne.n	8002202 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80021e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	011b      	lsls	r3, r3, #4
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	011b      	lsls	r3, r3, #4
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	4313      	orrs	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	621a      	str	r2, [r3, #32]
}
 800221c:	bf00      	nop
 800221e:	371c      	adds	r7, #28
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	40010000 	.word	0x40010000

0800222c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800222c:	b480      	push	{r7}
 800222e:	b087      	sub	sp, #28
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a1b      	ldr	r3, [r3, #32]
 800223a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a1b      	ldr	r3, [r3, #32]
 8002246:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800225a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002262:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	021b      	lsls	r3, r3, #8
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	4313      	orrs	r3, r2
 800226e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002276:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	031b      	lsls	r3, r3, #12
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	4313      	orrs	r3, r2
 8002282:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a10      	ldr	r2, [pc, #64]	; (80022c8 <TIM_OC4_SetConfig+0x9c>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d109      	bne.n	80022a0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002292:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	019b      	lsls	r3, r3, #6
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	4313      	orrs	r3, r2
 800229e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685a      	ldr	r2, [r3, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	621a      	str	r2, [r3, #32]
}
 80022ba:	bf00      	nop
 80022bc:	371c      	adds	r7, #28
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	40010000 	.word	0x40010000

080022cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b087      	sub	sp, #28
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	f003 031f 	and.w	r3, r3, #31
 80022de:	2201      	movs	r2, #1
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6a1a      	ldr	r2, [r3, #32]
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	43db      	mvns	r3, r3
 80022ee:	401a      	ands	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6a1a      	ldr	r2, [r3, #32]
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	f003 031f 	and.w	r3, r3, #31
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	fa01 f303 	lsl.w	r3, r1, r3
 8002304:	431a      	orrs	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	621a      	str	r2, [r3, #32]
}
 800230a:	bf00      	nop
 800230c:	371c      	adds	r7, #28
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b082      	sub	sp, #8
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e03f      	b.n	80023a8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b00      	cmp	r3, #0
 8002332:	d106      	bne.n	8002342 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 f837 	bl	80023b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2224      	movs	r2, #36	; 0x24
 8002346:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68da      	ldr	r2, [r3, #12]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002358:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f916 	bl	800258c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	691a      	ldr	r2, [r3, #16]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800236e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	695a      	ldr	r2, [r3, #20]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800237e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68da      	ldr	r2, [r3, #12]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800238e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2220      	movs	r2, #32
 800239a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2220      	movs	r2, #32
 80023a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b088      	sub	sp, #32
 80023c8:	af02      	add	r7, sp, #8
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	603b      	str	r3, [r7, #0]
 80023d0:	4613      	mov	r3, r2
 80023d2:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b20      	cmp	r3, #32
 80023e2:	f040 8083 	bne.w	80024ec <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d002      	beq.n	80023f2 <HAL_UART_Transmit+0x2e>
 80023ec:	88fb      	ldrh	r3, [r7, #6]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e07b      	b.n	80024ee <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d101      	bne.n	8002404 <HAL_UART_Transmit+0x40>
 8002400:	2302      	movs	r3, #2
 8002402:	e074      	b.n	80024ee <HAL_UART_Transmit+0x12a>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2221      	movs	r2, #33	; 0x21
 8002416:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800241a:	f7fe f8d3 	bl	80005c4 <HAL_GetTick>
 800241e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	88fa      	ldrh	r2, [r7, #6]
 8002424:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	88fa      	ldrh	r2, [r7, #6]
 800242a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002434:	e042      	b.n	80024bc <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800243a:	b29b      	uxth	r3, r3
 800243c:	3b01      	subs	r3, #1
 800243e:	b29a      	uxth	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800244c:	d122      	bne.n	8002494 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	2200      	movs	r2, #0
 8002456:	2180      	movs	r1, #128	; 0x80
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f000 f84c 	bl	80024f6 <UART_WaitOnFlagUntilTimeout>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e042      	b.n	80024ee <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	881b      	ldrh	r3, [r3, #0]
 8002470:	461a      	mov	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800247a:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d103      	bne.n	800248c <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	3302      	adds	r3, #2
 8002488:	60bb      	str	r3, [r7, #8]
 800248a:	e017      	b.n	80024bc <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	3301      	adds	r3, #1
 8002490:	60bb      	str	r3, [r7, #8]
 8002492:	e013      	b.n	80024bc <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	2200      	movs	r2, #0
 800249c:	2180      	movs	r1, #128	; 0x80
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 f829 	bl	80024f6 <UART_WaitOnFlagUntilTimeout>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e01f      	b.n	80024ee <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	1c5a      	adds	r2, r3, #1
 80024b2:	60ba      	str	r2, [r7, #8]
 80024b4:	781a      	ldrb	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1b7      	bne.n	8002436 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	2200      	movs	r2, #0
 80024ce:	2140      	movs	r1, #64	; 0x40
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f000 f810 	bl	80024f6 <UART_WaitOnFlagUntilTimeout>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e006      	b.n	80024ee <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2220      	movs	r2, #32
 80024e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80024e8:	2300      	movs	r3, #0
 80024ea:	e000      	b.n	80024ee <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80024ec:	2302      	movs	r3, #2
  }
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3718      	adds	r7, #24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b084      	sub	sp, #16
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	60f8      	str	r0, [r7, #12]
 80024fe:	60b9      	str	r1, [r7, #8]
 8002500:	603b      	str	r3, [r7, #0]
 8002502:	4613      	mov	r3, r2
 8002504:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002506:	e02c      	b.n	8002562 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250e:	d028      	beq.n	8002562 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d007      	beq.n	8002526 <UART_WaitOnFlagUntilTimeout+0x30>
 8002516:	f7fe f855 	bl	80005c4 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	429a      	cmp	r2, r3
 8002524:	d21d      	bcs.n	8002562 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68da      	ldr	r2, [r3, #12]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002534:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	695a      	ldr	r2, [r3, #20]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0201 	bic.w	r2, r2, #1
 8002544:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2220      	movs	r2, #32
 800254a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2220      	movs	r2, #32
 8002552:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e00f      	b.n	8002582 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	4013      	ands	r3, r2
 800256c:	68ba      	ldr	r2, [r7, #8]
 800256e:	429a      	cmp	r2, r3
 8002570:	bf0c      	ite	eq
 8002572:	2301      	moveq	r3, #1
 8002574:	2300      	movne	r3, #0
 8002576:	b2db      	uxtb	r3, r3
 8002578:	461a      	mov	r2, r3
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	429a      	cmp	r2, r3
 800257e:	d0c3      	beq.n	8002508 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
	...

0800258c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800258c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002590:	b085      	sub	sp, #20
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68da      	ldr	r2, [r3, #12]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	431a      	orrs	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	431a      	orrs	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	69db      	ldr	r3, [r3, #28]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80025ce:	f023 030c 	bic.w	r3, r3, #12
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	6812      	ldr	r2, [r2, #0]
 80025d6:	68f9      	ldr	r1, [r7, #12]
 80025d8:	430b      	orrs	r3, r1
 80025da:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	699a      	ldr	r2, [r3, #24]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025fa:	f040 818b 	bne.w	8002914 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4ac1      	ldr	r2, [pc, #772]	; (8002908 <UART_SetConfig+0x37c>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d005      	beq.n	8002614 <UART_SetConfig+0x88>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4abf      	ldr	r2, [pc, #764]	; (800290c <UART_SetConfig+0x380>)
 800260e:	4293      	cmp	r3, r2
 8002610:	f040 80bd 	bne.w	800278e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002614:	f7ff f8fc 	bl	8001810 <HAL_RCC_GetPCLK2Freq>
 8002618:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	461d      	mov	r5, r3
 800261e:	f04f 0600 	mov.w	r6, #0
 8002622:	46a8      	mov	r8, r5
 8002624:	46b1      	mov	r9, r6
 8002626:	eb18 0308 	adds.w	r3, r8, r8
 800262a:	eb49 0409 	adc.w	r4, r9, r9
 800262e:	4698      	mov	r8, r3
 8002630:	46a1      	mov	r9, r4
 8002632:	eb18 0805 	adds.w	r8, r8, r5
 8002636:	eb49 0906 	adc.w	r9, r9, r6
 800263a:	f04f 0100 	mov.w	r1, #0
 800263e:	f04f 0200 	mov.w	r2, #0
 8002642:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002646:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800264a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800264e:	4688      	mov	r8, r1
 8002650:	4691      	mov	r9, r2
 8002652:	eb18 0005 	adds.w	r0, r8, r5
 8002656:	eb49 0106 	adc.w	r1, r9, r6
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	461d      	mov	r5, r3
 8002660:	f04f 0600 	mov.w	r6, #0
 8002664:	196b      	adds	r3, r5, r5
 8002666:	eb46 0406 	adc.w	r4, r6, r6
 800266a:	461a      	mov	r2, r3
 800266c:	4623      	mov	r3, r4
 800266e:	f7fd fdbb 	bl	80001e8 <__aeabi_uldivmod>
 8002672:	4603      	mov	r3, r0
 8002674:	460c      	mov	r4, r1
 8002676:	461a      	mov	r2, r3
 8002678:	4ba5      	ldr	r3, [pc, #660]	; (8002910 <UART_SetConfig+0x384>)
 800267a:	fba3 2302 	umull	r2, r3, r3, r2
 800267e:	095b      	lsrs	r3, r3, #5
 8002680:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	461d      	mov	r5, r3
 8002688:	f04f 0600 	mov.w	r6, #0
 800268c:	46a9      	mov	r9, r5
 800268e:	46b2      	mov	sl, r6
 8002690:	eb19 0309 	adds.w	r3, r9, r9
 8002694:	eb4a 040a 	adc.w	r4, sl, sl
 8002698:	4699      	mov	r9, r3
 800269a:	46a2      	mov	sl, r4
 800269c:	eb19 0905 	adds.w	r9, r9, r5
 80026a0:	eb4a 0a06 	adc.w	sl, sl, r6
 80026a4:	f04f 0100 	mov.w	r1, #0
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80026b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80026b8:	4689      	mov	r9, r1
 80026ba:	4692      	mov	sl, r2
 80026bc:	eb19 0005 	adds.w	r0, r9, r5
 80026c0:	eb4a 0106 	adc.w	r1, sl, r6
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	461d      	mov	r5, r3
 80026ca:	f04f 0600 	mov.w	r6, #0
 80026ce:	196b      	adds	r3, r5, r5
 80026d0:	eb46 0406 	adc.w	r4, r6, r6
 80026d4:	461a      	mov	r2, r3
 80026d6:	4623      	mov	r3, r4
 80026d8:	f7fd fd86 	bl	80001e8 <__aeabi_uldivmod>
 80026dc:	4603      	mov	r3, r0
 80026de:	460c      	mov	r4, r1
 80026e0:	461a      	mov	r2, r3
 80026e2:	4b8b      	ldr	r3, [pc, #556]	; (8002910 <UART_SetConfig+0x384>)
 80026e4:	fba3 1302 	umull	r1, r3, r3, r2
 80026e8:	095b      	lsrs	r3, r3, #5
 80026ea:	2164      	movs	r1, #100	; 0x64
 80026ec:	fb01 f303 	mul.w	r3, r1, r3
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	3332      	adds	r3, #50	; 0x32
 80026f6:	4a86      	ldr	r2, [pc, #536]	; (8002910 <UART_SetConfig+0x384>)
 80026f8:	fba2 2303 	umull	r2, r3, r2, r3
 80026fc:	095b      	lsrs	r3, r3, #5
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002704:	4498      	add	r8, r3
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	461d      	mov	r5, r3
 800270a:	f04f 0600 	mov.w	r6, #0
 800270e:	46a9      	mov	r9, r5
 8002710:	46b2      	mov	sl, r6
 8002712:	eb19 0309 	adds.w	r3, r9, r9
 8002716:	eb4a 040a 	adc.w	r4, sl, sl
 800271a:	4699      	mov	r9, r3
 800271c:	46a2      	mov	sl, r4
 800271e:	eb19 0905 	adds.w	r9, r9, r5
 8002722:	eb4a 0a06 	adc.w	sl, sl, r6
 8002726:	f04f 0100 	mov.w	r1, #0
 800272a:	f04f 0200 	mov.w	r2, #0
 800272e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002732:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002736:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800273a:	4689      	mov	r9, r1
 800273c:	4692      	mov	sl, r2
 800273e:	eb19 0005 	adds.w	r0, r9, r5
 8002742:	eb4a 0106 	adc.w	r1, sl, r6
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	461d      	mov	r5, r3
 800274c:	f04f 0600 	mov.w	r6, #0
 8002750:	196b      	adds	r3, r5, r5
 8002752:	eb46 0406 	adc.w	r4, r6, r6
 8002756:	461a      	mov	r2, r3
 8002758:	4623      	mov	r3, r4
 800275a:	f7fd fd45 	bl	80001e8 <__aeabi_uldivmod>
 800275e:	4603      	mov	r3, r0
 8002760:	460c      	mov	r4, r1
 8002762:	461a      	mov	r2, r3
 8002764:	4b6a      	ldr	r3, [pc, #424]	; (8002910 <UART_SetConfig+0x384>)
 8002766:	fba3 1302 	umull	r1, r3, r3, r2
 800276a:	095b      	lsrs	r3, r3, #5
 800276c:	2164      	movs	r1, #100	; 0x64
 800276e:	fb01 f303 	mul.w	r3, r1, r3
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	3332      	adds	r3, #50	; 0x32
 8002778:	4a65      	ldr	r2, [pc, #404]	; (8002910 <UART_SetConfig+0x384>)
 800277a:	fba2 2303 	umull	r2, r3, r2, r3
 800277e:	095b      	lsrs	r3, r3, #5
 8002780:	f003 0207 	and.w	r2, r3, #7
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4442      	add	r2, r8
 800278a:	609a      	str	r2, [r3, #8]
 800278c:	e26f      	b.n	8002c6e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800278e:	f7ff f82b 	bl	80017e8 <HAL_RCC_GetPCLK1Freq>
 8002792:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	461d      	mov	r5, r3
 8002798:	f04f 0600 	mov.w	r6, #0
 800279c:	46a8      	mov	r8, r5
 800279e:	46b1      	mov	r9, r6
 80027a0:	eb18 0308 	adds.w	r3, r8, r8
 80027a4:	eb49 0409 	adc.w	r4, r9, r9
 80027a8:	4698      	mov	r8, r3
 80027aa:	46a1      	mov	r9, r4
 80027ac:	eb18 0805 	adds.w	r8, r8, r5
 80027b0:	eb49 0906 	adc.w	r9, r9, r6
 80027b4:	f04f 0100 	mov.w	r1, #0
 80027b8:	f04f 0200 	mov.w	r2, #0
 80027bc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80027c0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80027c4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80027c8:	4688      	mov	r8, r1
 80027ca:	4691      	mov	r9, r2
 80027cc:	eb18 0005 	adds.w	r0, r8, r5
 80027d0:	eb49 0106 	adc.w	r1, r9, r6
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	461d      	mov	r5, r3
 80027da:	f04f 0600 	mov.w	r6, #0
 80027de:	196b      	adds	r3, r5, r5
 80027e0:	eb46 0406 	adc.w	r4, r6, r6
 80027e4:	461a      	mov	r2, r3
 80027e6:	4623      	mov	r3, r4
 80027e8:	f7fd fcfe 	bl	80001e8 <__aeabi_uldivmod>
 80027ec:	4603      	mov	r3, r0
 80027ee:	460c      	mov	r4, r1
 80027f0:	461a      	mov	r2, r3
 80027f2:	4b47      	ldr	r3, [pc, #284]	; (8002910 <UART_SetConfig+0x384>)
 80027f4:	fba3 2302 	umull	r2, r3, r3, r2
 80027f8:	095b      	lsrs	r3, r3, #5
 80027fa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	461d      	mov	r5, r3
 8002802:	f04f 0600 	mov.w	r6, #0
 8002806:	46a9      	mov	r9, r5
 8002808:	46b2      	mov	sl, r6
 800280a:	eb19 0309 	adds.w	r3, r9, r9
 800280e:	eb4a 040a 	adc.w	r4, sl, sl
 8002812:	4699      	mov	r9, r3
 8002814:	46a2      	mov	sl, r4
 8002816:	eb19 0905 	adds.w	r9, r9, r5
 800281a:	eb4a 0a06 	adc.w	sl, sl, r6
 800281e:	f04f 0100 	mov.w	r1, #0
 8002822:	f04f 0200 	mov.w	r2, #0
 8002826:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800282a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800282e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002832:	4689      	mov	r9, r1
 8002834:	4692      	mov	sl, r2
 8002836:	eb19 0005 	adds.w	r0, r9, r5
 800283a:	eb4a 0106 	adc.w	r1, sl, r6
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	461d      	mov	r5, r3
 8002844:	f04f 0600 	mov.w	r6, #0
 8002848:	196b      	adds	r3, r5, r5
 800284a:	eb46 0406 	adc.w	r4, r6, r6
 800284e:	461a      	mov	r2, r3
 8002850:	4623      	mov	r3, r4
 8002852:	f7fd fcc9 	bl	80001e8 <__aeabi_uldivmod>
 8002856:	4603      	mov	r3, r0
 8002858:	460c      	mov	r4, r1
 800285a:	461a      	mov	r2, r3
 800285c:	4b2c      	ldr	r3, [pc, #176]	; (8002910 <UART_SetConfig+0x384>)
 800285e:	fba3 1302 	umull	r1, r3, r3, r2
 8002862:	095b      	lsrs	r3, r3, #5
 8002864:	2164      	movs	r1, #100	; 0x64
 8002866:	fb01 f303 	mul.w	r3, r1, r3
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	3332      	adds	r3, #50	; 0x32
 8002870:	4a27      	ldr	r2, [pc, #156]	; (8002910 <UART_SetConfig+0x384>)
 8002872:	fba2 2303 	umull	r2, r3, r2, r3
 8002876:	095b      	lsrs	r3, r3, #5
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800287e:	4498      	add	r8, r3
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	461d      	mov	r5, r3
 8002884:	f04f 0600 	mov.w	r6, #0
 8002888:	46a9      	mov	r9, r5
 800288a:	46b2      	mov	sl, r6
 800288c:	eb19 0309 	adds.w	r3, r9, r9
 8002890:	eb4a 040a 	adc.w	r4, sl, sl
 8002894:	4699      	mov	r9, r3
 8002896:	46a2      	mov	sl, r4
 8002898:	eb19 0905 	adds.w	r9, r9, r5
 800289c:	eb4a 0a06 	adc.w	sl, sl, r6
 80028a0:	f04f 0100 	mov.w	r1, #0
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80028b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80028b4:	4689      	mov	r9, r1
 80028b6:	4692      	mov	sl, r2
 80028b8:	eb19 0005 	adds.w	r0, r9, r5
 80028bc:	eb4a 0106 	adc.w	r1, sl, r6
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	461d      	mov	r5, r3
 80028c6:	f04f 0600 	mov.w	r6, #0
 80028ca:	196b      	adds	r3, r5, r5
 80028cc:	eb46 0406 	adc.w	r4, r6, r6
 80028d0:	461a      	mov	r2, r3
 80028d2:	4623      	mov	r3, r4
 80028d4:	f7fd fc88 	bl	80001e8 <__aeabi_uldivmod>
 80028d8:	4603      	mov	r3, r0
 80028da:	460c      	mov	r4, r1
 80028dc:	461a      	mov	r2, r3
 80028de:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <UART_SetConfig+0x384>)
 80028e0:	fba3 1302 	umull	r1, r3, r3, r2
 80028e4:	095b      	lsrs	r3, r3, #5
 80028e6:	2164      	movs	r1, #100	; 0x64
 80028e8:	fb01 f303 	mul.w	r3, r1, r3
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	3332      	adds	r3, #50	; 0x32
 80028f2:	4a07      	ldr	r2, [pc, #28]	; (8002910 <UART_SetConfig+0x384>)
 80028f4:	fba2 2303 	umull	r2, r3, r2, r3
 80028f8:	095b      	lsrs	r3, r3, #5
 80028fa:	f003 0207 	and.w	r2, r3, #7
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4442      	add	r2, r8
 8002904:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002906:	e1b2      	b.n	8002c6e <UART_SetConfig+0x6e2>
 8002908:	40011000 	.word	0x40011000
 800290c:	40011400 	.word	0x40011400
 8002910:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4ad7      	ldr	r2, [pc, #860]	; (8002c78 <UART_SetConfig+0x6ec>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d005      	beq.n	800292a <UART_SetConfig+0x39e>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4ad6      	ldr	r2, [pc, #856]	; (8002c7c <UART_SetConfig+0x6f0>)
 8002924:	4293      	cmp	r3, r2
 8002926:	f040 80d1 	bne.w	8002acc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800292a:	f7fe ff71 	bl	8001810 <HAL_RCC_GetPCLK2Freq>
 800292e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	469a      	mov	sl, r3
 8002934:	f04f 0b00 	mov.w	fp, #0
 8002938:	46d0      	mov	r8, sl
 800293a:	46d9      	mov	r9, fp
 800293c:	eb18 0308 	adds.w	r3, r8, r8
 8002940:	eb49 0409 	adc.w	r4, r9, r9
 8002944:	4698      	mov	r8, r3
 8002946:	46a1      	mov	r9, r4
 8002948:	eb18 080a 	adds.w	r8, r8, sl
 800294c:	eb49 090b 	adc.w	r9, r9, fp
 8002950:	f04f 0100 	mov.w	r1, #0
 8002954:	f04f 0200 	mov.w	r2, #0
 8002958:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800295c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002960:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002964:	4688      	mov	r8, r1
 8002966:	4691      	mov	r9, r2
 8002968:	eb1a 0508 	adds.w	r5, sl, r8
 800296c:	eb4b 0609 	adc.w	r6, fp, r9
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	4619      	mov	r1, r3
 8002976:	f04f 0200 	mov.w	r2, #0
 800297a:	f04f 0300 	mov.w	r3, #0
 800297e:	f04f 0400 	mov.w	r4, #0
 8002982:	0094      	lsls	r4, r2, #2
 8002984:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002988:	008b      	lsls	r3, r1, #2
 800298a:	461a      	mov	r2, r3
 800298c:	4623      	mov	r3, r4
 800298e:	4628      	mov	r0, r5
 8002990:	4631      	mov	r1, r6
 8002992:	f7fd fc29 	bl	80001e8 <__aeabi_uldivmod>
 8002996:	4603      	mov	r3, r0
 8002998:	460c      	mov	r4, r1
 800299a:	461a      	mov	r2, r3
 800299c:	4bb8      	ldr	r3, [pc, #736]	; (8002c80 <UART_SetConfig+0x6f4>)
 800299e:	fba3 2302 	umull	r2, r3, r3, r2
 80029a2:	095b      	lsrs	r3, r3, #5
 80029a4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	469b      	mov	fp, r3
 80029ac:	f04f 0c00 	mov.w	ip, #0
 80029b0:	46d9      	mov	r9, fp
 80029b2:	46e2      	mov	sl, ip
 80029b4:	eb19 0309 	adds.w	r3, r9, r9
 80029b8:	eb4a 040a 	adc.w	r4, sl, sl
 80029bc:	4699      	mov	r9, r3
 80029be:	46a2      	mov	sl, r4
 80029c0:	eb19 090b 	adds.w	r9, r9, fp
 80029c4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80029c8:	f04f 0100 	mov.w	r1, #0
 80029cc:	f04f 0200 	mov.w	r2, #0
 80029d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80029d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80029dc:	4689      	mov	r9, r1
 80029de:	4692      	mov	sl, r2
 80029e0:	eb1b 0509 	adds.w	r5, fp, r9
 80029e4:	eb4c 060a 	adc.w	r6, ip, sl
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	4619      	mov	r1, r3
 80029ee:	f04f 0200 	mov.w	r2, #0
 80029f2:	f04f 0300 	mov.w	r3, #0
 80029f6:	f04f 0400 	mov.w	r4, #0
 80029fa:	0094      	lsls	r4, r2, #2
 80029fc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002a00:	008b      	lsls	r3, r1, #2
 8002a02:	461a      	mov	r2, r3
 8002a04:	4623      	mov	r3, r4
 8002a06:	4628      	mov	r0, r5
 8002a08:	4631      	mov	r1, r6
 8002a0a:	f7fd fbed 	bl	80001e8 <__aeabi_uldivmod>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	460c      	mov	r4, r1
 8002a12:	461a      	mov	r2, r3
 8002a14:	4b9a      	ldr	r3, [pc, #616]	; (8002c80 <UART_SetConfig+0x6f4>)
 8002a16:	fba3 1302 	umull	r1, r3, r3, r2
 8002a1a:	095b      	lsrs	r3, r3, #5
 8002a1c:	2164      	movs	r1, #100	; 0x64
 8002a1e:	fb01 f303 	mul.w	r3, r1, r3
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	011b      	lsls	r3, r3, #4
 8002a26:	3332      	adds	r3, #50	; 0x32
 8002a28:	4a95      	ldr	r2, [pc, #596]	; (8002c80 <UART_SetConfig+0x6f4>)
 8002a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2e:	095b      	lsrs	r3, r3, #5
 8002a30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a34:	4498      	add	r8, r3
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	469b      	mov	fp, r3
 8002a3a:	f04f 0c00 	mov.w	ip, #0
 8002a3e:	46d9      	mov	r9, fp
 8002a40:	46e2      	mov	sl, ip
 8002a42:	eb19 0309 	adds.w	r3, r9, r9
 8002a46:	eb4a 040a 	adc.w	r4, sl, sl
 8002a4a:	4699      	mov	r9, r3
 8002a4c:	46a2      	mov	sl, r4
 8002a4e:	eb19 090b 	adds.w	r9, r9, fp
 8002a52:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002a56:	f04f 0100 	mov.w	r1, #0
 8002a5a:	f04f 0200 	mov.w	r2, #0
 8002a5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a62:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a66:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a6a:	4689      	mov	r9, r1
 8002a6c:	4692      	mov	sl, r2
 8002a6e:	eb1b 0509 	adds.w	r5, fp, r9
 8002a72:	eb4c 060a 	adc.w	r6, ip, sl
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	f04f 0300 	mov.w	r3, #0
 8002a84:	f04f 0400 	mov.w	r4, #0
 8002a88:	0094      	lsls	r4, r2, #2
 8002a8a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002a8e:	008b      	lsls	r3, r1, #2
 8002a90:	461a      	mov	r2, r3
 8002a92:	4623      	mov	r3, r4
 8002a94:	4628      	mov	r0, r5
 8002a96:	4631      	mov	r1, r6
 8002a98:	f7fd fba6 	bl	80001e8 <__aeabi_uldivmod>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	460c      	mov	r4, r1
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	4b77      	ldr	r3, [pc, #476]	; (8002c80 <UART_SetConfig+0x6f4>)
 8002aa4:	fba3 1302 	umull	r1, r3, r3, r2
 8002aa8:	095b      	lsrs	r3, r3, #5
 8002aaa:	2164      	movs	r1, #100	; 0x64
 8002aac:	fb01 f303 	mul.w	r3, r1, r3
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	011b      	lsls	r3, r3, #4
 8002ab4:	3332      	adds	r3, #50	; 0x32
 8002ab6:	4a72      	ldr	r2, [pc, #456]	; (8002c80 <UART_SetConfig+0x6f4>)
 8002ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8002abc:	095b      	lsrs	r3, r3, #5
 8002abe:	f003 020f 	and.w	r2, r3, #15
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4442      	add	r2, r8
 8002ac8:	609a      	str	r2, [r3, #8]
 8002aca:	e0d0      	b.n	8002c6e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002acc:	f7fe fe8c 	bl	80017e8 <HAL_RCC_GetPCLK1Freq>
 8002ad0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	469a      	mov	sl, r3
 8002ad6:	f04f 0b00 	mov.w	fp, #0
 8002ada:	46d0      	mov	r8, sl
 8002adc:	46d9      	mov	r9, fp
 8002ade:	eb18 0308 	adds.w	r3, r8, r8
 8002ae2:	eb49 0409 	adc.w	r4, r9, r9
 8002ae6:	4698      	mov	r8, r3
 8002ae8:	46a1      	mov	r9, r4
 8002aea:	eb18 080a 	adds.w	r8, r8, sl
 8002aee:	eb49 090b 	adc.w	r9, r9, fp
 8002af2:	f04f 0100 	mov.w	r1, #0
 8002af6:	f04f 0200 	mov.w	r2, #0
 8002afa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002afe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002b02:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002b06:	4688      	mov	r8, r1
 8002b08:	4691      	mov	r9, r2
 8002b0a:	eb1a 0508 	adds.w	r5, sl, r8
 8002b0e:	eb4b 0609 	adc.w	r6, fp, r9
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	4619      	mov	r1, r3
 8002b18:	f04f 0200 	mov.w	r2, #0
 8002b1c:	f04f 0300 	mov.w	r3, #0
 8002b20:	f04f 0400 	mov.w	r4, #0
 8002b24:	0094      	lsls	r4, r2, #2
 8002b26:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b2a:	008b      	lsls	r3, r1, #2
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	4623      	mov	r3, r4
 8002b30:	4628      	mov	r0, r5
 8002b32:	4631      	mov	r1, r6
 8002b34:	f7fd fb58 	bl	80001e8 <__aeabi_uldivmod>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	460c      	mov	r4, r1
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	4b50      	ldr	r3, [pc, #320]	; (8002c80 <UART_SetConfig+0x6f4>)
 8002b40:	fba3 2302 	umull	r2, r3, r3, r2
 8002b44:	095b      	lsrs	r3, r3, #5
 8002b46:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	469b      	mov	fp, r3
 8002b4e:	f04f 0c00 	mov.w	ip, #0
 8002b52:	46d9      	mov	r9, fp
 8002b54:	46e2      	mov	sl, ip
 8002b56:	eb19 0309 	adds.w	r3, r9, r9
 8002b5a:	eb4a 040a 	adc.w	r4, sl, sl
 8002b5e:	4699      	mov	r9, r3
 8002b60:	46a2      	mov	sl, r4
 8002b62:	eb19 090b 	adds.w	r9, r9, fp
 8002b66:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002b6a:	f04f 0100 	mov.w	r1, #0
 8002b6e:	f04f 0200 	mov.w	r2, #0
 8002b72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b76:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b7a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b7e:	4689      	mov	r9, r1
 8002b80:	4692      	mov	sl, r2
 8002b82:	eb1b 0509 	adds.w	r5, fp, r9
 8002b86:	eb4c 060a 	adc.w	r6, ip, sl
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	4619      	mov	r1, r3
 8002b90:	f04f 0200 	mov.w	r2, #0
 8002b94:	f04f 0300 	mov.w	r3, #0
 8002b98:	f04f 0400 	mov.w	r4, #0
 8002b9c:	0094      	lsls	r4, r2, #2
 8002b9e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002ba2:	008b      	lsls	r3, r1, #2
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	4623      	mov	r3, r4
 8002ba8:	4628      	mov	r0, r5
 8002baa:	4631      	mov	r1, r6
 8002bac:	f7fd fb1c 	bl	80001e8 <__aeabi_uldivmod>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	460c      	mov	r4, r1
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	4b32      	ldr	r3, [pc, #200]	; (8002c80 <UART_SetConfig+0x6f4>)
 8002bb8:	fba3 1302 	umull	r1, r3, r3, r2
 8002bbc:	095b      	lsrs	r3, r3, #5
 8002bbe:	2164      	movs	r1, #100	; 0x64
 8002bc0:	fb01 f303 	mul.w	r3, r1, r3
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	011b      	lsls	r3, r3, #4
 8002bc8:	3332      	adds	r3, #50	; 0x32
 8002bca:	4a2d      	ldr	r2, [pc, #180]	; (8002c80 <UART_SetConfig+0x6f4>)
 8002bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd0:	095b      	lsrs	r3, r3, #5
 8002bd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bd6:	4498      	add	r8, r3
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	469b      	mov	fp, r3
 8002bdc:	f04f 0c00 	mov.w	ip, #0
 8002be0:	46d9      	mov	r9, fp
 8002be2:	46e2      	mov	sl, ip
 8002be4:	eb19 0309 	adds.w	r3, r9, r9
 8002be8:	eb4a 040a 	adc.w	r4, sl, sl
 8002bec:	4699      	mov	r9, r3
 8002bee:	46a2      	mov	sl, r4
 8002bf0:	eb19 090b 	adds.w	r9, r9, fp
 8002bf4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002bf8:	f04f 0100 	mov.w	r1, #0
 8002bfc:	f04f 0200 	mov.w	r2, #0
 8002c00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c0c:	4689      	mov	r9, r1
 8002c0e:	4692      	mov	sl, r2
 8002c10:	eb1b 0509 	adds.w	r5, fp, r9
 8002c14:	eb4c 060a 	adc.w	r6, ip, sl
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	f04f 0200 	mov.w	r2, #0
 8002c22:	f04f 0300 	mov.w	r3, #0
 8002c26:	f04f 0400 	mov.w	r4, #0
 8002c2a:	0094      	lsls	r4, r2, #2
 8002c2c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c30:	008b      	lsls	r3, r1, #2
 8002c32:	461a      	mov	r2, r3
 8002c34:	4623      	mov	r3, r4
 8002c36:	4628      	mov	r0, r5
 8002c38:	4631      	mov	r1, r6
 8002c3a:	f7fd fad5 	bl	80001e8 <__aeabi_uldivmod>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	460c      	mov	r4, r1
 8002c42:	461a      	mov	r2, r3
 8002c44:	4b0e      	ldr	r3, [pc, #56]	; (8002c80 <UART_SetConfig+0x6f4>)
 8002c46:	fba3 1302 	umull	r1, r3, r3, r2
 8002c4a:	095b      	lsrs	r3, r3, #5
 8002c4c:	2164      	movs	r1, #100	; 0x64
 8002c4e:	fb01 f303 	mul.w	r3, r1, r3
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	011b      	lsls	r3, r3, #4
 8002c56:	3332      	adds	r3, #50	; 0x32
 8002c58:	4a09      	ldr	r2, [pc, #36]	; (8002c80 <UART_SetConfig+0x6f4>)
 8002c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5e:	095b      	lsrs	r3, r3, #5
 8002c60:	f003 020f 	and.w	r2, r3, #15
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4442      	add	r2, r8
 8002c6a:	609a      	str	r2, [r3, #8]
}
 8002c6c:	e7ff      	b.n	8002c6e <UART_SetConfig+0x6e2>
 8002c6e:	bf00      	nop
 8002c70:	3714      	adds	r7, #20
 8002c72:	46bd      	mov	sp, r7
 8002c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c78:	40011000 	.word	0x40011000
 8002c7c:	40011400 	.word	0x40011400
 8002c80:	51eb851f 	.word	0x51eb851f

08002c84 <transmit_uart>:
/* Private function prototypes -----------------------------------------------*/
static void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);

void transmit_uart(char *string){
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f7fd faa3 	bl	80001d8 <strlen>
 8002c92:	4603      	mov	r3, r0
 8002c94:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t*) string, len, 200);
 8002c96:	7bfb      	ldrb	r3, [r7, #15]
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	23c8      	movs	r3, #200	; 0xc8
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	4803      	ldr	r0, [pc, #12]	; (8002cac <transmit_uart+0x28>)
 8002ca0:	f7ff fb90 	bl	80023c4 <HAL_UART_Transmit>
}
 8002ca4:	bf00      	nop
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	20000130 	.word	0x20000130

08002cb0 <main>:
  * @brief  Main program.
  * @param  None
  * @retval None
  */
int main(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  HAL_Init();
 8002cb4:	f7fd fc18 	bl	80004e8 <HAL_Init>
  SystemClock_Config();		// Configure system clock to 180MHz
 8002cb8:	f000 f818 	bl	8002cec <SystemClock_Config>
  MX_GPIO_Init();
 8002cbc:	f000 f882 	bl	8002dc4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002cc0:	f000 f8f0 	bl	8002ea4 <MX_USART2_UART_Init>

  // WS2812B Setup
  LED_Init();
 8002cc4:	f000 fdae 	bl	8003824 <LED_Init>
  LED_set_color_all(0x00, 0x00, 0x00);	//Set color order of array. Ex: R0,G0,B0,R1,G1,B1
 8002cc8:	2200      	movs	r2, #0
 8002cca:	2100      	movs	r1, #0
 8002ccc:	2000      	movs	r0, #0
 8002cce:	f000 fa15 	bl	80030fc <LED_set_color_all>
  LED_update(1);
 8002cd2:	2001      	movs	r0, #1
 8002cd4:	f000 fb92 	bl	80033fc <LED_update>

  //char buffer[10];
  //int frequency = 100;
  //HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "%d ", frequency), HAL_MAX_DELAY);
	transmit_uart("1");
 8002cd8:	4803      	ldr	r0, [pc, #12]	; (8002ce8 <main+0x38>)
 8002cda:	f7ff ffd3 	bl	8002c84 <transmit_uart>

  /* Infinite loop */
  while (1) {
  	check_microSD();
 8002cde:	f000 f95f 	bl	8002fa0 <check_microSD>
  	//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
  	pulse();
 8002ce2:	f000 f9d9 	bl	8003098 <pulse>
  	check_microSD();
 8002ce6:	e7fa      	b.n	8002cde <main+0x2e>
 8002ce8:	08003aec 	.word	0x08003aec

08002cec <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b094      	sub	sp, #80	; 0x50
 8002cf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cf2:	f107 0320 	add.w	r3, r7, #32
 8002cf6:	2230      	movs	r2, #48	; 0x30
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f000 fee2 	bl	8003ac4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d00:	f107 030c 	add.w	r3, r7, #12
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	605a      	str	r2, [r3, #4]
 8002d0a:	609a      	str	r2, [r3, #8]
 8002d0c:	60da      	str	r2, [r3, #12]
 8002d0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d10:	2300      	movs	r3, #0
 8002d12:	60bb      	str	r3, [r7, #8]
 8002d14:	4b29      	ldr	r3, [pc, #164]	; (8002dbc <SystemClock_Config+0xd0>)
 8002d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d18:	4a28      	ldr	r2, [pc, #160]	; (8002dbc <SystemClock_Config+0xd0>)
 8002d1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d1e:	6413      	str	r3, [r2, #64]	; 0x40
 8002d20:	4b26      	ldr	r3, [pc, #152]	; (8002dbc <SystemClock_Config+0xd0>)
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	607b      	str	r3, [r7, #4]
 8002d30:	4b23      	ldr	r3, [pc, #140]	; (8002dc0 <SystemClock_Config+0xd4>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a22      	ldr	r2, [pc, #136]	; (8002dc0 <SystemClock_Config+0xd4>)
 8002d36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d3a:	6013      	str	r3, [r2, #0]
 8002d3c:	4b20      	ldr	r3, [pc, #128]	; (8002dc0 <SystemClock_Config+0xd4>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d44:	607b      	str	r3, [r7, #4]
 8002d46:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d48:	2302      	movs	r3, #2
 8002d4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d50:	2310      	movs	r3, #16
 8002d52:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d54:	2302      	movs	r3, #2
 8002d56:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002d5c:	2310      	movs	r3, #16
 8002d5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002d60:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002d64:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002d66:	2304      	movs	r3, #4
 8002d68:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002d6a:	2304      	movs	r3, #4
 8002d6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d6e:	f107 0320 	add.w	r3, r7, #32
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7fe f8fe 	bl	8000f74 <HAL_RCC_OscConfig>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d002      	beq.n	8002d84 <SystemClock_Config+0x98>
  {
    Error_Handler(SYSCONF_ERROR1);
 8002d7e:	2000      	movs	r0, #0
 8002d80:	f000 f8ba 	bl	8002ef8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d84:	230f      	movs	r3, #15
 8002d86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d88:	2302      	movs	r3, #2
 8002d8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d96:	2300      	movs	r3, #0
 8002d98:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d9a:	f107 030c 	add.w	r3, r7, #12
 8002d9e:	2102      	movs	r1, #2
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7fe fb57 	bl	8001454 <HAL_RCC_ClockConfig>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d002      	beq.n	8002db2 <SystemClock_Config+0xc6>
  {
    Error_Handler(SYSCONF_ERROR2);
 8002dac:	2001      	movs	r0, #1
 8002dae:	f000 f8a3 	bl	8002ef8 <Error_Handler>
  }
}
 8002db2:	bf00      	nop
 8002db4:	3750      	adds	r7, #80	; 0x50
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	40007000 	.word	0x40007000

08002dc4 <MX_GPIO_Init>:
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void){
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08a      	sub	sp, #40	; 0x28
 8002dc8:	af00      	add	r7, sp, #0
  // GPIO Ports Clock Enable
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dca:	2300      	movs	r3, #0
 8002dcc:	613b      	str	r3, [r7, #16]
 8002dce:	4b31      	ldr	r3, [pc, #196]	; (8002e94 <MX_GPIO_Init+0xd0>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	4a30      	ldr	r2, [pc, #192]	; (8002e94 <MX_GPIO_Init+0xd0>)
 8002dd4:	f043 0304 	orr.w	r3, r3, #4
 8002dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dda:	4b2e      	ldr	r3, [pc, #184]	; (8002e94 <MX_GPIO_Init+0xd0>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	f003 0304 	and.w	r3, r3, #4
 8002de2:	613b      	str	r3, [r7, #16]
 8002de4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002de6:	2300      	movs	r3, #0
 8002de8:	60fb      	str	r3, [r7, #12]
 8002dea:	4b2a      	ldr	r3, [pc, #168]	; (8002e94 <MX_GPIO_Init+0xd0>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	4a29      	ldr	r2, [pc, #164]	; (8002e94 <MX_GPIO_Init+0xd0>)
 8002df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002df4:	6313      	str	r3, [r2, #48]	; 0x30
 8002df6:	4b27      	ldr	r3, [pc, #156]	; (8002e94 <MX_GPIO_Init+0xd0>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	60bb      	str	r3, [r7, #8]
 8002e06:	4b23      	ldr	r3, [pc, #140]	; (8002e94 <MX_GPIO_Init+0xd0>)
 8002e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0a:	4a22      	ldr	r2, [pc, #136]	; (8002e94 <MX_GPIO_Init+0xd0>)
 8002e0c:	f043 0301 	orr.w	r3, r3, #1
 8002e10:	6313      	str	r3, [r2, #48]	; 0x30
 8002e12:	4b20      	ldr	r3, [pc, #128]	; (8002e94 <MX_GPIO_Init+0xd0>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	60bb      	str	r3, [r7, #8]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e1e:	2300      	movs	r3, #0
 8002e20:	607b      	str	r3, [r7, #4]
 8002e22:	4b1c      	ldr	r3, [pc, #112]	; (8002e94 <MX_GPIO_Init+0xd0>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e26:	4a1b      	ldr	r2, [pc, #108]	; (8002e94 <MX_GPIO_Init+0xd0>)
 8002e28:	f043 0302 	orr.w	r3, r3, #2
 8002e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e2e:	4b19      	ldr	r3, [pc, #100]	; (8002e94 <MX_GPIO_Init+0xd0>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	607b      	str	r3, [r7, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e3a:	f107 0314 	add.w	r3, r7, #20
 8002e3e:	2200      	movs	r2, #0
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	605a      	str	r2, [r3, #4]
 8002e44:	609a      	str	r2, [r3, #8]
 8002e46:	60da      	str	r2, [r3, #12]
 8002e48:	611a      	str	r2, [r3, #16]

  // Configure GPIO pin Output Level
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	2120      	movs	r1, #32
 8002e4e:	4812      	ldr	r0, [pc, #72]	; (8002e98 <MX_GPIO_Init+0xd4>)
 8002e50:	f7fe f876 	bl	8000f40 <HAL_GPIO_WritePin>

  // Configure GPIO pin : B1_Pin
  GPIO_InitStruct.Pin = B1_Pin;
 8002e54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002e5a:	4b10      	ldr	r3, [pc, #64]	; (8002e9c <MX_GPIO_Init+0xd8>)
 8002e5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002e62:	f107 0314 	add.w	r3, r7, #20
 8002e66:	4619      	mov	r1, r3
 8002e68:	480d      	ldr	r0, [pc, #52]	; (8002ea0 <MX_GPIO_Init+0xdc>)
 8002e6a:	f7fd fecf 	bl	8000c0c <HAL_GPIO_Init>

  // Configure GPIO pin : LD2_Pin
  GPIO_InitStruct.Pin = LD2_Pin;
 8002e6e:	2320      	movs	r3, #32
 8002e70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e72:	2301      	movs	r3, #1
 8002e74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e76:	2300      	movs	r3, #0
 8002e78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002e7e:	f107 0314 	add.w	r3, r7, #20
 8002e82:	4619      	mov	r1, r3
 8002e84:	4804      	ldr	r0, [pc, #16]	; (8002e98 <MX_GPIO_Init+0xd4>)
 8002e86:	f7fd fec1 	bl	8000c0c <HAL_GPIO_Init>
}
 8002e8a:	bf00      	nop
 8002e8c:	3728      	adds	r7, #40	; 0x28
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40023800 	.word	0x40023800
 8002e98:	40020000 	.word	0x40020000
 8002e9c:	10210000 	.word	0x10210000
 8002ea0:	40020800 	.word	0x40020800

08002ea4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ea8:	4b11      	ldr	r3, [pc, #68]	; (8002ef0 <MX_USART2_UART_Init+0x4c>)
 8002eaa:	4a12      	ldr	r2, [pc, #72]	; (8002ef4 <MX_USART2_UART_Init+0x50>)
 8002eac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002eae:	4b10      	ldr	r3, [pc, #64]	; (8002ef0 <MX_USART2_UART_Init+0x4c>)
 8002eb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002eb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002eb6:	4b0e      	ldr	r3, [pc, #56]	; (8002ef0 <MX_USART2_UART_Init+0x4c>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ebc:	4b0c      	ldr	r3, [pc, #48]	; (8002ef0 <MX_USART2_UART_Init+0x4c>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ec2:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <MX_USART2_UART_Init+0x4c>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ec8:	4b09      	ldr	r3, [pc, #36]	; (8002ef0 <MX_USART2_UART_Init+0x4c>)
 8002eca:	220c      	movs	r2, #12
 8002ecc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ece:	4b08      	ldr	r3, [pc, #32]	; (8002ef0 <MX_USART2_UART_Init+0x4c>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ed4:	4b06      	ldr	r3, [pc, #24]	; (8002ef0 <MX_USART2_UART_Init+0x4c>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002eda:	4805      	ldr	r0, [pc, #20]	; (8002ef0 <MX_USART2_UART_Init+0x4c>)
 8002edc:	f7ff fa1b 	bl	8002316 <HAL_UART_Init>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d002      	beq.n	8002eec <MX_USART2_UART_Init+0x48>
  {
    Error_Handler(UART_ERROR);
 8002ee6:	2007      	movs	r0, #7
 8002ee8:	f000 f806 	bl	8002ef8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002eec:	bf00      	nop
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	20000130 	.word	0x20000130
 8002ef4:	40004400 	.word	0x40004400

08002ef8 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(uint8_t ERROR)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	4603      	mov	r3, r0
 8002f00:	71fb      	strb	r3, [r7, #7]
  while (1) {
    /* Turn LED2 on */
  	switch(ERROR){
 8002f02:	79fb      	ldrb	r3, [r7, #7]
 8002f04:	2b07      	cmp	r3, #7
 8002f06:	d843      	bhi.n	8002f90 <Error_Handler+0x98>
 8002f08:	a201      	add	r2, pc, #4	; (adr r2, 8002f10 <Error_Handler+0x18>)
 8002f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f0e:	bf00      	nop
 8002f10:	08002f31 	.word	0x08002f31
 8002f14:	08002f3d 	.word	0x08002f3d
 8002f18:	08002f55 	.word	0x08002f55
 8002f1c:	08002f61 	.word	0x08002f61
 8002f20:	08002f49 	.word	0x08002f49
 8002f24:	08002f79 	.word	0x08002f79
 8002f28:	08002f6d 	.word	0x08002f6d
 8002f2c:	08002f85 	.word	0x08002f85
  	case SYSCONF_ERROR1:
  		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8002f30:	2201      	movs	r2, #1
 8002f32:	2120      	movs	r1, #32
 8002f34:	4819      	ldr	r0, [pc, #100]	; (8002f9c <Error_Handler+0xa4>)
 8002f36:	f7fe f803 	bl	8000f40 <HAL_GPIO_WritePin>
  		break;
 8002f3a:	e02e      	b.n	8002f9a <Error_Handler+0xa2>
  	case SYSCONF_ERROR2:
  		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	2120      	movs	r1, #32
 8002f40:	4816      	ldr	r0, [pc, #88]	; (8002f9c <Error_Handler+0xa4>)
 8002f42:	f7fd fffd 	bl	8000f40 <HAL_GPIO_WritePin>
  		break;
 8002f46:	e028      	b.n	8002f9a <Error_Handler+0xa2>
  	case TIM_INIT_ERROR:
  	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8002f48:	2201      	movs	r2, #1
 8002f4a:	2120      	movs	r1, #32
 8002f4c:	4813      	ldr	r0, [pc, #76]	; (8002f9c <Error_Handler+0xa4>)
 8002f4e:	f7fd fff7 	bl	8000f40 <HAL_GPIO_WritePin>
  	  break;
 8002f52:	e022      	b.n	8002f9a <Error_Handler+0xa2>
  	case EN_PWM_ERROR:
  	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8002f54:	2201      	movs	r2, #1
 8002f56:	2120      	movs	r1, #32
 8002f58:	4810      	ldr	r0, [pc, #64]	; (8002f9c <Error_Handler+0xa4>)
 8002f5a:	f7fd fff1 	bl	8000f40 <HAL_GPIO_WritePin>
  	  break;
 8002f5e:	e01c      	b.n	8002f9a <Error_Handler+0xa2>
  	case TIM_CONFIG_ERROR:
  	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8002f60:	2201      	movs	r2, #1
 8002f62:	2120      	movs	r1, #32
 8002f64:	480d      	ldr	r0, [pc, #52]	; (8002f9c <Error_Handler+0xa4>)
 8002f66:	f7fd ffeb 	bl	8000f40 <HAL_GPIO_WritePin>
  	  break;
 8002f6a:	e016      	b.n	8002f9a <Error_Handler+0xa2>
  	case DMA_ERROR:
  	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	2120      	movs	r1, #32
 8002f70:	480a      	ldr	r0, [pc, #40]	; (8002f9c <Error_Handler+0xa4>)
 8002f72:	f7fd ffe5 	bl	8000f40 <HAL_GPIO_WritePin>
  	  break;
 8002f76:	e010      	b.n	8002f9a <Error_Handler+0xa2>
  	case GPIO_ERROR:
  	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8002f78:	2201      	movs	r2, #1
 8002f7a:	2120      	movs	r1, #32
 8002f7c:	4807      	ldr	r0, [pc, #28]	; (8002f9c <Error_Handler+0xa4>)
 8002f7e:	f7fd ffdf 	bl	8000f40 <HAL_GPIO_WritePin>
  	  break;
 8002f82:	e00a      	b.n	8002f9a <Error_Handler+0xa2>
  	case UART_ERROR:
  		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8002f84:	2201      	movs	r2, #1
 8002f86:	2120      	movs	r1, #32
 8002f88:	4804      	ldr	r0, [pc, #16]	; (8002f9c <Error_Handler+0xa4>)
 8002f8a:	f7fd ffd9 	bl	8000f40 <HAL_GPIO_WritePin>
  		break;
 8002f8e:	e004      	b.n	8002f9a <Error_Handler+0xa2>
  	default:
  	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002f90:	2200      	movs	r2, #0
 8002f92:	2120      	movs	r1, #32
 8002f94:	4801      	ldr	r0, [pc, #4]	; (8002f9c <Error_Handler+0xa4>)
 8002f96:	f7fd ffd3 	bl	8000f40 <HAL_GPIO_WritePin>
  	switch(ERROR){
 8002f9a:	e7b2      	b.n	8002f02 <Error_Handler+0xa>
 8002f9c:	40020000 	.word	0x40020000

08002fa0 <check_microSD>:
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
}

void check_microSD (void) {
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
	while(!(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_1))){
 8002fa4:	bf00      	nop
 8002fa6:	2102      	movs	r1, #2
 8002fa8:	4803      	ldr	r0, [pc, #12]	; (8002fb8 <check_microSD+0x18>)
 8002faa:	f7fd ffb1 	bl	8000f10 <HAL_GPIO_ReadPin>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0f8      	beq.n	8002fa6 <check_microSD+0x6>

	}
}
 8002fb4:	bf00      	nop
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40021c00 	.word	0x40021c00

08002fbc <HAL_TIM_PWM_MspInit>:
  * @param htim: TIM handle pointer
  * @retval None
  */

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  // ##-2- Configure the NVIC for DMA #########################################
  // NVIC configuration for DMA transfer complete interrupt
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
  */
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
}
 8002fd4:	bf00      	nop
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002fe2:	e7fe      	b.n	8002fe2 <HardFault_Handler+0x4>

08002fe4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002fe8:	e7fe      	b.n	8002fe8 <MemManage_Handler+0x4>

08002fea <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002fea:	b480      	push	{r7}
 8002fec:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8002fee:	e7fe      	b.n	8002fee <BusFault_Handler+0x4>

08002ff0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002ff4:	e7fe      	b.n	8002ff4 <UsageFault_Handler+0x4>

08002ff6 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	af00      	add	r7, sp, #0
}
 8002ffa:	bf00      	nop
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
}
 8003008:	bf00      	nop
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr

08003012 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8003012:	b480      	push	{r7}
 8003014:	af00      	add	r7, sp, #0
}
 8003016:	bf00      	nop
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8003024:	f7fd faba 	bl	800059c <HAL_IncTick>
}
 8003028:	bf00      	nop
 800302a:	bd80      	pop	{r7, pc}

0800302c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003030:	4b16      	ldr	r3, [pc, #88]	; (800308c <SystemInit+0x60>)
 8003032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003036:	4a15      	ldr	r2, [pc, #84]	; (800308c <SystemInit+0x60>)
 8003038:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800303c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003040:	4b13      	ldr	r3, [pc, #76]	; (8003090 <SystemInit+0x64>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a12      	ldr	r2, [pc, #72]	; (8003090 <SystemInit+0x64>)
 8003046:	f043 0301 	orr.w	r3, r3, #1
 800304a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800304c:	4b10      	ldr	r3, [pc, #64]	; (8003090 <SystemInit+0x64>)
 800304e:	2200      	movs	r2, #0
 8003050:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003052:	4b0f      	ldr	r3, [pc, #60]	; (8003090 <SystemInit+0x64>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a0e      	ldr	r2, [pc, #56]	; (8003090 <SystemInit+0x64>)
 8003058:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800305c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003060:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003062:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <SystemInit+0x64>)
 8003064:	4a0b      	ldr	r2, [pc, #44]	; (8003094 <SystemInit+0x68>)
 8003066:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003068:	4b09      	ldr	r3, [pc, #36]	; (8003090 <SystemInit+0x64>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a08      	ldr	r2, [pc, #32]	; (8003090 <SystemInit+0x64>)
 800306e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003072:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003074:	4b06      	ldr	r3, [pc, #24]	; (8003090 <SystemInit+0x64>)
 8003076:	2200      	movs	r2, #0
 8003078:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800307a:	4b04      	ldr	r3, [pc, #16]	; (800308c <SystemInit+0x60>)
 800307c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003080:	609a      	str	r2, [r3, #8]
#endif
}
 8003082:	bf00      	nop
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	e000ed00 	.word	0xe000ed00
 8003090:	40023800 	.word	0x40023800
 8003094:	24003010 	.word	0x24003010

08003098 <pulse>:
	}
	return;
}

// Pulse
void pulse(void){
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
	volatile uint32_t timeout;
	for (size_t i = 0; i < LED_CFG_STRIP_CNT; i++) {
 800309e:	2300      	movs	r3, #0
 80030a0:	607b      	str	r3, [r7, #4]
 80030a2:	e020      	b.n	80030e6 <pulse+0x4e>
		set_LED_colors((i + 0) % LED_CFG_STRIP_CNT, 0x1F, 0, 0x1F);
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	4b13      	ldr	r3, [pc, #76]	; (80030f4 <pulse+0x5c>)
 80030a8:	fba3 1302 	umull	r1, r3, r3, r2
 80030ac:	0898      	lsrs	r0, r3, #2
 80030ae:	4603      	mov	r3, r0
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4403      	add	r3, r0
 80030b4:	1ad0      	subs	r0, r2, r3
 80030b6:	231f      	movs	r3, #31
 80030b8:	2200      	movs	r2, #0
 80030ba:	211f      	movs	r1, #31
 80030bc:	f000 f850 	bl	8003160 <set_LED_colors>
		//set_LED_colors((i + 5) % LED_CFG_STRIP_CNT, 0, 0x1F, 0);
		//set_LED_colors((i + 6) % LED_CFG_STRIP_CNT, 0, 0x1F, 0);
		//set_LED_colors((i + 7) % LED_CFG_STRIP_CNT, 0, 0x7, 0);
		//set_LED_colors((i + 8) % LED_CFG_STRIP_CNT, 0, 0x7, 0);

		LED_update(1);
 80030c0:	2001      	movs	r0, #1
 80030c2:	f000 f99b 	bl	80033fc <LED_update>
		LED_set_color_all(0, 0, 0);
 80030c6:	2200      	movs	r2, #0
 80030c8:	2100      	movs	r1, #0
 80030ca:	2000      	movs	r0, #0
 80030cc:	f000 f816 	bl	80030fc <LED_set_color_all>
		timeout = 0x7FFFF;
 80030d0:	4b09      	ldr	r3, [pc, #36]	; (80030f8 <pulse+0x60>)
 80030d2:	603b      	str	r3, [r7, #0]
		while (--timeout) {}
 80030d4:	bf00      	nop
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	3b01      	subs	r3, #1
 80030da:	603b      	str	r3, [r7, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1fa      	bne.n	80030d6 <pulse+0x3e>
	for (size_t i = 0; i < LED_CFG_STRIP_CNT; i++) {
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3301      	adds	r3, #1
 80030e4:	607b      	str	r3, [r7, #4]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b04      	cmp	r3, #4
 80030ea:	d9db      	bls.n	80030a4 <pulse+0xc>
	}
	return;
 80030ec:	bf00      	nop
}
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	cccccccd 	.word	0xcccccccd
 80030f8:	0007ffff 	.word	0x0007ffff

080030fc <LED_set_color_all>:
	}
	return;
}


uint8_t LED_set_color_all(uint8_t red, uint8_t green, uint8_t blue){
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	4603      	mov	r3, r0
 8003104:	71fb      	strb	r3, [r7, #7]
 8003106:	460b      	mov	r3, r1
 8003108:	71bb      	strb	r3, [r7, #6]
 800310a:	4613      	mov	r3, r2
 800310c:	717b      	strb	r3, [r7, #5]
	for (size_t led_idx = 0; led_idx < LED_CFG_STRIP_CNT; led_idx++){
 800310e:	2300      	movs	r3, #0
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	e019      	b.n	8003148 <LED_set_color_all+0x4c>
		LED_colors[led_idx * LED_CFG_BYTES_PER_LED + 0] = green;
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	4613      	mov	r3, r2
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	4413      	add	r3, r2
 800311c:	490f      	ldr	r1, [pc, #60]	; (800315c <LED_set_color_all+0x60>)
 800311e:	79ba      	ldrb	r2, [r7, #6]
 8003120:	54ca      	strb	r2, [r1, r3]
		LED_colors[led_idx * LED_CFG_BYTES_PER_LED + 1] = red;
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	4613      	mov	r3, r2
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	4413      	add	r3, r2
 800312a:	3301      	adds	r3, #1
 800312c:	490b      	ldr	r1, [pc, #44]	; (800315c <LED_set_color_all+0x60>)
 800312e:	79fa      	ldrb	r2, [r7, #7]
 8003130:	54ca      	strb	r2, [r1, r3]
		LED_colors[led_idx * LED_CFG_BYTES_PER_LED + 2] = blue;
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	4613      	mov	r3, r2
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	4413      	add	r3, r2
 800313a:	3302      	adds	r3, #2
 800313c:	4907      	ldr	r1, [pc, #28]	; (800315c <LED_set_color_all+0x60>)
 800313e:	797a      	ldrb	r2, [r7, #5]
 8003140:	54ca      	strb	r2, [r1, r3]
	for (size_t led_idx = 0; led_idx < LED_CFG_STRIP_CNT; led_idx++){
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	3301      	adds	r3, #1
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2b04      	cmp	r3, #4
 800314c:	d9e2      	bls.n	8003114 <LED_set_color_all+0x18>
	}
	return 1;
 800314e:	2301      	movs	r3, #1
}
 8003150:	4618      	mov	r0, r3
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	200001a0 	.word	0x200001a0

08003160 <set_LED_colors>:

// Set R,G,B values for a specific LED
// index: LED index in array, starting from '0'
// return 1 if successful, else 0 for fail
uint8_t set_LED_colors(size_t led_idx, uint8_t red, uint8_t green, uint8_t blue){
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	4608      	mov	r0, r1
 800316a:	4611      	mov	r1, r2
 800316c:	461a      	mov	r2, r3
 800316e:	4603      	mov	r3, r0
 8003170:	70fb      	strb	r3, [r7, #3]
 8003172:	460b      	mov	r3, r1
 8003174:	70bb      	strb	r3, [r7, #2]
 8003176:	4613      	mov	r3, r2
 8003178:	707b      	strb	r3, [r7, #1]
	if (led_idx < LED_CFG_STRIP_CNT){
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b04      	cmp	r3, #4
 800317e:	d818      	bhi.n	80031b2 <set_LED_colors+0x52>
		LED_colors[led_idx * LED_CFG_BYTES_PER_LED + 0] = green;
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	4613      	mov	r3, r2
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	4413      	add	r3, r2
 8003188:	490d      	ldr	r1, [pc, #52]	; (80031c0 <set_LED_colors+0x60>)
 800318a:	78ba      	ldrb	r2, [r7, #2]
 800318c:	54ca      	strb	r2, [r1, r3]
		LED_colors[led_idx * LED_CFG_BYTES_PER_LED + 1] = red;
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	4413      	add	r3, r2
 8003196:	3301      	adds	r3, #1
 8003198:	4909      	ldr	r1, [pc, #36]	; (80031c0 <set_LED_colors+0x60>)
 800319a:	78fa      	ldrb	r2, [r7, #3]
 800319c:	54ca      	strb	r2, [r1, r3]
		LED_colors[led_idx * LED_CFG_BYTES_PER_LED + 2] = blue;
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	4613      	mov	r3, r2
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	4413      	add	r3, r2
 80031a6:	3302      	adds	r3, #2
 80031a8:	4905      	ldr	r1, [pc, #20]	; (80031c0 <set_LED_colors+0x60>)
 80031aa:	787a      	ldrb	r2, [r7, #1]
 80031ac:	54ca      	strb	r2, [r1, r3]
		return 1;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e000      	b.n	80031b4 <set_LED_colors+0x54>
	}
	return 0;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr
 80031c0:	200001a0 	.word	0x200001a0

080031c4 <write_PWM_data>:

// Iterate through each byte of LED_colors[] and determine if bit in LED_array[] is a HIGH_BIT or LOW_BIT
uint8_t write_PWM_data(size_t led_idx, uint32_t* LED_array){
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]

	if (led_idx < LED_CFG_STRIP_CNT){
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	d859      	bhi.n	8003288 <write_PWM_data+0xc4>

		// Retrieve color hex values for RGB
		uint8_t green_hex_val = LED_colors[LED_CFG_BYTES_PER_LED * led_idx + 0];
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	4613      	mov	r3, r2
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	4413      	add	r3, r2
 80031dc:	4a2e      	ldr	r2, [pc, #184]	; (8003298 <write_PWM_data+0xd4>)
 80031de:	5cd3      	ldrb	r3, [r2, r3]
 80031e0:	72fb      	strb	r3, [r7, #11]
		uint8_t red_hex_val = LED_colors[LED_CFG_BYTES_PER_LED * led_idx + 1];
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	4613      	mov	r3, r2
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	4413      	add	r3, r2
 80031ea:	3301      	adds	r3, #1
 80031ec:	4a2a      	ldr	r2, [pc, #168]	; (8003298 <write_PWM_data+0xd4>)
 80031ee:	5cd3      	ldrb	r3, [r2, r3]
 80031f0:	72bb      	strb	r3, [r7, #10]
		uint8_t blue_hex_val = LED_colors[LED_CFG_BYTES_PER_LED * led_idx + 2];
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	4613      	mov	r3, r2
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	4413      	add	r3, r2
 80031fa:	3302      	adds	r3, #2
 80031fc:	4a26      	ldr	r2, [pc, #152]	; (8003298 <write_PWM_data+0xd4>)
 80031fe:	5cd3      	ldrb	r3, [r2, r3]
 8003200:	727b      	strb	r3, [r7, #9]

		// Set each 24 bits in LED_array based on hex value. Ex: 0x1F = 8'b00011111, therefore LED_array[0] = LOW_BIT
		for (size_t i = 0; i < NUM_BITS_PER_COLOR; i++){
 8003202:	2300      	movs	r3, #0
 8003204:	60fb      	str	r3, [r7, #12]
 8003206:	e03a      	b.n	800327e <write_PWM_data+0xba>
			LED_array[i] = 			(green_hex_val & (1 << (7 - i))) ? HIGH_BIT : LOW_BIT;		// Set green color
 8003208:	7afa      	ldrb	r2, [r7, #11]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f1c3 0307 	rsb	r3, r3, #7
 8003210:	fa42 f303 	asr.w	r3, r2, r3
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <write_PWM_data+0x5c>
 800321c:	2244      	movs	r2, #68	; 0x44
 800321e:	e000      	b.n	8003222 <write_PWM_data+0x5e>
 8003220:	2222      	movs	r2, #34	; 0x22
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	6839      	ldr	r1, [r7, #0]
 8003228:	440b      	add	r3, r1
 800322a:	601a      	str	r2, [r3, #0]
			LED_array[i + 8] = 	(red_hex_val & (1 << (7 - i))) ? HIGH_BIT : LOW_BIT;			// Set blue color
 800322c:	7aba      	ldrb	r2, [r7, #10]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f1c3 0307 	rsb	r3, r3, #7
 8003234:	fa42 f303 	asr.w	r3, r2, r3
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <write_PWM_data+0x80>
 8003240:	2244      	movs	r2, #68	; 0x44
 8003242:	e000      	b.n	8003246 <write_PWM_data+0x82>
 8003244:	2222      	movs	r2, #34	; 0x22
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	3308      	adds	r3, #8
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	6839      	ldr	r1, [r7, #0]
 800324e:	440b      	add	r3, r1
 8003250:	601a      	str	r2, [r3, #0]
			LED_array[i + 16] = (blue_hex_val & (1 << (7 - i))) ? HIGH_BIT : LOW_BIT;		// Set red color
 8003252:	7a7a      	ldrb	r2, [r7, #9]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f1c3 0307 	rsb	r3, r3, #7
 800325a:	fa42 f303 	asr.w	r3, r2, r3
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <write_PWM_data+0xa6>
 8003266:	2244      	movs	r2, #68	; 0x44
 8003268:	e000      	b.n	800326c <write_PWM_data+0xa8>
 800326a:	2222      	movs	r2, #34	; 0x22
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	3310      	adds	r3, #16
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	6839      	ldr	r1, [r7, #0]
 8003274:	440b      	add	r3, r1
 8003276:	601a      	str	r2, [r3, #0]
		for (size_t i = 0; i < NUM_BITS_PER_COLOR; i++){
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	3301      	adds	r3, #1
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2b07      	cmp	r3, #7
 8003282:	d9c1      	bls.n	8003208 <write_PWM_data+0x44>
		}

		return 1;
 8003284:	2301      	movs	r3, #1
 8003286:	e000      	b.n	800328a <write_PWM_data+0xc6>
	}
	return 0;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3714      	adds	r7, #20
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	200001a0 	.word	0x200001a0

0800329c <LED_reset_pulse>:

uint8_t LED_reset_pulse(uint8_t rst){
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	4603      	mov	r3, r0
 80032a4:	71fb      	strb	r3, [r7, #7]
	rst_flag = rst;		// Set reset flag
 80032a6:	4a42      	ldr	r2, [pc, #264]	; (80033b0 <LED_reset_pulse+0x114>)
 80032a8:	79fb      	ldrb	r3, [r7, #7]
 80032aa:	7013      	strb	r3, [r2, #0]

  hdma_tim2_ch1.Init.Mode = DMA_NORMAL;							// Modify DMA config to Normal Mode
 80032ac:	4b41      	ldr	r3, [pc, #260]	; (80033b4 <LED_reset_pulse+0x118>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	61da      	str	r2, [r3, #28]
  memset(tmp_led_data, 0, sizeof(tmp_led_data));	  // Set all data for tmp_led_data to 0
 80032b2:	22c0      	movs	r2, #192	; 0xc0
 80032b4:	2100      	movs	r1, #0
 80032b6:	4840      	ldr	r0, [pc, #256]	; (80033b8 <LED_reset_pulse+0x11c>)
 80032b8:	f000 fc04 	bl	8003ac4 <memset>

  // Initialize TIM2 DMA handle
  if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK) {
 80032bc:	483d      	ldr	r0, [pc, #244]	; (80033b4 <LED_reset_pulse+0x118>)
 80032be:	f7fd fa9f 	bl	8000800 <HAL_DMA_Init>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d002      	beq.n	80032ce <LED_reset_pulse+0x32>
    Error_Handler(DMA_ERROR);
 80032c8:	2006      	movs	r0, #6
 80032ca:	f7ff fe15 	bl	8002ef8 <Error_Handler>
  }

  // Clear Half Transfer and Transfer Complete flags for DMA1 Stream5
  __HAL_DMA_CLEAR_FLAG(&hdma_tim2_ch1, DMA_FLAG_HTIF1_5);
 80032ce:	4b39      	ldr	r3, [pc, #228]	; (80033b4 <LED_reset_pulse+0x118>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	461a      	mov	r2, r3
 80032d4:	4b39      	ldr	r3, [pc, #228]	; (80033bc <LED_reset_pulse+0x120>)
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d904      	bls.n	80032e4 <LED_reset_pulse+0x48>
 80032da:	4b39      	ldr	r3, [pc, #228]	; (80033c0 <LED_reset_pulse+0x124>)
 80032dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032e0:	60da      	str	r2, [r3, #12]
 80032e2:	e019      	b.n	8003318 <LED_reset_pulse+0x7c>
 80032e4:	4b33      	ldr	r3, [pc, #204]	; (80033b4 <LED_reset_pulse+0x118>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	461a      	mov	r2, r3
 80032ea:	4b36      	ldr	r3, [pc, #216]	; (80033c4 <LED_reset_pulse+0x128>)
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d904      	bls.n	80032fa <LED_reset_pulse+0x5e>
 80032f0:	4b33      	ldr	r3, [pc, #204]	; (80033c0 <LED_reset_pulse+0x124>)
 80032f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032f6:	609a      	str	r2, [r3, #8]
 80032f8:	e00e      	b.n	8003318 <LED_reset_pulse+0x7c>
 80032fa:	4b2e      	ldr	r3, [pc, #184]	; (80033b4 <LED_reset_pulse+0x118>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	461a      	mov	r2, r3
 8003300:	4b31      	ldr	r3, [pc, #196]	; (80033c8 <LED_reset_pulse+0x12c>)
 8003302:	429a      	cmp	r2, r3
 8003304:	d904      	bls.n	8003310 <LED_reset_pulse+0x74>
 8003306:	4b31      	ldr	r3, [pc, #196]	; (80033cc <LED_reset_pulse+0x130>)
 8003308:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800330c:	60da      	str	r2, [r3, #12]
 800330e:	e003      	b.n	8003318 <LED_reset_pulse+0x7c>
 8003310:	4b2e      	ldr	r3, [pc, #184]	; (80033cc <LED_reset_pulse+0x130>)
 8003312:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003316:	609a      	str	r2, [r3, #8]
  __HAL_DMA_CLEAR_FLAG(&hdma_tim2_ch1, DMA_FLAG_TCIF1_5);
 8003318:	4b26      	ldr	r3, [pc, #152]	; (80033b4 <LED_reset_pulse+0x118>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	461a      	mov	r2, r3
 800331e:	4b27      	ldr	r3, [pc, #156]	; (80033bc <LED_reset_pulse+0x120>)
 8003320:	429a      	cmp	r2, r3
 8003322:	d904      	bls.n	800332e <LED_reset_pulse+0x92>
 8003324:	4b26      	ldr	r3, [pc, #152]	; (80033c0 <LED_reset_pulse+0x124>)
 8003326:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800332a:	60da      	str	r2, [r3, #12]
 800332c:	e019      	b.n	8003362 <LED_reset_pulse+0xc6>
 800332e:	4b21      	ldr	r3, [pc, #132]	; (80033b4 <LED_reset_pulse+0x118>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	461a      	mov	r2, r3
 8003334:	4b23      	ldr	r3, [pc, #140]	; (80033c4 <LED_reset_pulse+0x128>)
 8003336:	429a      	cmp	r2, r3
 8003338:	d904      	bls.n	8003344 <LED_reset_pulse+0xa8>
 800333a:	4b21      	ldr	r3, [pc, #132]	; (80033c0 <LED_reset_pulse+0x124>)
 800333c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003340:	609a      	str	r2, [r3, #8]
 8003342:	e00e      	b.n	8003362 <LED_reset_pulse+0xc6>
 8003344:	4b1b      	ldr	r3, [pc, #108]	; (80033b4 <LED_reset_pulse+0x118>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	461a      	mov	r2, r3
 800334a:	4b1f      	ldr	r3, [pc, #124]	; (80033c8 <LED_reset_pulse+0x12c>)
 800334c:	429a      	cmp	r2, r3
 800334e:	d904      	bls.n	800335a <LED_reset_pulse+0xbe>
 8003350:	4b1e      	ldr	r3, [pc, #120]	; (80033cc <LED_reset_pulse+0x130>)
 8003352:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003356:	60da      	str	r2, [r3, #12]
 8003358:	e003      	b.n	8003362 <LED_reset_pulse+0xc6>
 800335a:	4b1c      	ldr	r3, [pc, #112]	; (80033cc <LED_reset_pulse+0x130>)
 800335c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003360:	609a      	str	r2, [r3, #8]

  // Disable Half Transfer Interrupt
  __HAL_DMA_DISABLE_IT(&hdma_tim2_ch1, DMA_IT_HT);
 8003362:	4b14      	ldr	r3, [pc, #80]	; (80033b4 <LED_reset_pulse+0x118>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	4b12      	ldr	r3, [pc, #72]	; (80033b4 <LED_reset_pulse+0x118>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f022 0208 	bic.w	r2, r2, #8
 8003370:	601a      	str	r2, [r3, #0]

  // Enable Complete Transfer Interrupt
  __HAL_DMA_ENABLE_IT(&hdma_tim2_ch1, DMA_IT_TC);
 8003372:	4b10      	ldr	r3, [pc, #64]	; (80033b4 <LED_reset_pulse+0x118>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	4b0e      	ldr	r3, [pc, #56]	; (80033b4 <LED_reset_pulse+0x118>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f042 0210 	orr.w	r2, r2, #16
 8003380:	601a      	str	r2, [r3, #0]

  // Start Reset Pulse. Contains 40 low pulses: 40 x 800kHz = ~50us
  if (HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*)tmp_led_data, 2 * LED_CFG_RAW_BITS_PER_LED) != HAL_OK){
 8003382:	2330      	movs	r3, #48	; 0x30
 8003384:	4a0c      	ldr	r2, [pc, #48]	; (80033b8 <LED_reset_pulse+0x11c>)
 8003386:	2100      	movs	r1, #0
 8003388:	4811      	ldr	r0, [pc, #68]	; (80033d0 <LED_reset_pulse+0x134>)
 800338a:	f7fe fa81 	bl	8001890 <HAL_TIM_PWM_Start_DMA>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d002      	beq.n	800339a <LED_reset_pulse+0xfe>
    Error_Handler(EN_PWM_ERROR);
 8003394:	2002      	movs	r0, #2
 8003396:	f7ff fdaf 	bl	8002ef8 <Error_Handler>
  }
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 800339a:	2201      	movs	r2, #1
 800339c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80033a0:	480c      	ldr	r0, [pc, #48]	; (80033d4 <LED_reset_pulse+0x138>)
 80033a2:	f7fd fdcd 	bl	8000f40 <HAL_GPIO_WritePin>
  return 1;
 80033a6:	2301      	movs	r3, #1
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3708      	adds	r7, #8
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	2000002c 	.word	0x2000002c
 80033b4:	20000030 	.word	0x20000030
 80033b8:	200001b0 	.word	0x200001b0
 80033bc:	40026458 	.word	0x40026458
 80033c0:	40026400 	.word	0x40026400
 80033c4:	400260b8 	.word	0x400260b8
 80033c8:	40026058 	.word	0x40026058
 80033cc:	40026000 	.word	0x40026000
 80033d0:	200000f0 	.word	0x200000f0
 80033d4:	40020400 	.word	0x40020400

080033d8 <led_is_update_finished>:

// return 1 if not updating, 0 if updating process is in progress
uint8_t led_is_update_finished(void) {
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
	return !update_flag;
 80033dc:	4b06      	ldr	r3, [pc, #24]	; (80033f8 <led_is_update_finished+0x20>)
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	bf0c      	ite	eq
 80033e6:	2301      	moveq	r3, #1
 80033e8:	2300      	movne	r3, #0
 80033ea:	b2db      	uxtb	r3, r3
	//return !is_updating;                        /* Return updating flag status */
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	20000090 	.word	0x20000090

080033fc <LED_update>:

// Block = 1 if want to wait until update process is finished
uint8_t LED_update(uint8_t block){
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	4603      	mov	r3, r0
 8003404:	71fb      	strb	r3, [r7, #7]
	if (update_flag) {
 8003406:	4b0d      	ldr	r3, [pc, #52]	; (800343c <LED_update+0x40>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <LED_update+0x18>
		return 0;
 8003410:	2300      	movs	r3, #0
 8003412:	e00f      	b.n	8003434 <LED_update+0x38>
	}
	update_flag = 1;		// Signify that LEDs are being updated
 8003414:	4b09      	ldr	r3, [pc, #36]	; (800343c <LED_update+0x40>)
 8003416:	2201      	movs	r2, #1
 8003418:	701a      	strb	r2, [r3, #0]

	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
	LED_reset_pulse(RESET_AT_START);	// Reset LED scheme with 50us pulse low
 800341a:	2001      	movs	r0, #1
 800341c:	f7ff ff3e 	bl	800329c <LED_reset_pulse>

	if (block){
 8003420:	79fb      	ldrb	r3, [r7, #7]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d005      	beq.n	8003432 <LED_update+0x36>
		while(!led_is_update_finished());
 8003426:	bf00      	nop
 8003428:	f7ff ffd6 	bl	80033d8 <led_is_update_finished>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0fa      	beq.n	8003428 <LED_update+0x2c>
	}

	return 1;
 8003432:	2301      	movs	r3, #1
}
 8003434:	4618      	mov	r0, r3
 8003436:	3708      	adds	r7, #8
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	20000090 	.word	0x20000090

08003440 <led_update_sequence>:

// Update led sequence. Called on TC and HT events.
// At HT event, first 24 elements are transferred
// At TC event, second 24 elements are transferred
void led_update_sequence(uint8_t event) {
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	4603      	mov	r3, r0
 8003448:	71fb      	strb	r3, [r7, #7]

	event = !!event;       // Toggle transfer-complete flag
 800344a:	79fb      	ldrb	r3, [r7, #7]
 800344c:	2b00      	cmp	r3, #0
 800344e:	bf14      	ite	ne
 8003450:	2301      	movne	r3, #1
 8003452:	2300      	moveq	r3, #0
 8003454:	b2db      	uxtb	r3, r3
 8003456:	71fb      	strb	r3, [r7, #7]

	// Check for reset pulse at the end of the PWM stream
	if (rst_flag == RESET_AT_END){
 8003458:	4b72      	ldr	r3, [pc, #456]	; (8003624 <led_update_sequence+0x1e4>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	2b02      	cmp	r3, #2
 800345e:	d10d      	bne.n	800347c <led_update_sequence+0x3c>

		HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);	// Stop DMA
 8003460:	2100      	movs	r1, #0
 8003462:	4871      	ldr	r0, [pc, #452]	; (8003628 <led_update_sequence+0x1e8>)
 8003464:	f7fe fb1a 	bl	8001a9c <HAL_TIM_PWM_Stop_DMA>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8003468:	2200      	movs	r2, #0
 800346a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800346e:	486f      	ldr	r0, [pc, #444]	; (800362c <led_update_sequence+0x1ec>)
 8003470:	f7fd fd66 	bl	8000f40 <HAL_GPIO_WritePin>

		update_flag = NOT_UPDATING;										// No longer updating
 8003474:	4b6e      	ldr	r3, [pc, #440]	; (8003630 <led_update_sequence+0x1f0>)
 8003476:	2200      	movs	r2, #0
 8003478:	701a      	strb	r2, [r3, #0]
		return;
 800347a:	e0cf      	b.n	800361c <led_update_sequence+0x1dc>
	}

	// Check if reset pulse happened at the start of the PWM stream
	if (rst_flag == RESET_AT_START){
 800347c:	4b69      	ldr	r3, [pc, #420]	; (8003624 <led_update_sequence+0x1e4>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d114      	bne.n	80034ae <led_update_sequence+0x6e>
		if (!event) { return; }		// If HT event, return and wait until TC event
 8003484:	79fb      	ldrb	r3, [r7, #7]
 8003486:	2b00      	cmp	r3, #0
 8003488:	f000 80c7 	beq.w	800361a <led_update_sequence+0x1da>

		HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);	// Disable PWM generation to update LED sequence
 800348c:	2100      	movs	r1, #0
 800348e:	4866      	ldr	r0, [pc, #408]	; (8003628 <led_update_sequence+0x1e8>)
 8003490:	f7fe fb04 	bl	8001a9c <HAL_TIM_PWM_Stop_DMA>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8003494:	2200      	movs	r2, #0
 8003496:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800349a:	4864      	ldr	r0, [pc, #400]	; (800362c <led_update_sequence+0x1ec>)
 800349c:	f7fd fd50 	bl	8000f40 <HAL_GPIO_WritePin>

		rst_flag = NOT_RESETTING;											// No longer resetting
 80034a0:	4b60      	ldr	r3, [pc, #384]	; (8003624 <led_update_sequence+0x1e4>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	701a      	strb	r2, [r3, #0]

		current_led = 0;
 80034a6:	4b63      	ldr	r3, [pc, #396]	; (8003634 <led_update_sequence+0x1f4>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	e004      	b.n	80034b8 <led_update_sequence+0x78>
	} else {

	// Not resetting, move to next LED and process data
		current_led++;	// Move to next LED
 80034ae:	4b61      	ldr	r3, [pc, #388]	; (8003634 <led_update_sequence+0x1f4>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	3301      	adds	r3, #1
 80034b4:	4a5f      	ldr	r2, [pc, #380]	; (8003634 <led_update_sequence+0x1f4>)
 80034b6:	6013      	str	r3, [r2, #0]
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
	}

	// Prepare data for the next LED
	if (current_led < LED_CFG_STRIP_CNT){
 80034b8:	4b5e      	ldr	r3, [pc, #376]	; (8003634 <led_update_sequence+0x1f4>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b04      	cmp	r3, #4
 80034be:	f200 809b 	bhi.w	80035f8 <led_update_sequence+0x1b8>

		// 1. Write PWM signal for first LED (current_led = 0) into first-half of DMA buffer
		// 2. Write PWM signal for second LED (current_led = 1) into second-half of DMA buffer
		// 3. Set DMA to circular, clear interrupt flags and start DMA PWM generation
		// 4. Write PWM signal for third and beyond LEDs (current_led >= 2)
		if ((current_led == 0) || !event) {
 80034c2:	4b5c      	ldr	r3, [pc, #368]	; (8003634 <led_update_sequence+0x1f4>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d002      	beq.n	80034d0 <led_update_sequence+0x90>
 80034ca:	79fb      	ldrb	r3, [r7, #7]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d106      	bne.n	80034de <led_update_sequence+0x9e>
			write_PWM_data(current_led, &tmp_led_data[0]);	// Step 1
 80034d0:	4b58      	ldr	r3, [pc, #352]	; (8003634 <led_update_sequence+0x1f4>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4958      	ldr	r1, [pc, #352]	; (8003638 <led_update_sequence+0x1f8>)
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff fe74 	bl	80031c4 <write_PWM_data>
 80034dc:	e005      	b.n	80034ea <led_update_sequence+0xaa>
		} else {
			write_PWM_data(current_led, &tmp_led_data[LED_CFG_RAW_BITS_PER_LED]);	// Step 4
 80034de:	4b55      	ldr	r3, [pc, #340]	; (8003634 <led_update_sequence+0x1f4>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4956      	ldr	r1, [pc, #344]	; (800363c <led_update_sequence+0x1fc>)
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7ff fe6d 	bl	80031c4 <write_PWM_data>
		}

		if (current_led == 0){
 80034ea:	4b52      	ldr	r3, [pc, #328]	; (8003634 <led_update_sequence+0x1f4>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f040 8094 	bne.w	800361c <led_update_sequence+0x1dc>

			current_led++;
 80034f4:	4b4f      	ldr	r3, [pc, #316]	; (8003634 <led_update_sequence+0x1f4>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	3301      	adds	r3, #1
 80034fa:	4a4e      	ldr	r2, [pc, #312]	; (8003634 <led_update_sequence+0x1f4>)
 80034fc:	6013      	str	r3, [r2, #0]
			write_PWM_data(current_led, &tmp_led_data[LED_CFG_RAW_BITS_PER_LED]);	// Step 2
 80034fe:	4b4d      	ldr	r3, [pc, #308]	; (8003634 <led_update_sequence+0x1f4>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	494e      	ldr	r1, [pc, #312]	; (800363c <led_update_sequence+0x1fc>)
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff fe5d 	bl	80031c4 <write_PWM_data>

		  hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;										// Step 3
 800350a:	4b4d      	ldr	r3, [pc, #308]	; (8003640 <led_update_sequence+0x200>)
 800350c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003510:	61da      	str	r2, [r3, #28]
		  // Initialize TIM2 DMA handle
		  if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK) {
 8003512:	484b      	ldr	r0, [pc, #300]	; (8003640 <led_update_sequence+0x200>)
 8003514:	f7fd f974 	bl	8000800 <HAL_DMA_Init>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d002      	beq.n	8003524 <led_update_sequence+0xe4>
		    Error_Handler(DMA_ERROR);
 800351e:	2006      	movs	r0, #6
 8003520:	f7ff fcea 	bl	8002ef8 <Error_Handler>
		  }

		  __HAL_DMA_CLEAR_FLAG(&hdma_tim2_ch1, DMA_FLAG_HTIF1_5);
 8003524:	4b46      	ldr	r3, [pc, #280]	; (8003640 <led_update_sequence+0x200>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	461a      	mov	r2, r3
 800352a:	4b46      	ldr	r3, [pc, #280]	; (8003644 <led_update_sequence+0x204>)
 800352c:	429a      	cmp	r2, r3
 800352e:	d904      	bls.n	800353a <led_update_sequence+0xfa>
 8003530:	4b45      	ldr	r3, [pc, #276]	; (8003648 <led_update_sequence+0x208>)
 8003532:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003536:	60da      	str	r2, [r3, #12]
 8003538:	e019      	b.n	800356e <led_update_sequence+0x12e>
 800353a:	4b41      	ldr	r3, [pc, #260]	; (8003640 <led_update_sequence+0x200>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	461a      	mov	r2, r3
 8003540:	4b42      	ldr	r3, [pc, #264]	; (800364c <led_update_sequence+0x20c>)
 8003542:	429a      	cmp	r2, r3
 8003544:	d904      	bls.n	8003550 <led_update_sequence+0x110>
 8003546:	4b40      	ldr	r3, [pc, #256]	; (8003648 <led_update_sequence+0x208>)
 8003548:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800354c:	609a      	str	r2, [r3, #8]
 800354e:	e00e      	b.n	800356e <led_update_sequence+0x12e>
 8003550:	4b3b      	ldr	r3, [pc, #236]	; (8003640 <led_update_sequence+0x200>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	461a      	mov	r2, r3
 8003556:	4b3e      	ldr	r3, [pc, #248]	; (8003650 <led_update_sequence+0x210>)
 8003558:	429a      	cmp	r2, r3
 800355a:	d904      	bls.n	8003566 <led_update_sequence+0x126>
 800355c:	4b3d      	ldr	r3, [pc, #244]	; (8003654 <led_update_sequence+0x214>)
 800355e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003562:	60da      	str	r2, [r3, #12]
 8003564:	e003      	b.n	800356e <led_update_sequence+0x12e>
 8003566:	4b3b      	ldr	r3, [pc, #236]	; (8003654 <led_update_sequence+0x214>)
 8003568:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800356c:	609a      	str	r2, [r3, #8]
		  __HAL_DMA_CLEAR_FLAG(&hdma_tim2_ch1, DMA_FLAG_TCIF1_5);
 800356e:	4b34      	ldr	r3, [pc, #208]	; (8003640 <led_update_sequence+0x200>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	461a      	mov	r2, r3
 8003574:	4b33      	ldr	r3, [pc, #204]	; (8003644 <led_update_sequence+0x204>)
 8003576:	429a      	cmp	r2, r3
 8003578:	d904      	bls.n	8003584 <led_update_sequence+0x144>
 800357a:	4b33      	ldr	r3, [pc, #204]	; (8003648 <led_update_sequence+0x208>)
 800357c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003580:	60da      	str	r2, [r3, #12]
 8003582:	e019      	b.n	80035b8 <led_update_sequence+0x178>
 8003584:	4b2e      	ldr	r3, [pc, #184]	; (8003640 <led_update_sequence+0x200>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	461a      	mov	r2, r3
 800358a:	4b30      	ldr	r3, [pc, #192]	; (800364c <led_update_sequence+0x20c>)
 800358c:	429a      	cmp	r2, r3
 800358e:	d904      	bls.n	800359a <led_update_sequence+0x15a>
 8003590:	4b2d      	ldr	r3, [pc, #180]	; (8003648 <led_update_sequence+0x208>)
 8003592:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003596:	609a      	str	r2, [r3, #8]
 8003598:	e00e      	b.n	80035b8 <led_update_sequence+0x178>
 800359a:	4b29      	ldr	r3, [pc, #164]	; (8003640 <led_update_sequence+0x200>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	461a      	mov	r2, r3
 80035a0:	4b2b      	ldr	r3, [pc, #172]	; (8003650 <led_update_sequence+0x210>)
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d904      	bls.n	80035b0 <led_update_sequence+0x170>
 80035a6:	4b2b      	ldr	r3, [pc, #172]	; (8003654 <led_update_sequence+0x214>)
 80035a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035ac:	60da      	str	r2, [r3, #12]
 80035ae:	e003      	b.n	80035b8 <led_update_sequence+0x178>
 80035b0:	4b28      	ldr	r3, [pc, #160]	; (8003654 <led_update_sequence+0x214>)
 80035b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035b6:	609a      	str	r2, [r3, #8]

		  __HAL_DMA_ENABLE_IT(&hdma_tim2_ch1, DMA_IT_HT);	// Enable interrupt for half-transfer event
 80035b8:	4b21      	ldr	r3, [pc, #132]	; (8003640 <led_update_sequence+0x200>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	4b20      	ldr	r3, [pc, #128]	; (8003640 <led_update_sequence+0x200>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0208 	orr.w	r2, r2, #8
 80035c6:	601a      	str	r2, [r3, #0]

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80035c8:	2201      	movs	r2, #1
 80035ca:	2101      	movs	r1, #1
 80035cc:	4817      	ldr	r0, [pc, #92]	; (800362c <led_update_sequence+0x1ec>)
 80035ce:	f7fd fcb7 	bl	8000f40 <HAL_GPIO_WritePin>
		  // Start PWM generation
		  if (HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*)tmp_led_data, 2 * LED_CFG_RAW_BITS_PER_LED) != HAL_OK){
 80035d2:	2330      	movs	r3, #48	; 0x30
 80035d4:	4a18      	ldr	r2, [pc, #96]	; (8003638 <led_update_sequence+0x1f8>)
 80035d6:	2100      	movs	r1, #0
 80035d8:	4813      	ldr	r0, [pc, #76]	; (8003628 <led_update_sequence+0x1e8>)
 80035da:	f7fe f959 	bl	8001890 <HAL_TIM_PWM_Start_DMA>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d002      	beq.n	80035ea <led_update_sequence+0x1aa>
		    Error_Handler(EN_PWM_ERROR);
 80035e4:	2002      	movs	r0, #2
 80035e6:	f7ff fc87 	bl	8002ef8 <Error_Handler>
		  }
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80035ea:	2201      	movs	r2, #1
 80035ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80035f0:	480e      	ldr	r0, [pc, #56]	; (800362c <led_update_sequence+0x1ec>)
 80035f2:	f7fd fca5 	bl	8000f40 <HAL_GPIO_WritePin>
 80035f6:	e011      	b.n	800361c <led_update_sequence+0x1dc>
		}

	// When all LEDs have been lit up, wait for all data to be transmitted before modifying DMA
	// !TC && (LED_CFG_STRIP_CNT & 0x01): Half-Transfer event occurred and even-numbered LED
	// TC && !(LED_CFG_STRIP_CNT & 0x01): Transfer-Complete event occured and odd-numbered LED
	} else if ((!event && (LED_CFG_STRIP_CNT & 0x01)) || (event && !(LED_CFG_STRIP_CNT & 0x01))) {
 80035f8:	79fb      	ldrb	r3, [r7, #7]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10e      	bne.n	800361c <led_update_sequence+0x1dc>
		HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 80035fe:	2100      	movs	r1, #0
 8003600:	4809      	ldr	r0, [pc, #36]	; (8003628 <led_update_sequence+0x1e8>)
 8003602:	f7fe fa4b 	bl	8001a9c <HAL_TIM_PWM_Stop_DMA>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8003606:	2200      	movs	r2, #0
 8003608:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800360c:	4807      	ldr	r0, [pc, #28]	; (800362c <led_update_sequence+0x1ec>)
 800360e:	f7fd fc97 	bl	8000f40 <HAL_GPIO_WritePin>
		LED_reset_pulse(RESET_AT_END);
 8003612:	2002      	movs	r0, #2
 8003614:	f7ff fe42 	bl	800329c <LED_reset_pulse>
 8003618:	e000      	b.n	800361c <led_update_sequence+0x1dc>
		if (!event) { return; }		// If HT event, return and wait until TC event
 800361a:	bf00      	nop
	}

}
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	2000002c 	.word	0x2000002c
 8003628:	200000f0 	.word	0x200000f0
 800362c:	40020400 	.word	0x40020400
 8003630:	20000090 	.word	0x20000090
 8003634:	200000d0 	.word	0x200000d0
 8003638:	200001b0 	.word	0x200001b0
 800363c:	20000210 	.word	0x20000210
 8003640:	20000030 	.word	0x20000030
 8003644:	40026458 	.word	0x40026458
 8003648:	40026400 	.word	0x40026400
 800364c:	400260b8 	.word	0x400260b8
 8003650:	40026058 	.word	0x40026058
 8003654:	40026000 	.word	0x40026000

08003658 <DMA1_Stream5_IRQHandler>:


// DMA1 Stream 5 Global Interrupt
void DMA1_Stream5_IRQHandler(void){
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
	// Check for Half-Transfer (HT) event
	if (__HAL_DMA_GET_FLAG(&hdma_tim2_ch1, DMA_FLAG_HTIF1_5)){
 800365c:	4b6a      	ldr	r3, [pc, #424]	; (8003808 <DMA1_Stream5_IRQHandler+0x1b0>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	461a      	mov	r2, r3
 8003662:	4b6a      	ldr	r3, [pc, #424]	; (800380c <DMA1_Stream5_IRQHandler+0x1b4>)
 8003664:	429a      	cmp	r2, r3
 8003666:	d909      	bls.n	800367c <DMA1_Stream5_IRQHandler+0x24>
 8003668:	4b69      	ldr	r3, [pc, #420]	; (8003810 <DMA1_Stream5_IRQHandler+0x1b8>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003670:	2b00      	cmp	r3, #0
 8003672:	bf14      	ite	ne
 8003674:	2301      	movne	r3, #1
 8003676:	2300      	moveq	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	e028      	b.n	80036ce <DMA1_Stream5_IRQHandler+0x76>
 800367c:	4b62      	ldr	r3, [pc, #392]	; (8003808 <DMA1_Stream5_IRQHandler+0x1b0>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	461a      	mov	r2, r3
 8003682:	4b64      	ldr	r3, [pc, #400]	; (8003814 <DMA1_Stream5_IRQHandler+0x1bc>)
 8003684:	429a      	cmp	r2, r3
 8003686:	d909      	bls.n	800369c <DMA1_Stream5_IRQHandler+0x44>
 8003688:	4b61      	ldr	r3, [pc, #388]	; (8003810 <DMA1_Stream5_IRQHandler+0x1b8>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003690:	2b00      	cmp	r3, #0
 8003692:	bf14      	ite	ne
 8003694:	2301      	movne	r3, #1
 8003696:	2300      	moveq	r3, #0
 8003698:	b2db      	uxtb	r3, r3
 800369a:	e018      	b.n	80036ce <DMA1_Stream5_IRQHandler+0x76>
 800369c:	4b5a      	ldr	r3, [pc, #360]	; (8003808 <DMA1_Stream5_IRQHandler+0x1b0>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	461a      	mov	r2, r3
 80036a2:	4b5d      	ldr	r3, [pc, #372]	; (8003818 <DMA1_Stream5_IRQHandler+0x1c0>)
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d909      	bls.n	80036bc <DMA1_Stream5_IRQHandler+0x64>
 80036a8:	4b5c      	ldr	r3, [pc, #368]	; (800381c <DMA1_Stream5_IRQHandler+0x1c4>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	bf14      	ite	ne
 80036b4:	2301      	movne	r3, #1
 80036b6:	2300      	moveq	r3, #0
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	e008      	b.n	80036ce <DMA1_Stream5_IRQHandler+0x76>
 80036bc:	4b57      	ldr	r3, [pc, #348]	; (800381c <DMA1_Stream5_IRQHandler+0x1c4>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	bf14      	ite	ne
 80036c8:	2301      	movne	r3, #1
 80036ca:	2300      	moveq	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d02e      	beq.n	8003730 <DMA1_Stream5_IRQHandler+0xd8>
	  __HAL_DMA_CLEAR_FLAG(&hdma_tim2_ch1, DMA_FLAG_HTIF1_5);
 80036d2:	4b4d      	ldr	r3, [pc, #308]	; (8003808 <DMA1_Stream5_IRQHandler+0x1b0>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	461a      	mov	r2, r3
 80036d8:	4b4c      	ldr	r3, [pc, #304]	; (800380c <DMA1_Stream5_IRQHandler+0x1b4>)
 80036da:	429a      	cmp	r2, r3
 80036dc:	d904      	bls.n	80036e8 <DMA1_Stream5_IRQHandler+0x90>
 80036de:	4b4c      	ldr	r3, [pc, #304]	; (8003810 <DMA1_Stream5_IRQHandler+0x1b8>)
 80036e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036e4:	60da      	str	r2, [r3, #12]
 80036e6:	e019      	b.n	800371c <DMA1_Stream5_IRQHandler+0xc4>
 80036e8:	4b47      	ldr	r3, [pc, #284]	; (8003808 <DMA1_Stream5_IRQHandler+0x1b0>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	461a      	mov	r2, r3
 80036ee:	4b49      	ldr	r3, [pc, #292]	; (8003814 <DMA1_Stream5_IRQHandler+0x1bc>)
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d904      	bls.n	80036fe <DMA1_Stream5_IRQHandler+0xa6>
 80036f4:	4b46      	ldr	r3, [pc, #280]	; (8003810 <DMA1_Stream5_IRQHandler+0x1b8>)
 80036f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036fa:	609a      	str	r2, [r3, #8]
 80036fc:	e00e      	b.n	800371c <DMA1_Stream5_IRQHandler+0xc4>
 80036fe:	4b42      	ldr	r3, [pc, #264]	; (8003808 <DMA1_Stream5_IRQHandler+0x1b0>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	461a      	mov	r2, r3
 8003704:	4b44      	ldr	r3, [pc, #272]	; (8003818 <DMA1_Stream5_IRQHandler+0x1c0>)
 8003706:	429a      	cmp	r2, r3
 8003708:	d904      	bls.n	8003714 <DMA1_Stream5_IRQHandler+0xbc>
 800370a:	4b44      	ldr	r3, [pc, #272]	; (800381c <DMA1_Stream5_IRQHandler+0x1c4>)
 800370c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003710:	60da      	str	r2, [r3, #12]
 8003712:	e003      	b.n	800371c <DMA1_Stream5_IRQHandler+0xc4>
 8003714:	4b41      	ldr	r3, [pc, #260]	; (800381c <DMA1_Stream5_IRQHandler+0x1c4>)
 8003716:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800371a:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800371c:	2201      	movs	r2, #1
 800371e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003722:	483f      	ldr	r0, [pc, #252]	; (8003820 <DMA1_Stream5_IRQHandler+0x1c8>)
 8003724:	f7fd fc0c 	bl	8000f40 <HAL_GPIO_WritePin>
	  led_update_sequence(HT_EVENT);
 8003728:	2000      	movs	r0, #0
 800372a:	f7ff fe89 	bl	8003440 <led_update_sequence>
	} else if (__HAL_DMA_GET_FLAG(&hdma_tim2_ch1, DMA_FLAG_TCIF1_5)) {
	  __HAL_DMA_CLEAR_FLAG(&hdma_tim2_ch1, DMA_FLAG_TCIF1_5);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
	  led_update_sequence(TC_EVENT);
	}
}
 800372e:	e068      	b.n	8003802 <DMA1_Stream5_IRQHandler+0x1aa>
	} else if (__HAL_DMA_GET_FLAG(&hdma_tim2_ch1, DMA_FLAG_TCIF1_5)) {
 8003730:	4b35      	ldr	r3, [pc, #212]	; (8003808 <DMA1_Stream5_IRQHandler+0x1b0>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	461a      	mov	r2, r3
 8003736:	4b35      	ldr	r3, [pc, #212]	; (800380c <DMA1_Stream5_IRQHandler+0x1b4>)
 8003738:	429a      	cmp	r2, r3
 800373a:	d909      	bls.n	8003750 <DMA1_Stream5_IRQHandler+0xf8>
 800373c:	4b34      	ldr	r3, [pc, #208]	; (8003810 <DMA1_Stream5_IRQHandler+0x1b8>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003744:	2b00      	cmp	r3, #0
 8003746:	bf14      	ite	ne
 8003748:	2301      	movne	r3, #1
 800374a:	2300      	moveq	r3, #0
 800374c:	b2db      	uxtb	r3, r3
 800374e:	e028      	b.n	80037a2 <DMA1_Stream5_IRQHandler+0x14a>
 8003750:	4b2d      	ldr	r3, [pc, #180]	; (8003808 <DMA1_Stream5_IRQHandler+0x1b0>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	461a      	mov	r2, r3
 8003756:	4b2f      	ldr	r3, [pc, #188]	; (8003814 <DMA1_Stream5_IRQHandler+0x1bc>)
 8003758:	429a      	cmp	r2, r3
 800375a:	d909      	bls.n	8003770 <DMA1_Stream5_IRQHandler+0x118>
 800375c:	4b2c      	ldr	r3, [pc, #176]	; (8003810 <DMA1_Stream5_IRQHandler+0x1b8>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003764:	2b00      	cmp	r3, #0
 8003766:	bf14      	ite	ne
 8003768:	2301      	movne	r3, #1
 800376a:	2300      	moveq	r3, #0
 800376c:	b2db      	uxtb	r3, r3
 800376e:	e018      	b.n	80037a2 <DMA1_Stream5_IRQHandler+0x14a>
 8003770:	4b25      	ldr	r3, [pc, #148]	; (8003808 <DMA1_Stream5_IRQHandler+0x1b0>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	461a      	mov	r2, r3
 8003776:	4b28      	ldr	r3, [pc, #160]	; (8003818 <DMA1_Stream5_IRQHandler+0x1c0>)
 8003778:	429a      	cmp	r2, r3
 800377a:	d909      	bls.n	8003790 <DMA1_Stream5_IRQHandler+0x138>
 800377c:	4b27      	ldr	r3, [pc, #156]	; (800381c <DMA1_Stream5_IRQHandler+0x1c4>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003784:	2b00      	cmp	r3, #0
 8003786:	bf14      	ite	ne
 8003788:	2301      	movne	r3, #1
 800378a:	2300      	moveq	r3, #0
 800378c:	b2db      	uxtb	r3, r3
 800378e:	e008      	b.n	80037a2 <DMA1_Stream5_IRQHandler+0x14a>
 8003790:	4b22      	ldr	r3, [pc, #136]	; (800381c <DMA1_Stream5_IRQHandler+0x1c4>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003798:	2b00      	cmp	r3, #0
 800379a:	bf14      	ite	ne
 800379c:	2301      	movne	r3, #1
 800379e:	2300      	moveq	r3, #0
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d02d      	beq.n	8003802 <DMA1_Stream5_IRQHandler+0x1aa>
	  __HAL_DMA_CLEAR_FLAG(&hdma_tim2_ch1, DMA_FLAG_TCIF1_5);
 80037a6:	4b18      	ldr	r3, [pc, #96]	; (8003808 <DMA1_Stream5_IRQHandler+0x1b0>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	461a      	mov	r2, r3
 80037ac:	4b17      	ldr	r3, [pc, #92]	; (800380c <DMA1_Stream5_IRQHandler+0x1b4>)
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d904      	bls.n	80037bc <DMA1_Stream5_IRQHandler+0x164>
 80037b2:	4b17      	ldr	r3, [pc, #92]	; (8003810 <DMA1_Stream5_IRQHandler+0x1b8>)
 80037b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037b8:	60da      	str	r2, [r3, #12]
 80037ba:	e019      	b.n	80037f0 <DMA1_Stream5_IRQHandler+0x198>
 80037bc:	4b12      	ldr	r3, [pc, #72]	; (8003808 <DMA1_Stream5_IRQHandler+0x1b0>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	461a      	mov	r2, r3
 80037c2:	4b14      	ldr	r3, [pc, #80]	; (8003814 <DMA1_Stream5_IRQHandler+0x1bc>)
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d904      	bls.n	80037d2 <DMA1_Stream5_IRQHandler+0x17a>
 80037c8:	4b11      	ldr	r3, [pc, #68]	; (8003810 <DMA1_Stream5_IRQHandler+0x1b8>)
 80037ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037ce:	609a      	str	r2, [r3, #8]
 80037d0:	e00e      	b.n	80037f0 <DMA1_Stream5_IRQHandler+0x198>
 80037d2:	4b0d      	ldr	r3, [pc, #52]	; (8003808 <DMA1_Stream5_IRQHandler+0x1b0>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	461a      	mov	r2, r3
 80037d8:	4b0f      	ldr	r3, [pc, #60]	; (8003818 <DMA1_Stream5_IRQHandler+0x1c0>)
 80037da:	429a      	cmp	r2, r3
 80037dc:	d904      	bls.n	80037e8 <DMA1_Stream5_IRQHandler+0x190>
 80037de:	4b0f      	ldr	r3, [pc, #60]	; (800381c <DMA1_Stream5_IRQHandler+0x1c4>)
 80037e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037e4:	60da      	str	r2, [r3, #12]
 80037e6:	e003      	b.n	80037f0 <DMA1_Stream5_IRQHandler+0x198>
 80037e8:	4b0c      	ldr	r3, [pc, #48]	; (800381c <DMA1_Stream5_IRQHandler+0x1c4>)
 80037ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037ee:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80037f0:	2200      	movs	r2, #0
 80037f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80037f6:	480a      	ldr	r0, [pc, #40]	; (8003820 <DMA1_Stream5_IRQHandler+0x1c8>)
 80037f8:	f7fd fba2 	bl	8000f40 <HAL_GPIO_WritePin>
	  led_update_sequence(TC_EVENT);
 80037fc:	2001      	movs	r0, #1
 80037fe:	f7ff fe1f 	bl	8003440 <led_update_sequence>
}
 8003802:	bf00      	nop
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	20000030 	.word	0x20000030
 800380c:	40026458 	.word	0x40026458
 8003810:	40026400 	.word	0x40026400
 8003814:	400260b8 	.word	0x400260b8
 8003818:	40026058 	.word	0x40026058
 800381c:	40026000 	.word	0x40026000
 8003820:	40020000 	.word	0x40020000

08003824 <LED_Init>:


void LED_Init(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
  /* ------------- */
  /*  GPIO Config  */
  /* ------------- */

  // Configure TIM2_Channel 1 (PA0) as output, push-pull and alternate function mode
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800382a:	4b77      	ldr	r3, [pc, #476]	; (8003a08 <LED_Init+0x1e4>)
 800382c:	2201      	movs	r2, #1
 800382e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003830:	4b75      	ldr	r3, [pc, #468]	; (8003a08 <LED_Init+0x1e4>)
 8003832:	2202      	movs	r2, #2
 8003834:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003836:	4b74      	ldr	r3, [pc, #464]	; (8003a08 <LED_Init+0x1e4>)
 8003838:	2200      	movs	r2, #0
 800383a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800383c:	4b72      	ldr	r3, [pc, #456]	; (8003a08 <LED_Init+0x1e4>)
 800383e:	2203      	movs	r2, #3
 8003840:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003842:	4b71      	ldr	r3, [pc, #452]	; (8003a08 <LED_Init+0x1e4>)
 8003844:	2201      	movs	r2, #1
 8003846:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003848:	496f      	ldr	r1, [pc, #444]	; (8003a08 <LED_Init+0x1e4>)
 800384a:	4870      	ldr	r0, [pc, #448]	; (8003a0c <LED_Init+0x1e8>)
 800384c:	f7fd f9de 	bl	8000c0c <HAL_GPIO_Init>

  // Configure GPIO pin: PA8, debugging for DMA IRQ
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8003850:	2200      	movs	r2, #0
 8003852:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003856:	486d      	ldr	r0, [pc, #436]	; (8003a0c <LED_Init+0x1e8>)
 8003858:	f7fd fb72 	bl	8000f40 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800385c:	4b6a      	ldr	r3, [pc, #424]	; (8003a08 <LED_Init+0x1e4>)
 800385e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003862:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003864:	4b68      	ldr	r3, [pc, #416]	; (8003a08 <LED_Init+0x1e4>)
 8003866:	2201      	movs	r2, #1
 8003868:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800386a:	4b67      	ldr	r3, [pc, #412]	; (8003a08 <LED_Init+0x1e4>)
 800386c:	2200      	movs	r2, #0
 800386e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003870:	4965      	ldr	r1, [pc, #404]	; (8003a08 <LED_Init+0x1e4>)
 8003872:	4866      	ldr	r0, [pc, #408]	; (8003a0c <LED_Init+0x1e8>)
 8003874:	f7fd f9ca 	bl	8000c0c <HAL_GPIO_Init>

  // Configure GPIO pin: PB0, PB10, debugging for is_updating flag
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8003878:	2200      	movs	r2, #0
 800387a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800387e:	4864      	ldr	r0, [pc, #400]	; (8003a10 <LED_Init+0x1ec>)
 8003880:	f7fd fb5e 	bl	8000f40 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8003884:	2200      	movs	r2, #0
 8003886:	2101      	movs	r1, #1
 8003888:	4861      	ldr	r0, [pc, #388]	; (8003a10 <LED_Init+0x1ec>)
 800388a:	f7fd fb59 	bl	8000f40 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_0;
 800388e:	4b5e      	ldr	r3, [pc, #376]	; (8003a08 <LED_Init+0x1e4>)
 8003890:	f240 4201 	movw	r2, #1025	; 0x401
 8003894:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003896:	4b5c      	ldr	r3, [pc, #368]	; (8003a08 <LED_Init+0x1e4>)
 8003898:	2201      	movs	r2, #1
 800389a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800389c:	4b5a      	ldr	r3, [pc, #360]	; (8003a08 <LED_Init+0x1e4>)
 800389e:	2200      	movs	r2, #0
 80038a0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038a2:	4959      	ldr	r1, [pc, #356]	; (8003a08 <LED_Init+0x1e4>)
 80038a4:	485a      	ldr	r0, [pc, #360]	; (8003a10 <LED_Init+0x1ec>)
 80038a6:	f7fd f9b1 	bl	8000c0c <HAL_GPIO_Init>
  /* -------------- */
  /* TIM2 Channel 1 */
  /* -------------- */

  // Enable TIM2 clock
  __HAL_RCC_TIM2_CLK_ENABLE();
 80038aa:	2300      	movs	r3, #0
 80038ac:	607b      	str	r3, [r7, #4]
 80038ae:	4b59      	ldr	r3, [pc, #356]	; (8003a14 <LED_Init+0x1f0>)
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	4a58      	ldr	r2, [pc, #352]	; (8003a14 <LED_Init+0x1f0>)
 80038b4:	f043 0301 	orr.w	r3, r3, #1
 80038b8:	6413      	str	r3, [r2, #64]	; 0x40
 80038ba:	4b56      	ldr	r3, [pc, #344]	; (8003a14 <LED_Init+0x1f0>)
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	607b      	str	r3, [r7, #4]
 80038c4:	687b      	ldr	r3, [r7, #4]

  // TIM Time Base handle Structure definition
  // Period = TIM2_counter_clk / PWM_freq - 1
  // Period = 84MHz / 800kHz - 1 = 104
  htim2.Instance               = TIM2;
 80038c6:	4b54      	ldr	r3, [pc, #336]	; (8003a18 <LED_Init+0x1f4>)
 80038c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80038cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler         = 0;										// Set to 0 to acheive max frequency for timer at 84MHz
 80038ce:	4b52      	ldr	r3, [pc, #328]	; (8003a18 <LED_Init+0x1f4>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode       = TIM_COUNTERMODE_UP;
 80038d4:	4b50      	ldr	r3, [pc, #320]	; (8003a18 <LED_Init+0x1f4>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period            = TIM_PERIOD;
 80038da:	4b4f      	ldr	r3, [pc, #316]	; (8003a18 <LED_Init+0x1f4>)
 80038dc:	2268      	movs	r2, #104	; 0x68
 80038de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 80038e0:	4b4d      	ldr	r3, [pc, #308]	; (8003a18 <LED_Init+0x1f4>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;	//TIM_AUTORELOAD_PRELOAD_DISABLE
 80038e6:	4b4c      	ldr	r3, [pc, #304]	; (8003a18 <LED_Init+0x1f4>)
 80038e8:	2280      	movs	r2, #128	; 0x80
 80038ea:	619a      	str	r2, [r3, #24]

  // TIM2 interrupt Init
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80038ec:	2200      	movs	r2, #0
 80038ee:	2100      	movs	r1, #0
 80038f0:	201c      	movs	r0, #28
 80038f2:	f7fc ff4e 	bl	8000792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80038f6:	201c      	movs	r0, #28
 80038f8:	f7fc ff67 	bl	80007ca <HAL_NVIC_EnableIRQ>

  // Note: HAL_TIM_PWM_Init() calls HAL_TIM_PWM_MspInit()
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 80038fc:	4846      	ldr	r0, [pc, #280]	; (8003a18 <LED_Init+0x1f4>)
 80038fe:	f7fd ff9b 	bl	8001838 <HAL_TIM_PWM_Init>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d002      	beq.n	800390e <LED_Init+0xea>
    Error_Handler(TIM_INIT_ERROR);     // Initialization Error
 8003908:	2004      	movs	r0, #4
 800390a:	f7ff faf5 	bl	8002ef8 <Error_Handler>
  }

  // Set TIM Output Compare (OC) Configuration Structure definition
  sConfigOC.OCMode       = TIM_OCMODE_PWM1;
 800390e:	4b43      	ldr	r3, [pc, #268]	; (8003a1c <LED_Init+0x1f8>)
 8003910:	2260      	movs	r2, #96	; 0x60
 8003912:	601a      	str	r2, [r3, #0]
  sConfigOC.OCPolarity   = TIM_OCPOLARITY_HIGH;
 8003914:	4b41      	ldr	r3, [pc, #260]	; (8003a1c <LED_Init+0x1f8>)
 8003916:	2200      	movs	r2, #0
 8003918:	609a      	str	r2, [r3, #8]
  sConfigOC.Pulse        = 0;
 800391a:	4b40      	ldr	r3, [pc, #256]	; (8003a1c <LED_Init+0x1f8>)
 800391c:	2200      	movs	r2, #0
 800391e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 8003920:	4b3e      	ldr	r3, [pc, #248]	; (8003a1c <LED_Init+0x1f8>)
 8003922:	2200      	movs	r2, #0
 8003924:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode   = TIM_OCFAST_DISABLE;
 8003926:	4b3d      	ldr	r3, [pc, #244]	; (8003a1c <LED_Init+0x1f8>)
 8003928:	2200      	movs	r2, #0
 800392a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState  = TIM_OCIDLESTATE_RESET;
 800392c:	4b3b      	ldr	r3, [pc, #236]	; (8003a1c <LED_Init+0x1f8>)
 800392e:	2200      	movs	r2, #0
 8003930:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003932:	4b3a      	ldr	r3, [pc, #232]	; (8003a1c <LED_Init+0x1f8>)
 8003934:	2200      	movs	r2, #0
 8003936:	619a      	str	r2, [r3, #24]

  // Apply TIM OC configs to htim2 (TIM2)
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8003938:	2200      	movs	r2, #0
 800393a:	4938      	ldr	r1, [pc, #224]	; (8003a1c <LED_Init+0x1f8>)
 800393c:	4836      	ldr	r0, [pc, #216]	; (8003a18 <LED_Init+0x1f4>)
 800393e:	f7fe f953 	bl	8001be8 <HAL_TIM_PWM_ConfigChannel>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d002      	beq.n	800394e <LED_Init+0x12a>
    Error_Handler(TIM_CONFIG_ERROR); // Configuration Error
 8003948:	2003      	movs	r0, #3
 800394a:	f7ff fad5 	bl	8002ef8 <Error_Handler>
  /* ------------------------------ */
  /* DMA1 Channel 3 Stream 5 Config */
  /* ------------------------------ */

  // Enable DMA1 clock
	__HAL_RCC_DMA1_CLK_ENABLE();
 800394e:	2300      	movs	r3, #0
 8003950:	603b      	str	r3, [r7, #0]
 8003952:	4b30      	ldr	r3, [pc, #192]	; (8003a14 <LED_Init+0x1f0>)
 8003954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003956:	4a2f      	ldr	r2, [pc, #188]	; (8003a14 <LED_Init+0x1f0>)
 8003958:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800395c:	6313      	str	r3, [r2, #48]	; 0x30
 800395e:	4b2d      	ldr	r3, [pc, #180]	; (8003a14 <LED_Init+0x1f0>)
 8003960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003962:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003966:	603b      	str	r3, [r7, #0]
 8003968:	683b      	ldr	r3, [r7, #0]

	// DMA handle Structure definition (Based on RM0383 STM32F411 Ref Manual (Table 27) TIM2_CH1 corresponds to DMA1 Channel 3 Stream 5)
  hdma_tim2_ch1.Instance = DMA1_Stream5;
 800396a:	4b2d      	ldr	r3, [pc, #180]	; (8003a20 <LED_Init+0x1fc>)
 800396c:	4a2d      	ldr	r2, [pc, #180]	; (8003a24 <LED_Init+0x200>)
 800396e:	601a      	str	r2, [r3, #0]
  hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8003970:	4b2b      	ldr	r3, [pc, #172]	; (8003a20 <LED_Init+0x1fc>)
 8003972:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003976:	605a      	str	r2, [r3, #4]
  hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;							// Memory to Peripheral mode
 8003978:	4b29      	ldr	r3, [pc, #164]	; (8003a20 <LED_Init+0x1fc>)
 800397a:	2240      	movs	r2, #64	; 0x40
 800397c:	609a      	str	r2, [r3, #8]
  hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800397e:	4b28      	ldr	r3, [pc, #160]	; (8003a20 <LED_Init+0x1fc>)
 8003980:	2200      	movs	r2, #0
 8003982:	60da      	str	r2, [r3, #12]
  hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003984:	4b26      	ldr	r3, [pc, #152]	; (8003a20 <LED_Init+0x1fc>)
 8003986:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800398a:	611a      	str	r2, [r3, #16]
  hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD ;
 800398c:	4b24      	ldr	r3, [pc, #144]	; (8003a20 <LED_Init+0x1fc>)
 800398e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003992:	615a      	str	r2, [r3, #20]
  hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD ;
 8003994:	4b22      	ldr	r3, [pc, #136]	; (8003a20 <LED_Init+0x1fc>)
 8003996:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800399a:	619a      	str	r2, [r3, #24]
  hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;														// Set in circular mode
 800399c:	4b20      	ldr	r3, [pc, #128]	; (8003a20 <LED_Init+0x1fc>)
 800399e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039a2:	61da      	str	r2, [r3, #28]
  hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;										// Low priority
 80039a4:	4b1e      	ldr	r3, [pc, #120]	; (8003a20 <LED_Init+0x1fc>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	621a      	str	r2, [r3, #32]
  hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039aa:	4b1d      	ldr	r3, [pc, #116]	; (8003a20 <LED_Init+0x1fc>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_tim2_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80039b0:	4b1b      	ldr	r3, [pc, #108]	; (8003a20 <LED_Init+0x1fc>)
 80039b2:	2203      	movs	r2, #3
 80039b4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_tim2_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 80039b6:	4b1a      	ldr	r3, [pc, #104]	; (8003a20 <LED_Init+0x1fc>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_tim2_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80039bc:	4b18      	ldr	r3, [pc, #96]	; (8003a20 <LED_Init+0x1fc>)
 80039be:	2200      	movs	r2, #0
 80039c0:	631a      	str	r2, [r3, #48]	; 0x30

  // Enable Half-Transfer and Full-Transfer complete interrupts
  __HAL_DMA_ENABLE_IT(&hdma_tim2_ch1, (DMA_IT_TC | DMA_IT_HT));
 80039c2:	4b17      	ldr	r3, [pc, #92]	; (8003a20 <LED_Init+0x1fc>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	4b15      	ldr	r3, [pc, #84]	; (8003a20 <LED_Init+0x1fc>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f042 0218 	orr.w	r2, r2, #24
 80039d0:	601a      	str	r2, [r3, #0]

  // Linking a PPP peripheral to DMA structure pointer (PPP = STM32 peripheral or block)
  // hdma[TIM_DMA_ID_CC1] = Capture/Compare 1 DMA requests peripheral
  // Link htim2 (TIM peripheral) to hdma_tim2_ch1 (DMA struc pointer) with TIM_DMA_ID_CC1
  __HAL_LINKDMA(&htim2, hdma[TIM_DMA_ID_CC1], hdma_tim2_ch1);
 80039d2:	4b11      	ldr	r3, [pc, #68]	; (8003a18 <LED_Init+0x1f4>)
 80039d4:	4a12      	ldr	r2, [pc, #72]	; (8003a20 <LED_Init+0x1fc>)
 80039d6:	625a      	str	r2, [r3, #36]	; 0x24
 80039d8:	4b11      	ldr	r3, [pc, #68]	; (8003a20 <LED_Init+0x1fc>)
 80039da:	4a0f      	ldr	r2, [pc, #60]	; (8003a18 <LED_Init+0x1f4>)
 80039dc:	639a      	str	r2, [r3, #56]	; 0x38

  // Initialize TIM2 DMA handle
  if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK) {
 80039de:	4810      	ldr	r0, [pc, #64]	; (8003a20 <LED_Init+0x1fc>)
 80039e0:	f7fc ff0e 	bl	8000800 <HAL_DMA_Init>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d002      	beq.n	80039f0 <LED_Init+0x1cc>
    Error_Handler(DMA_ERROR);
 80039ea:	2006      	movs	r0, #6
 80039ec:	f7ff fa84 	bl	8002ef8 <Error_Handler>
  }

  // ##-2- Configure the NVIC for DMA #########################################
  // NVIC configuration for DMA transfer complete interrupt
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80039f0:	2200      	movs	r2, #0
 80039f2:	2100      	movs	r1, #0
 80039f4:	2010      	movs	r0, #16
 80039f6:	f7fc fecc 	bl	8000792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80039fa:	2010      	movs	r0, #16
 80039fc:	f7fc fee5 	bl	80007ca <HAL_NVIC_EnableIRQ>
}
 8003a00:	bf00      	nop
 8003a02:	3708      	adds	r7, #8
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	200000bc 	.word	0x200000bc
 8003a0c:	40020000 	.word	0x40020000
 8003a10:	40020400 	.word	0x40020400
 8003a14:	40023800 	.word	0x40023800
 8003a18:	200000f0 	.word	0x200000f0
 8003a1c:	20000094 	.word	0x20000094
 8003a20:	20000030 	.word	0x20000030
 8003a24:	40026088 	.word	0x40026088

08003a28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003a28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a60 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003a2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003a2e:	e003      	b.n	8003a38 <LoopCopyDataInit>

08003a30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003a30:	4b0c      	ldr	r3, [pc, #48]	; (8003a64 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003a32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003a34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003a36:	3104      	adds	r1, #4

08003a38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003a38:	480b      	ldr	r0, [pc, #44]	; (8003a68 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003a3a:	4b0c      	ldr	r3, [pc, #48]	; (8003a6c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003a3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003a3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003a40:	d3f6      	bcc.n	8003a30 <CopyDataInit>
  ldr  r2, =_sbss
 8003a42:	4a0b      	ldr	r2, [pc, #44]	; (8003a70 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003a44:	e002      	b.n	8003a4c <LoopFillZerobss>

08003a46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003a46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003a48:	f842 3b04 	str.w	r3, [r2], #4

08003a4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003a4c:	4b09      	ldr	r3, [pc, #36]	; (8003a74 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003a4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003a50:	d3f9      	bcc.n	8003a46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003a52:	f7ff faeb 	bl	800302c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a56:	f000 f811 	bl	8003a7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a5a:	f7ff f929 	bl	8002cb0 <main>
  bx  lr    
 8003a5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003a60:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003a64:	08003b20 	.word	0x08003b20
  ldr  r0, =_sdata
 8003a68:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003a6c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8003a70:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8003a74:	20000270 	.word	0x20000270

08003a78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a78:	e7fe      	b.n	8003a78 <ADC_IRQHandler>
	...

08003a7c <__libc_init_array>:
 8003a7c:	b570      	push	{r4, r5, r6, lr}
 8003a7e:	4e0d      	ldr	r6, [pc, #52]	; (8003ab4 <__libc_init_array+0x38>)
 8003a80:	4c0d      	ldr	r4, [pc, #52]	; (8003ab8 <__libc_init_array+0x3c>)
 8003a82:	1ba4      	subs	r4, r4, r6
 8003a84:	10a4      	asrs	r4, r4, #2
 8003a86:	2500      	movs	r5, #0
 8003a88:	42a5      	cmp	r5, r4
 8003a8a:	d109      	bne.n	8003aa0 <__libc_init_array+0x24>
 8003a8c:	4e0b      	ldr	r6, [pc, #44]	; (8003abc <__libc_init_array+0x40>)
 8003a8e:	4c0c      	ldr	r4, [pc, #48]	; (8003ac0 <__libc_init_array+0x44>)
 8003a90:	f000 f820 	bl	8003ad4 <_init>
 8003a94:	1ba4      	subs	r4, r4, r6
 8003a96:	10a4      	asrs	r4, r4, #2
 8003a98:	2500      	movs	r5, #0
 8003a9a:	42a5      	cmp	r5, r4
 8003a9c:	d105      	bne.n	8003aaa <__libc_init_array+0x2e>
 8003a9e:	bd70      	pop	{r4, r5, r6, pc}
 8003aa0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003aa4:	4798      	blx	r3
 8003aa6:	3501      	adds	r5, #1
 8003aa8:	e7ee      	b.n	8003a88 <__libc_init_array+0xc>
 8003aaa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003aae:	4798      	blx	r3
 8003ab0:	3501      	adds	r5, #1
 8003ab2:	e7f2      	b.n	8003a9a <__libc_init_array+0x1e>
 8003ab4:	08003b18 	.word	0x08003b18
 8003ab8:	08003b18 	.word	0x08003b18
 8003abc:	08003b18 	.word	0x08003b18
 8003ac0:	08003b1c 	.word	0x08003b1c

08003ac4 <memset>:
 8003ac4:	4402      	add	r2, r0
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d100      	bne.n	8003ace <memset+0xa>
 8003acc:	4770      	bx	lr
 8003ace:	f803 1b01 	strb.w	r1, [r3], #1
 8003ad2:	e7f9      	b.n	8003ac8 <memset+0x4>

08003ad4 <_init>:
 8003ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ad6:	bf00      	nop
 8003ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ada:	bc08      	pop	{r3}
 8003adc:	469e      	mov	lr, r3
 8003ade:	4770      	bx	lr

08003ae0 <_fini>:
 8003ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ae2:	bf00      	nop
 8003ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ae6:	bc08      	pop	{r3}
 8003ae8:	469e      	mov	lr, r3
 8003aea:	4770      	bx	lr
