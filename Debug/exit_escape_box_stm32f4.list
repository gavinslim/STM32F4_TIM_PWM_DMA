
exit_escape_box_stm32f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2e0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00021b28  0800a480  0800a480  0001a480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802bfa8  0802bfa8  00040084  2**0
                  CONTENTS
  4 .ARM          00000008  0802bfa8  0802bfa8  0003bfa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802bfb0  0802bfb0  00040084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802bfb0  0802bfb0  0003bfb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802bfb4  0802bfb4  0003bfb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0802bfb8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004680  20000084  0802c03c  00040084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004704  0802c03c  00044704  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017278  00000000  00000000  000400b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ed5  00000000  00000000  0005732c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001138  00000000  00000000  0005a208  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fd0  00000000  00000000  0005b340  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001936f  00000000  00000000  0005c310  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f813  00000000  00000000  0007567f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008fc13  00000000  00000000  00084e92  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00114aa5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b98  00000000  00000000  00114b20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a468 	.word	0x0800a468

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	0800a468 	.word	0x0800a468

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b972 	b.w	8000d68 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9e08      	ldr	r6, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	4688      	mov	r8, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14b      	bne.n	8000b42 <__udivmoddi4+0xa6>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4615      	mov	r5, r2
 8000aae:	d967      	bls.n	8000b80 <__udivmoddi4+0xe4>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b14a      	cbz	r2, 8000aca <__udivmoddi4+0x2e>
 8000ab6:	f1c2 0720 	rsb	r7, r2, #32
 8000aba:	fa01 f302 	lsl.w	r3, r1, r2
 8000abe:	fa20 f707 	lsr.w	r7, r0, r7
 8000ac2:	4095      	lsls	r5, r2
 8000ac4:	ea47 0803 	orr.w	r8, r7, r3
 8000ac8:	4094      	lsls	r4, r2
 8000aca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ace:	0c23      	lsrs	r3, r4, #16
 8000ad0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ad4:	fa1f fc85 	uxth.w	ip, r5
 8000ad8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000adc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ae0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ae4:	4299      	cmp	r1, r3
 8000ae6:	d909      	bls.n	8000afc <__udivmoddi4+0x60>
 8000ae8:	18eb      	adds	r3, r5, r3
 8000aea:	f107 30ff 	add.w	r0, r7, #4294967295
 8000aee:	f080 811b 	bcs.w	8000d28 <__udivmoddi4+0x28c>
 8000af2:	4299      	cmp	r1, r3
 8000af4:	f240 8118 	bls.w	8000d28 <__udivmoddi4+0x28c>
 8000af8:	3f02      	subs	r7, #2
 8000afa:	442b      	add	r3, r5
 8000afc:	1a5b      	subs	r3, r3, r1
 8000afe:	b2a4      	uxth	r4, r4
 8000b00:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b04:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b0c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b10:	45a4      	cmp	ip, r4
 8000b12:	d909      	bls.n	8000b28 <__udivmoddi4+0x8c>
 8000b14:	192c      	adds	r4, r5, r4
 8000b16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b1a:	f080 8107 	bcs.w	8000d2c <__udivmoddi4+0x290>
 8000b1e:	45a4      	cmp	ip, r4
 8000b20:	f240 8104 	bls.w	8000d2c <__udivmoddi4+0x290>
 8000b24:	3802      	subs	r0, #2
 8000b26:	442c      	add	r4, r5
 8000b28:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b2c:	eba4 040c 	sub.w	r4, r4, ip
 8000b30:	2700      	movs	r7, #0
 8000b32:	b11e      	cbz	r6, 8000b3c <__udivmoddi4+0xa0>
 8000b34:	40d4      	lsrs	r4, r2
 8000b36:	2300      	movs	r3, #0
 8000b38:	e9c6 4300 	strd	r4, r3, [r6]
 8000b3c:	4639      	mov	r1, r7
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d909      	bls.n	8000b5a <__udivmoddi4+0xbe>
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	f000 80eb 	beq.w	8000d22 <__udivmoddi4+0x286>
 8000b4c:	2700      	movs	r7, #0
 8000b4e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b52:	4638      	mov	r0, r7
 8000b54:	4639      	mov	r1, r7
 8000b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5a:	fab3 f783 	clz	r7, r3
 8000b5e:	2f00      	cmp	r7, #0
 8000b60:	d147      	bne.n	8000bf2 <__udivmoddi4+0x156>
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d302      	bcc.n	8000b6c <__udivmoddi4+0xd0>
 8000b66:	4282      	cmp	r2, r0
 8000b68:	f200 80fa 	bhi.w	8000d60 <__udivmoddi4+0x2c4>
 8000b6c:	1a84      	subs	r4, r0, r2
 8000b6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b72:	2001      	movs	r0, #1
 8000b74:	4698      	mov	r8, r3
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	d0e0      	beq.n	8000b3c <__udivmoddi4+0xa0>
 8000b7a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b7e:	e7dd      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000b80:	b902      	cbnz	r2, 8000b84 <__udivmoddi4+0xe8>
 8000b82:	deff      	udf	#255	; 0xff
 8000b84:	fab2 f282 	clz	r2, r2
 8000b88:	2a00      	cmp	r2, #0
 8000b8a:	f040 808f 	bne.w	8000cac <__udivmoddi4+0x210>
 8000b8e:	1b49      	subs	r1, r1, r5
 8000b90:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b94:	fa1f f885 	uxth.w	r8, r5
 8000b98:	2701      	movs	r7, #1
 8000b9a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b9e:	0c23      	lsrs	r3, r4, #16
 8000ba0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ba4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bac:	4299      	cmp	r1, r3
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0x124>
 8000bb0:	18eb      	adds	r3, r5, r3
 8000bb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0x122>
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	f200 80cd 	bhi.w	8000d58 <__udivmoddi4+0x2bc>
 8000bbe:	4684      	mov	ip, r0
 8000bc0:	1a59      	subs	r1, r3, r1
 8000bc2:	b2a3      	uxth	r3, r4
 8000bc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bc8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bcc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bd0:	fb08 f800 	mul.w	r8, r8, r0
 8000bd4:	45a0      	cmp	r8, r4
 8000bd6:	d907      	bls.n	8000be8 <__udivmoddi4+0x14c>
 8000bd8:	192c      	adds	r4, r5, r4
 8000bda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x14a>
 8000be0:	45a0      	cmp	r8, r4
 8000be2:	f200 80b6 	bhi.w	8000d52 <__udivmoddi4+0x2b6>
 8000be6:	4618      	mov	r0, r3
 8000be8:	eba4 0408 	sub.w	r4, r4, r8
 8000bec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bf0:	e79f      	b.n	8000b32 <__udivmoddi4+0x96>
 8000bf2:	f1c7 0c20 	rsb	ip, r7, #32
 8000bf6:	40bb      	lsls	r3, r7
 8000bf8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bfc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c00:	fa01 f407 	lsl.w	r4, r1, r7
 8000c04:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c08:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c0c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c10:	4325      	orrs	r5, r4
 8000c12:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c16:	0c2c      	lsrs	r4, r5, #16
 8000c18:	fb08 3319 	mls	r3, r8, r9, r3
 8000c1c:	fa1f fa8e 	uxth.w	sl, lr
 8000c20:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c24:	fb09 f40a 	mul.w	r4, r9, sl
 8000c28:	429c      	cmp	r4, r3
 8000c2a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c2e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c32:	d90b      	bls.n	8000c4c <__udivmoddi4+0x1b0>
 8000c34:	eb1e 0303 	adds.w	r3, lr, r3
 8000c38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c3c:	f080 8087 	bcs.w	8000d4e <__udivmoddi4+0x2b2>
 8000c40:	429c      	cmp	r4, r3
 8000c42:	f240 8084 	bls.w	8000d4e <__udivmoddi4+0x2b2>
 8000c46:	f1a9 0902 	sub.w	r9, r9, #2
 8000c4a:	4473      	add	r3, lr
 8000c4c:	1b1b      	subs	r3, r3, r4
 8000c4e:	b2ad      	uxth	r5, r5
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c5c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c60:	45a2      	cmp	sl, r4
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x1da>
 8000c64:	eb1e 0404 	adds.w	r4, lr, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	d26b      	bcs.n	8000d46 <__udivmoddi4+0x2aa>
 8000c6e:	45a2      	cmp	sl, r4
 8000c70:	d969      	bls.n	8000d46 <__udivmoddi4+0x2aa>
 8000c72:	3802      	subs	r0, #2
 8000c74:	4474      	add	r4, lr
 8000c76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c7e:	eba4 040a 	sub.w	r4, r4, sl
 8000c82:	454c      	cmp	r4, r9
 8000c84:	46c2      	mov	sl, r8
 8000c86:	464b      	mov	r3, r9
 8000c88:	d354      	bcc.n	8000d34 <__udivmoddi4+0x298>
 8000c8a:	d051      	beq.n	8000d30 <__udivmoddi4+0x294>
 8000c8c:	2e00      	cmp	r6, #0
 8000c8e:	d069      	beq.n	8000d64 <__udivmoddi4+0x2c8>
 8000c90:	ebb1 050a 	subs.w	r5, r1, sl
 8000c94:	eb64 0403 	sbc.w	r4, r4, r3
 8000c98:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c9c:	40fd      	lsrs	r5, r7
 8000c9e:	40fc      	lsrs	r4, r7
 8000ca0:	ea4c 0505 	orr.w	r5, ip, r5
 8000ca4:	e9c6 5400 	strd	r5, r4, [r6]
 8000ca8:	2700      	movs	r7, #0
 8000caa:	e747      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000cac:	f1c2 0320 	rsb	r3, r2, #32
 8000cb0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cb4:	4095      	lsls	r5, r2
 8000cb6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cba:	fa21 f303 	lsr.w	r3, r1, r3
 8000cbe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cc2:	4338      	orrs	r0, r7
 8000cc4:	0c01      	lsrs	r1, r0, #16
 8000cc6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cca:	fa1f f885 	uxth.w	r8, r5
 8000cce:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd6:	fb07 f308 	mul.w	r3, r7, r8
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce0:	d907      	bls.n	8000cf2 <__udivmoddi4+0x256>
 8000ce2:	1869      	adds	r1, r5, r1
 8000ce4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ce8:	d22f      	bcs.n	8000d4a <__udivmoddi4+0x2ae>
 8000cea:	428b      	cmp	r3, r1
 8000cec:	d92d      	bls.n	8000d4a <__udivmoddi4+0x2ae>
 8000cee:	3f02      	subs	r7, #2
 8000cf0:	4429      	add	r1, r5
 8000cf2:	1acb      	subs	r3, r1, r3
 8000cf4:	b281      	uxth	r1, r0
 8000cf6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cfa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cfe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d02:	fb00 f308 	mul.w	r3, r0, r8
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d907      	bls.n	8000d1a <__udivmoddi4+0x27e>
 8000d0a:	1869      	adds	r1, r5, r1
 8000d0c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d10:	d217      	bcs.n	8000d42 <__udivmoddi4+0x2a6>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d915      	bls.n	8000d42 <__udivmoddi4+0x2a6>
 8000d16:	3802      	subs	r0, #2
 8000d18:	4429      	add	r1, r5
 8000d1a:	1ac9      	subs	r1, r1, r3
 8000d1c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d20:	e73b      	b.n	8000b9a <__udivmoddi4+0xfe>
 8000d22:	4637      	mov	r7, r6
 8000d24:	4630      	mov	r0, r6
 8000d26:	e709      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000d28:	4607      	mov	r7, r0
 8000d2a:	e6e7      	b.n	8000afc <__udivmoddi4+0x60>
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	e6fb      	b.n	8000b28 <__udivmoddi4+0x8c>
 8000d30:	4541      	cmp	r1, r8
 8000d32:	d2ab      	bcs.n	8000c8c <__udivmoddi4+0x1f0>
 8000d34:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d38:	eb69 020e 	sbc.w	r2, r9, lr
 8000d3c:	3801      	subs	r0, #1
 8000d3e:	4613      	mov	r3, r2
 8000d40:	e7a4      	b.n	8000c8c <__udivmoddi4+0x1f0>
 8000d42:	4660      	mov	r0, ip
 8000d44:	e7e9      	b.n	8000d1a <__udivmoddi4+0x27e>
 8000d46:	4618      	mov	r0, r3
 8000d48:	e795      	b.n	8000c76 <__udivmoddi4+0x1da>
 8000d4a:	4667      	mov	r7, ip
 8000d4c:	e7d1      	b.n	8000cf2 <__udivmoddi4+0x256>
 8000d4e:	4681      	mov	r9, r0
 8000d50:	e77c      	b.n	8000c4c <__udivmoddi4+0x1b0>
 8000d52:	3802      	subs	r0, #2
 8000d54:	442c      	add	r4, r5
 8000d56:	e747      	b.n	8000be8 <__udivmoddi4+0x14c>
 8000d58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d5c:	442b      	add	r3, r5
 8000d5e:	e72f      	b.n	8000bc0 <__udivmoddi4+0x124>
 8000d60:	4638      	mov	r0, r7
 8000d62:	e708      	b.n	8000b76 <__udivmoddi4+0xda>
 8000d64:	4637      	mov	r7, r6
 8000d66:	e6e9      	b.n	8000b3c <__udivmoddi4+0xa0>

08000d68 <__aeabi_idiv0>:
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop

08000d6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d70:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <HAL_Init+0x40>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a0d      	ldr	r2, [pc, #52]	; (8000dac <HAL_Init+0x40>)
 8000d76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d7c:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <HAL_Init+0x40>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <HAL_Init+0x40>)
 8000d82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d88:	4b08      	ldr	r3, [pc, #32]	; (8000dac <HAL_Init+0x40>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a07      	ldr	r2, [pc, #28]	; (8000dac <HAL_Init+0x40>)
 8000d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d94:	2003      	movs	r0, #3
 8000d96:	f000 f955 	bl	8001044 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d9a:	200f      	movs	r0, #15
 8000d9c:	f000 f810 	bl	8000dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da0:	f000 f806 	bl	8000db0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40023c00 	.word	0x40023c00

08000db0 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
	...

08000dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc8:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <HAL_InitTick+0x54>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <HAL_InitTick+0x58>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 f965 	bl	80010ae <HAL_SYSTICK_Config>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e00e      	b.n	8000e0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2b0f      	cmp	r3, #15
 8000df2:	d80a      	bhi.n	8000e0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df4:	2200      	movs	r2, #0
 8000df6:	6879      	ldr	r1, [r7, #4]
 8000df8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dfc:	f000 f92d 	bl	800105a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e00:	4a06      	ldr	r2, [pc, #24]	; (8000e1c <HAL_InitTick+0x5c>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e06:	2300      	movs	r3, #0
 8000e08:	e000      	b.n	8000e0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000008 	.word	0x20000008
 8000e18:	20000004 	.word	0x20000004
 8000e1c:	20000000 	.word	0x20000000

08000e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_IncTick+0x20>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_IncTick+0x24>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <HAL_IncTick+0x24>)
 8000e32:	6013      	str	r3, [r2, #0]
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	20000004 	.word	0x20000004
 8000e44:	200002e4 	.word	0x200002e4

08000e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <HAL_GetTick+0x14>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	200002e4 	.word	0x200002e4

08000e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e68:	f7ff ffee 	bl	8000e48 <HAL_GetTick>
 8000e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e78:	d005      	beq.n	8000e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <HAL_Delay+0x40>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4413      	add	r3, r2
 8000e84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e86:	bf00      	nop
 8000e88:	f7ff ffde 	bl	8000e48 <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d8f7      	bhi.n	8000e88 <HAL_Delay+0x28>
  {
  }
}
 8000e98:	bf00      	nop
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000004 	.word	0x20000004

08000ea4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eba:	68ba      	ldr	r2, [r7, #8]
 8000ebc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ecc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ed6:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	60d3      	str	r3, [r2, #12]
}
 8000edc:	bf00      	nop
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef0:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <__NVIC_GetPriorityGrouping+0x18>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	0a1b      	lsrs	r3, r3, #8
 8000ef6:	f003 0307 	and.w	r3, r3, #7
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	db0b      	blt.n	8000f32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	f003 021f 	and.w	r2, r3, #31
 8000f20:	4907      	ldr	r1, [pc, #28]	; (8000f40 <__NVIC_EnableIRQ+0x38>)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	095b      	lsrs	r3, r3, #5
 8000f28:	2001      	movs	r0, #1
 8000f2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000e100 	.word	0xe000e100

08000f44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	6039      	str	r1, [r7, #0]
 8000f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	db0a      	blt.n	8000f6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	490c      	ldr	r1, [pc, #48]	; (8000f90 <__NVIC_SetPriority+0x4c>)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	0112      	lsls	r2, r2, #4
 8000f64:	b2d2      	uxtb	r2, r2
 8000f66:	440b      	add	r3, r1
 8000f68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f6c:	e00a      	b.n	8000f84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	4908      	ldr	r1, [pc, #32]	; (8000f94 <__NVIC_SetPriority+0x50>)
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	f003 030f 	and.w	r3, r3, #15
 8000f7a:	3b04      	subs	r3, #4
 8000f7c:	0112      	lsls	r2, r2, #4
 8000f7e:	b2d2      	uxtb	r2, r2
 8000f80:	440b      	add	r3, r1
 8000f82:	761a      	strb	r2, [r3, #24]
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000e100 	.word	0xe000e100
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b089      	sub	sp, #36	; 0x24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	f1c3 0307 	rsb	r3, r3, #7
 8000fb2:	2b04      	cmp	r3, #4
 8000fb4:	bf28      	it	cs
 8000fb6:	2304      	movcs	r3, #4
 8000fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	2b06      	cmp	r3, #6
 8000fc0:	d902      	bls.n	8000fc8 <NVIC_EncodePriority+0x30>
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3b03      	subs	r3, #3
 8000fc6:	e000      	b.n	8000fca <NVIC_EncodePriority+0x32>
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43da      	mvns	r2, r3
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	401a      	ands	r2, r3
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fea:	43d9      	mvns	r1, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff0:	4313      	orrs	r3, r2
         );
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3724      	adds	r7, #36	; 0x24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
	...

08001000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3b01      	subs	r3, #1
 800100c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001010:	d301      	bcc.n	8001016 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001012:	2301      	movs	r3, #1
 8001014:	e00f      	b.n	8001036 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001016:	4a0a      	ldr	r2, [pc, #40]	; (8001040 <SysTick_Config+0x40>)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3b01      	subs	r3, #1
 800101c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800101e:	210f      	movs	r1, #15
 8001020:	f04f 30ff 	mov.w	r0, #4294967295
 8001024:	f7ff ff8e 	bl	8000f44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <SysTick_Config+0x40>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800102e:	4b04      	ldr	r3, [pc, #16]	; (8001040 <SysTick_Config+0x40>)
 8001030:	2207      	movs	r2, #7
 8001032:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	e000e010 	.word	0xe000e010

08001044 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f7ff ff29 	bl	8000ea4 <__NVIC_SetPriorityGrouping>
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800105a:	b580      	push	{r7, lr}
 800105c:	b086      	sub	sp, #24
 800105e:	af00      	add	r7, sp, #0
 8001060:	4603      	mov	r3, r0
 8001062:	60b9      	str	r1, [r7, #8]
 8001064:	607a      	str	r2, [r7, #4]
 8001066:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800106c:	f7ff ff3e 	bl	8000eec <__NVIC_GetPriorityGrouping>
 8001070:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	68b9      	ldr	r1, [r7, #8]
 8001076:	6978      	ldr	r0, [r7, #20]
 8001078:	f7ff ff8e 	bl	8000f98 <NVIC_EncodePriority>
 800107c:	4602      	mov	r2, r0
 800107e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001082:	4611      	mov	r1, r2
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff ff5d 	bl	8000f44 <__NVIC_SetPriority>
}
 800108a:	bf00      	nop
 800108c:	3718      	adds	r7, #24
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	4603      	mov	r3, r0
 800109a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800109c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ff31 	bl	8000f08 <__NVIC_EnableIRQ>
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff ffa2 	bl	8001000 <SysTick_Config>
 80010bc:	4603      	mov	r3, r0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80010ca:	f000 f802 	bl	80010d2 <HAL_SYSTICK_Callback>
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80010d6:	bf00      	nop
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80010ec:	f7ff feac 	bl	8000e48 <HAL_GetTick>
 80010f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d101      	bne.n	80010fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e099      	b.n	8001230 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2202      	movs	r2, #2
 8001108:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f022 0201 	bic.w	r2, r2, #1
 800111a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800111c:	e00f      	b.n	800113e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800111e:	f7ff fe93 	bl	8000e48 <HAL_GetTick>
 8001122:	4602      	mov	r2, r0
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	2b05      	cmp	r3, #5
 800112a:	d908      	bls.n	800113e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2220      	movs	r2, #32
 8001130:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2203      	movs	r2, #3
 8001136:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e078      	b.n	8001230 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1e8      	bne.n	800111e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001154:	697a      	ldr	r2, [r7, #20]
 8001156:	4b38      	ldr	r3, [pc, #224]	; (8001238 <HAL_DMA_Init+0x158>)
 8001158:	4013      	ands	r3, r2
 800115a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800116a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	691b      	ldr	r3, [r3, #16]
 8001170:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001176:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001182:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6a1b      	ldr	r3, [r3, #32]
 8001188:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800118a:	697a      	ldr	r2, [r7, #20]
 800118c:	4313      	orrs	r3, r2
 800118e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001194:	2b04      	cmp	r3, #4
 8001196:	d107      	bne.n	80011a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a0:	4313      	orrs	r3, r2
 80011a2:	697a      	ldr	r2, [r7, #20]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	697a      	ldr	r2, [r7, #20]
 80011ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	f023 0307 	bic.w	r3, r3, #7
 80011be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c4:	697a      	ldr	r2, [r7, #20]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	d117      	bne.n	8001202 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d6:	697a      	ldr	r2, [r7, #20]
 80011d8:	4313      	orrs	r3, r2
 80011da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d00e      	beq.n	8001202 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f000 f907 	bl	80013f8 <DMA_CheckFifoParam>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d008      	beq.n	8001202 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2240      	movs	r2, #64	; 0x40
 80011f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2201      	movs	r2, #1
 80011fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80011fe:	2301      	movs	r3, #1
 8001200:	e016      	b.n	8001230 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f000 f8be 	bl	800138c <DMA_CalcBaseAndBitshift>
 8001210:	4603      	mov	r3, r0
 8001212:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001218:	223f      	movs	r2, #63	; 0x3f
 800121a:	409a      	lsls	r2, r3
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2201      	movs	r2, #1
 800122a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800122e:	2300      	movs	r3, #0
}
 8001230:	4618      	mov	r0, r3
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	f010803f 	.word	0xf010803f

0800123c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
 8001248:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800124a:	2300      	movs	r3, #0
 800124c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001252:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800125a:	2b01      	cmp	r3, #1
 800125c:	d101      	bne.n	8001262 <HAL_DMA_Start_IT+0x26>
 800125e:	2302      	movs	r3, #2
 8001260:	e040      	b.n	80012e4 <HAL_DMA_Start_IT+0xa8>
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	2201      	movs	r2, #1
 8001266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b01      	cmp	r3, #1
 8001274:	d12f      	bne.n	80012d6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	2202      	movs	r2, #2
 800127a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	2200      	movs	r2, #0
 8001282:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	68b9      	ldr	r1, [r7, #8]
 800128a:	68f8      	ldr	r0, [r7, #12]
 800128c:	f000 f850 	bl	8001330 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001294:	223f      	movs	r2, #63	; 0x3f
 8001296:	409a      	lsls	r2, r3
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f042 0216 	orr.w	r2, r2, #22
 80012aa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d007      	beq.n	80012c4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f042 0208 	orr.w	r2, r2, #8
 80012c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f042 0201 	orr.w	r2, r2, #1
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	e005      	b.n	80012e2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80012de:	2302      	movs	r3, #2
 80012e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80012e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3718      	adds	r7, #24
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d004      	beq.n	800130a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2280      	movs	r2, #128	; 0x80
 8001304:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e00c      	b.n	8001324 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2205      	movs	r2, #5
 800130e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f022 0201 	bic.w	r2, r2, #1
 8001320:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001322:	2300      	movs	r3, #0
}
 8001324:	4618      	mov	r0, r3
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
 800133c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800134c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	683a      	ldr	r2, [r7, #0]
 8001354:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	2b40      	cmp	r3, #64	; 0x40
 800135c:	d108      	bne.n	8001370 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800136e:	e007      	b.n	8001380 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	68ba      	ldr	r2, [r7, #8]
 8001376:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	60da      	str	r2, [r3, #12]
}
 8001380:	bf00      	nop
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	b2db      	uxtb	r3, r3
 800139a:	3b10      	subs	r3, #16
 800139c:	4a14      	ldr	r2, [pc, #80]	; (80013f0 <DMA_CalcBaseAndBitshift+0x64>)
 800139e:	fba2 2303 	umull	r2, r3, r2, r3
 80013a2:	091b      	lsrs	r3, r3, #4
 80013a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80013a6:	4a13      	ldr	r2, [pc, #76]	; (80013f4 <DMA_CalcBaseAndBitshift+0x68>)
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	4413      	add	r3, r2
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	461a      	mov	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2b03      	cmp	r3, #3
 80013b8:	d909      	bls.n	80013ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80013c2:	f023 0303 	bic.w	r3, r3, #3
 80013c6:	1d1a      	adds	r2, r3, #4
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	659a      	str	r2, [r3, #88]	; 0x58
 80013cc:	e007      	b.n	80013de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80013d6:	f023 0303 	bic.w	r3, r3, #3
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3714      	adds	r7, #20
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	aaaaaaab 	.word	0xaaaaaaab
 80013f4:	0800a7cc 	.word	0x0800a7cc

080013f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001400:	2300      	movs	r3, #0
 8001402:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001408:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d11f      	bne.n	8001452 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	2b03      	cmp	r3, #3
 8001416:	d855      	bhi.n	80014c4 <DMA_CheckFifoParam+0xcc>
 8001418:	a201      	add	r2, pc, #4	; (adr r2, 8001420 <DMA_CheckFifoParam+0x28>)
 800141a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800141e:	bf00      	nop
 8001420:	08001431 	.word	0x08001431
 8001424:	08001443 	.word	0x08001443
 8001428:	08001431 	.word	0x08001431
 800142c:	080014c5 	.word	0x080014c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001434:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d045      	beq.n	80014c8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001440:	e042      	b.n	80014c8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001446:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800144a:	d13f      	bne.n	80014cc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001450:	e03c      	b.n	80014cc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800145a:	d121      	bne.n	80014a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	2b03      	cmp	r3, #3
 8001460:	d836      	bhi.n	80014d0 <DMA_CheckFifoParam+0xd8>
 8001462:	a201      	add	r2, pc, #4	; (adr r2, 8001468 <DMA_CheckFifoParam+0x70>)
 8001464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001468:	08001479 	.word	0x08001479
 800146c:	0800147f 	.word	0x0800147f
 8001470:	08001479 	.word	0x08001479
 8001474:	08001491 	.word	0x08001491
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	73fb      	strb	r3, [r7, #15]
      break;
 800147c:	e02f      	b.n	80014de <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001482:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d024      	beq.n	80014d4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800148e:	e021      	b.n	80014d4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001494:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001498:	d11e      	bne.n	80014d8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800149e:	e01b      	b.n	80014d8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d902      	bls.n	80014ac <DMA_CheckFifoParam+0xb4>
 80014a6:	2b03      	cmp	r3, #3
 80014a8:	d003      	beq.n	80014b2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80014aa:	e018      	b.n	80014de <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	73fb      	strb	r3, [r7, #15]
      break;
 80014b0:	e015      	b.n	80014de <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d00e      	beq.n	80014dc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	73fb      	strb	r3, [r7, #15]
      break;
 80014c2:	e00b      	b.n	80014dc <DMA_CheckFifoParam+0xe4>
      break;
 80014c4:	bf00      	nop
 80014c6:	e00a      	b.n	80014de <DMA_CheckFifoParam+0xe6>
      break;
 80014c8:	bf00      	nop
 80014ca:	e008      	b.n	80014de <DMA_CheckFifoParam+0xe6>
      break;
 80014cc:	bf00      	nop
 80014ce:	e006      	b.n	80014de <DMA_CheckFifoParam+0xe6>
      break;
 80014d0:	bf00      	nop
 80014d2:	e004      	b.n	80014de <DMA_CheckFifoParam+0xe6>
      break;
 80014d4:	bf00      	nop
 80014d6:	e002      	b.n	80014de <DMA_CheckFifoParam+0xe6>
      break;   
 80014d8:	bf00      	nop
 80014da:	e000      	b.n	80014de <DMA_CheckFifoParam+0xe6>
      break;
 80014dc:	bf00      	nop
    }
  } 
  
  return status; 
 80014de:	7bfb      	ldrb	r3, [r7, #15]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b089      	sub	sp, #36	; 0x24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014fe:	2300      	movs	r3, #0
 8001500:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
 8001506:	e159      	b.n	80017bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001508:	2201      	movs	r2, #1
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	697a      	ldr	r2, [r7, #20]
 8001518:	4013      	ands	r3, r2
 800151a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	429a      	cmp	r2, r3
 8001522:	f040 8148 	bne.w	80017b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d00b      	beq.n	8001546 <HAL_GPIO_Init+0x5a>
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2b02      	cmp	r3, #2
 8001534:	d007      	beq.n	8001546 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800153a:	2b11      	cmp	r3, #17
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	2b12      	cmp	r3, #18
 8001544:	d130      	bne.n	80015a8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	2203      	movs	r2, #3
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4013      	ands	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	68da      	ldr	r2, [r3, #12]
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4313      	orrs	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800157c:	2201      	movs	r2, #1
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	091b      	lsrs	r3, r3, #4
 8001592:	f003 0201 	and.w	r2, r3, #1
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4313      	orrs	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	2203      	movs	r2, #3
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4013      	ands	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d003      	beq.n	80015e8 <HAL_GPIO_Init+0xfc>
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	2b12      	cmp	r3, #18
 80015e6:	d123      	bne.n	8001630 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	08da      	lsrs	r2, r3, #3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3208      	adds	r2, #8
 80015f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	f003 0307 	and.w	r3, r3, #7
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	220f      	movs	r2, #15
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	691a      	ldr	r2, [r3, #16]
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	08da      	lsrs	r2, r3, #3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	3208      	adds	r2, #8
 800162a:	69b9      	ldr	r1, [r7, #24]
 800162c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	2203      	movs	r2, #3
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	43db      	mvns	r3, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4013      	ands	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f003 0203 	and.w	r2, r3, #3
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166c:	2b00      	cmp	r3, #0
 800166e:	f000 80a2 	beq.w	80017b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	4b56      	ldr	r3, [pc, #344]	; (80017d0 <HAL_GPIO_Init+0x2e4>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	4a55      	ldr	r2, [pc, #340]	; (80017d0 <HAL_GPIO_Init+0x2e4>)
 800167c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001680:	6453      	str	r3, [r2, #68]	; 0x44
 8001682:	4b53      	ldr	r3, [pc, #332]	; (80017d0 <HAL_GPIO_Init+0x2e4>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800168e:	4a51      	ldr	r2, [pc, #324]	; (80017d4 <HAL_GPIO_Init+0x2e8>)
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	089b      	lsrs	r3, r3, #2
 8001694:	3302      	adds	r3, #2
 8001696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800169a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	f003 0303 	and.w	r3, r3, #3
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	220f      	movs	r2, #15
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	4013      	ands	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a48      	ldr	r2, [pc, #288]	; (80017d8 <HAL_GPIO_Init+0x2ec>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d019      	beq.n	80016ee <HAL_GPIO_Init+0x202>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a47      	ldr	r2, [pc, #284]	; (80017dc <HAL_GPIO_Init+0x2f0>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d013      	beq.n	80016ea <HAL_GPIO_Init+0x1fe>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a46      	ldr	r2, [pc, #280]	; (80017e0 <HAL_GPIO_Init+0x2f4>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d00d      	beq.n	80016e6 <HAL_GPIO_Init+0x1fa>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a45      	ldr	r2, [pc, #276]	; (80017e4 <HAL_GPIO_Init+0x2f8>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d007      	beq.n	80016e2 <HAL_GPIO_Init+0x1f6>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a44      	ldr	r2, [pc, #272]	; (80017e8 <HAL_GPIO_Init+0x2fc>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d101      	bne.n	80016de <HAL_GPIO_Init+0x1f2>
 80016da:	2304      	movs	r3, #4
 80016dc:	e008      	b.n	80016f0 <HAL_GPIO_Init+0x204>
 80016de:	2307      	movs	r3, #7
 80016e0:	e006      	b.n	80016f0 <HAL_GPIO_Init+0x204>
 80016e2:	2303      	movs	r3, #3
 80016e4:	e004      	b.n	80016f0 <HAL_GPIO_Init+0x204>
 80016e6:	2302      	movs	r3, #2
 80016e8:	e002      	b.n	80016f0 <HAL_GPIO_Init+0x204>
 80016ea:	2301      	movs	r3, #1
 80016ec:	e000      	b.n	80016f0 <HAL_GPIO_Init+0x204>
 80016ee:	2300      	movs	r3, #0
 80016f0:	69fa      	ldr	r2, [r7, #28]
 80016f2:	f002 0203 	and.w	r2, r2, #3
 80016f6:	0092      	lsls	r2, r2, #2
 80016f8:	4093      	lsls	r3, r2
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001700:	4934      	ldr	r1, [pc, #208]	; (80017d4 <HAL_GPIO_Init+0x2e8>)
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	089b      	lsrs	r3, r3, #2
 8001706:	3302      	adds	r3, #2
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800170e:	4b37      	ldr	r3, [pc, #220]	; (80017ec <HAL_GPIO_Init+0x300>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	43db      	mvns	r3, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4013      	ands	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	4313      	orrs	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001732:	4a2e      	ldr	r2, [pc, #184]	; (80017ec <HAL_GPIO_Init+0x300>)
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001738:	4b2c      	ldr	r3, [pc, #176]	; (80017ec <HAL_GPIO_Init+0x300>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	43db      	mvns	r3, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4013      	ands	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	4313      	orrs	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800175c:	4a23      	ldr	r2, [pc, #140]	; (80017ec <HAL_GPIO_Init+0x300>)
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001762:	4b22      	ldr	r3, [pc, #136]	; (80017ec <HAL_GPIO_Init+0x300>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	43db      	mvns	r3, r3
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	4013      	ands	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	4313      	orrs	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001786:	4a19      	ldr	r2, [pc, #100]	; (80017ec <HAL_GPIO_Init+0x300>)
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800178c:	4b17      	ldr	r3, [pc, #92]	; (80017ec <HAL_GPIO_Init+0x300>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	43db      	mvns	r3, r3
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4013      	ands	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d003      	beq.n	80017b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017b0:	4a0e      	ldr	r2, [pc, #56]	; (80017ec <HAL_GPIO_Init+0x300>)
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3301      	adds	r3, #1
 80017ba:	61fb      	str	r3, [r7, #28]
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	2b0f      	cmp	r3, #15
 80017c0:	f67f aea2 	bls.w	8001508 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017c4:	bf00      	nop
 80017c6:	3724      	adds	r7, #36	; 0x24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40013800 	.word	0x40013800
 80017d8:	40020000 	.word	0x40020000
 80017dc:	40020400 	.word	0x40020400
 80017e0:	40020800 	.word	0x40020800
 80017e4:	40020c00 	.word	0x40020c00
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40013c00 	.word	0x40013c00

080017f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	460b      	mov	r3, r1
 80017fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	691a      	ldr	r2, [r3, #16]
 8001800:	887b      	ldrh	r3, [r7, #2]
 8001802:	4013      	ands	r3, r2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d002      	beq.n	800180e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001808:	2301      	movs	r3, #1
 800180a:	73fb      	strb	r3, [r7, #15]
 800180c:	e001      	b.n	8001812 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800180e:	2300      	movs	r3, #0
 8001810:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001812:	7bfb      	ldrb	r3, [r7, #15]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	460b      	mov	r3, r1
 800182a:	807b      	strh	r3, [r7, #2]
 800182c:	4613      	mov	r3, r2
 800182e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001830:	787b      	ldrb	r3, [r7, #1]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001836:	887a      	ldrh	r2, [r7, #2]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800183c:	e003      	b.n	8001846 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800183e:	887b      	ldrh	r3, [r7, #2]
 8001840:	041a      	lsls	r2, r3, #16
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	619a      	str	r2, [r3, #24]
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
	...

08001854 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e25b      	b.n	8001d1e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	2b00      	cmp	r3, #0
 8001870:	d075      	beq.n	800195e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001872:	4ba3      	ldr	r3, [pc, #652]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 030c 	and.w	r3, r3, #12
 800187a:	2b04      	cmp	r3, #4
 800187c:	d00c      	beq.n	8001898 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800187e:	4ba0      	ldr	r3, [pc, #640]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001886:	2b08      	cmp	r3, #8
 8001888:	d112      	bne.n	80018b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800188a:	4b9d      	ldr	r3, [pc, #628]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001892:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001896:	d10b      	bne.n	80018b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001898:	4b99      	ldr	r3, [pc, #612]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d05b      	beq.n	800195c <HAL_RCC_OscConfig+0x108>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d157      	bne.n	800195c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e236      	b.n	8001d1e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018b8:	d106      	bne.n	80018c8 <HAL_RCC_OscConfig+0x74>
 80018ba:	4b91      	ldr	r3, [pc, #580]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a90      	ldr	r2, [pc, #576]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80018c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	e01d      	b.n	8001904 <HAL_RCC_OscConfig+0xb0>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018d0:	d10c      	bne.n	80018ec <HAL_RCC_OscConfig+0x98>
 80018d2:	4b8b      	ldr	r3, [pc, #556]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a8a      	ldr	r2, [pc, #552]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80018d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	4b88      	ldr	r3, [pc, #544]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a87      	ldr	r2, [pc, #540]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80018e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	e00b      	b.n	8001904 <HAL_RCC_OscConfig+0xb0>
 80018ec:	4b84      	ldr	r3, [pc, #528]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a83      	ldr	r2, [pc, #524]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80018f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018f6:	6013      	str	r3, [r2, #0]
 80018f8:	4b81      	ldr	r3, [pc, #516]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a80      	ldr	r2, [pc, #512]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80018fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001902:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d013      	beq.n	8001934 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190c:	f7ff fa9c 	bl	8000e48 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001914:	f7ff fa98 	bl	8000e48 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b64      	cmp	r3, #100	; 0x64
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e1fb      	b.n	8001d1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001926:	4b76      	ldr	r3, [pc, #472]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0f0      	beq.n	8001914 <HAL_RCC_OscConfig+0xc0>
 8001932:	e014      	b.n	800195e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001934:	f7ff fa88 	bl	8000e48 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800193c:	f7ff fa84 	bl	8000e48 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b64      	cmp	r3, #100	; 0x64
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e1e7      	b.n	8001d1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800194e:	4b6c      	ldr	r3, [pc, #432]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f0      	bne.n	800193c <HAL_RCC_OscConfig+0xe8>
 800195a:	e000      	b.n	800195e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800195c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d063      	beq.n	8001a32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800196a:	4b65      	ldr	r3, [pc, #404]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00b      	beq.n	800198e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001976:	4b62      	ldr	r3, [pc, #392]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800197e:	2b08      	cmp	r3, #8
 8001980:	d11c      	bne.n	80019bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001982:	4b5f      	ldr	r3, [pc, #380]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d116      	bne.n	80019bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800198e:	4b5c      	ldr	r3, [pc, #368]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d005      	beq.n	80019a6 <HAL_RCC_OscConfig+0x152>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d001      	beq.n	80019a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e1bb      	b.n	8001d1e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a6:	4b56      	ldr	r3, [pc, #344]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	4952      	ldr	r1, [pc, #328]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ba:	e03a      	b.n	8001a32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d020      	beq.n	8001a06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019c4:	4b4f      	ldr	r3, [pc, #316]	; (8001b04 <HAL_RCC_OscConfig+0x2b0>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ca:	f7ff fa3d 	bl	8000e48 <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019d2:	f7ff fa39 	bl	8000e48 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e19c      	b.n	8001d1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e4:	4b46      	ldr	r3, [pc, #280]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0f0      	beq.n	80019d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f0:	4b43      	ldr	r3, [pc, #268]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	4940      	ldr	r1, [pc, #256]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	600b      	str	r3, [r1, #0]
 8001a04:	e015      	b.n	8001a32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a06:	4b3f      	ldr	r3, [pc, #252]	; (8001b04 <HAL_RCC_OscConfig+0x2b0>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0c:	f7ff fa1c 	bl	8000e48 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a14:	f7ff fa18 	bl	8000e48 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e17b      	b.n	8001d1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a26:	4b36      	ldr	r3, [pc, #216]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f0      	bne.n	8001a14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0308 	and.w	r3, r3, #8
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d030      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d016      	beq.n	8001a74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a46:	4b30      	ldr	r3, [pc, #192]	; (8001b08 <HAL_RCC_OscConfig+0x2b4>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a4c:	f7ff f9fc 	bl	8000e48 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a54:	f7ff f9f8 	bl	8000e48 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e15b      	b.n	8001d1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a66:	4b26      	ldr	r3, [pc, #152]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0f0      	beq.n	8001a54 <HAL_RCC_OscConfig+0x200>
 8001a72:	e015      	b.n	8001aa0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a74:	4b24      	ldr	r3, [pc, #144]	; (8001b08 <HAL_RCC_OscConfig+0x2b4>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7a:	f7ff f9e5 	bl	8000e48 <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a82:	f7ff f9e1 	bl	8000e48 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e144      	b.n	8001d1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a94:	4b1a      	ldr	r3, [pc, #104]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1f0      	bne.n	8001a82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0304 	and.w	r3, r3, #4
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f000 80a0 	beq.w	8001bee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ab2:	4b13      	ldr	r3, [pc, #76]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10f      	bne.n	8001ade <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60bb      	str	r3, [r7, #8]
 8001ac2:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	4a0e      	ldr	r2, [pc, #56]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001acc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ace:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad6:	60bb      	str	r3, [r7, #8]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ada:	2301      	movs	r3, #1
 8001adc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ade:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <HAL_RCC_OscConfig+0x2b8>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d121      	bne.n	8001b2e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aea:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <HAL_RCC_OscConfig+0x2b8>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a07      	ldr	r2, [pc, #28]	; (8001b0c <HAL_RCC_OscConfig+0x2b8>)
 8001af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001af6:	f7ff f9a7 	bl	8000e48 <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afc:	e011      	b.n	8001b22 <HAL_RCC_OscConfig+0x2ce>
 8001afe:	bf00      	nop
 8001b00:	40023800 	.word	0x40023800
 8001b04:	42470000 	.word	0x42470000
 8001b08:	42470e80 	.word	0x42470e80
 8001b0c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b10:	f7ff f99a 	bl	8000e48 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e0fd      	b.n	8001d1e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b22:	4b81      	ldr	r3, [pc, #516]	; (8001d28 <HAL_RCC_OscConfig+0x4d4>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0f0      	beq.n	8001b10 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d106      	bne.n	8001b44 <HAL_RCC_OscConfig+0x2f0>
 8001b36:	4b7d      	ldr	r3, [pc, #500]	; (8001d2c <HAL_RCC_OscConfig+0x4d8>)
 8001b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3a:	4a7c      	ldr	r2, [pc, #496]	; (8001d2c <HAL_RCC_OscConfig+0x4d8>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	6713      	str	r3, [r2, #112]	; 0x70
 8001b42:	e01c      	b.n	8001b7e <HAL_RCC_OscConfig+0x32a>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	2b05      	cmp	r3, #5
 8001b4a:	d10c      	bne.n	8001b66 <HAL_RCC_OscConfig+0x312>
 8001b4c:	4b77      	ldr	r3, [pc, #476]	; (8001d2c <HAL_RCC_OscConfig+0x4d8>)
 8001b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b50:	4a76      	ldr	r2, [pc, #472]	; (8001d2c <HAL_RCC_OscConfig+0x4d8>)
 8001b52:	f043 0304 	orr.w	r3, r3, #4
 8001b56:	6713      	str	r3, [r2, #112]	; 0x70
 8001b58:	4b74      	ldr	r3, [pc, #464]	; (8001d2c <HAL_RCC_OscConfig+0x4d8>)
 8001b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5c:	4a73      	ldr	r2, [pc, #460]	; (8001d2c <HAL_RCC_OscConfig+0x4d8>)
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	6713      	str	r3, [r2, #112]	; 0x70
 8001b64:	e00b      	b.n	8001b7e <HAL_RCC_OscConfig+0x32a>
 8001b66:	4b71      	ldr	r3, [pc, #452]	; (8001d2c <HAL_RCC_OscConfig+0x4d8>)
 8001b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6a:	4a70      	ldr	r2, [pc, #448]	; (8001d2c <HAL_RCC_OscConfig+0x4d8>)
 8001b6c:	f023 0301 	bic.w	r3, r3, #1
 8001b70:	6713      	str	r3, [r2, #112]	; 0x70
 8001b72:	4b6e      	ldr	r3, [pc, #440]	; (8001d2c <HAL_RCC_OscConfig+0x4d8>)
 8001b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b76:	4a6d      	ldr	r2, [pc, #436]	; (8001d2c <HAL_RCC_OscConfig+0x4d8>)
 8001b78:	f023 0304 	bic.w	r3, r3, #4
 8001b7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d015      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b86:	f7ff f95f 	bl	8000e48 <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b8c:	e00a      	b.n	8001ba4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b8e:	f7ff f95b 	bl	8000e48 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e0bc      	b.n	8001d1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba4:	4b61      	ldr	r3, [pc, #388]	; (8001d2c <HAL_RCC_OscConfig+0x4d8>)
 8001ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0ee      	beq.n	8001b8e <HAL_RCC_OscConfig+0x33a>
 8001bb0:	e014      	b.n	8001bdc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb2:	f7ff f949 	bl	8000e48 <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb8:	e00a      	b.n	8001bd0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bba:	f7ff f945 	bl	8000e48 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e0a6      	b.n	8001d1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd0:	4b56      	ldr	r3, [pc, #344]	; (8001d2c <HAL_RCC_OscConfig+0x4d8>)
 8001bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1ee      	bne.n	8001bba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bdc:	7dfb      	ldrb	r3, [r7, #23]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d105      	bne.n	8001bee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be2:	4b52      	ldr	r3, [pc, #328]	; (8001d2c <HAL_RCC_OscConfig+0x4d8>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	4a51      	ldr	r2, [pc, #324]	; (8001d2c <HAL_RCC_OscConfig+0x4d8>)
 8001be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f000 8092 	beq.w	8001d1c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bf8:	4b4c      	ldr	r3, [pc, #304]	; (8001d2c <HAL_RCC_OscConfig+0x4d8>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 030c 	and.w	r3, r3, #12
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d05c      	beq.n	8001cbe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d141      	bne.n	8001c90 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c0c:	4b48      	ldr	r3, [pc, #288]	; (8001d30 <HAL_RCC_OscConfig+0x4dc>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c12:	f7ff f919 	bl	8000e48 <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c1a:	f7ff f915 	bl	8000e48 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e078      	b.n	8001d1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c2c:	4b3f      	ldr	r3, [pc, #252]	; (8001d2c <HAL_RCC_OscConfig+0x4d8>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1f0      	bne.n	8001c1a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	69da      	ldr	r2, [r3, #28]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	431a      	orrs	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c46:	019b      	lsls	r3, r3, #6
 8001c48:	431a      	orrs	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4e:	085b      	lsrs	r3, r3, #1
 8001c50:	3b01      	subs	r3, #1
 8001c52:	041b      	lsls	r3, r3, #16
 8001c54:	431a      	orrs	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5a:	061b      	lsls	r3, r3, #24
 8001c5c:	4933      	ldr	r1, [pc, #204]	; (8001d2c <HAL_RCC_OscConfig+0x4d8>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c62:	4b33      	ldr	r3, [pc, #204]	; (8001d30 <HAL_RCC_OscConfig+0x4dc>)
 8001c64:	2201      	movs	r2, #1
 8001c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c68:	f7ff f8ee 	bl	8000e48 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c70:	f7ff f8ea 	bl	8000e48 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e04d      	b.n	8001d1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c82:	4b2a      	ldr	r3, [pc, #168]	; (8001d2c <HAL_RCC_OscConfig+0x4d8>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d0f0      	beq.n	8001c70 <HAL_RCC_OscConfig+0x41c>
 8001c8e:	e045      	b.n	8001d1c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c90:	4b27      	ldr	r3, [pc, #156]	; (8001d30 <HAL_RCC_OscConfig+0x4dc>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c96:	f7ff f8d7 	bl	8000e48 <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c9e:	f7ff f8d3 	bl	8000e48 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e036      	b.n	8001d1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cb0:	4b1e      	ldr	r3, [pc, #120]	; (8001d2c <HAL_RCC_OscConfig+0x4d8>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1f0      	bne.n	8001c9e <HAL_RCC_OscConfig+0x44a>
 8001cbc:	e02e      	b.n	8001d1c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d101      	bne.n	8001cca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e029      	b.n	8001d1e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cca:	4b18      	ldr	r3, [pc, #96]	; (8001d2c <HAL_RCC_OscConfig+0x4d8>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d11c      	bne.n	8001d18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d115      	bne.n	8001d18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d10d      	bne.n	8001d18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d106      	bne.n	8001d18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d001      	beq.n	8001d1c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e000      	b.n	8001d1e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3718      	adds	r7, #24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40007000 	.word	0x40007000
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	42470060 	.word	0x42470060

08001d34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e0cc      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d48:	4b68      	ldr	r3, [pc, #416]	; (8001eec <HAL_RCC_ClockConfig+0x1b8>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 030f 	and.w	r3, r3, #15
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d90c      	bls.n	8001d70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d56:	4b65      	ldr	r3, [pc, #404]	; (8001eec <HAL_RCC_ClockConfig+0x1b8>)
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d5e:	4b63      	ldr	r3, [pc, #396]	; (8001eec <HAL_RCC_ClockConfig+0x1b8>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 030f 	and.w	r3, r3, #15
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d001      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e0b8      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d020      	beq.n	8001dbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d005      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d88:	4b59      	ldr	r3, [pc, #356]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	4a58      	ldr	r2, [pc, #352]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0308 	and.w	r3, r3, #8
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d005      	beq.n	8001dac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001da0:	4b53      	ldr	r3, [pc, #332]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	4a52      	ldr	r2, [pc, #328]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001da6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001daa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dac:	4b50      	ldr	r3, [pc, #320]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	494d      	ldr	r1, [pc, #308]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d044      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d107      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd2:	4b47      	ldr	r3, [pc, #284]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d119      	bne.n	8001e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e07f      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d003      	beq.n	8001df2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dee:	2b03      	cmp	r3, #3
 8001df0:	d107      	bne.n	8001e02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001df2:	4b3f      	ldr	r3, [pc, #252]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d109      	bne.n	8001e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e06f      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e02:	4b3b      	ldr	r3, [pc, #236]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e067      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e12:	4b37      	ldr	r3, [pc, #220]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f023 0203 	bic.w	r2, r3, #3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	4934      	ldr	r1, [pc, #208]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e24:	f7ff f810 	bl	8000e48 <HAL_GetTick>
 8001e28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e2a:	e00a      	b.n	8001e42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e2c:	f7ff f80c 	bl	8000e48 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e04f      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e42:	4b2b      	ldr	r3, [pc, #172]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 020c 	and.w	r2, r3, #12
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d1eb      	bne.n	8001e2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e54:	4b25      	ldr	r3, [pc, #148]	; (8001eec <HAL_RCC_ClockConfig+0x1b8>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 030f 	and.w	r3, r3, #15
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d20c      	bcs.n	8001e7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e62:	4b22      	ldr	r3, [pc, #136]	; (8001eec <HAL_RCC_ClockConfig+0x1b8>)
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e6a:	4b20      	ldr	r3, [pc, #128]	; (8001eec <HAL_RCC_ClockConfig+0x1b8>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d001      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e032      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0304 	and.w	r3, r3, #4
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d008      	beq.n	8001e9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e88:	4b19      	ldr	r3, [pc, #100]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	4916      	ldr	r1, [pc, #88]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d009      	beq.n	8001eba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ea6:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	490e      	ldr	r1, [pc, #56]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001eba:	f000 f821 	bl	8001f00 <HAL_RCC_GetSysClockFreq>
 8001ebe:	4601      	mov	r1, r0
 8001ec0:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	091b      	lsrs	r3, r3, #4
 8001ec6:	f003 030f 	and.w	r3, r3, #15
 8001eca:	4a0a      	ldr	r2, [pc, #40]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8001ecc:	5cd3      	ldrb	r3, [r2, r3]
 8001ece:	fa21 f303 	lsr.w	r3, r1, r3
 8001ed2:	4a09      	ldr	r2, [pc, #36]	; (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ed6:	4b09      	ldr	r3, [pc, #36]	; (8001efc <HAL_RCC_ClockConfig+0x1c8>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe ff70 	bl	8000dc0 <HAL_InitTick>

  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40023c00 	.word	0x40023c00
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	0802bf5c 	.word	0x0802bf5c
 8001ef8:	20000008 	.word	0x20000008
 8001efc:	20000000 	.word	0x20000000

08001f00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f06:	2300      	movs	r3, #0
 8001f08:	607b      	str	r3, [r7, #4]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	2300      	movs	r3, #0
 8001f10:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f16:	4b63      	ldr	r3, [pc, #396]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 030c 	and.w	r3, r3, #12
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	d007      	beq.n	8001f32 <HAL_RCC_GetSysClockFreq+0x32>
 8001f22:	2b08      	cmp	r3, #8
 8001f24:	d008      	beq.n	8001f38 <HAL_RCC_GetSysClockFreq+0x38>
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f040 80b4 	bne.w	8002094 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f2c:	4b5e      	ldr	r3, [pc, #376]	; (80020a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001f2e:	60bb      	str	r3, [r7, #8]
       break;
 8001f30:	e0b3      	b.n	800209a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f32:	4b5e      	ldr	r3, [pc, #376]	; (80020ac <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001f34:	60bb      	str	r3, [r7, #8]
      break;
 8001f36:	e0b0      	b.n	800209a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f38:	4b5a      	ldr	r3, [pc, #360]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f40:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f42:	4b58      	ldr	r3, [pc, #352]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d04a      	beq.n	8001fe4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f4e:	4b55      	ldr	r3, [pc, #340]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	099b      	lsrs	r3, r3, #6
 8001f54:	f04f 0400 	mov.w	r4, #0
 8001f58:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	ea03 0501 	and.w	r5, r3, r1
 8001f64:	ea04 0602 	and.w	r6, r4, r2
 8001f68:	4629      	mov	r1, r5
 8001f6a:	4632      	mov	r2, r6
 8001f6c:	f04f 0300 	mov.w	r3, #0
 8001f70:	f04f 0400 	mov.w	r4, #0
 8001f74:	0154      	lsls	r4, r2, #5
 8001f76:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f7a:	014b      	lsls	r3, r1, #5
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4622      	mov	r2, r4
 8001f80:	1b49      	subs	r1, r1, r5
 8001f82:	eb62 0206 	sbc.w	r2, r2, r6
 8001f86:	f04f 0300 	mov.w	r3, #0
 8001f8a:	f04f 0400 	mov.w	r4, #0
 8001f8e:	0194      	lsls	r4, r2, #6
 8001f90:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001f94:	018b      	lsls	r3, r1, #6
 8001f96:	1a5b      	subs	r3, r3, r1
 8001f98:	eb64 0402 	sbc.w	r4, r4, r2
 8001f9c:	f04f 0100 	mov.w	r1, #0
 8001fa0:	f04f 0200 	mov.w	r2, #0
 8001fa4:	00e2      	lsls	r2, r4, #3
 8001fa6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001faa:	00d9      	lsls	r1, r3, #3
 8001fac:	460b      	mov	r3, r1
 8001fae:	4614      	mov	r4, r2
 8001fb0:	195b      	adds	r3, r3, r5
 8001fb2:	eb44 0406 	adc.w	r4, r4, r6
 8001fb6:	f04f 0100 	mov.w	r1, #0
 8001fba:	f04f 0200 	mov.w	r2, #0
 8001fbe:	0262      	lsls	r2, r4, #9
 8001fc0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001fc4:	0259      	lsls	r1, r3, #9
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	4614      	mov	r4, r2
 8001fca:	4618      	mov	r0, r3
 8001fcc:	4621      	mov	r1, r4
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f04f 0400 	mov.w	r4, #0
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4623      	mov	r3, r4
 8001fd8:	f7fe fd48 	bl	8000a6c <__aeabi_uldivmod>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	460c      	mov	r4, r1
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	e049      	b.n	8002078 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fe4:	4b2f      	ldr	r3, [pc, #188]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	099b      	lsrs	r3, r3, #6
 8001fea:	f04f 0400 	mov.w	r4, #0
 8001fee:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ff2:	f04f 0200 	mov.w	r2, #0
 8001ff6:	ea03 0501 	and.w	r5, r3, r1
 8001ffa:	ea04 0602 	and.w	r6, r4, r2
 8001ffe:	4629      	mov	r1, r5
 8002000:	4632      	mov	r2, r6
 8002002:	f04f 0300 	mov.w	r3, #0
 8002006:	f04f 0400 	mov.w	r4, #0
 800200a:	0154      	lsls	r4, r2, #5
 800200c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002010:	014b      	lsls	r3, r1, #5
 8002012:	4619      	mov	r1, r3
 8002014:	4622      	mov	r2, r4
 8002016:	1b49      	subs	r1, r1, r5
 8002018:	eb62 0206 	sbc.w	r2, r2, r6
 800201c:	f04f 0300 	mov.w	r3, #0
 8002020:	f04f 0400 	mov.w	r4, #0
 8002024:	0194      	lsls	r4, r2, #6
 8002026:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800202a:	018b      	lsls	r3, r1, #6
 800202c:	1a5b      	subs	r3, r3, r1
 800202e:	eb64 0402 	sbc.w	r4, r4, r2
 8002032:	f04f 0100 	mov.w	r1, #0
 8002036:	f04f 0200 	mov.w	r2, #0
 800203a:	00e2      	lsls	r2, r4, #3
 800203c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002040:	00d9      	lsls	r1, r3, #3
 8002042:	460b      	mov	r3, r1
 8002044:	4614      	mov	r4, r2
 8002046:	195b      	adds	r3, r3, r5
 8002048:	eb44 0406 	adc.w	r4, r4, r6
 800204c:	f04f 0100 	mov.w	r1, #0
 8002050:	f04f 0200 	mov.w	r2, #0
 8002054:	02a2      	lsls	r2, r4, #10
 8002056:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800205a:	0299      	lsls	r1, r3, #10
 800205c:	460b      	mov	r3, r1
 800205e:	4614      	mov	r4, r2
 8002060:	4618      	mov	r0, r3
 8002062:	4621      	mov	r1, r4
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f04f 0400 	mov.w	r4, #0
 800206a:	461a      	mov	r2, r3
 800206c:	4623      	mov	r3, r4
 800206e:	f7fe fcfd 	bl	8000a6c <__aeabi_uldivmod>
 8002072:	4603      	mov	r3, r0
 8002074:	460c      	mov	r4, r1
 8002076:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002078:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	0c1b      	lsrs	r3, r3, #16
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	3301      	adds	r3, #1
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002090:	60bb      	str	r3, [r7, #8]
      break;
 8002092:	e002      	b.n	800209a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002094:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002096:	60bb      	str	r3, [r7, #8]
      break;
 8002098:	bf00      	nop
    }
  }
  return sysclockfreq;
 800209a:	68bb      	ldr	r3, [r7, #8]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020a4:	40023800 	.word	0x40023800
 80020a8:	00f42400 	.word	0x00f42400
 80020ac:	007a1200 	.word	0x007a1200

080020b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020b4:	4b03      	ldr	r3, [pc, #12]	; (80020c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80020b6:	681b      	ldr	r3, [r3, #0]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	20000008 	.word	0x20000008

080020c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020cc:	f7ff fff0 	bl	80020b0 <HAL_RCC_GetHCLKFreq>
 80020d0:	4601      	mov	r1, r0
 80020d2:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	0a9b      	lsrs	r3, r3, #10
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	4a03      	ldr	r2, [pc, #12]	; (80020ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80020de:	5cd3      	ldrb	r3, [r2, r3]
 80020e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40023800 	.word	0x40023800
 80020ec:	0802bf6c 	.word	0x0802bf6c

080020f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020f4:	f7ff ffdc 	bl	80020b0 <HAL_RCC_GetHCLKFreq>
 80020f8:	4601      	mov	r1, r0
 80020fa:	4b05      	ldr	r3, [pc, #20]	; (8002110 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	0b5b      	lsrs	r3, r3, #13
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	4a03      	ldr	r2, [pc, #12]	; (8002114 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002106:	5cd3      	ldrb	r3, [r2, r3]
 8002108:	fa21 f303 	lsr.w	r3, r1, r3
}
 800210c:	4618      	mov	r0, r3
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40023800 	.word	0x40023800
 8002114:	0802bf6c 	.word	0x0802bf6c

08002118 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e05d      	b.n	80021e6 <HAL_SPI_Init+0xce>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d106      	bne.n	8002144 <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f006 fefa 	bl	8008f38 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2202      	movs	r2, #2
 8002148:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800215a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	431a      	orrs	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	431a      	orrs	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	431a      	orrs	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	431a      	orrs	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002180:	431a      	orrs	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	ea42 0103 	orr.w	r1, r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	0c1b      	lsrs	r3, r3, #16
 80021a2:	f003 0104 	and.w	r1, r3, #4
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	430a      	orrs	r2, r1
 80021b0:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021ba:	d104      	bne.n	80021c6 <HAL_SPI_Init+0xae>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80021c4:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	69da      	ldr	r2, [r3, #28]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021d4:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b08a      	sub	sp, #40	; 0x28
 80021f2:	af02      	add	r7, sp, #8
 80021f4:	60f8      	str	r0, [r7, #12]
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	603b      	str	r3, [r7, #0]
 80021fa:	4613      	mov	r3, r2
 80021fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 80021fe:	2300      	movs	r3, #0
 8002200:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002202:	2300      	movs	r3, #0
 8002204:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800220c:	2b01      	cmp	r3, #1
 800220e:	d101      	bne.n	8002214 <HAL_SPI_Transmit+0x26>
 8002210:	2302      	movs	r3, #2
 8002212:	e147      	b.n	80024a4 <HAL_SPI_Transmit+0x2b6>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800221c:	f7fe fe14 	bl	8000e48 <HAL_GetTick>
 8002220:	61b8      	str	r0, [r7, #24]

  if(hspi->State != HAL_SPI_STATE_READY)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b01      	cmp	r3, #1
 800222c:	d002      	beq.n	8002234 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800222e:	2302      	movs	r3, #2
 8002230:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002232:	e12e      	b.n	8002492 <HAL_SPI_Transmit+0x2a4>
  }

  if((pData == NULL ) || (Size == 0))
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d002      	beq.n	8002240 <HAL_SPI_Transmit+0x52>
 800223a:	88fb      	ldrh	r3, [r7, #6]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d102      	bne.n	8002246 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002244:	e125      	b.n	8002492 <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2203      	movs	r2, #3
 800224a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2200      	movs	r2, #0
 8002252:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	88fa      	ldrh	r2, [r7, #6]
 800225e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	88fa      	ldrh	r2, [r7, #6]
 8002264:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800228c:	d107      	bne.n	800229e <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800229c:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022a6:	d10f      	bne.n	80022c8 <HAL_SPI_Transmit+0xda>
  {
    SPI_RESET_CRC(hspi);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022c6:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d2:	2b40      	cmp	r3, #64	; 0x40
 80022d4:	d007      	beq.n	80022e6 <HAL_SPI_Transmit+0xf8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022ee:	d147      	bne.n	8002380 <HAL_SPI_Transmit+0x192>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d004      	beq.n	8002302 <HAL_SPI_Transmit+0x114>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d138      	bne.n	8002374 <HAL_SPI_Transmit+0x186>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	881a      	ldrh	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	3302      	adds	r3, #2
 8002310:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002316:	b29b      	uxth	r3, r3
 8002318:	3b01      	subs	r3, #1
 800231a:	b29a      	uxth	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002320:	e028      	b.n	8002374 <HAL_SPI_Transmit+0x186>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b02      	cmp	r3, #2
 800232e:	d10f      	bne.n	8002350 <HAL_SPI_Transmit+0x162>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	881a      	ldrh	r2, [r3, #0]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	3302      	adds	r3, #2
 800233e:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount--;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002344:	b29b      	uxth	r3, r3
 8002346:	3b01      	subs	r3, #1
 8002348:	b29a      	uxth	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	86da      	strh	r2, [r3, #54]	; 0x36
 800234e:	e011      	b.n	8002374 <HAL_SPI_Transmit+0x186>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00b      	beq.n	800236e <HAL_SPI_Transmit+0x180>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800235c:	d00a      	beq.n	8002374 <HAL_SPI_Transmit+0x186>
 800235e:	f7fe fd73 	bl	8000e48 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	429a      	cmp	r2, r3
 800236c:	d802      	bhi.n	8002374 <HAL_SPI_Transmit+0x186>
        {
          errorcode = HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002372:	e08e      	b.n	8002492 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002378:	b29b      	uxth	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1d1      	bne.n	8002322 <HAL_SPI_Transmit+0x134>
 800237e:	e048      	b.n	8002412 <HAL_SPI_Transmit+0x224>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d004      	beq.n	8002392 <HAL_SPI_Transmit+0x1a4>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800238c:	b29b      	uxth	r3, r3
 800238e:	2b01      	cmp	r3, #1
 8002390:	d13a      	bne.n	8002408 <HAL_SPI_Transmit+0x21a>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	330c      	adds	r3, #12
 8002398:	68ba      	ldr	r2, [r7, #8]
 800239a:	7812      	ldrb	r2, [r2, #0]
 800239c:	701a      	strb	r2, [r3, #0]
      pData += sizeof(uint8_t);
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	3301      	adds	r3, #1
 80023a2:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	3b01      	subs	r3, #1
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80023b2:	e029      	b.n	8002408 <HAL_SPI_Transmit+0x21a>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d110      	bne.n	80023e4 <HAL_SPI_Transmit+0x1f6>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	330c      	adds	r3, #12
 80023c8:	68ba      	ldr	r2, [r7, #8]
 80023ca:	7812      	ldrb	r2, [r2, #0]
 80023cc:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	3301      	adds	r3, #1
 80023d2:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023d8:	b29b      	uxth	r3, r3
 80023da:	3b01      	subs	r3, #1
 80023dc:	b29a      	uxth	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	86da      	strh	r2, [r3, #54]	; 0x36
 80023e2:	e011      	b.n	8002408 <HAL_SPI_Transmit+0x21a>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00b      	beq.n	8002402 <HAL_SPI_Transmit+0x214>
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f0:	d00a      	beq.n	8002408 <HAL_SPI_Transmit+0x21a>
 80023f2:	f7fe fd29 	bl	8000e48 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d802      	bhi.n	8002408 <HAL_SPI_Transmit+0x21a>
        {
          errorcode = HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002406:	e044      	b.n	8002492 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800240c:	b29b      	uxth	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1d0      	bne.n	80023b4 <HAL_SPI_Transmit+0x1c6>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	2201      	movs	r2, #1
 800241a:	2102      	movs	r1, #2
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 fa56 	bl	80028ce <SPI_WaitFlagStateUntilTimeout>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d002      	beq.n	800242e <HAL_SPI_Transmit+0x240>
  {
    errorcode = HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800242c:	e031      	b.n	8002492 <HAL_SPI_Transmit+0x2a4>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	6839      	ldr	r1, [r7, #0]
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f000 fab3 	bl	800299e <SPI_CheckFlag_BSY>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d005      	beq.n	800244a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	77fb      	strb	r3, [r7, #31]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2220      	movs	r2, #32
 8002446:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002448:	e023      	b.n	8002492 <HAL_SPI_Transmit+0x2a4>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10a      	bne.n	8002468 <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	617b      	str	r3, [r7, #20]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	617b      	str	r3, [r7, #20]
 8002466:	697b      	ldr	r3, [r7, #20]
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002470:	d107      	bne.n	8002482 <HAL_SPI_Transmit+0x294>
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002480:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002486:	2b00      	cmp	r3, #0
 8002488:	d002      	beq.n	8002490 <HAL_SPI_Transmit+0x2a2>
  {
    errorcode = HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	77fb      	strb	r3, [r7, #31]
 800248e:	e000      	b.n	8002492 <HAL_SPI_Transmit+0x2a4>
  }

error:
 8002490:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80024a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3720      	adds	r7, #32
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_SPI_TransmitReceive>:
  * @param  Size amount of data to be sent and received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b08e      	sub	sp, #56	; 0x38
 80024b0:	af02      	add	r7, sp, #8
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
 80024b8:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
 80024be:	2300      	movs	r3, #0
 80024c0:	623b      	str	r3, [r7, #32]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg1 = 0U;
 80024c2:	2300      	movs	r3, #0
 80024c4:	837b      	strh	r3, [r7, #26]
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	61fb      	str	r3, [r7, #28]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 80024ca:	2301      	movs	r3, #1
 80024cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef errorcode = HAL_OK;
 80024ce:	2300      	movs	r3, #0
 80024d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d101      	bne.n	80024e2 <HAL_SPI_TransmitReceive+0x36>
 80024de:	2302      	movs	r3, #2
 80024e0:	e1f1      	b.n	80028c6 <HAL_SPI_TransmitReceive+0x41a>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024ea:	f7fe fcad 	bl	8000e48 <HAL_GetTick>
 80024ee:	61f8      	str	r0, [r7, #28]
  
  tmp  = hspi->State;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp1 = hspi->Init.Mode;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	623b      	str	r3, [r7, #32]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	2b01      	cmp	r3, #1
 8002504:	d00e      	beq.n	8002524 <HAL_SPI_TransmitReceive+0x78>
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800250c:	d106      	bne.n	800251c <HAL_SPI_TransmitReceive+0x70>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d102      	bne.n	800251c <HAL_SPI_TransmitReceive+0x70>
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	2b04      	cmp	r3, #4
 800251a:	d003      	beq.n	8002524 <HAL_SPI_TransmitReceive+0x78>
  {
    errorcode = HAL_BUSY;
 800251c:	2302      	movs	r3, #2
 800251e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002522:	e1c6      	b.n	80028b2 <HAL_SPI_TransmitReceive+0x406>
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d005      	beq.n	8002536 <HAL_SPI_TransmitReceive+0x8a>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d002      	beq.n	8002536 <HAL_SPI_TransmitReceive+0x8a>
 8002530:	887b      	ldrh	r3, [r7, #2]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d103      	bne.n	800253e <HAL_SPI_TransmitReceive+0x92>
  {
    errorcode = HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800253c:	e1b9      	b.n	80028b2 <HAL_SPI_TransmitReceive+0x406>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b01      	cmp	r3, #1
 8002548:	d103      	bne.n	8002552 <HAL_SPI_TransmitReceive+0xa6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2205      	movs	r2, #5
 800254e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	887a      	ldrh	r2, [r7, #2]
 8002562:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	887a      	ldrh	r2, [r7, #2]
 8002568:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	68ba      	ldr	r2, [r7, #8]
 800256e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	887a      	ldrh	r2, [r7, #2]
 8002574:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	887a      	ldrh	r2, [r7, #2]
 800257a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002590:	d10f      	bne.n	80025b2 <HAL_SPI_TransmitReceive+0x106>
  {
    SPI_RESET_CRC(hspi);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025b0:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025bc:	2b40      	cmp	r3, #64	; 0x40
 80025be:	d007      	beq.n	80025d0 <HAL_SPI_TransmitReceive+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025d8:	f040 8084 	bne.w	80026e4 <HAL_SPI_TransmitReceive+0x238>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d004      	beq.n	80025ee <HAL_SPI_TransmitReceive+0x142>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d16f      	bne.n	80026ce <HAL_SPI_TransmitReceive+0x222>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	881a      	ldrh	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	3302      	adds	r3, #2
 80025fc:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002602:	b29b      	uxth	r3, r3
 8002604:	3b01      	subs	r3, #1
 8002606:	b29a      	uxth	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800260c:	e05f      	b.n	80026ce <HAL_SPI_TransmitReceive+0x222>
    {
      /* Check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800260e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002610:	2b00      	cmp	r3, #0
 8002612:	d02e      	beq.n	8002672 <HAL_SPI_TransmitReceive+0x1c6>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002618:	b29b      	uxth	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d029      	beq.n	8002672 <HAL_SPI_TransmitReceive+0x1c6>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b02      	cmp	r3, #2
 800262a:	d122      	bne.n	8002672 <HAL_SPI_TransmitReceive+0x1c6>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	881a      	ldrh	r2, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	3302      	adds	r3, #2
 800263a:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002640:	b29b      	uxth	r3, r3
 8002642:	3b01      	subs	r3, #1
 8002644:	b29a      	uxth	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 800264a:	2300      	movs	r3, #0
 800264c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002652:	b29b      	uxth	r3, r3
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10c      	bne.n	8002672 <HAL_SPI_TransmitReceive+0x1c6>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002660:	d107      	bne.n	8002672 <HAL_SPI_TransmitReceive+0x1c6>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002670:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002676:	b29b      	uxth	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	d018      	beq.n	80026ae <HAL_SPI_TransmitReceive+0x202>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b01      	cmp	r3, #1
 8002688:	d111      	bne.n	80026ae <HAL_SPI_TransmitReceive+0x202>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	b29a      	uxth	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	3302      	adds	r3, #2
 800269a:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	3b01      	subs	r3, #1
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 80026aa:	2301      	movs	r3, #1
 80026ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 80026ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b4:	d00b      	beq.n	80026ce <HAL_SPI_TransmitReceive+0x222>
 80026b6:	f7fe fbc7 	bl	8000e48 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d803      	bhi.n	80026ce <HAL_SPI_TransmitReceive+0x222>
      {
        errorcode = HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80026cc:	e0f1      	b.n	80028b2 <HAL_SPI_TransmitReceive+0x406>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d19a      	bne.n	800260e <HAL_SPI_TransmitReceive+0x162>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026dc:	b29b      	uxth	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d195      	bne.n	800260e <HAL_SPI_TransmitReceive+0x162>
 80026e2:	e082      	b.n	80027ea <HAL_SPI_TransmitReceive+0x33e>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d004      	beq.n	80026f6 <HAL_SPI_TransmitReceive+0x24a>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d16f      	bne.n	80027d6 <HAL_SPI_TransmitReceive+0x32a>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	330c      	adds	r3, #12
 80026fc:	68ba      	ldr	r2, [r7, #8]
 80026fe:	7812      	ldrb	r2, [r2, #0]
 8002700:	701a      	strb	r2, [r3, #0]
      pTxData += sizeof(uint8_t);
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	3301      	adds	r3, #1
 8002706:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800270c:	b29b      	uxth	r3, r3
 800270e:	3b01      	subs	r3, #1
 8002710:	b29a      	uxth	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002716:	e05e      	b.n	80027d6 <HAL_SPI_TransmitReceive+0x32a>
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800271a:	2b00      	cmp	r3, #0
 800271c:	d02e      	beq.n	800277c <HAL_SPI_TransmitReceive+0x2d0>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002722:	b29b      	uxth	r3, r3
 8002724:	2b00      	cmp	r3, #0
 8002726:	d029      	beq.n	800277c <HAL_SPI_TransmitReceive+0x2d0>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b02      	cmp	r3, #2
 8002734:	d122      	bne.n	800277c <HAL_SPI_TransmitReceive+0x2d0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	1c5a      	adds	r2, r3, #1
 800273a:	60ba      	str	r2, [r7, #8]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	6812      	ldr	r2, [r2, #0]
 8002740:	320c      	adds	r2, #12
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800274a:	b29b      	uxth	r3, r3
 800274c:	3b01      	subs	r3, #1
 800274e:	b29a      	uxth	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8002754:	2300      	movs	r3, #0
 8002756:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800275c:	b29b      	uxth	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10c      	bne.n	800277c <HAL_SPI_TransmitReceive+0x2d0>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800276a:	d107      	bne.n	800277c <HAL_SPI_TransmitReceive+0x2d0>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800277a:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002780:	b29b      	uxth	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d017      	beq.n	80027b6 <HAL_SPI_TransmitReceive+0x30a>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	2b01      	cmp	r3, #1
 8002792:	d110      	bne.n	80027b6 <HAL_SPI_TransmitReceive+0x30a>
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68d9      	ldr	r1, [r3, #12]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	1c5a      	adds	r2, r3, #1
 800279e:	607a      	str	r2, [r7, #4]
 80027a0:	b2ca      	uxtb	r2, r1
 80027a2:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	3b01      	subs	r3, #1
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 80027b2:	2301      	movs	r3, #1
 80027b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 80027b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027bc:	d00b      	beq.n	80027d6 <HAL_SPI_TransmitReceive+0x32a>
 80027be:	f7fe fb43 	bl	8000e48 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d803      	bhi.n	80027d6 <HAL_SPI_TransmitReceive+0x32a>
      {
        errorcode = HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80027d4:	e06d      	b.n	80028b2 <HAL_SPI_TransmitReceive+0x406>
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027da:	b29b      	uxth	r3, r3
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d19b      	bne.n	8002718 <HAL_SPI_TransmitReceive+0x26c>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d196      	bne.n	8002718 <HAL_SPI_TransmitReceive+0x26c>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027f2:	d11a      	bne.n	800282a <HAL_SPI_TransmitReceive+0x37e>
  {
    /* Wait until TXE flag */
    if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027fa:	2201      	movs	r2, #1
 80027fc:	2101      	movs	r1, #1
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f000 f865 	bl	80028ce <SPI_WaitFlagStateUntilTimeout>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d009      	beq.n	800281e <HAL_SPI_TransmitReceive+0x372>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280e:	f043 0202 	orr.w	r2, r3, #2
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 800281c:	e049      	b.n	80028b2 <HAL_SPI_TransmitReceive+0x406>
    }
    /* Read CRC */
    tmpreg1 = hspi->Instance->DR;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	b29b      	uxth	r3, r3
 8002826:	837b      	strh	r3, [r7, #26]
    /* To avoid GCC warning */
    UNUSED(tmpreg1);
 8002828:	8b7b      	ldrh	r3, [r7, #26]
  }

  /* Check if CRC error occurred */
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f003 0310 	and.w	r3, r3, #16
 8002834:	2b10      	cmp	r3, #16
 8002836:	d10d      	bne.n	8002854 <HAL_SPI_TransmitReceive+0x3a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283c:	f043 0202 	orr.w	r2, r3, #2
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800284c:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800285a:	2201      	movs	r2, #1
 800285c:	2102      	movs	r1, #2
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f000 f835 	bl	80028ce <SPI_WaitFlagStateUntilTimeout>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <HAL_SPI_TransmitReceive+0x3c6>
  {
    errorcode = HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002870:	e01f      	b.n	80028b2 <HAL_SPI_TransmitReceive+0x406>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8002872:	69fa      	ldr	r2, [r7, #28]
 8002874:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f000 f891 	bl	800299e <SPI_CheckFlag_BSY>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d006      	beq.n	8002890 <HAL_SPI_TransmitReceive+0x3e4>
  {
    errorcode = HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2220      	movs	r2, #32
 800288c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800288e:	e010      	b.n	80028b2 <HAL_SPI_TransmitReceive+0x406>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10b      	bne.n	80028b0 <HAL_SPI_TransmitReceive+0x404>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002898:	2300      	movs	r3, #0
 800289a:	617b      	str	r3, [r7, #20]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	617b      	str	r3, [r7, #20]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	e000      	b.n	80028b2 <HAL_SPI_TransmitReceive+0x406>
  }
  
error :
 80028b0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80028c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3730      	adds	r7, #48	; 0x30
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b084      	sub	sp, #16
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	60f8      	str	r0, [r7, #12]
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	607a      	str	r2, [r7, #4]
 80028da:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80028dc:	e04c      	b.n	8002978 <SPI_WaitFlagStateUntilTimeout+0xaa>
  {
    if(Timeout != HAL_MAX_DELAY)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e4:	d048      	beq.n	8002978 <SPI_WaitFlagStateUntilTimeout+0xaa>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d007      	beq.n	80028fc <SPI_WaitFlagStateUntilTimeout+0x2e>
 80028ec:	f7fe faac 	bl	8000e48 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d83d      	bhi.n	8002978 <SPI_WaitFlagStateUntilTimeout+0xaa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800290a:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002914:	d111      	bne.n	800293a <SPI_WaitFlagStateUntilTimeout+0x6c>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800291e:	d004      	beq.n	800292a <SPI_WaitFlagStateUntilTimeout+0x5c>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002928:	d107      	bne.n	800293a <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002938:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002942:	d10f      	bne.n	8002964 <SPI_WaitFlagStateUntilTimeout+0x96>
        {
          SPI_RESET_CRC(hspi);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002962:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e00e      	b.n	8002996 <SPI_WaitFlagStateUntilTimeout+0xc8>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	4013      	ands	r3, r2
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	429a      	cmp	r2, r3
 8002986:	d101      	bne.n	800298c <SPI_WaitFlagStateUntilTimeout+0xbe>
 8002988:	2201      	movs	r2, #1
 800298a:	e000      	b.n	800298e <SPI_WaitFlagStateUntilTimeout+0xc0>
 800298c:	2200      	movs	r2, #0
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	429a      	cmp	r2, r3
 8002992:	d1a4      	bne.n	80028de <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b086      	sub	sp, #24
 80029a2:	af02      	add	r7, sp, #8
 80029a4:	60f8      	str	r0, [r7, #12]
 80029a6:	60b9      	str	r1, [r7, #8]
 80029a8:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	2200      	movs	r2, #0
 80029b2:	2180      	movs	r1, #128	; 0x80
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f7ff ff8a 	bl	80028ce <SPI_WaitFlagStateUntilTimeout>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d007      	beq.n	80029d0 <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c4:	f043 0220 	orr.w	r2, r3, #32
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e000      	b.n	80029d2 <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b082      	sub	sp, #8
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d101      	bne.n	80029ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e01d      	b.n	8002a28 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d106      	bne.n	8002a06 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f006 fa47 	bl	8008e94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2202      	movs	r2, #2
 8002a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	3304      	adds	r3, #4
 8002a16:	4619      	mov	r1, r3
 8002a18:	4610      	mov	r0, r2
 8002a1a:	f000 fb1b 	bl	8003054 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
 8002a3c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d101      	bne.n	8002a4e <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	e0e9      	b.n	8002c22 <HAL_TIM_PWM_Start_DMA+0x1f2>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d10b      	bne.n	8002a72 <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d104      	bne.n	8002a6a <HAL_TIM_PWM_Start_DMA+0x3a>
 8002a60:	887b      	ldrh	r3, [r7, #2]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e0db      	b.n	8002c22 <HAL_TIM_PWM_Start_DMA+0x1f2>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	2b0c      	cmp	r3, #12
 8002a76:	f200 80ad 	bhi.w	8002bd4 <HAL_TIM_PWM_Start_DMA+0x1a4>
 8002a7a:	a201      	add	r2, pc, #4	; (adr r2, 8002a80 <HAL_TIM_PWM_Start_DMA+0x50>)
 8002a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a80:	08002ab5 	.word	0x08002ab5
 8002a84:	08002bd5 	.word	0x08002bd5
 8002a88:	08002bd5 	.word	0x08002bd5
 8002a8c:	08002bd5 	.word	0x08002bd5
 8002a90:	08002afd 	.word	0x08002afd
 8002a94:	08002bd5 	.word	0x08002bd5
 8002a98:	08002bd5 	.word	0x08002bd5
 8002a9c:	08002bd5 	.word	0x08002bd5
 8002aa0:	08002b45 	.word	0x08002b45
 8002aa4:	08002bd5 	.word	0x08002bd5
 8002aa8:	08002bd5 	.word	0x08002bd5
 8002aac:	08002bd5 	.word	0x08002bd5
 8002ab0:	08002b8d 	.word	0x08002b8d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab8:	4a5c      	ldr	r2, [pc, #368]	; (8002c2c <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8002aba:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac0:	4a5b      	ldr	r2, [pc, #364]	; (8002c30 <HAL_TIM_PWM_Start_DMA+0x200>)
 8002ac2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac8:	4a5a      	ldr	r2, [pc, #360]	; (8002c34 <HAL_TIM_PWM_Start_DMA+0x204>)
 8002aca:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	3334      	adds	r3, #52	; 0x34
 8002ad8:	461a      	mov	r2, r3
 8002ada:	887b      	ldrh	r3, [r7, #2]
 8002adc:	f7fe fbae 	bl	800123c <HAL_DMA_Start_IT>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e09b      	b.n	8002c22 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68da      	ldr	r2, [r3, #12]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002af8:	60da      	str	r2, [r3, #12]
      break;
 8002afa:	e06c      	b.n	8002bd6 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b00:	4a4a      	ldr	r2, [pc, #296]	; (8002c2c <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8002b02:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b08:	4a49      	ldr	r2, [pc, #292]	; (8002c30 <HAL_TIM_PWM_Start_DMA+0x200>)
 8002b0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b10:	4a48      	ldr	r2, [pc, #288]	; (8002c34 <HAL_TIM_PWM_Start_DMA+0x204>)
 8002b12:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	3338      	adds	r3, #56	; 0x38
 8002b20:	461a      	mov	r2, r3
 8002b22:	887b      	ldrh	r3, [r7, #2]
 8002b24:	f7fe fb8a 	bl	800123c <HAL_DMA_Start_IT>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e077      	b.n	8002c22 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b40:	60da      	str	r2, [r3, #12]
      break;
 8002b42:	e048      	b.n	8002bd6 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b48:	4a38      	ldr	r2, [pc, #224]	; (8002c2c <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8002b4a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b50:	4a37      	ldr	r2, [pc, #220]	; (8002c30 <HAL_TIM_PWM_Start_DMA+0x200>)
 8002b52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b58:	4a36      	ldr	r2, [pc, #216]	; (8002c34 <HAL_TIM_PWM_Start_DMA+0x204>)
 8002b5a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	333c      	adds	r3, #60	; 0x3c
 8002b68:	461a      	mov	r2, r3
 8002b6a:	887b      	ldrh	r3, [r7, #2]
 8002b6c:	f7fe fb66 	bl	800123c <HAL_DMA_Start_IT>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e053      	b.n	8002c22 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68da      	ldr	r2, [r3, #12]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b88:	60da      	str	r2, [r3, #12]
      break;
 8002b8a:	e024      	b.n	8002bd6 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b90:	4a26      	ldr	r2, [pc, #152]	; (8002c2c <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8002b92:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b98:	4a25      	ldr	r2, [pc, #148]	; (8002c30 <HAL_TIM_PWM_Start_DMA+0x200>)
 8002b9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba0:	4a24      	ldr	r2, [pc, #144]	; (8002c34 <HAL_TIM_PWM_Start_DMA+0x204>)
 8002ba2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002ba8:	6879      	ldr	r1, [r7, #4]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	3340      	adds	r3, #64	; 0x40
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	887b      	ldrh	r3, [r7, #2]
 8002bb4:	f7fe fb42 	bl	800123c <HAL_DMA_Start_IT>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e02f      	b.n	8002c22 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002bd0:	60da      	str	r2, [r3, #12]
      break;
 8002bd2:	e000      	b.n	8002bd6 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 8002bd4:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	68b9      	ldr	r1, [r7, #8]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 fc44 	bl	800346c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a13      	ldr	r2, [pc, #76]	; (8002c38 <HAL_TIM_PWM_Start_DMA+0x208>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d107      	bne.n	8002bfe <HAL_TIM_PWM_Start_DMA+0x1ce>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bfc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	2b06      	cmp	r3, #6
 8002c0e:	d007      	beq.n	8002c20 <HAL_TIM_PWM_Start_DMA+0x1f0>
  {
    __HAL_TIM_ENABLE(htim);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f042 0201 	orr.w	r2, r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3718      	adds	r7, #24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	08002f75 	.word	0x08002f75
 8002c30:	08002fe5 	.word	0x08002fe5
 8002c34:	08002f51 	.word	0x08002f51
 8002c38:	40010000 	.word	0x40010000

08002c3c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	2b0c      	cmp	r3, #12
 8002c4a:	d855      	bhi.n	8002cf8 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8002c4c:	a201      	add	r2, pc, #4	; (adr r2, 8002c54 <HAL_TIM_PWM_Stop_DMA+0x18>)
 8002c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c52:	bf00      	nop
 8002c54:	08002c89 	.word	0x08002c89
 8002c58:	08002cf9 	.word	0x08002cf9
 8002c5c:	08002cf9 	.word	0x08002cf9
 8002c60:	08002cf9 	.word	0x08002cf9
 8002c64:	08002ca5 	.word	0x08002ca5
 8002c68:	08002cf9 	.word	0x08002cf9
 8002c6c:	08002cf9 	.word	0x08002cf9
 8002c70:	08002cf9 	.word	0x08002cf9
 8002c74:	08002cc1 	.word	0x08002cc1
 8002c78:	08002cf9 	.word	0x08002cf9
 8002c7c:	08002cf9 	.word	0x08002cf9
 8002c80:	08002cf9 	.word	0x08002cf9
 8002c84:	08002cdd 	.word	0x08002cdd
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68da      	ldr	r2, [r3, #12]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c96:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7fe fb25 	bl	80012ec <HAL_DMA_Abort_IT>
      break;
 8002ca2:	e02a      	b.n	8002cfa <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68da      	ldr	r2, [r3, #12]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cb2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7fe fb17 	bl	80012ec <HAL_DMA_Abort_IT>
      break;
 8002cbe:	e01c      	b.n	8002cfa <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68da      	ldr	r2, [r3, #12]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cce:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7fe fb09 	bl	80012ec <HAL_DMA_Abort_IT>
      break;
 8002cda:	e00e      	b.n	8002cfa <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68da      	ldr	r2, [r3, #12]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cea:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7fe fafb 	bl	80012ec <HAL_DMA_Abort_IT>
      break;
 8002cf6:	e000      	b.n	8002cfa <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8002cf8:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	6839      	ldr	r1, [r7, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 fbb2 	bl	800346c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a1d      	ldr	r2, [pc, #116]	; (8002d84 <HAL_TIM_PWM_Stop_DMA+0x148>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d117      	bne.n	8002d42 <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6a1a      	ldr	r2, [r3, #32]
 8002d18:	f241 1311 	movw	r3, #4369	; 0x1111
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10f      	bne.n	8002d42 <HAL_TIM_PWM_Stop_DMA+0x106>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6a1a      	ldr	r2, [r3, #32]
 8002d28:	f240 4344 	movw	r3, #1092	; 0x444
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d107      	bne.n	8002d42 <HAL_TIM_PWM_Stop_DMA+0x106>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6a1a      	ldr	r2, [r3, #32]
 8002d48:	f241 1311 	movw	r3, #4369	; 0x1111
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10f      	bne.n	8002d72 <HAL_TIM_PWM_Stop_DMA+0x136>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	6a1a      	ldr	r2, [r3, #32]
 8002d58:	f240 4344 	movw	r3, #1092	; 0x444
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d107      	bne.n	8002d72 <HAL_TIM_PWM_Stop_DMA+0x136>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0201 	bic.w	r2, r2, #1
 8002d70:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40010000 	.word	0x40010000

08002d88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d101      	bne.n	8002da2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	e0b4      	b.n	8002f0c <HAL_TIM_PWM_ConfigChannel+0x184>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2202      	movs	r2, #2
 8002dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b0c      	cmp	r3, #12
 8002db6:	f200 809f 	bhi.w	8002ef8 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002dba:	a201      	add	r2, pc, #4	; (adr r2, 8002dc0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc0:	08002df5 	.word	0x08002df5
 8002dc4:	08002ef9 	.word	0x08002ef9
 8002dc8:	08002ef9 	.word	0x08002ef9
 8002dcc:	08002ef9 	.word	0x08002ef9
 8002dd0:	08002e35 	.word	0x08002e35
 8002dd4:	08002ef9 	.word	0x08002ef9
 8002dd8:	08002ef9 	.word	0x08002ef9
 8002ddc:	08002ef9 	.word	0x08002ef9
 8002de0:	08002e77 	.word	0x08002e77
 8002de4:	08002ef9 	.word	0x08002ef9
 8002de8:	08002ef9 	.word	0x08002ef9
 8002dec:	08002ef9 	.word	0x08002ef9
 8002df0:	08002eb7 	.word	0x08002eb7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68b9      	ldr	r1, [r7, #8]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 f9aa 	bl	8003154 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	699a      	ldr	r2, [r3, #24]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 0208 	orr.w	r2, r2, #8
 8002e0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	699a      	ldr	r2, [r3, #24]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0204 	bic.w	r2, r2, #4
 8002e1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6999      	ldr	r1, [r3, #24]
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	691a      	ldr	r2, [r3, #16]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	619a      	str	r2, [r3, #24]
      break;
 8002e32:	e062      	b.n	8002efa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68b9      	ldr	r1, [r7, #8]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 f9f0 	bl	8003220 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	699a      	ldr	r2, [r3, #24]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	699a      	ldr	r2, [r3, #24]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6999      	ldr	r1, [r3, #24]
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	021a      	lsls	r2, r3, #8
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	619a      	str	r2, [r3, #24]
      break;
 8002e74:	e041      	b.n	8002efa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68b9      	ldr	r1, [r7, #8]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f000 fa3b 	bl	80032f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	69da      	ldr	r2, [r3, #28]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f042 0208 	orr.w	r2, r2, #8
 8002e90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	69da      	ldr	r2, [r3, #28]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 0204 	bic.w	r2, r2, #4
 8002ea0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	69d9      	ldr	r1, [r3, #28]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	691a      	ldr	r2, [r3, #16]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	61da      	str	r2, [r3, #28]
      break;
 8002eb4:	e021      	b.n	8002efa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68b9      	ldr	r1, [r7, #8]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f000 fa85 	bl	80033cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	69da      	ldr	r2, [r3, #28]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ed0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	69da      	ldr	r2, [r3, #28]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ee0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	69d9      	ldr	r1, [r3, #28]
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	021a      	lsls	r2, r3, #8
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	61da      	str	r2, [r3, #28]
      break;
 8002ef6:	e000      	b.n	8002efa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002ef8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5c:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f7ff ffe8 	bl	8002f3c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8002f6c:	bf00      	nop
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f80:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d103      	bne.n	8002f9c <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2201      	movs	r2, #1
 8002f98:	771a      	strb	r2, [r3, #28]
 8002f9a:	e019      	b.n	8002fd0 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d103      	bne.n	8002fae <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2202      	movs	r2, #2
 8002faa:	771a      	strb	r2, [r3, #28]
 8002fac:	e010      	b.n	8002fd0 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d103      	bne.n	8002fc0 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2204      	movs	r2, #4
 8002fbc:	771a      	strb	r2, [r3, #28]
 8002fbe:	e007      	b.n	8002fd0 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d102      	bne.n	8002fd0 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2208      	movs	r2, #8
 8002fce:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f7ff ff9f 	bl	8002f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	771a      	strb	r2, [r3, #28]
}
 8002fdc:	bf00      	nop
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff0:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	429a      	cmp	r2, r3
 8003002:	d103      	bne.n	800300c <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2201      	movs	r2, #1
 8003008:	771a      	strb	r2, [r3, #28]
 800300a:	e019      	b.n	8003040 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	429a      	cmp	r2, r3
 8003014:	d103      	bne.n	800301e <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2202      	movs	r2, #2
 800301a:	771a      	strb	r2, [r3, #28]
 800301c:	e010      	b.n	8003040 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	429a      	cmp	r2, r3
 8003026:	d103      	bne.n	8003030 <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2204      	movs	r2, #4
 800302c:	771a      	strb	r2, [r3, #28]
 800302e:	e007      	b.n	8003040 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	429a      	cmp	r2, r3
 8003038:	d102      	bne.n	8003040 <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2208      	movs	r2, #8
 800303e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f7ff ff71 	bl	8002f28 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	771a      	strb	r2, [r3, #28]
}
 800304c:	bf00      	nop
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a34      	ldr	r2, [pc, #208]	; (8003138 <TIM_Base_SetConfig+0xe4>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d00f      	beq.n	800308c <TIM_Base_SetConfig+0x38>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003072:	d00b      	beq.n	800308c <TIM_Base_SetConfig+0x38>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a31      	ldr	r2, [pc, #196]	; (800313c <TIM_Base_SetConfig+0xe8>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d007      	beq.n	800308c <TIM_Base_SetConfig+0x38>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a30      	ldr	r2, [pc, #192]	; (8003140 <TIM_Base_SetConfig+0xec>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d003      	beq.n	800308c <TIM_Base_SetConfig+0x38>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a2f      	ldr	r2, [pc, #188]	; (8003144 <TIM_Base_SetConfig+0xf0>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d108      	bne.n	800309e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003092:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	4313      	orrs	r3, r2
 800309c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a25      	ldr	r2, [pc, #148]	; (8003138 <TIM_Base_SetConfig+0xe4>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d01b      	beq.n	80030de <TIM_Base_SetConfig+0x8a>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ac:	d017      	beq.n	80030de <TIM_Base_SetConfig+0x8a>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a22      	ldr	r2, [pc, #136]	; (800313c <TIM_Base_SetConfig+0xe8>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d013      	beq.n	80030de <TIM_Base_SetConfig+0x8a>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a21      	ldr	r2, [pc, #132]	; (8003140 <TIM_Base_SetConfig+0xec>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d00f      	beq.n	80030de <TIM_Base_SetConfig+0x8a>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a20      	ldr	r2, [pc, #128]	; (8003144 <TIM_Base_SetConfig+0xf0>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d00b      	beq.n	80030de <TIM_Base_SetConfig+0x8a>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a1f      	ldr	r2, [pc, #124]	; (8003148 <TIM_Base_SetConfig+0xf4>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d007      	beq.n	80030de <TIM_Base_SetConfig+0x8a>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a1e      	ldr	r2, [pc, #120]	; (800314c <TIM_Base_SetConfig+0xf8>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d003      	beq.n	80030de <TIM_Base_SetConfig+0x8a>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a1d      	ldr	r2, [pc, #116]	; (8003150 <TIM_Base_SetConfig+0xfc>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d108      	bne.n	80030f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a08      	ldr	r2, [pc, #32]	; (8003138 <TIM_Base_SetConfig+0xe4>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d103      	bne.n	8003124 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	691a      	ldr	r2, [r3, #16]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	615a      	str	r2, [r3, #20]
}
 800312a:	bf00      	nop
 800312c:	3714      	adds	r7, #20
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	40010000 	.word	0x40010000
 800313c:	40000400 	.word	0x40000400
 8003140:	40000800 	.word	0x40000800
 8003144:	40000c00 	.word	0x40000c00
 8003148:	40014000 	.word	0x40014000
 800314c:	40014400 	.word	0x40014400
 8003150:	40014800 	.word	0x40014800

08003154 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003154:	b480      	push	{r7}
 8003156:	b087      	sub	sp, #28
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	f023 0201 	bic.w	r2, r3, #1
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f023 0303 	bic.w	r3, r3, #3
 800318a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	4313      	orrs	r3, r2
 8003194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f023 0302 	bic.w	r3, r3, #2
 800319c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a1c      	ldr	r2, [pc, #112]	; (800321c <TIM_OC1_SetConfig+0xc8>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d10c      	bne.n	80031ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f023 0308 	bic.w	r3, r3, #8
 80031b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	4313      	orrs	r3, r2
 80031c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	f023 0304 	bic.w	r3, r3, #4
 80031c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a13      	ldr	r2, [pc, #76]	; (800321c <TIM_OC1_SetConfig+0xc8>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d111      	bne.n	80031f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	621a      	str	r2, [r3, #32]
}
 8003210:	bf00      	nop
 8003212:	371c      	adds	r7, #28
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	40010000 	.word	0x40010000

08003220 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003220:	b480      	push	{r7}
 8003222:	b087      	sub	sp, #28
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	f023 0210 	bic.w	r2, r3, #16
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800324e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003256:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	021b      	lsls	r3, r3, #8
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	4313      	orrs	r3, r2
 8003262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	f023 0320 	bic.w	r3, r3, #32
 800326a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	4313      	orrs	r3, r2
 8003276:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a1e      	ldr	r2, [pc, #120]	; (80032f4 <TIM_OC2_SetConfig+0xd4>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d10d      	bne.n	800329c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003286:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	011b      	lsls	r3, r3, #4
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	4313      	orrs	r3, r2
 8003292:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800329a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a15      	ldr	r2, [pc, #84]	; (80032f4 <TIM_OC2_SetConfig+0xd4>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d113      	bne.n	80032cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	4313      	orrs	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	621a      	str	r2, [r3, #32]
}
 80032e6:	bf00      	nop
 80032e8:	371c      	adds	r7, #28
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	40010000 	.word	0x40010000

080032f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b087      	sub	sp, #28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f023 0303 	bic.w	r3, r3, #3
 800332e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	4313      	orrs	r3, r2
 8003338:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003340:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	021b      	lsls	r3, r3, #8
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	4313      	orrs	r3, r2
 800334c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a1d      	ldr	r2, [pc, #116]	; (80033c8 <TIM_OC3_SetConfig+0xd0>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d10d      	bne.n	8003372 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800335c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	021b      	lsls	r3, r3, #8
 8003364:	697a      	ldr	r2, [r7, #20]
 8003366:	4313      	orrs	r3, r2
 8003368:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003370:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a14      	ldr	r2, [pc, #80]	; (80033c8 <TIM_OC3_SetConfig+0xd0>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d113      	bne.n	80033a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003380:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003388:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	4313      	orrs	r3, r2
 8003394:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	011b      	lsls	r3, r3, #4
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	4313      	orrs	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	621a      	str	r2, [r3, #32]
}
 80033bc:	bf00      	nop
 80033be:	371c      	adds	r7, #28
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	40010000 	.word	0x40010000

080033cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b087      	sub	sp, #28
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003402:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	021b      	lsls	r3, r3, #8
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	4313      	orrs	r3, r2
 800340e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003416:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	031b      	lsls	r3, r3, #12
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	4313      	orrs	r3, r2
 8003422:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a10      	ldr	r2, [pc, #64]	; (8003468 <TIM_OC4_SetConfig+0x9c>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d109      	bne.n	8003440 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003432:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	019b      	lsls	r3, r3, #6
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	4313      	orrs	r3, r2
 800343e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	621a      	str	r2, [r3, #32]
}
 800345a:	bf00      	nop
 800345c:	371c      	adds	r7, #28
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	40010000 	.word	0x40010000

0800346c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800346c:	b480      	push	{r7}
 800346e:	b087      	sub	sp, #28
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	f003 031f 	and.w	r3, r3, #31
 800347e:	2201      	movs	r2, #1
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6a1a      	ldr	r2, [r3, #32]
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	43db      	mvns	r3, r3
 800348e:	401a      	ands	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6a1a      	ldr	r2, [r3, #32]
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	f003 031f 	and.w	r3, r3, #31
 800349e:	6879      	ldr	r1, [r7, #4]
 80034a0:	fa01 f303 	lsl.w	r3, r1, r3
 80034a4:	431a      	orrs	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	621a      	str	r2, [r3, #32]
}
 80034aa:	bf00      	nop
 80034ac:	371c      	adds	r7, #28
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b082      	sub	sp, #8
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e03f      	b.n	8003548 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d106      	bne.n	80034e2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f005 fce3 	bl	8008ea8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2224      	movs	r2, #36	; 0x24
 80034e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68da      	ldr	r2, [r3, #12]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034f8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f90c 	bl	8003718 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691a      	ldr	r2, [r3, #16]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800350e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	695a      	ldr	r2, [r3, #20]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800351e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68da      	ldr	r2, [r3, #12]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800352e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2220      	movs	r2, #32
 800353a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2220      	movs	r2, #32
 8003542:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b088      	sub	sp, #32
 8003554:	af02      	add	r7, sp, #8
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	603b      	str	r3, [r7, #0]
 800355c:	4613      	mov	r3, r2
 800355e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003560:	2300      	movs	r3, #0
 8003562:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b20      	cmp	r3, #32
 800356e:	f040 8083 	bne.w	8003678 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d002      	beq.n	800357e <HAL_UART_Transmit+0x2e>
 8003578:	88fb      	ldrh	r3, [r7, #6]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e07b      	b.n	800367a <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003588:	2b01      	cmp	r3, #1
 800358a:	d101      	bne.n	8003590 <HAL_UART_Transmit+0x40>
 800358c:	2302      	movs	r3, #2
 800358e:	e074      	b.n	800367a <HAL_UART_Transmit+0x12a>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2221      	movs	r2, #33	; 0x21
 80035a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80035a6:	f7fd fc4f 	bl	8000e48 <HAL_GetTick>
 80035aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	88fa      	ldrh	r2, [r7, #6]
 80035b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	88fa      	ldrh	r2, [r7, #6]
 80035b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80035c0:	e042      	b.n	8003648 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	3b01      	subs	r3, #1
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035d8:	d122      	bne.n	8003620 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	9300      	str	r3, [sp, #0]
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	2200      	movs	r2, #0
 80035e2:	2180      	movs	r1, #128	; 0x80
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 f84c 	bl	8003682 <UART_WaitOnFlagUntilTimeout>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e042      	b.n	800367a <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	881b      	ldrh	r3, [r3, #0]
 80035fc:	461a      	mov	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003606:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d103      	bne.n	8003618 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	3302      	adds	r3, #2
 8003614:	60bb      	str	r3, [r7, #8]
 8003616:	e017      	b.n	8003648 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	3301      	adds	r3, #1
 800361c:	60bb      	str	r3, [r7, #8]
 800361e:	e013      	b.n	8003648 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	2200      	movs	r2, #0
 8003628:	2180      	movs	r1, #128	; 0x80
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f000 f829 	bl	8003682 <UART_WaitOnFlagUntilTimeout>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e01f      	b.n	800367a <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	1c5a      	adds	r2, r3, #1
 800363e:	60ba      	str	r2, [r7, #8]
 8003640:	781a      	ldrb	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800364c:	b29b      	uxth	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1b7      	bne.n	80035c2 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	2200      	movs	r2, #0
 800365a:	2140      	movs	r1, #64	; 0x40
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f000 f810 	bl	8003682 <UART_WaitOnFlagUntilTimeout>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e006      	b.n	800367a <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003674:	2300      	movs	r3, #0
 8003676:	e000      	b.n	800367a <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003678:	2302      	movs	r3, #2
  }
}
 800367a:	4618      	mov	r0, r3
 800367c:	3718      	adds	r7, #24
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b084      	sub	sp, #16
 8003686:	af00      	add	r7, sp, #0
 8003688:	60f8      	str	r0, [r7, #12]
 800368a:	60b9      	str	r1, [r7, #8]
 800368c:	603b      	str	r3, [r7, #0]
 800368e:	4613      	mov	r3, r2
 8003690:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003692:	e02c      	b.n	80036ee <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369a:	d028      	beq.n	80036ee <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d007      	beq.n	80036b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80036a2:	f7fd fbd1 	bl	8000e48 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d21d      	bcs.n	80036ee <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80036c0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695a      	ldr	r2, [r3, #20]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0201 	bic.w	r2, r2, #1
 80036d0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2220      	movs	r2, #32
 80036d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2220      	movs	r2, #32
 80036de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e00f      	b.n	800370e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	4013      	ands	r3, r2
 80036f8:	68ba      	ldr	r2, [r7, #8]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	bf0c      	ite	eq
 80036fe:	2301      	moveq	r3, #1
 8003700:	2300      	movne	r3, #0
 8003702:	b2db      	uxtb	r3, r3
 8003704:	461a      	mov	r2, r3
 8003706:	79fb      	ldrb	r3, [r7, #7]
 8003708:	429a      	cmp	r2, r3
 800370a:	d0c3      	beq.n	8003694 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
	...

08003718 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800371c:	b085      	sub	sp, #20
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68da      	ldr	r2, [r3, #12]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	430a      	orrs	r2, r1
 8003736:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	431a      	orrs	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	4313      	orrs	r3, r2
 800374e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800375a:	f023 030c 	bic.w	r3, r3, #12
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6812      	ldr	r2, [r2, #0]
 8003762:	68f9      	ldr	r1, [r7, #12]
 8003764:	430b      	orrs	r3, r1
 8003766:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	699a      	ldr	r2, [r3, #24]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003786:	f040 818b 	bne.w	8003aa0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4ac1      	ldr	r2, [pc, #772]	; (8003a94 <UART_SetConfig+0x37c>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d005      	beq.n	80037a0 <UART_SetConfig+0x88>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4abf      	ldr	r2, [pc, #764]	; (8003a98 <UART_SetConfig+0x380>)
 800379a:	4293      	cmp	r3, r2
 800379c:	f040 80bd 	bne.w	800391a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037a0:	f7fe fca6 	bl	80020f0 <HAL_RCC_GetPCLK2Freq>
 80037a4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	461d      	mov	r5, r3
 80037aa:	f04f 0600 	mov.w	r6, #0
 80037ae:	46a8      	mov	r8, r5
 80037b0:	46b1      	mov	r9, r6
 80037b2:	eb18 0308 	adds.w	r3, r8, r8
 80037b6:	eb49 0409 	adc.w	r4, r9, r9
 80037ba:	4698      	mov	r8, r3
 80037bc:	46a1      	mov	r9, r4
 80037be:	eb18 0805 	adds.w	r8, r8, r5
 80037c2:	eb49 0906 	adc.w	r9, r9, r6
 80037c6:	f04f 0100 	mov.w	r1, #0
 80037ca:	f04f 0200 	mov.w	r2, #0
 80037ce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80037d2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80037d6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80037da:	4688      	mov	r8, r1
 80037dc:	4691      	mov	r9, r2
 80037de:	eb18 0005 	adds.w	r0, r8, r5
 80037e2:	eb49 0106 	adc.w	r1, r9, r6
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	461d      	mov	r5, r3
 80037ec:	f04f 0600 	mov.w	r6, #0
 80037f0:	196b      	adds	r3, r5, r5
 80037f2:	eb46 0406 	adc.w	r4, r6, r6
 80037f6:	461a      	mov	r2, r3
 80037f8:	4623      	mov	r3, r4
 80037fa:	f7fd f937 	bl	8000a6c <__aeabi_uldivmod>
 80037fe:	4603      	mov	r3, r0
 8003800:	460c      	mov	r4, r1
 8003802:	461a      	mov	r2, r3
 8003804:	4ba5      	ldr	r3, [pc, #660]	; (8003a9c <UART_SetConfig+0x384>)
 8003806:	fba3 2302 	umull	r2, r3, r3, r2
 800380a:	095b      	lsrs	r3, r3, #5
 800380c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	461d      	mov	r5, r3
 8003814:	f04f 0600 	mov.w	r6, #0
 8003818:	46a9      	mov	r9, r5
 800381a:	46b2      	mov	sl, r6
 800381c:	eb19 0309 	adds.w	r3, r9, r9
 8003820:	eb4a 040a 	adc.w	r4, sl, sl
 8003824:	4699      	mov	r9, r3
 8003826:	46a2      	mov	sl, r4
 8003828:	eb19 0905 	adds.w	r9, r9, r5
 800382c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003830:	f04f 0100 	mov.w	r1, #0
 8003834:	f04f 0200 	mov.w	r2, #0
 8003838:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800383c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003840:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003844:	4689      	mov	r9, r1
 8003846:	4692      	mov	sl, r2
 8003848:	eb19 0005 	adds.w	r0, r9, r5
 800384c:	eb4a 0106 	adc.w	r1, sl, r6
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	461d      	mov	r5, r3
 8003856:	f04f 0600 	mov.w	r6, #0
 800385a:	196b      	adds	r3, r5, r5
 800385c:	eb46 0406 	adc.w	r4, r6, r6
 8003860:	461a      	mov	r2, r3
 8003862:	4623      	mov	r3, r4
 8003864:	f7fd f902 	bl	8000a6c <__aeabi_uldivmod>
 8003868:	4603      	mov	r3, r0
 800386a:	460c      	mov	r4, r1
 800386c:	461a      	mov	r2, r3
 800386e:	4b8b      	ldr	r3, [pc, #556]	; (8003a9c <UART_SetConfig+0x384>)
 8003870:	fba3 1302 	umull	r1, r3, r3, r2
 8003874:	095b      	lsrs	r3, r3, #5
 8003876:	2164      	movs	r1, #100	; 0x64
 8003878:	fb01 f303 	mul.w	r3, r1, r3
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	3332      	adds	r3, #50	; 0x32
 8003882:	4a86      	ldr	r2, [pc, #536]	; (8003a9c <UART_SetConfig+0x384>)
 8003884:	fba2 2303 	umull	r2, r3, r2, r3
 8003888:	095b      	lsrs	r3, r3, #5
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003890:	4498      	add	r8, r3
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	461d      	mov	r5, r3
 8003896:	f04f 0600 	mov.w	r6, #0
 800389a:	46a9      	mov	r9, r5
 800389c:	46b2      	mov	sl, r6
 800389e:	eb19 0309 	adds.w	r3, r9, r9
 80038a2:	eb4a 040a 	adc.w	r4, sl, sl
 80038a6:	4699      	mov	r9, r3
 80038a8:	46a2      	mov	sl, r4
 80038aa:	eb19 0905 	adds.w	r9, r9, r5
 80038ae:	eb4a 0a06 	adc.w	sl, sl, r6
 80038b2:	f04f 0100 	mov.w	r1, #0
 80038b6:	f04f 0200 	mov.w	r2, #0
 80038ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038c6:	4689      	mov	r9, r1
 80038c8:	4692      	mov	sl, r2
 80038ca:	eb19 0005 	adds.w	r0, r9, r5
 80038ce:	eb4a 0106 	adc.w	r1, sl, r6
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	461d      	mov	r5, r3
 80038d8:	f04f 0600 	mov.w	r6, #0
 80038dc:	196b      	adds	r3, r5, r5
 80038de:	eb46 0406 	adc.w	r4, r6, r6
 80038e2:	461a      	mov	r2, r3
 80038e4:	4623      	mov	r3, r4
 80038e6:	f7fd f8c1 	bl	8000a6c <__aeabi_uldivmod>
 80038ea:	4603      	mov	r3, r0
 80038ec:	460c      	mov	r4, r1
 80038ee:	461a      	mov	r2, r3
 80038f0:	4b6a      	ldr	r3, [pc, #424]	; (8003a9c <UART_SetConfig+0x384>)
 80038f2:	fba3 1302 	umull	r1, r3, r3, r2
 80038f6:	095b      	lsrs	r3, r3, #5
 80038f8:	2164      	movs	r1, #100	; 0x64
 80038fa:	fb01 f303 	mul.w	r3, r1, r3
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	3332      	adds	r3, #50	; 0x32
 8003904:	4a65      	ldr	r2, [pc, #404]	; (8003a9c <UART_SetConfig+0x384>)
 8003906:	fba2 2303 	umull	r2, r3, r2, r3
 800390a:	095b      	lsrs	r3, r3, #5
 800390c:	f003 0207 	and.w	r2, r3, #7
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4442      	add	r2, r8
 8003916:	609a      	str	r2, [r3, #8]
 8003918:	e26f      	b.n	8003dfa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800391a:	f7fe fbd5 	bl	80020c8 <HAL_RCC_GetPCLK1Freq>
 800391e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	461d      	mov	r5, r3
 8003924:	f04f 0600 	mov.w	r6, #0
 8003928:	46a8      	mov	r8, r5
 800392a:	46b1      	mov	r9, r6
 800392c:	eb18 0308 	adds.w	r3, r8, r8
 8003930:	eb49 0409 	adc.w	r4, r9, r9
 8003934:	4698      	mov	r8, r3
 8003936:	46a1      	mov	r9, r4
 8003938:	eb18 0805 	adds.w	r8, r8, r5
 800393c:	eb49 0906 	adc.w	r9, r9, r6
 8003940:	f04f 0100 	mov.w	r1, #0
 8003944:	f04f 0200 	mov.w	r2, #0
 8003948:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800394c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003950:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003954:	4688      	mov	r8, r1
 8003956:	4691      	mov	r9, r2
 8003958:	eb18 0005 	adds.w	r0, r8, r5
 800395c:	eb49 0106 	adc.w	r1, r9, r6
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	461d      	mov	r5, r3
 8003966:	f04f 0600 	mov.w	r6, #0
 800396a:	196b      	adds	r3, r5, r5
 800396c:	eb46 0406 	adc.w	r4, r6, r6
 8003970:	461a      	mov	r2, r3
 8003972:	4623      	mov	r3, r4
 8003974:	f7fd f87a 	bl	8000a6c <__aeabi_uldivmod>
 8003978:	4603      	mov	r3, r0
 800397a:	460c      	mov	r4, r1
 800397c:	461a      	mov	r2, r3
 800397e:	4b47      	ldr	r3, [pc, #284]	; (8003a9c <UART_SetConfig+0x384>)
 8003980:	fba3 2302 	umull	r2, r3, r3, r2
 8003984:	095b      	lsrs	r3, r3, #5
 8003986:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	461d      	mov	r5, r3
 800398e:	f04f 0600 	mov.w	r6, #0
 8003992:	46a9      	mov	r9, r5
 8003994:	46b2      	mov	sl, r6
 8003996:	eb19 0309 	adds.w	r3, r9, r9
 800399a:	eb4a 040a 	adc.w	r4, sl, sl
 800399e:	4699      	mov	r9, r3
 80039a0:	46a2      	mov	sl, r4
 80039a2:	eb19 0905 	adds.w	r9, r9, r5
 80039a6:	eb4a 0a06 	adc.w	sl, sl, r6
 80039aa:	f04f 0100 	mov.w	r1, #0
 80039ae:	f04f 0200 	mov.w	r2, #0
 80039b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80039ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80039be:	4689      	mov	r9, r1
 80039c0:	4692      	mov	sl, r2
 80039c2:	eb19 0005 	adds.w	r0, r9, r5
 80039c6:	eb4a 0106 	adc.w	r1, sl, r6
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	461d      	mov	r5, r3
 80039d0:	f04f 0600 	mov.w	r6, #0
 80039d4:	196b      	adds	r3, r5, r5
 80039d6:	eb46 0406 	adc.w	r4, r6, r6
 80039da:	461a      	mov	r2, r3
 80039dc:	4623      	mov	r3, r4
 80039de:	f7fd f845 	bl	8000a6c <__aeabi_uldivmod>
 80039e2:	4603      	mov	r3, r0
 80039e4:	460c      	mov	r4, r1
 80039e6:	461a      	mov	r2, r3
 80039e8:	4b2c      	ldr	r3, [pc, #176]	; (8003a9c <UART_SetConfig+0x384>)
 80039ea:	fba3 1302 	umull	r1, r3, r3, r2
 80039ee:	095b      	lsrs	r3, r3, #5
 80039f0:	2164      	movs	r1, #100	; 0x64
 80039f2:	fb01 f303 	mul.w	r3, r1, r3
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	3332      	adds	r3, #50	; 0x32
 80039fc:	4a27      	ldr	r2, [pc, #156]	; (8003a9c <UART_SetConfig+0x384>)
 80039fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003a02:	095b      	lsrs	r3, r3, #5
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a0a:	4498      	add	r8, r3
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	461d      	mov	r5, r3
 8003a10:	f04f 0600 	mov.w	r6, #0
 8003a14:	46a9      	mov	r9, r5
 8003a16:	46b2      	mov	sl, r6
 8003a18:	eb19 0309 	adds.w	r3, r9, r9
 8003a1c:	eb4a 040a 	adc.w	r4, sl, sl
 8003a20:	4699      	mov	r9, r3
 8003a22:	46a2      	mov	sl, r4
 8003a24:	eb19 0905 	adds.w	r9, r9, r5
 8003a28:	eb4a 0a06 	adc.w	sl, sl, r6
 8003a2c:	f04f 0100 	mov.w	r1, #0
 8003a30:	f04f 0200 	mov.w	r2, #0
 8003a34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a38:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a3c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a40:	4689      	mov	r9, r1
 8003a42:	4692      	mov	sl, r2
 8003a44:	eb19 0005 	adds.w	r0, r9, r5
 8003a48:	eb4a 0106 	adc.w	r1, sl, r6
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	461d      	mov	r5, r3
 8003a52:	f04f 0600 	mov.w	r6, #0
 8003a56:	196b      	adds	r3, r5, r5
 8003a58:	eb46 0406 	adc.w	r4, r6, r6
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	4623      	mov	r3, r4
 8003a60:	f7fd f804 	bl	8000a6c <__aeabi_uldivmod>
 8003a64:	4603      	mov	r3, r0
 8003a66:	460c      	mov	r4, r1
 8003a68:	461a      	mov	r2, r3
 8003a6a:	4b0c      	ldr	r3, [pc, #48]	; (8003a9c <UART_SetConfig+0x384>)
 8003a6c:	fba3 1302 	umull	r1, r3, r3, r2
 8003a70:	095b      	lsrs	r3, r3, #5
 8003a72:	2164      	movs	r1, #100	; 0x64
 8003a74:	fb01 f303 	mul.w	r3, r1, r3
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	3332      	adds	r3, #50	; 0x32
 8003a7e:	4a07      	ldr	r2, [pc, #28]	; (8003a9c <UART_SetConfig+0x384>)
 8003a80:	fba2 2303 	umull	r2, r3, r2, r3
 8003a84:	095b      	lsrs	r3, r3, #5
 8003a86:	f003 0207 	and.w	r2, r3, #7
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4442      	add	r2, r8
 8003a90:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003a92:	e1b2      	b.n	8003dfa <UART_SetConfig+0x6e2>
 8003a94:	40011000 	.word	0x40011000
 8003a98:	40011400 	.word	0x40011400
 8003a9c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4ad7      	ldr	r2, [pc, #860]	; (8003e04 <UART_SetConfig+0x6ec>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d005      	beq.n	8003ab6 <UART_SetConfig+0x39e>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4ad6      	ldr	r2, [pc, #856]	; (8003e08 <UART_SetConfig+0x6f0>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	f040 80d1 	bne.w	8003c58 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ab6:	f7fe fb1b 	bl	80020f0 <HAL_RCC_GetPCLK2Freq>
 8003aba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	469a      	mov	sl, r3
 8003ac0:	f04f 0b00 	mov.w	fp, #0
 8003ac4:	46d0      	mov	r8, sl
 8003ac6:	46d9      	mov	r9, fp
 8003ac8:	eb18 0308 	adds.w	r3, r8, r8
 8003acc:	eb49 0409 	adc.w	r4, r9, r9
 8003ad0:	4698      	mov	r8, r3
 8003ad2:	46a1      	mov	r9, r4
 8003ad4:	eb18 080a 	adds.w	r8, r8, sl
 8003ad8:	eb49 090b 	adc.w	r9, r9, fp
 8003adc:	f04f 0100 	mov.w	r1, #0
 8003ae0:	f04f 0200 	mov.w	r2, #0
 8003ae4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003ae8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003aec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003af0:	4688      	mov	r8, r1
 8003af2:	4691      	mov	r9, r2
 8003af4:	eb1a 0508 	adds.w	r5, sl, r8
 8003af8:	eb4b 0609 	adc.w	r6, fp, r9
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	4619      	mov	r1, r3
 8003b02:	f04f 0200 	mov.w	r2, #0
 8003b06:	f04f 0300 	mov.w	r3, #0
 8003b0a:	f04f 0400 	mov.w	r4, #0
 8003b0e:	0094      	lsls	r4, r2, #2
 8003b10:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b14:	008b      	lsls	r3, r1, #2
 8003b16:	461a      	mov	r2, r3
 8003b18:	4623      	mov	r3, r4
 8003b1a:	4628      	mov	r0, r5
 8003b1c:	4631      	mov	r1, r6
 8003b1e:	f7fc ffa5 	bl	8000a6c <__aeabi_uldivmod>
 8003b22:	4603      	mov	r3, r0
 8003b24:	460c      	mov	r4, r1
 8003b26:	461a      	mov	r2, r3
 8003b28:	4bb8      	ldr	r3, [pc, #736]	; (8003e0c <UART_SetConfig+0x6f4>)
 8003b2a:	fba3 2302 	umull	r2, r3, r3, r2
 8003b2e:	095b      	lsrs	r3, r3, #5
 8003b30:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	469b      	mov	fp, r3
 8003b38:	f04f 0c00 	mov.w	ip, #0
 8003b3c:	46d9      	mov	r9, fp
 8003b3e:	46e2      	mov	sl, ip
 8003b40:	eb19 0309 	adds.w	r3, r9, r9
 8003b44:	eb4a 040a 	adc.w	r4, sl, sl
 8003b48:	4699      	mov	r9, r3
 8003b4a:	46a2      	mov	sl, r4
 8003b4c:	eb19 090b 	adds.w	r9, r9, fp
 8003b50:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003b54:	f04f 0100 	mov.w	r1, #0
 8003b58:	f04f 0200 	mov.w	r2, #0
 8003b5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b60:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b64:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b68:	4689      	mov	r9, r1
 8003b6a:	4692      	mov	sl, r2
 8003b6c:	eb1b 0509 	adds.w	r5, fp, r9
 8003b70:	eb4c 060a 	adc.w	r6, ip, sl
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	4619      	mov	r1, r3
 8003b7a:	f04f 0200 	mov.w	r2, #0
 8003b7e:	f04f 0300 	mov.w	r3, #0
 8003b82:	f04f 0400 	mov.w	r4, #0
 8003b86:	0094      	lsls	r4, r2, #2
 8003b88:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b8c:	008b      	lsls	r3, r1, #2
 8003b8e:	461a      	mov	r2, r3
 8003b90:	4623      	mov	r3, r4
 8003b92:	4628      	mov	r0, r5
 8003b94:	4631      	mov	r1, r6
 8003b96:	f7fc ff69 	bl	8000a6c <__aeabi_uldivmod>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	460c      	mov	r4, r1
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	4b9a      	ldr	r3, [pc, #616]	; (8003e0c <UART_SetConfig+0x6f4>)
 8003ba2:	fba3 1302 	umull	r1, r3, r3, r2
 8003ba6:	095b      	lsrs	r3, r3, #5
 8003ba8:	2164      	movs	r1, #100	; 0x64
 8003baa:	fb01 f303 	mul.w	r3, r1, r3
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	3332      	adds	r3, #50	; 0x32
 8003bb4:	4a95      	ldr	r2, [pc, #596]	; (8003e0c <UART_SetConfig+0x6f4>)
 8003bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bba:	095b      	lsrs	r3, r3, #5
 8003bbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bc0:	4498      	add	r8, r3
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	469b      	mov	fp, r3
 8003bc6:	f04f 0c00 	mov.w	ip, #0
 8003bca:	46d9      	mov	r9, fp
 8003bcc:	46e2      	mov	sl, ip
 8003bce:	eb19 0309 	adds.w	r3, r9, r9
 8003bd2:	eb4a 040a 	adc.w	r4, sl, sl
 8003bd6:	4699      	mov	r9, r3
 8003bd8:	46a2      	mov	sl, r4
 8003bda:	eb19 090b 	adds.w	r9, r9, fp
 8003bde:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003be2:	f04f 0100 	mov.w	r1, #0
 8003be6:	f04f 0200 	mov.w	r2, #0
 8003bea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003bf2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003bf6:	4689      	mov	r9, r1
 8003bf8:	4692      	mov	sl, r2
 8003bfa:	eb1b 0509 	adds.w	r5, fp, r9
 8003bfe:	eb4c 060a 	adc.w	r6, ip, sl
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	4619      	mov	r1, r3
 8003c08:	f04f 0200 	mov.w	r2, #0
 8003c0c:	f04f 0300 	mov.w	r3, #0
 8003c10:	f04f 0400 	mov.w	r4, #0
 8003c14:	0094      	lsls	r4, r2, #2
 8003c16:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c1a:	008b      	lsls	r3, r1, #2
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	4623      	mov	r3, r4
 8003c20:	4628      	mov	r0, r5
 8003c22:	4631      	mov	r1, r6
 8003c24:	f7fc ff22 	bl	8000a6c <__aeabi_uldivmod>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	460c      	mov	r4, r1
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	4b77      	ldr	r3, [pc, #476]	; (8003e0c <UART_SetConfig+0x6f4>)
 8003c30:	fba3 1302 	umull	r1, r3, r3, r2
 8003c34:	095b      	lsrs	r3, r3, #5
 8003c36:	2164      	movs	r1, #100	; 0x64
 8003c38:	fb01 f303 	mul.w	r3, r1, r3
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	011b      	lsls	r3, r3, #4
 8003c40:	3332      	adds	r3, #50	; 0x32
 8003c42:	4a72      	ldr	r2, [pc, #456]	; (8003e0c <UART_SetConfig+0x6f4>)
 8003c44:	fba2 2303 	umull	r2, r3, r2, r3
 8003c48:	095b      	lsrs	r3, r3, #5
 8003c4a:	f003 020f 	and.w	r2, r3, #15
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4442      	add	r2, r8
 8003c54:	609a      	str	r2, [r3, #8]
 8003c56:	e0d0      	b.n	8003dfa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c58:	f7fe fa36 	bl	80020c8 <HAL_RCC_GetPCLK1Freq>
 8003c5c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	469a      	mov	sl, r3
 8003c62:	f04f 0b00 	mov.w	fp, #0
 8003c66:	46d0      	mov	r8, sl
 8003c68:	46d9      	mov	r9, fp
 8003c6a:	eb18 0308 	adds.w	r3, r8, r8
 8003c6e:	eb49 0409 	adc.w	r4, r9, r9
 8003c72:	4698      	mov	r8, r3
 8003c74:	46a1      	mov	r9, r4
 8003c76:	eb18 080a 	adds.w	r8, r8, sl
 8003c7a:	eb49 090b 	adc.w	r9, r9, fp
 8003c7e:	f04f 0100 	mov.w	r1, #0
 8003c82:	f04f 0200 	mov.w	r2, #0
 8003c86:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003c8a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003c8e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003c92:	4688      	mov	r8, r1
 8003c94:	4691      	mov	r9, r2
 8003c96:	eb1a 0508 	adds.w	r5, sl, r8
 8003c9a:	eb4b 0609 	adc.w	r6, fp, r9
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	f04f 0200 	mov.w	r2, #0
 8003ca8:	f04f 0300 	mov.w	r3, #0
 8003cac:	f04f 0400 	mov.w	r4, #0
 8003cb0:	0094      	lsls	r4, r2, #2
 8003cb2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003cb6:	008b      	lsls	r3, r1, #2
 8003cb8:	461a      	mov	r2, r3
 8003cba:	4623      	mov	r3, r4
 8003cbc:	4628      	mov	r0, r5
 8003cbe:	4631      	mov	r1, r6
 8003cc0:	f7fc fed4 	bl	8000a6c <__aeabi_uldivmod>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	460c      	mov	r4, r1
 8003cc8:	461a      	mov	r2, r3
 8003cca:	4b50      	ldr	r3, [pc, #320]	; (8003e0c <UART_SetConfig+0x6f4>)
 8003ccc:	fba3 2302 	umull	r2, r3, r3, r2
 8003cd0:	095b      	lsrs	r3, r3, #5
 8003cd2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	469b      	mov	fp, r3
 8003cda:	f04f 0c00 	mov.w	ip, #0
 8003cde:	46d9      	mov	r9, fp
 8003ce0:	46e2      	mov	sl, ip
 8003ce2:	eb19 0309 	adds.w	r3, r9, r9
 8003ce6:	eb4a 040a 	adc.w	r4, sl, sl
 8003cea:	4699      	mov	r9, r3
 8003cec:	46a2      	mov	sl, r4
 8003cee:	eb19 090b 	adds.w	r9, r9, fp
 8003cf2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003cf6:	f04f 0100 	mov.w	r1, #0
 8003cfa:	f04f 0200 	mov.w	r2, #0
 8003cfe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d02:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d06:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d0a:	4689      	mov	r9, r1
 8003d0c:	4692      	mov	sl, r2
 8003d0e:	eb1b 0509 	adds.w	r5, fp, r9
 8003d12:	eb4c 060a 	adc.w	r6, ip, sl
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	f04f 0200 	mov.w	r2, #0
 8003d20:	f04f 0300 	mov.w	r3, #0
 8003d24:	f04f 0400 	mov.w	r4, #0
 8003d28:	0094      	lsls	r4, r2, #2
 8003d2a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d2e:	008b      	lsls	r3, r1, #2
 8003d30:	461a      	mov	r2, r3
 8003d32:	4623      	mov	r3, r4
 8003d34:	4628      	mov	r0, r5
 8003d36:	4631      	mov	r1, r6
 8003d38:	f7fc fe98 	bl	8000a6c <__aeabi_uldivmod>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	460c      	mov	r4, r1
 8003d40:	461a      	mov	r2, r3
 8003d42:	4b32      	ldr	r3, [pc, #200]	; (8003e0c <UART_SetConfig+0x6f4>)
 8003d44:	fba3 1302 	umull	r1, r3, r3, r2
 8003d48:	095b      	lsrs	r3, r3, #5
 8003d4a:	2164      	movs	r1, #100	; 0x64
 8003d4c:	fb01 f303 	mul.w	r3, r1, r3
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	011b      	lsls	r3, r3, #4
 8003d54:	3332      	adds	r3, #50	; 0x32
 8003d56:	4a2d      	ldr	r2, [pc, #180]	; (8003e0c <UART_SetConfig+0x6f4>)
 8003d58:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5c:	095b      	lsrs	r3, r3, #5
 8003d5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d62:	4498      	add	r8, r3
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	469b      	mov	fp, r3
 8003d68:	f04f 0c00 	mov.w	ip, #0
 8003d6c:	46d9      	mov	r9, fp
 8003d6e:	46e2      	mov	sl, ip
 8003d70:	eb19 0309 	adds.w	r3, r9, r9
 8003d74:	eb4a 040a 	adc.w	r4, sl, sl
 8003d78:	4699      	mov	r9, r3
 8003d7a:	46a2      	mov	sl, r4
 8003d7c:	eb19 090b 	adds.w	r9, r9, fp
 8003d80:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003d84:	f04f 0100 	mov.w	r1, #0
 8003d88:	f04f 0200 	mov.w	r2, #0
 8003d8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d90:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d94:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d98:	4689      	mov	r9, r1
 8003d9a:	4692      	mov	sl, r2
 8003d9c:	eb1b 0509 	adds.w	r5, fp, r9
 8003da0:	eb4c 060a 	adc.w	r6, ip, sl
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	4619      	mov	r1, r3
 8003daa:	f04f 0200 	mov.w	r2, #0
 8003dae:	f04f 0300 	mov.w	r3, #0
 8003db2:	f04f 0400 	mov.w	r4, #0
 8003db6:	0094      	lsls	r4, r2, #2
 8003db8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003dbc:	008b      	lsls	r3, r1, #2
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	4623      	mov	r3, r4
 8003dc2:	4628      	mov	r0, r5
 8003dc4:	4631      	mov	r1, r6
 8003dc6:	f7fc fe51 	bl	8000a6c <__aeabi_uldivmod>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	460c      	mov	r4, r1
 8003dce:	461a      	mov	r2, r3
 8003dd0:	4b0e      	ldr	r3, [pc, #56]	; (8003e0c <UART_SetConfig+0x6f4>)
 8003dd2:	fba3 1302 	umull	r1, r3, r3, r2
 8003dd6:	095b      	lsrs	r3, r3, #5
 8003dd8:	2164      	movs	r1, #100	; 0x64
 8003dda:	fb01 f303 	mul.w	r3, r1, r3
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	3332      	adds	r3, #50	; 0x32
 8003de4:	4a09      	ldr	r2, [pc, #36]	; (8003e0c <UART_SetConfig+0x6f4>)
 8003de6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dea:	095b      	lsrs	r3, r3, #5
 8003dec:	f003 020f 	and.w	r2, r3, #15
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4442      	add	r2, r8
 8003df6:	609a      	str	r2, [r3, #8]
}
 8003df8:	e7ff      	b.n	8003dfa <UART_SetConfig+0x6e2>
 8003dfa:	bf00      	nop
 8003dfc:	3714      	adds	r7, #20
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e04:	40011000 	.word	0x40011000
 8003e08:	40011400 	.word	0x40011400
 8003e0c:	51eb851f 	.word	0x51eb851f

08003e10 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	4603      	mov	r3, r0
 8003e18:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003e1a:	79fb      	ldrb	r3, [r7, #7]
 8003e1c:	4a08      	ldr	r2, [pc, #32]	; (8003e40 <disk_status+0x30>)
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	4413      	add	r3, r2
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	79fa      	ldrb	r2, [r7, #7]
 8003e28:	4905      	ldr	r1, [pc, #20]	; (8003e40 <disk_status+0x30>)
 8003e2a:	440a      	add	r2, r1
 8003e2c:	7a12      	ldrb	r2, [r2, #8]
 8003e2e:	4610      	mov	r0, r2
 8003e30:	4798      	blx	r3
 8003e32:	4603      	mov	r3, r0
 8003e34:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	200002c8 	.word	0x200002c8

08003e44 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003e52:	79fb      	ldrb	r3, [r7, #7]
 8003e54:	4a0d      	ldr	r2, [pc, #52]	; (8003e8c <disk_initialize+0x48>)
 8003e56:	5cd3      	ldrb	r3, [r2, r3]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d111      	bne.n	8003e80 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003e5c:	79fb      	ldrb	r3, [r7, #7]
 8003e5e:	4a0b      	ldr	r2, [pc, #44]	; (8003e8c <disk_initialize+0x48>)
 8003e60:	2101      	movs	r1, #1
 8003e62:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003e64:	79fb      	ldrb	r3, [r7, #7]
 8003e66:	4a09      	ldr	r2, [pc, #36]	; (8003e8c <disk_initialize+0x48>)
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4413      	add	r3, r2
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	79fa      	ldrb	r2, [r7, #7]
 8003e72:	4906      	ldr	r1, [pc, #24]	; (8003e8c <disk_initialize+0x48>)
 8003e74:	440a      	add	r2, r1
 8003e76:	7a12      	ldrb	r2, [r2, #8]
 8003e78:	4610      	mov	r0, r2
 8003e7a:	4798      	blx	r3
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	200002c8 	.word	0x200002c8

08003e90 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003e90:	b590      	push	{r4, r7, lr}
 8003e92:	b087      	sub	sp, #28
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60b9      	str	r1, [r7, #8]
 8003e98:	607a      	str	r2, [r7, #4]
 8003e9a:	603b      	str	r3, [r7, #0]
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003ea0:	7bfb      	ldrb	r3, [r7, #15]
 8003ea2:	4a0a      	ldr	r2, [pc, #40]	; (8003ecc <disk_read+0x3c>)
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	4413      	add	r3, r2
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	689c      	ldr	r4, [r3, #8]
 8003eac:	7bfb      	ldrb	r3, [r7, #15]
 8003eae:	4a07      	ldr	r2, [pc, #28]	; (8003ecc <disk_read+0x3c>)
 8003eb0:	4413      	add	r3, r2
 8003eb2:	7a18      	ldrb	r0, [r3, #8]
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	68b9      	ldr	r1, [r7, #8]
 8003eba:	47a0      	blx	r4
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	75fb      	strb	r3, [r7, #23]
  return res;
 8003ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	371c      	adds	r7, #28
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd90      	pop	{r4, r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	200002c8 	.word	0x200002c8

08003ed0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003ed0:	b590      	push	{r4, r7, lr}
 8003ed2:	b087      	sub	sp, #28
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60b9      	str	r1, [r7, #8]
 8003ed8:	607a      	str	r2, [r7, #4]
 8003eda:	603b      	str	r3, [r7, #0]
 8003edc:	4603      	mov	r3, r0
 8003ede:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003ee0:	7bfb      	ldrb	r3, [r7, #15]
 8003ee2:	4a0a      	ldr	r2, [pc, #40]	; (8003f0c <disk_write+0x3c>)
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	4413      	add	r3, r2
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	68dc      	ldr	r4, [r3, #12]
 8003eec:	7bfb      	ldrb	r3, [r7, #15]
 8003eee:	4a07      	ldr	r2, [pc, #28]	; (8003f0c <disk_write+0x3c>)
 8003ef0:	4413      	add	r3, r2
 8003ef2:	7a18      	ldrb	r0, [r3, #8]
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	68b9      	ldr	r1, [r7, #8]
 8003efa:	47a0      	blx	r4
 8003efc:	4603      	mov	r3, r0
 8003efe:	75fb      	strb	r3, [r7, #23]
  return res;
 8003f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	371c      	adds	r7, #28
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd90      	pop	{r4, r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	200002c8 	.word	0x200002c8

08003f10 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	4603      	mov	r3, r0
 8003f18:	603a      	str	r2, [r7, #0]
 8003f1a:	71fb      	strb	r3, [r7, #7]
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003f20:	79fb      	ldrb	r3, [r7, #7]
 8003f22:	4a09      	ldr	r2, [pc, #36]	; (8003f48 <disk_ioctl+0x38>)
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4413      	add	r3, r2
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	79fa      	ldrb	r2, [r7, #7]
 8003f2e:	4906      	ldr	r1, [pc, #24]	; (8003f48 <disk_ioctl+0x38>)
 8003f30:	440a      	add	r2, r1
 8003f32:	7a10      	ldrb	r0, [r2, #8]
 8003f34:	79b9      	ldrb	r1, [r7, #6]
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	4798      	blx	r3
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	73fb      	strb	r3, [r7, #15]
  return res;
 8003f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	200002c8 	.word	0x200002c8

08003f4c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3301      	adds	r3, #1
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003f5c:	89fb      	ldrh	r3, [r7, #14]
 8003f5e:	021b      	lsls	r3, r3, #8
 8003f60:	b21a      	sxth	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	b21b      	sxth	r3, r3
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	b21b      	sxth	r3, r3
 8003f6c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003f6e:	89fb      	ldrh	r3, [r7, #14]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3714      	adds	r7, #20
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	3303      	adds	r3, #3
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	021b      	lsls	r3, r3, #8
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	3202      	adds	r2, #2
 8003f94:	7812      	ldrb	r2, [r2, #0]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	021b      	lsls	r3, r3, #8
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	3201      	adds	r2, #1
 8003fa2:	7812      	ldrb	r2, [r2, #0]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	021b      	lsls	r3, r3, #8
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	7812      	ldrb	r2, [r2, #0]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	60fb      	str	r3, [r7, #12]
	return rv;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3714      	adds	r7, #20
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
 8003fca:	460b      	mov	r3, r1
 8003fcc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	1c5a      	adds	r2, r3, #1
 8003fd2:	607a      	str	r2, [r7, #4]
 8003fd4:	887a      	ldrh	r2, [r7, #2]
 8003fd6:	b2d2      	uxtb	r2, r2
 8003fd8:	701a      	strb	r2, [r3, #0]
 8003fda:	887b      	ldrh	r3, [r7, #2]
 8003fdc:	0a1b      	lsrs	r3, r3, #8
 8003fde:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	1c5a      	adds	r2, r3, #1
 8003fe4:	607a      	str	r2, [r7, #4]
 8003fe6:	887a      	ldrh	r2, [r7, #2]
 8003fe8:	b2d2      	uxtb	r2, r2
 8003fea:	701a      	strb	r2, [r3, #0]
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	1c5a      	adds	r2, r3, #1
 8004006:	607a      	str	r2, [r7, #4]
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	b2d2      	uxtb	r2, r2
 800400c:	701a      	strb	r2, [r3, #0]
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	0a1b      	lsrs	r3, r3, #8
 8004012:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	1c5a      	adds	r2, r3, #1
 8004018:	607a      	str	r2, [r7, #4]
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	b2d2      	uxtb	r2, r2
 800401e:	701a      	strb	r2, [r3, #0]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	0a1b      	lsrs	r3, r3, #8
 8004024:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	1c5a      	adds	r2, r3, #1
 800402a:	607a      	str	r2, [r7, #4]
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	b2d2      	uxtb	r2, r2
 8004030:	701a      	strb	r2, [r3, #0]
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	0a1b      	lsrs	r3, r3, #8
 8004036:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	1c5a      	adds	r2, r3, #1
 800403c:	607a      	str	r2, [r7, #4]
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	b2d2      	uxtb	r2, r2
 8004042:	701a      	strb	r2, [r3, #0]
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004050:	b480      	push	{r7}
 8004052:	b087      	sub	sp, #28
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00d      	beq.n	8004086 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	1c53      	adds	r3, r2, #1
 800406e:	613b      	str	r3, [r7, #16]
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	1c59      	adds	r1, r3, #1
 8004074:	6179      	str	r1, [r7, #20]
 8004076:	7812      	ldrb	r2, [r2, #0]
 8004078:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	3b01      	subs	r3, #1
 800407e:	607b      	str	r3, [r7, #4]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1f1      	bne.n	800406a <mem_cpy+0x1a>
	}
}
 8004086:	bf00      	nop
 8004088:	371c      	adds	r7, #28
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004092:	b480      	push	{r7}
 8004094:	b087      	sub	sp, #28
 8004096:	af00      	add	r7, sp, #0
 8004098:	60f8      	str	r0, [r7, #12]
 800409a:	60b9      	str	r1, [r7, #8]
 800409c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	1c5a      	adds	r2, r3, #1
 80040a6:	617a      	str	r2, [r7, #20]
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	b2d2      	uxtb	r2, r2
 80040ac:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	3b01      	subs	r3, #1
 80040b2:	607b      	str	r3, [r7, #4]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1f3      	bne.n	80040a2 <mem_set+0x10>
}
 80040ba:	bf00      	nop
 80040bc:	371c      	adds	r7, #28
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr

080040c6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80040c6:	b480      	push	{r7}
 80040c8:	b089      	sub	sp, #36	; 0x24
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	60f8      	str	r0, [r7, #12]
 80040ce:	60b9      	str	r1, [r7, #8]
 80040d0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	61fb      	str	r3, [r7, #28]
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80040da:	2300      	movs	r3, #0
 80040dc:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	1c5a      	adds	r2, r3, #1
 80040e2:	61fa      	str	r2, [r7, #28]
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	4619      	mov	r1, r3
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	1c5a      	adds	r2, r3, #1
 80040ec:	61ba      	str	r2, [r7, #24]
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	1acb      	subs	r3, r1, r3
 80040f2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	3b01      	subs	r3, #1
 80040f8:	607b      	str	r3, [r7, #4]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d002      	beq.n	8004106 <mem_cmp+0x40>
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d0eb      	beq.n	80040de <mem_cmp+0x18>

	return r;
 8004106:	697b      	ldr	r3, [r7, #20]
}
 8004108:	4618      	mov	r0, r3
 800410a:	3724      	adds	r7, #36	; 0x24
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800411e:	e002      	b.n	8004126 <chk_chr+0x12>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	3301      	adds	r3, #1
 8004124:	607b      	str	r3, [r7, #4]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d005      	beq.n	800413a <chk_chr+0x26>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	4293      	cmp	r3, r2
 8004138:	d1f2      	bne.n	8004120 <chk_chr+0xc>
	return *str;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	781b      	ldrb	r3, [r3, #0]
}
 800413e:	4618      	mov	r0, r3
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
	...

0800414c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004156:	2300      	movs	r3, #0
 8004158:	60bb      	str	r3, [r7, #8]
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	60fb      	str	r3, [r7, #12]
 800415e:	e029      	b.n	80041b4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004160:	4a27      	ldr	r2, [pc, #156]	; (8004200 <chk_lock+0xb4>)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	011b      	lsls	r3, r3, #4
 8004166:	4413      	add	r3, r2
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d01d      	beq.n	80041aa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800416e:	4a24      	ldr	r2, [pc, #144]	; (8004200 <chk_lock+0xb4>)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	011b      	lsls	r3, r3, #4
 8004174:	4413      	add	r3, r2
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	429a      	cmp	r2, r3
 800417e:	d116      	bne.n	80041ae <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004180:	4a1f      	ldr	r2, [pc, #124]	; (8004200 <chk_lock+0xb4>)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	4413      	add	r3, r2
 8004188:	3304      	adds	r3, #4
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004190:	429a      	cmp	r2, r3
 8004192:	d10c      	bne.n	80041ae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004194:	4a1a      	ldr	r2, [pc, #104]	; (8004200 <chk_lock+0xb4>)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	011b      	lsls	r3, r3, #4
 800419a:	4413      	add	r3, r2
 800419c:	3308      	adds	r3, #8
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d102      	bne.n	80041ae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80041a8:	e007      	b.n	80041ba <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80041aa:	2301      	movs	r3, #1
 80041ac:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	3301      	adds	r3, #1
 80041b2:	60fb      	str	r3, [r7, #12]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d9d2      	bls.n	8004160 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d109      	bne.n	80041d4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d102      	bne.n	80041cc <chk_lock+0x80>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d101      	bne.n	80041d0 <chk_lock+0x84>
 80041cc:	2300      	movs	r3, #0
 80041ce:	e010      	b.n	80041f2 <chk_lock+0xa6>
 80041d0:	2312      	movs	r3, #18
 80041d2:	e00e      	b.n	80041f2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d108      	bne.n	80041ec <chk_lock+0xa0>
 80041da:	4a09      	ldr	r2, [pc, #36]	; (8004200 <chk_lock+0xb4>)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	011b      	lsls	r3, r3, #4
 80041e0:	4413      	add	r3, r2
 80041e2:	330c      	adds	r3, #12
 80041e4:	881b      	ldrh	r3, [r3, #0]
 80041e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ea:	d101      	bne.n	80041f0 <chk_lock+0xa4>
 80041ec:	2310      	movs	r3, #16
 80041ee:	e000      	b.n	80041f2 <chk_lock+0xa6>
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3714      	adds	r7, #20
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	200000a8 	.word	0x200000a8

08004204 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800420a:	2300      	movs	r3, #0
 800420c:	607b      	str	r3, [r7, #4]
 800420e:	e002      	b.n	8004216 <enq_lock+0x12>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	3301      	adds	r3, #1
 8004214:	607b      	str	r3, [r7, #4]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d806      	bhi.n	800422a <enq_lock+0x26>
 800421c:	4a09      	ldr	r2, [pc, #36]	; (8004244 <enq_lock+0x40>)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	011b      	lsls	r3, r3, #4
 8004222:	4413      	add	r3, r2
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1f2      	bne.n	8004210 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2b02      	cmp	r3, #2
 800422e:	bf14      	ite	ne
 8004230:	2301      	movne	r3, #1
 8004232:	2300      	moveq	r3, #0
 8004234:	b2db      	uxtb	r3, r3
}
 8004236:	4618      	mov	r0, r3
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	200000a8 	.word	0x200000a8

08004248 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004252:	2300      	movs	r3, #0
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	e01f      	b.n	8004298 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004258:	4a41      	ldr	r2, [pc, #260]	; (8004360 <inc_lock+0x118>)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	011b      	lsls	r3, r3, #4
 800425e:	4413      	add	r3, r2
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	429a      	cmp	r2, r3
 8004268:	d113      	bne.n	8004292 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800426a:	4a3d      	ldr	r2, [pc, #244]	; (8004360 <inc_lock+0x118>)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	011b      	lsls	r3, r3, #4
 8004270:	4413      	add	r3, r2
 8004272:	3304      	adds	r3, #4
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800427a:	429a      	cmp	r2, r3
 800427c:	d109      	bne.n	8004292 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800427e:	4a38      	ldr	r2, [pc, #224]	; (8004360 <inc_lock+0x118>)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	011b      	lsls	r3, r3, #4
 8004284:	4413      	add	r3, r2
 8004286:	3308      	adds	r3, #8
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800428e:	429a      	cmp	r2, r3
 8004290:	d006      	beq.n	80042a0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	3301      	adds	r3, #1
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d9dc      	bls.n	8004258 <inc_lock+0x10>
 800429e:	e000      	b.n	80042a2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80042a0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d132      	bne.n	800430e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80042a8:	2300      	movs	r3, #0
 80042aa:	60fb      	str	r3, [r7, #12]
 80042ac:	e002      	b.n	80042b4 <inc_lock+0x6c>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	3301      	adds	r3, #1
 80042b2:	60fb      	str	r3, [r7, #12]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d806      	bhi.n	80042c8 <inc_lock+0x80>
 80042ba:	4a29      	ldr	r2, [pc, #164]	; (8004360 <inc_lock+0x118>)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	011b      	lsls	r3, r3, #4
 80042c0:	4413      	add	r3, r2
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1f2      	bne.n	80042ae <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d101      	bne.n	80042d2 <inc_lock+0x8a>
 80042ce:	2300      	movs	r3, #0
 80042d0:	e040      	b.n	8004354 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	4922      	ldr	r1, [pc, #136]	; (8004360 <inc_lock+0x118>)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	011b      	lsls	r3, r3, #4
 80042dc:	440b      	add	r3, r1
 80042de:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689a      	ldr	r2, [r3, #8]
 80042e4:	491e      	ldr	r1, [pc, #120]	; (8004360 <inc_lock+0x118>)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	011b      	lsls	r3, r3, #4
 80042ea:	440b      	add	r3, r1
 80042ec:	3304      	adds	r3, #4
 80042ee:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	695a      	ldr	r2, [r3, #20]
 80042f4:	491a      	ldr	r1, [pc, #104]	; (8004360 <inc_lock+0x118>)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	011b      	lsls	r3, r3, #4
 80042fa:	440b      	add	r3, r1
 80042fc:	3308      	adds	r3, #8
 80042fe:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004300:	4a17      	ldr	r2, [pc, #92]	; (8004360 <inc_lock+0x118>)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	011b      	lsls	r3, r3, #4
 8004306:	4413      	add	r3, r2
 8004308:	330c      	adds	r3, #12
 800430a:	2200      	movs	r2, #0
 800430c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d009      	beq.n	8004328 <inc_lock+0xe0>
 8004314:	4a12      	ldr	r2, [pc, #72]	; (8004360 <inc_lock+0x118>)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	011b      	lsls	r3, r3, #4
 800431a:	4413      	add	r3, r2
 800431c:	330c      	adds	r3, #12
 800431e:	881b      	ldrh	r3, [r3, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <inc_lock+0xe0>
 8004324:	2300      	movs	r3, #0
 8004326:	e015      	b.n	8004354 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d108      	bne.n	8004340 <inc_lock+0xf8>
 800432e:	4a0c      	ldr	r2, [pc, #48]	; (8004360 <inc_lock+0x118>)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	011b      	lsls	r3, r3, #4
 8004334:	4413      	add	r3, r2
 8004336:	330c      	adds	r3, #12
 8004338:	881b      	ldrh	r3, [r3, #0]
 800433a:	3301      	adds	r3, #1
 800433c:	b29a      	uxth	r2, r3
 800433e:	e001      	b.n	8004344 <inc_lock+0xfc>
 8004340:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004344:	4906      	ldr	r1, [pc, #24]	; (8004360 <inc_lock+0x118>)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	011b      	lsls	r3, r3, #4
 800434a:	440b      	add	r3, r1
 800434c:	330c      	adds	r3, #12
 800434e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	3301      	adds	r3, #1
}
 8004354:	4618      	mov	r0, r3
 8004356:	3714      	adds	r7, #20
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	200000a8 	.word	0x200000a8

08004364 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	3b01      	subs	r3, #1
 8004370:	607b      	str	r3, [r7, #4]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d825      	bhi.n	80043c4 <dec_lock+0x60>
		n = Files[i].ctr;
 8004378:	4a17      	ldr	r2, [pc, #92]	; (80043d8 <dec_lock+0x74>)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	011b      	lsls	r3, r3, #4
 800437e:	4413      	add	r3, r2
 8004380:	330c      	adds	r3, #12
 8004382:	881b      	ldrh	r3, [r3, #0]
 8004384:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004386:	89fb      	ldrh	r3, [r7, #14]
 8004388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800438c:	d101      	bne.n	8004392 <dec_lock+0x2e>
 800438e:	2300      	movs	r3, #0
 8004390:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004392:	89fb      	ldrh	r3, [r7, #14]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d002      	beq.n	800439e <dec_lock+0x3a>
 8004398:	89fb      	ldrh	r3, [r7, #14]
 800439a:	3b01      	subs	r3, #1
 800439c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800439e:	4a0e      	ldr	r2, [pc, #56]	; (80043d8 <dec_lock+0x74>)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	011b      	lsls	r3, r3, #4
 80043a4:	4413      	add	r3, r2
 80043a6:	330c      	adds	r3, #12
 80043a8:	89fa      	ldrh	r2, [r7, #14]
 80043aa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80043ac:	89fb      	ldrh	r3, [r7, #14]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d105      	bne.n	80043be <dec_lock+0x5a>
 80043b2:	4a09      	ldr	r2, [pc, #36]	; (80043d8 <dec_lock+0x74>)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	011b      	lsls	r3, r3, #4
 80043b8:	4413      	add	r3, r2
 80043ba:	2200      	movs	r2, #0
 80043bc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80043be:	2300      	movs	r3, #0
 80043c0:	737b      	strb	r3, [r7, #13]
 80043c2:	e001      	b.n	80043c8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80043c4:	2302      	movs	r3, #2
 80043c6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80043c8:	7b7b      	ldrb	r3, [r7, #13]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	200000a8 	.word	0x200000a8

080043dc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80043e4:	2300      	movs	r3, #0
 80043e6:	60fb      	str	r3, [r7, #12]
 80043e8:	e010      	b.n	800440c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80043ea:	4a0d      	ldr	r2, [pc, #52]	; (8004420 <clear_lock+0x44>)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	4413      	add	r3, r2
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d105      	bne.n	8004406 <clear_lock+0x2a>
 80043fa:	4a09      	ldr	r2, [pc, #36]	; (8004420 <clear_lock+0x44>)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	011b      	lsls	r3, r3, #4
 8004400:	4413      	add	r3, r2
 8004402:	2200      	movs	r2, #0
 8004404:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	3301      	adds	r3, #1
 800440a:	60fb      	str	r3, [r7, #12]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d9eb      	bls.n	80043ea <clear_lock+0xe>
	}
}
 8004412:	bf00      	nop
 8004414:	3714      	adds	r7, #20
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	200000a8 	.word	0x200000a8

08004424 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b086      	sub	sp, #24
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800442c:	2300      	movs	r3, #0
 800442e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	78db      	ldrb	r3, [r3, #3]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d034      	beq.n	80044a2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800443c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	7858      	ldrb	r0, [r3, #1]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004448:	2301      	movs	r3, #1
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	f7ff fd40 	bl	8003ed0 <disk_write>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d002      	beq.n	800445c <sync_window+0x38>
			res = FR_DISK_ERR;
 8004456:	2301      	movs	r3, #1
 8004458:	73fb      	strb	r3, [r7, #15]
 800445a:	e022      	b.n	80044a2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	1ad2      	subs	r2, r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	429a      	cmp	r2, r3
 8004470:	d217      	bcs.n	80044a2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	789b      	ldrb	r3, [r3, #2]
 8004476:	613b      	str	r3, [r7, #16]
 8004478:	e010      	b.n	800449c <sync_window+0x78>
					wsect += fs->fsize;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	4413      	add	r3, r2
 8004482:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	7858      	ldrb	r0, [r3, #1]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800448e:	2301      	movs	r3, #1
 8004490:	697a      	ldr	r2, [r7, #20]
 8004492:	f7ff fd1d 	bl	8003ed0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	3b01      	subs	r3, #1
 800449a:	613b      	str	r3, [r7, #16]
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d8eb      	bhi.n	800447a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80044a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3718      	adds	r7, #24
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80044b6:	2300      	movs	r3, #0
 80044b8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d01b      	beq.n	80044fc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f7ff ffad 	bl	8004424 <sync_window>
 80044ca:	4603      	mov	r3, r0
 80044cc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80044ce:	7bfb      	ldrb	r3, [r7, #15]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d113      	bne.n	80044fc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	7858      	ldrb	r0, [r3, #1]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80044de:	2301      	movs	r3, #1
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	f7ff fcd5 	bl	8003e90 <disk_read>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d004      	beq.n	80044f6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80044ec:	f04f 33ff 	mov.w	r3, #4294967295
 80044f0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80044fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
	...

08004508 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f7ff ff87 	bl	8004424 <sync_window>
 8004516:	4603      	mov	r3, r0
 8004518:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800451a:	7bfb      	ldrb	r3, [r7, #15]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d159      	bne.n	80045d4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	2b03      	cmp	r3, #3
 8004526:	d149      	bne.n	80045bc <sync_fs+0xb4>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	791b      	ldrb	r3, [r3, #4]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d145      	bne.n	80045bc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	899b      	ldrh	r3, [r3, #12]
 800453a:	461a      	mov	r2, r3
 800453c:	2100      	movs	r1, #0
 800453e:	f7ff fda8 	bl	8004092 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	3338      	adds	r3, #56	; 0x38
 8004546:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800454a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800454e:	4618      	mov	r0, r3
 8004550:	f7ff fd37 	bl	8003fc2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	3338      	adds	r3, #56	; 0x38
 8004558:	4921      	ldr	r1, [pc, #132]	; (80045e0 <sync_fs+0xd8>)
 800455a:	4618      	mov	r0, r3
 800455c:	f7ff fd4c 	bl	8003ff8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3338      	adds	r3, #56	; 0x38
 8004564:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004568:	491e      	ldr	r1, [pc, #120]	; (80045e4 <sync_fs+0xdc>)
 800456a:	4618      	mov	r0, r3
 800456c:	f7ff fd44 	bl	8003ff8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	3338      	adds	r3, #56	; 0x38
 8004574:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	4619      	mov	r1, r3
 800457e:	4610      	mov	r0, r2
 8004580:	f7ff fd3a 	bl	8003ff8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3338      	adds	r3, #56	; 0x38
 8004588:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	4619      	mov	r1, r3
 8004592:	4610      	mov	r0, r2
 8004594:	f7ff fd30 	bl	8003ff8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459c:	1c5a      	adds	r2, r3, #1
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	7858      	ldrb	r0, [r3, #1]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045b0:	2301      	movs	r3, #1
 80045b2:	f7ff fc8d 	bl	8003ed0 <disk_write>
			fs->fsi_flag = 0;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	785b      	ldrb	r3, [r3, #1]
 80045c0:	2200      	movs	r2, #0
 80045c2:	2100      	movs	r1, #0
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7ff fca3 	bl	8003f10 <disk_ioctl>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d001      	beq.n	80045d4 <sync_fs+0xcc>
 80045d0:	2301      	movs	r3, #1
 80045d2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80045d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	41615252 	.word	0x41615252
 80045e4:	61417272 	.word	0x61417272

080045e8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	3b02      	subs	r3, #2
 80045f6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	3b02      	subs	r3, #2
 80045fe:	683a      	ldr	r2, [r7, #0]
 8004600:	429a      	cmp	r2, r3
 8004602:	d301      	bcc.n	8004608 <clust2sect+0x20>
 8004604:	2300      	movs	r3, #0
 8004606:	e008      	b.n	800461a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	895b      	ldrh	r3, [r3, #10]
 800460c:	461a      	mov	r2, r3
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	fb03 f202 	mul.w	r2, r3, r2
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004618:	4413      	add	r3, r2
}
 800461a:	4618      	mov	r0, r3
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr

08004626 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	b086      	sub	sp, #24
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
 800462e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d904      	bls.n	8004646 <get_fat+0x20>
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	69db      	ldr	r3, [r3, #28]
 8004640:	683a      	ldr	r2, [r7, #0]
 8004642:	429a      	cmp	r2, r3
 8004644:	d302      	bcc.n	800464c <get_fat+0x26>
		val = 1;	/* Internal error */
 8004646:	2301      	movs	r3, #1
 8004648:	617b      	str	r3, [r7, #20]
 800464a:	e0b7      	b.n	80047bc <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800464c:	f04f 33ff 	mov.w	r3, #4294967295
 8004650:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	2b02      	cmp	r3, #2
 8004658:	d05a      	beq.n	8004710 <get_fat+0xea>
 800465a:	2b03      	cmp	r3, #3
 800465c:	d07d      	beq.n	800475a <get_fat+0x134>
 800465e:	2b01      	cmp	r3, #1
 8004660:	f040 80a2 	bne.w	80047a8 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	085b      	lsrs	r3, r3, #1
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	4413      	add	r3, r2
 8004670:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	899b      	ldrh	r3, [r3, #12]
 800467a:	4619      	mov	r1, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004682:	4413      	add	r3, r2
 8004684:	4619      	mov	r1, r3
 8004686:	6938      	ldr	r0, [r7, #16]
 8004688:	f7ff ff10 	bl	80044ac <move_window>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	f040 808d 	bne.w	80047ae <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	1c5a      	adds	r2, r3, #1
 8004698:	60fa      	str	r2, [r7, #12]
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	8992      	ldrh	r2, [r2, #12]
 800469e:	fbb3 f1f2 	udiv	r1, r3, r2
 80046a2:	fb02 f201 	mul.w	r2, r2, r1
 80046a6:	1a9b      	subs	r3, r3, r2
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	4413      	add	r3, r2
 80046ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046b0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	899b      	ldrh	r3, [r3, #12]
 80046ba:	4619      	mov	r1, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	fbb3 f3f1 	udiv	r3, r3, r1
 80046c2:	4413      	add	r3, r2
 80046c4:	4619      	mov	r1, r3
 80046c6:	6938      	ldr	r0, [r7, #16]
 80046c8:	f7ff fef0 	bl	80044ac <move_window>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d16f      	bne.n	80047b2 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	899b      	ldrh	r3, [r3, #12]
 80046d6:	461a      	mov	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	fbb3 f1f2 	udiv	r1, r3, r2
 80046de:	fb02 f201 	mul.w	r2, r2, r1
 80046e2:	1a9b      	subs	r3, r3, r2
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	4413      	add	r3, r2
 80046e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046ec:	021b      	lsls	r3, r3, #8
 80046ee:	461a      	mov	r2, r3
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d002      	beq.n	8004706 <get_fat+0xe0>
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	091b      	lsrs	r3, r3, #4
 8004704:	e002      	b.n	800470c <get_fat+0xe6>
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800470c:	617b      	str	r3, [r7, #20]
			break;
 800470e:	e055      	b.n	80047bc <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	899b      	ldrh	r3, [r3, #12]
 8004718:	085b      	lsrs	r3, r3, #1
 800471a:	b29b      	uxth	r3, r3
 800471c:	4619      	mov	r1, r3
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	fbb3 f3f1 	udiv	r3, r3, r1
 8004724:	4413      	add	r3, r2
 8004726:	4619      	mov	r1, r3
 8004728:	6938      	ldr	r0, [r7, #16]
 800472a:	f7ff febf 	bl	80044ac <move_window>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d140      	bne.n	80047b6 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	8992      	ldrh	r2, [r2, #12]
 8004742:	fbb3 f0f2 	udiv	r0, r3, r2
 8004746:	fb02 f200 	mul.w	r2, r2, r0
 800474a:	1a9b      	subs	r3, r3, r2
 800474c:	440b      	add	r3, r1
 800474e:	4618      	mov	r0, r3
 8004750:	f7ff fbfc 	bl	8003f4c <ld_word>
 8004754:	4603      	mov	r3, r0
 8004756:	617b      	str	r3, [r7, #20]
			break;
 8004758:	e030      	b.n	80047bc <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	899b      	ldrh	r3, [r3, #12]
 8004762:	089b      	lsrs	r3, r3, #2
 8004764:	b29b      	uxth	r3, r3
 8004766:	4619      	mov	r1, r3
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	fbb3 f3f1 	udiv	r3, r3, r1
 800476e:	4413      	add	r3, r2
 8004770:	4619      	mov	r1, r3
 8004772:	6938      	ldr	r0, [r7, #16]
 8004774:	f7ff fe9a 	bl	80044ac <move_window>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d11d      	bne.n	80047ba <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	8992      	ldrh	r2, [r2, #12]
 800478c:	fbb3 f0f2 	udiv	r0, r3, r2
 8004790:	fb02 f200 	mul.w	r2, r2, r0
 8004794:	1a9b      	subs	r3, r3, r2
 8004796:	440b      	add	r3, r1
 8004798:	4618      	mov	r0, r3
 800479a:	f7ff fbef 	bl	8003f7c <ld_dword>
 800479e:	4603      	mov	r3, r0
 80047a0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80047a4:	617b      	str	r3, [r7, #20]
			break;
 80047a6:	e009      	b.n	80047bc <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80047a8:	2301      	movs	r3, #1
 80047aa:	617b      	str	r3, [r7, #20]
 80047ac:	e006      	b.n	80047bc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80047ae:	bf00      	nop
 80047b0:	e004      	b.n	80047bc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80047b2:	bf00      	nop
 80047b4:	e002      	b.n	80047bc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80047b6:	bf00      	nop
 80047b8:	e000      	b.n	80047bc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80047ba:	bf00      	nop
		}
	}

	return val;
 80047bc:	697b      	ldr	r3, [r7, #20]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3718      	adds	r7, #24
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80047c6:	b590      	push	{r4, r7, lr}
 80047c8:	b089      	sub	sp, #36	; 0x24
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	60f8      	str	r0, [r7, #12]
 80047ce:	60b9      	str	r1, [r7, #8]
 80047d0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80047d2:	2302      	movs	r3, #2
 80047d4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	f240 8106 	bls.w	80049ea <put_fat+0x224>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	f080 8100 	bcs.w	80049ea <put_fat+0x224>
		switch (fs->fs_type) {
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	f000 8088 	beq.w	8004904 <put_fat+0x13e>
 80047f4:	2b03      	cmp	r3, #3
 80047f6:	f000 80b0 	beq.w	800495a <put_fat+0x194>
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	f040 80f5 	bne.w	80049ea <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	61bb      	str	r3, [r7, #24]
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	085b      	lsrs	r3, r3, #1
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	4413      	add	r3, r2
 800480c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	899b      	ldrh	r3, [r3, #12]
 8004816:	4619      	mov	r1, r3
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	fbb3 f3f1 	udiv	r3, r3, r1
 800481e:	4413      	add	r3, r2
 8004820:	4619      	mov	r1, r3
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f7ff fe42 	bl	80044ac <move_window>
 8004828:	4603      	mov	r3, r0
 800482a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800482c:	7ffb      	ldrb	r3, [r7, #31]
 800482e:	2b00      	cmp	r3, #0
 8004830:	f040 80d4 	bne.w	80049dc <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	1c5a      	adds	r2, r3, #1
 800483e:	61ba      	str	r2, [r7, #24]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	8992      	ldrh	r2, [r2, #12]
 8004844:	fbb3 f0f2 	udiv	r0, r3, r2
 8004848:	fb02 f200 	mul.w	r2, r2, r0
 800484c:	1a9b      	subs	r3, r3, r2
 800484e:	440b      	add	r3, r1
 8004850:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00d      	beq.n	8004878 <put_fat+0xb2>
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	b25b      	sxtb	r3, r3
 8004862:	f003 030f 	and.w	r3, r3, #15
 8004866:	b25a      	sxtb	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	b2db      	uxtb	r3, r3
 800486c:	011b      	lsls	r3, r3, #4
 800486e:	b25b      	sxtb	r3, r3
 8004870:	4313      	orrs	r3, r2
 8004872:	b25b      	sxtb	r3, r3
 8004874:	b2db      	uxtb	r3, r3
 8004876:	e001      	b.n	800487c <put_fat+0xb6>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	b2db      	uxtb	r3, r3
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2201      	movs	r2, #1
 8004884:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	899b      	ldrh	r3, [r3, #12]
 800488e:	4619      	mov	r1, r3
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	fbb3 f3f1 	udiv	r3, r3, r1
 8004896:	4413      	add	r3, r2
 8004898:	4619      	mov	r1, r3
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f7ff fe06 	bl	80044ac <move_window>
 80048a0:	4603      	mov	r3, r0
 80048a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80048a4:	7ffb      	ldrb	r3, [r7, #31]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f040 809a 	bne.w	80049e0 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	899b      	ldrh	r3, [r3, #12]
 80048b6:	461a      	mov	r2, r3
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80048be:	fb02 f200 	mul.w	r2, r2, r0
 80048c2:	1a9b      	subs	r3, r3, r2
 80048c4:	440b      	add	r3, r1
 80048c6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <put_fat+0x114>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	091b      	lsrs	r3, r3, #4
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	e00e      	b.n	80048f8 <put_fat+0x132>
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	b25b      	sxtb	r3, r3
 80048e0:	f023 030f 	bic.w	r3, r3, #15
 80048e4:	b25a      	sxtb	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	0a1b      	lsrs	r3, r3, #8
 80048ea:	b25b      	sxtb	r3, r3
 80048ec:	f003 030f 	and.w	r3, r3, #15
 80048f0:	b25b      	sxtb	r3, r3
 80048f2:	4313      	orrs	r3, r2
 80048f4:	b25b      	sxtb	r3, r3
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2201      	movs	r2, #1
 8004900:	70da      	strb	r2, [r3, #3]
			break;
 8004902:	e072      	b.n	80049ea <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	899b      	ldrh	r3, [r3, #12]
 800490c:	085b      	lsrs	r3, r3, #1
 800490e:	b29b      	uxth	r3, r3
 8004910:	4619      	mov	r1, r3
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	fbb3 f3f1 	udiv	r3, r3, r1
 8004918:	4413      	add	r3, r2
 800491a:	4619      	mov	r1, r3
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f7ff fdc5 	bl	80044ac <move_window>
 8004922:	4603      	mov	r3, r0
 8004924:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004926:	7ffb      	ldrb	r3, [r7, #31]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d15b      	bne.n	80049e4 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	8992      	ldrh	r2, [r2, #12]
 800493a:	fbb3 f0f2 	udiv	r0, r3, r2
 800493e:	fb02 f200 	mul.w	r2, r2, r0
 8004942:	1a9b      	subs	r3, r3, r2
 8004944:	440b      	add	r3, r1
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	b292      	uxth	r2, r2
 800494a:	4611      	mov	r1, r2
 800494c:	4618      	mov	r0, r3
 800494e:	f7ff fb38 	bl	8003fc2 <st_word>
			fs->wflag = 1;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2201      	movs	r2, #1
 8004956:	70da      	strb	r2, [r3, #3]
			break;
 8004958:	e047      	b.n	80049ea <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	899b      	ldrh	r3, [r3, #12]
 8004962:	089b      	lsrs	r3, r3, #2
 8004964:	b29b      	uxth	r3, r3
 8004966:	4619      	mov	r1, r3
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	fbb3 f3f1 	udiv	r3, r3, r1
 800496e:	4413      	add	r3, r2
 8004970:	4619      	mov	r1, r3
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f7ff fd9a 	bl	80044ac <move_window>
 8004978:	4603      	mov	r3, r0
 800497a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800497c:	7ffb      	ldrb	r3, [r7, #31]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d132      	bne.n	80049e8 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	8992      	ldrh	r2, [r2, #12]
 8004996:	fbb3 f0f2 	udiv	r0, r3, r2
 800499a:	fb02 f200 	mul.w	r2, r2, r0
 800499e:	1a9b      	subs	r3, r3, r2
 80049a0:	440b      	add	r3, r1
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7ff faea 	bl	8003f7c <ld_dword>
 80049a8:	4603      	mov	r3, r0
 80049aa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80049ae:	4323      	orrs	r3, r4
 80049b0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	8992      	ldrh	r2, [r2, #12]
 80049c0:	fbb3 f0f2 	udiv	r0, r3, r2
 80049c4:	fb02 f200 	mul.w	r2, r2, r0
 80049c8:	1a9b      	subs	r3, r3, r2
 80049ca:	440b      	add	r3, r1
 80049cc:	6879      	ldr	r1, [r7, #4]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7ff fb12 	bl	8003ff8 <st_dword>
			fs->wflag = 1;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2201      	movs	r2, #1
 80049d8:	70da      	strb	r2, [r3, #3]
			break;
 80049da:	e006      	b.n	80049ea <put_fat+0x224>
			if (res != FR_OK) break;
 80049dc:	bf00      	nop
 80049de:	e004      	b.n	80049ea <put_fat+0x224>
			if (res != FR_OK) break;
 80049e0:	bf00      	nop
 80049e2:	e002      	b.n	80049ea <put_fat+0x224>
			if (res != FR_OK) break;
 80049e4:	bf00      	nop
 80049e6:	e000      	b.n	80049ea <put_fat+0x224>
			if (res != FR_OK) break;
 80049e8:	bf00      	nop
		}
	}
	return res;
 80049ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3724      	adds	r7, #36	; 0x24
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd90      	pop	{r4, r7, pc}

080049f4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b088      	sub	sp, #32
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004a00:	2300      	movs	r3, #0
 8004a02:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d904      	bls.n	8004a1a <remove_chain+0x26>
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	69db      	ldr	r3, [r3, #28]
 8004a14:	68ba      	ldr	r2, [r7, #8]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d301      	bcc.n	8004a1e <remove_chain+0x2a>
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	e04b      	b.n	8004ab6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00c      	beq.n	8004a3e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004a24:	f04f 32ff 	mov.w	r2, #4294967295
 8004a28:	6879      	ldr	r1, [r7, #4]
 8004a2a:	69b8      	ldr	r0, [r7, #24]
 8004a2c:	f7ff fecb 	bl	80047c6 <put_fat>
 8004a30:	4603      	mov	r3, r0
 8004a32:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004a34:	7ffb      	ldrb	r3, [r7, #31]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <remove_chain+0x4a>
 8004a3a:	7ffb      	ldrb	r3, [r7, #31]
 8004a3c:	e03b      	b.n	8004ab6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004a3e:	68b9      	ldr	r1, [r7, #8]
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f7ff fdf0 	bl	8004626 <get_fat>
 8004a46:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d031      	beq.n	8004ab2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d101      	bne.n	8004a58 <remove_chain+0x64>
 8004a54:	2302      	movs	r3, #2
 8004a56:	e02e      	b.n	8004ab6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a5e:	d101      	bne.n	8004a64 <remove_chain+0x70>
 8004a60:	2301      	movs	r3, #1
 8004a62:	e028      	b.n	8004ab6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004a64:	2200      	movs	r2, #0
 8004a66:	68b9      	ldr	r1, [r7, #8]
 8004a68:	69b8      	ldr	r0, [r7, #24]
 8004a6a:	f7ff feac 	bl	80047c6 <put_fat>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004a72:	7ffb      	ldrb	r3, [r7, #31]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <remove_chain+0x88>
 8004a78:	7ffb      	ldrb	r3, [r7, #31]
 8004a7a:	e01c      	b.n	8004ab6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	699a      	ldr	r2, [r3, #24]
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	69db      	ldr	r3, [r3, #28]
 8004a84:	3b02      	subs	r3, #2
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d20b      	bcs.n	8004aa2 <remove_chain+0xae>
			fs->free_clst++;
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	1c5a      	adds	r2, r3, #1
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	791b      	ldrb	r3, [r3, #4]
 8004a98:	f043 0301 	orr.w	r3, r3, #1
 8004a9c:	b2da      	uxtb	r2, r3
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	69db      	ldr	r3, [r3, #28]
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d3c6      	bcc.n	8004a3e <remove_chain+0x4a>
 8004ab0:	e000      	b.n	8004ab4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004ab2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3720      	adds	r7, #32
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b088      	sub	sp, #32
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
 8004ac6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d10d      	bne.n	8004af0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	695b      	ldr	r3, [r3, #20]
 8004ad8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d004      	beq.n	8004aea <create_chain+0x2c>
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	69db      	ldr	r3, [r3, #28]
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d31b      	bcc.n	8004b22 <create_chain+0x64>
 8004aea:	2301      	movs	r3, #1
 8004aec:	61bb      	str	r3, [r7, #24]
 8004aee:	e018      	b.n	8004b22 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004af0:	6839      	ldr	r1, [r7, #0]
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7ff fd97 	bl	8004626 <get_fat>
 8004af8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d801      	bhi.n	8004b04 <create_chain+0x46>
 8004b00:	2301      	movs	r3, #1
 8004b02:	e070      	b.n	8004be6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0a:	d101      	bne.n	8004b10 <create_chain+0x52>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	e06a      	b.n	8004be6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	69db      	ldr	r3, [r3, #28]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d201      	bcs.n	8004b1e <create_chain+0x60>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	e063      	b.n	8004be6 <create_chain+0x128>
		scl = clst;
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	69db      	ldr	r3, [r3, #28]
 8004b30:	69fa      	ldr	r2, [r7, #28]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d307      	bcc.n	8004b46 <create_chain+0x88>
				ncl = 2;
 8004b36:	2302      	movs	r3, #2
 8004b38:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004b3a:	69fa      	ldr	r2, [r7, #28]
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d901      	bls.n	8004b46 <create_chain+0x88>
 8004b42:	2300      	movs	r3, #0
 8004b44:	e04f      	b.n	8004be6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004b46:	69f9      	ldr	r1, [r7, #28]
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f7ff fd6c 	bl	8004626 <get_fat>
 8004b4e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00e      	beq.n	8004b74 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d003      	beq.n	8004b64 <create_chain+0xa6>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b62:	d101      	bne.n	8004b68 <create_chain+0xaa>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	e03e      	b.n	8004be6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004b68:	69fa      	ldr	r2, [r7, #28]
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d1da      	bne.n	8004b26 <create_chain+0x68>
 8004b70:	2300      	movs	r3, #0
 8004b72:	e038      	b.n	8004be6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004b74:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004b76:	f04f 32ff 	mov.w	r2, #4294967295
 8004b7a:	69f9      	ldr	r1, [r7, #28]
 8004b7c:	6938      	ldr	r0, [r7, #16]
 8004b7e:	f7ff fe22 	bl	80047c6 <put_fat>
 8004b82:	4603      	mov	r3, r0
 8004b84:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004b86:	7dfb      	ldrb	r3, [r7, #23]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d109      	bne.n	8004ba0 <create_chain+0xe2>
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d006      	beq.n	8004ba0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004b92:	69fa      	ldr	r2, [r7, #28]
 8004b94:	6839      	ldr	r1, [r7, #0]
 8004b96:	6938      	ldr	r0, [r7, #16]
 8004b98:	f7ff fe15 	bl	80047c6 <put_fat>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004ba0:	7dfb      	ldrb	r3, [r7, #23]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d116      	bne.n	8004bd4 <create_chain+0x116>
		fs->last_clst = ncl;
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	69fa      	ldr	r2, [r7, #28]
 8004baa:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	699a      	ldr	r2, [r3, #24]
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	69db      	ldr	r3, [r3, #28]
 8004bb4:	3b02      	subs	r3, #2
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d804      	bhi.n	8004bc4 <create_chain+0x106>
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	1e5a      	subs	r2, r3, #1
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	791b      	ldrb	r3, [r3, #4]
 8004bc8:	f043 0301 	orr.w	r3, r3, #1
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	711a      	strb	r2, [r3, #4]
 8004bd2:	e007      	b.n	8004be4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004bd4:	7dfb      	ldrb	r3, [r7, #23]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d102      	bne.n	8004be0 <create_chain+0x122>
 8004bda:	f04f 33ff 	mov.w	r3, #4294967295
 8004bde:	e000      	b.n	8004be2 <create_chain+0x124>
 8004be0:	2301      	movs	r3, #1
 8004be2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004be4:	69fb      	ldr	r3, [r7, #28]
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3720      	adds	r7, #32
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004bee:	b480      	push	{r7}
 8004bf0:	b087      	sub	sp, #28
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
 8004bf6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c02:	3304      	adds	r3, #4
 8004c04:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	899b      	ldrh	r3, [r3, #12]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	8952      	ldrh	r2, [r2, #10]
 8004c16:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c1a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	1d1a      	adds	r2, r3, #4
 8004c20:	613a      	str	r2, [r7, #16]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d101      	bne.n	8004c30 <clmt_clust+0x42>
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	e010      	b.n	8004c52 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d307      	bcc.n	8004c48 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	617b      	str	r3, [r7, #20]
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	3304      	adds	r3, #4
 8004c44:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004c46:	e7e9      	b.n	8004c1c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8004c48:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	4413      	add	r3, r2
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	371c      	adds	r7, #28
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b086      	sub	sp, #24
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
 8004c66:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c74:	d204      	bcs.n	8004c80 <dir_sdi+0x22>
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	f003 031f 	and.w	r3, r3, #31
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d001      	beq.n	8004c84 <dir_sdi+0x26>
		return FR_INT_ERR;
 8004c80:	2302      	movs	r3, #2
 8004c82:	e071      	b.n	8004d68 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d106      	bne.n	8004ca4 <dir_sdi+0x46>
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d902      	bls.n	8004ca4 <dir_sdi+0x46>
		clst = fs->dirbase;
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10c      	bne.n	8004cc4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	095b      	lsrs	r3, r3, #5
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	8912      	ldrh	r2, [r2, #8]
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d301      	bcc.n	8004cba <dir_sdi+0x5c>
 8004cb6:	2302      	movs	r3, #2
 8004cb8:	e056      	b.n	8004d68 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	61da      	str	r2, [r3, #28]
 8004cc2:	e02d      	b.n	8004d20 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	895b      	ldrh	r3, [r3, #10]
 8004cc8:	461a      	mov	r2, r3
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	899b      	ldrh	r3, [r3, #12]
 8004cce:	fb03 f302 	mul.w	r3, r3, r2
 8004cd2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004cd4:	e019      	b.n	8004d0a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6979      	ldr	r1, [r7, #20]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7ff fca3 	bl	8004626 <get_fat>
 8004ce0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce8:	d101      	bne.n	8004cee <dir_sdi+0x90>
 8004cea:	2301      	movs	r3, #1
 8004cec:	e03c      	b.n	8004d68 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d904      	bls.n	8004cfe <dir_sdi+0xa0>
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	69db      	ldr	r3, [r3, #28]
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d301      	bcc.n	8004d02 <dir_sdi+0xa4>
 8004cfe:	2302      	movs	r3, #2
 8004d00:	e032      	b.n	8004d68 <dir_sdi+0x10a>
			ofs -= csz;
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004d0a:	683a      	ldr	r2, [r7, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d2e1      	bcs.n	8004cd6 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8004d12:	6979      	ldr	r1, [r7, #20]
 8004d14:	6938      	ldr	r0, [r7, #16]
 8004d16:	f7ff fc67 	bl	80045e8 <clust2sect>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	69db      	ldr	r3, [r3, #28]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <dir_sdi+0xd4>
 8004d2e:	2302      	movs	r3, #2
 8004d30:	e01a      	b.n	8004d68 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	69da      	ldr	r2, [r3, #28]
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	899b      	ldrh	r3, [r3, #12]
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d42:	441a      	add	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	899b      	ldrh	r3, [r3, #12]
 8004d52:	461a      	mov	r2, r3
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	fbb3 f0f2 	udiv	r0, r3, r2
 8004d5a:	fb02 f200 	mul.w	r2, r2, r0
 8004d5e:	1a9b      	subs	r3, r3, r2
 8004d60:	18ca      	adds	r2, r1, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3718      	adds	r7, #24
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	3320      	adds	r3, #32
 8004d86:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	69db      	ldr	r3, [r3, #28]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d003      	beq.n	8004d98 <dir_next+0x28>
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d96:	d301      	bcc.n	8004d9c <dir_next+0x2c>
 8004d98:	2304      	movs	r3, #4
 8004d9a:	e0bb      	b.n	8004f14 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	899b      	ldrh	r3, [r3, #12]
 8004da0:	461a      	mov	r2, r3
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	fbb3 f1f2 	udiv	r1, r3, r2
 8004da8:	fb02 f201 	mul.w	r2, r2, r1
 8004dac:	1a9b      	subs	r3, r3, r2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f040 809d 	bne.w	8004eee <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	69db      	ldr	r3, [r3, #28]
 8004db8:	1c5a      	adds	r2, r3, #1
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d10b      	bne.n	8004dde <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	095b      	lsrs	r3, r3, #5
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	8912      	ldrh	r2, [r2, #8]
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	f0c0 808d 	bcc.w	8004eee <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	61da      	str	r2, [r3, #28]
 8004dda:	2304      	movs	r3, #4
 8004ddc:	e09a      	b.n	8004f14 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	899b      	ldrh	r3, [r3, #12]
 8004de2:	461a      	mov	r2, r3
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	8952      	ldrh	r2, [r2, #10]
 8004dee:	3a01      	subs	r2, #1
 8004df0:	4013      	ands	r3, r2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d17b      	bne.n	8004eee <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	4610      	mov	r0, r2
 8004e00:	f7ff fc11 	bl	8004626 <get_fat>
 8004e04:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d801      	bhi.n	8004e10 <dir_next+0xa0>
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	e081      	b.n	8004f14 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e16:	d101      	bne.n	8004e1c <dir_next+0xac>
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e07b      	b.n	8004f14 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	69db      	ldr	r3, [r3, #28]
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d359      	bcc.n	8004eda <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d104      	bne.n	8004e36 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	61da      	str	r2, [r3, #28]
 8004e32:	2304      	movs	r3, #4
 8004e34:	e06e      	b.n	8004f14 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	4610      	mov	r0, r2
 8004e40:	f7ff fe3d 	bl	8004abe <create_chain>
 8004e44:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d101      	bne.n	8004e50 <dir_next+0xe0>
 8004e4c:	2307      	movs	r3, #7
 8004e4e:	e061      	b.n	8004f14 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d101      	bne.n	8004e5a <dir_next+0xea>
 8004e56:	2302      	movs	r3, #2
 8004e58:	e05c      	b.n	8004f14 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e60:	d101      	bne.n	8004e66 <dir_next+0xf6>
 8004e62:	2301      	movs	r3, #1
 8004e64:	e056      	b.n	8004f14 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f7ff fadc 	bl	8004424 <sync_window>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d001      	beq.n	8004e76 <dir_next+0x106>
 8004e72:	2301      	movs	r3, #1
 8004e74:	e04e      	b.n	8004f14 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	899b      	ldrh	r3, [r3, #12]
 8004e80:	461a      	mov	r2, r3
 8004e82:	2100      	movs	r1, #0
 8004e84:	f7ff f905 	bl	8004092 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004e88:	2300      	movs	r3, #0
 8004e8a:	613b      	str	r3, [r7, #16]
 8004e8c:	6979      	ldr	r1, [r7, #20]
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f7ff fbaa 	bl	80045e8 <clust2sect>
 8004e94:	4602      	mov	r2, r0
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	635a      	str	r2, [r3, #52]	; 0x34
 8004e9a:	e012      	b.n	8004ec2 <dir_next+0x152>
						fs->wflag = 1;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f7ff fabe 	bl	8004424 <sync_window>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d001      	beq.n	8004eb2 <dir_next+0x142>
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e030      	b.n	8004f14 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	613b      	str	r3, [r7, #16]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ebc:	1c5a      	adds	r2, r3, #1
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	635a      	str	r2, [r3, #52]	; 0x34
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	895b      	ldrh	r3, [r3, #10]
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d3e6      	bcc.n	8004e9c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	1ad2      	subs	r2, r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004ee0:	6979      	ldr	r1, [r7, #20]
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f7ff fb80 	bl	80045e8 <clust2sect>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	899b      	ldrh	r3, [r3, #12]
 8004efe:	461a      	mov	r2, r3
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	fbb3 f0f2 	udiv	r0, r3, r2
 8004f06:	fb02 f200 	mul.w	r2, r2, r0
 8004f0a:	1a9b      	subs	r3, r3, r2
 8004f0c:	18ca      	adds	r2, r1, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3718      	adds	r7, #24
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b086      	sub	sp, #24
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7ff fe95 	bl	8004c5e <dir_sdi>
 8004f34:	4603      	mov	r3, r0
 8004f36:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004f38:	7dfb      	ldrb	r3, [r7, #23]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d12b      	bne.n	8004f96 <dir_alloc+0x7a>
		n = 0;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	4619      	mov	r1, r3
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f7ff faaf 	bl	80044ac <move_window>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004f52:	7dfb      	ldrb	r3, [r7, #23]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d11d      	bne.n	8004f94 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a1b      	ldr	r3, [r3, #32]
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	2be5      	cmp	r3, #229	; 0xe5
 8004f60:	d004      	beq.n	8004f6c <dir_alloc+0x50>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d107      	bne.n	8004f7c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	3301      	adds	r3, #1
 8004f70:	613b      	str	r3, [r7, #16]
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d102      	bne.n	8004f80 <dir_alloc+0x64>
 8004f7a:	e00c      	b.n	8004f96 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004f80:	2101      	movs	r1, #1
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f7ff fef4 	bl	8004d70 <dir_next>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004f8c:	7dfb      	ldrb	r3, [r7, #23]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d0d7      	beq.n	8004f42 <dir_alloc+0x26>
 8004f92:	e000      	b.n	8004f96 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004f94:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004f96:	7dfb      	ldrb	r3, [r7, #23]
 8004f98:	2b04      	cmp	r3, #4
 8004f9a:	d101      	bne.n	8004fa0 <dir_alloc+0x84>
 8004f9c:	2307      	movs	r3, #7
 8004f9e:	75fb      	strb	r3, [r7, #23]
	return res;
 8004fa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3718      	adds	r7, #24
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b084      	sub	sp, #16
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
 8004fb2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	331a      	adds	r3, #26
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7fe ffc7 	bl	8003f4c <ld_word>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	2b03      	cmp	r3, #3
 8004fc8:	d109      	bne.n	8004fde <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	3314      	adds	r3, #20
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7fe ffbc 	bl	8003f4c <ld_word>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	041b      	lsls	r3, r3, #16
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004fde:	68fb      	ldr	r3, [r7, #12]
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3710      	adds	r7, #16
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	331a      	adds	r3, #26
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	b292      	uxth	r2, r2
 8004ffc:	4611      	mov	r1, r2
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fe ffdf 	bl	8003fc2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	2b03      	cmp	r3, #3
 800500a:	d109      	bne.n	8005020 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	f103 0214 	add.w	r2, r3, #20
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	0c1b      	lsrs	r3, r3, #16
 8005016:	b29b      	uxth	r3, r3
 8005018:	4619      	mov	r1, r3
 800501a:	4610      	mov	r0, r2
 800501c:	f7fe ffd1 	bl	8003fc2 <st_word>
	}
}
 8005020:	bf00      	nop
 8005022:	3710      	adds	r7, #16
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8005028:	b590      	push	{r4, r7, lr}
 800502a:	b087      	sub	sp, #28
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	331a      	adds	r3, #26
 8005036:	4618      	mov	r0, r3
 8005038:	f7fe ff88 	bl	8003f4c <ld_word>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d001      	beq.n	8005046 <cmp_lfn+0x1e>
 8005042:	2300      	movs	r3, #0
 8005044:	e059      	b.n	80050fa <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800504e:	1e5a      	subs	r2, r3, #1
 8005050:	4613      	mov	r3, r2
 8005052:	005b      	lsls	r3, r3, #1
 8005054:	4413      	add	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4413      	add	r3, r2
 800505a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800505c:	2301      	movs	r3, #1
 800505e:	81fb      	strh	r3, [r7, #14]
 8005060:	2300      	movs	r3, #0
 8005062:	613b      	str	r3, [r7, #16]
 8005064:	e033      	b.n	80050ce <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005066:	4a27      	ldr	r2, [pc, #156]	; (8005104 <cmp_lfn+0xdc>)
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	4413      	add	r3, r2
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	461a      	mov	r2, r3
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	4413      	add	r3, r2
 8005074:	4618      	mov	r0, r3
 8005076:	f7fe ff69 	bl	8003f4c <ld_word>
 800507a:	4603      	mov	r3, r0
 800507c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800507e:	89fb      	ldrh	r3, [r7, #14]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d01a      	beq.n	80050ba <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	2bfe      	cmp	r3, #254	; 0xfe
 8005088:	d812      	bhi.n	80050b0 <cmp_lfn+0x88>
 800508a:	89bb      	ldrh	r3, [r7, #12]
 800508c:	4618      	mov	r0, r3
 800508e:	f002 fcc5 	bl	8007a1c <ff_wtoupper>
 8005092:	4603      	mov	r3, r0
 8005094:	461c      	mov	r4, r3
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	1c5a      	adds	r2, r3, #1
 800509a:	617a      	str	r2, [r7, #20]
 800509c:	005b      	lsls	r3, r3, #1
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	4413      	add	r3, r2
 80050a2:	881b      	ldrh	r3, [r3, #0]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f002 fcb9 	bl	8007a1c <ff_wtoupper>
 80050aa:	4603      	mov	r3, r0
 80050ac:	429c      	cmp	r4, r3
 80050ae:	d001      	beq.n	80050b4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80050b0:	2300      	movs	r3, #0
 80050b2:	e022      	b.n	80050fa <cmp_lfn+0xd2>
			}
			wc = uc;
 80050b4:	89bb      	ldrh	r3, [r7, #12]
 80050b6:	81fb      	strh	r3, [r7, #14]
 80050b8:	e006      	b.n	80050c8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80050ba:	89bb      	ldrh	r3, [r7, #12]
 80050bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d001      	beq.n	80050c8 <cmp_lfn+0xa0>
 80050c4:	2300      	movs	r3, #0
 80050c6:	e018      	b.n	80050fa <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	3301      	adds	r3, #1
 80050cc:	613b      	str	r3, [r7, #16]
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	2b0c      	cmp	r3, #12
 80050d2:	d9c8      	bls.n	8005066 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00b      	beq.n	80050f8 <cmp_lfn+0xd0>
 80050e0:	89fb      	ldrh	r3, [r7, #14]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d008      	beq.n	80050f8 <cmp_lfn+0xd0>
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	005b      	lsls	r3, r3, #1
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	4413      	add	r3, r2
 80050ee:	881b      	ldrh	r3, [r3, #0]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d001      	beq.n	80050f8 <cmp_lfn+0xd0>
 80050f4:	2300      	movs	r3, #0
 80050f6:	e000      	b.n	80050fa <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80050f8:	2301      	movs	r3, #1
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	371c      	adds	r7, #28
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd90      	pop	{r4, r7, pc}
 8005102:	bf00      	nop
 8005104:	0800a7d4 	.word	0x0800a7d4

08005108 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b086      	sub	sp, #24
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	331a      	adds	r3, #26
 8005116:	4618      	mov	r0, r3
 8005118:	f7fe ff18 	bl	8003f4c <ld_word>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d001      	beq.n	8005126 <pick_lfn+0x1e>
 8005122:	2300      	movs	r3, #0
 8005124:	e04d      	b.n	80051c2 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800512e:	1e5a      	subs	r2, r3, #1
 8005130:	4613      	mov	r3, r2
 8005132:	005b      	lsls	r3, r3, #1
 8005134:	4413      	add	r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	4413      	add	r3, r2
 800513a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800513c:	2301      	movs	r3, #1
 800513e:	81fb      	strh	r3, [r7, #14]
 8005140:	2300      	movs	r3, #0
 8005142:	613b      	str	r3, [r7, #16]
 8005144:	e028      	b.n	8005198 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005146:	4a21      	ldr	r2, [pc, #132]	; (80051cc <pick_lfn+0xc4>)
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	4413      	add	r3, r2
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	461a      	mov	r2, r3
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	4413      	add	r3, r2
 8005154:	4618      	mov	r0, r3
 8005156:	f7fe fef9 	bl	8003f4c <ld_word>
 800515a:	4603      	mov	r3, r0
 800515c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800515e:	89fb      	ldrh	r3, [r7, #14]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00f      	beq.n	8005184 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	2bfe      	cmp	r3, #254	; 0xfe
 8005168:	d901      	bls.n	800516e <pick_lfn+0x66>
 800516a:	2300      	movs	r3, #0
 800516c:	e029      	b.n	80051c2 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800516e:	89bb      	ldrh	r3, [r7, #12]
 8005170:	81fb      	strh	r3, [r7, #14]
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	1c5a      	adds	r2, r3, #1
 8005176:	617a      	str	r2, [r7, #20]
 8005178:	005b      	lsls	r3, r3, #1
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	4413      	add	r3, r2
 800517e:	89fa      	ldrh	r2, [r7, #14]
 8005180:	801a      	strh	r2, [r3, #0]
 8005182:	e006      	b.n	8005192 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005184:	89bb      	ldrh	r3, [r7, #12]
 8005186:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800518a:	4293      	cmp	r3, r2
 800518c:	d001      	beq.n	8005192 <pick_lfn+0x8a>
 800518e:	2300      	movs	r3, #0
 8005190:	e017      	b.n	80051c2 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	3301      	adds	r3, #1
 8005196:	613b      	str	r3, [r7, #16]
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	2b0c      	cmp	r3, #12
 800519c:	d9d3      	bls.n	8005146 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00a      	beq.n	80051c0 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	2bfe      	cmp	r3, #254	; 0xfe
 80051ae:	d901      	bls.n	80051b4 <pick_lfn+0xac>
 80051b0:	2300      	movs	r3, #0
 80051b2:	e006      	b.n	80051c2 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	005b      	lsls	r3, r3, #1
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	4413      	add	r3, r2
 80051bc:	2200      	movs	r2, #0
 80051be:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 80051c0:	2301      	movs	r3, #1
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3718      	adds	r7, #24
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	0800a7d4 	.word	0x0800a7d4

080051d0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b088      	sub	sp, #32
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	4611      	mov	r1, r2
 80051dc:	461a      	mov	r2, r3
 80051de:	460b      	mov	r3, r1
 80051e0:	71fb      	strb	r3, [r7, #7]
 80051e2:	4613      	mov	r3, r2
 80051e4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	330d      	adds	r3, #13
 80051ea:	79ba      	ldrb	r2, [r7, #6]
 80051ec:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	330b      	adds	r3, #11
 80051f2:	220f      	movs	r2, #15
 80051f4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	330c      	adds	r3, #12
 80051fa:	2200      	movs	r2, #0
 80051fc:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	331a      	adds	r3, #26
 8005202:	2100      	movs	r1, #0
 8005204:	4618      	mov	r0, r3
 8005206:	f7fe fedc 	bl	8003fc2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800520a:	79fb      	ldrb	r3, [r7, #7]
 800520c:	1e5a      	subs	r2, r3, #1
 800520e:	4613      	mov	r3, r2
 8005210:	005b      	lsls	r3, r3, #1
 8005212:	4413      	add	r3, r2
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	4413      	add	r3, r2
 8005218:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800521a:	2300      	movs	r3, #0
 800521c:	82fb      	strh	r3, [r7, #22]
 800521e:	2300      	movs	r3, #0
 8005220:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005222:	8afb      	ldrh	r3, [r7, #22]
 8005224:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005228:	4293      	cmp	r3, r2
 800522a:	d007      	beq.n	800523c <put_lfn+0x6c>
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	1c5a      	adds	r2, r3, #1
 8005230:	61fa      	str	r2, [r7, #28]
 8005232:	005b      	lsls	r3, r3, #1
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	4413      	add	r3, r2
 8005238:	881b      	ldrh	r3, [r3, #0]
 800523a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800523c:	4a17      	ldr	r2, [pc, #92]	; (800529c <put_lfn+0xcc>)
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	4413      	add	r3, r2
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	461a      	mov	r2, r3
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	4413      	add	r3, r2
 800524a:	8afa      	ldrh	r2, [r7, #22]
 800524c:	4611      	mov	r1, r2
 800524e:	4618      	mov	r0, r3
 8005250:	f7fe feb7 	bl	8003fc2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005254:	8afb      	ldrh	r3, [r7, #22]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d102      	bne.n	8005260 <put_lfn+0x90>
 800525a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800525e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	3301      	adds	r3, #1
 8005264:	61bb      	str	r3, [r7, #24]
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	2b0c      	cmp	r3, #12
 800526a:	d9da      	bls.n	8005222 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800526c:	8afb      	ldrh	r3, [r7, #22]
 800526e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005272:	4293      	cmp	r3, r2
 8005274:	d006      	beq.n	8005284 <put_lfn+0xb4>
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	005b      	lsls	r3, r3, #1
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	4413      	add	r3, r2
 800527e:	881b      	ldrh	r3, [r3, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d103      	bne.n	800528c <put_lfn+0xbc>
 8005284:	79fb      	ldrb	r3, [r7, #7]
 8005286:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800528a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	79fa      	ldrb	r2, [r7, #7]
 8005290:	701a      	strb	r2, [r3, #0]
}
 8005292:	bf00      	nop
 8005294:	3720      	adds	r7, #32
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	0800a7d4 	.word	0x0800a7d4

080052a0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b08c      	sub	sp, #48	; 0x30
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
 80052ac:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80052ae:	220b      	movs	r2, #11
 80052b0:	68b9      	ldr	r1, [r7, #8]
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f7fe fecc 	bl	8004050 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	2b05      	cmp	r3, #5
 80052bc:	d92b      	bls.n	8005316 <gen_numname+0x76>
		sr = seq;
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80052c2:	e022      	b.n	800530a <gen_numname+0x6a>
			wc = *lfn++;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	1c9a      	adds	r2, r3, #2
 80052c8:	607a      	str	r2, [r7, #4]
 80052ca:	881b      	ldrh	r3, [r3, #0]
 80052cc:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80052ce:	2300      	movs	r3, #0
 80052d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80052d2:	e017      	b.n	8005304 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	005a      	lsls	r2, r3, #1
 80052d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	4413      	add	r3, r2
 80052e0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80052e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80052e4:	085b      	lsrs	r3, r3, #1
 80052e6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d005      	beq.n	80052fe <gen_numname+0x5e>
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80052f8:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80052fc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80052fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005300:	3301      	adds	r3, #1
 8005302:	62bb      	str	r3, [r7, #40]	; 0x28
 8005304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005306:	2b0f      	cmp	r3, #15
 8005308:	d9e4      	bls.n	80052d4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	881b      	ldrh	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1d8      	bne.n	80052c4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8005316:	2307      	movs	r3, #7
 8005318:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	b2db      	uxtb	r3, r3
 800531e:	f003 030f 	and.w	r3, r3, #15
 8005322:	b2db      	uxtb	r3, r3
 8005324:	3330      	adds	r3, #48	; 0x30
 8005326:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800532a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800532e:	2b39      	cmp	r3, #57	; 0x39
 8005330:	d904      	bls.n	800533c <gen_numname+0x9c>
 8005332:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005336:	3307      	adds	r3, #7
 8005338:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800533c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533e:	1e5a      	subs	r2, r3, #1
 8005340:	62ba      	str	r2, [r7, #40]	; 0x28
 8005342:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005346:	4413      	add	r3, r2
 8005348:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800534c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	091b      	lsrs	r3, r3, #4
 8005354:	603b      	str	r3, [r7, #0]
	} while (seq);
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d1de      	bne.n	800531a <gen_numname+0x7a>
	ns[i] = '~';
 800535c:	f107 0214 	add.w	r2, r7, #20
 8005360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005362:	4413      	add	r3, r2
 8005364:	227e      	movs	r2, #126	; 0x7e
 8005366:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005368:	2300      	movs	r3, #0
 800536a:	627b      	str	r3, [r7, #36]	; 0x24
 800536c:	e016      	b.n	800539c <gen_numname+0xfc>
		if (IsDBCS1(dst[j])) {
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005372:	4413      	add	r3, r2
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	2b80      	cmp	r3, #128	; 0x80
 8005378:	d90d      	bls.n	8005396 <gen_numname+0xf6>
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	4413      	add	r3, r2
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	2bff      	cmp	r3, #255	; 0xff
 8005384:	d007      	beq.n	8005396 <gen_numname+0xf6>
			if (j == i - 1) break;
 8005386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005388:	3b01      	subs	r3, #1
 800538a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800538c:	429a      	cmp	r2, r3
 800538e:	d010      	beq.n	80053b2 <gen_numname+0x112>
			j++;
 8005390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005392:	3301      	adds	r3, #1
 8005394:	627b      	str	r3, [r7, #36]	; 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005398:	3301      	adds	r3, #1
 800539a:	627b      	str	r3, [r7, #36]	; 0x24
 800539c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800539e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d207      	bcs.n	80053b4 <gen_numname+0x114>
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a8:	4413      	add	r3, r2
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	2b20      	cmp	r3, #32
 80053ae:	d1de      	bne.n	800536e <gen_numname+0xce>
 80053b0:	e000      	b.n	80053b4 <gen_numname+0x114>
			if (j == i - 1) break;
 80053b2:	bf00      	nop
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80053b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b6:	2b07      	cmp	r3, #7
 80053b8:	d808      	bhi.n	80053cc <gen_numname+0x12c>
 80053ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053bc:	1c5a      	adds	r2, r3, #1
 80053be:	62ba      	str	r2, [r7, #40]	; 0x28
 80053c0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80053c4:	4413      	add	r3, r2
 80053c6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80053ca:	e000      	b.n	80053ce <gen_numname+0x12e>
 80053cc:	2120      	movs	r1, #32
 80053ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d0:	1c5a      	adds	r2, r3, #1
 80053d2:	627a      	str	r2, [r7, #36]	; 0x24
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	4413      	add	r3, r2
 80053d8:	460a      	mov	r2, r1
 80053da:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80053dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053de:	2b07      	cmp	r3, #7
 80053e0:	d9e8      	bls.n	80053b4 <gen_numname+0x114>
}
 80053e2:	bf00      	nop
 80053e4:	3730      	adds	r7, #48	; 0x30
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80053ea:	b480      	push	{r7}
 80053ec:	b085      	sub	sp, #20
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80053f2:	2300      	movs	r3, #0
 80053f4:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80053f6:	230b      	movs	r3, #11
 80053f8:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80053fa:	7bfb      	ldrb	r3, [r7, #15]
 80053fc:	b2da      	uxtb	r2, r3
 80053fe:	0852      	lsrs	r2, r2, #1
 8005400:	01db      	lsls	r3, r3, #7
 8005402:	4313      	orrs	r3, r2
 8005404:	b2da      	uxtb	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	1c59      	adds	r1, r3, #1
 800540a:	6079      	str	r1, [r7, #4]
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	4413      	add	r3, r2
 8005410:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	3b01      	subs	r3, #1
 8005416:	60bb      	str	r3, [r7, #8]
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1ed      	bne.n	80053fa <sum_sfn+0x10>
	return sum;
 800541e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005420:	4618      	mov	r0, r3
 8005422:	3714      	adds	r7, #20
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8005436:	2304      	movs	r3, #4
 8005438:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8005440:	23ff      	movs	r3, #255	; 0xff
 8005442:	757b      	strb	r3, [r7, #21]
 8005444:	23ff      	movs	r3, #255	; 0xff
 8005446:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8005448:	e081      	b.n	800554e <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	69db      	ldr	r3, [r3, #28]
 800544e:	4619      	mov	r1, r3
 8005450:	6938      	ldr	r0, [r7, #16]
 8005452:	f7ff f82b 	bl	80044ac <move_window>
 8005456:	4603      	mov	r3, r0
 8005458:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800545a:	7dfb      	ldrb	r3, [r7, #23]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d17c      	bne.n	800555a <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8005468:	7dbb      	ldrb	r3, [r7, #22]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d102      	bne.n	8005474 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800546e:	2304      	movs	r3, #4
 8005470:	75fb      	strb	r3, [r7, #23]
 8005472:	e077      	b.n	8005564 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a1b      	ldr	r3, [r3, #32]
 8005478:	330b      	adds	r3, #11
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005480:	73fb      	strb	r3, [r7, #15]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	7bfa      	ldrb	r2, [r7, #15]
 8005486:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8005488:	7dbb      	ldrb	r3, [r7, #22]
 800548a:	2be5      	cmp	r3, #229	; 0xe5
 800548c:	d00e      	beq.n	80054ac <dir_read+0x80>
 800548e:	7dbb      	ldrb	r3, [r7, #22]
 8005490:	2b2e      	cmp	r3, #46	; 0x2e
 8005492:	d00b      	beq.n	80054ac <dir_read+0x80>
 8005494:	7bfb      	ldrb	r3, [r7, #15]
 8005496:	f023 0320 	bic.w	r3, r3, #32
 800549a:	2b08      	cmp	r3, #8
 800549c:	bf0c      	ite	eq
 800549e:	2301      	moveq	r3, #1
 80054a0:	2300      	movne	r3, #0
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	461a      	mov	r2, r3
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d002      	beq.n	80054b2 <dir_read+0x86>
				ord = 0xFF;
 80054ac:	23ff      	movs	r3, #255	; 0xff
 80054ae:	757b      	strb	r3, [r7, #21]
 80054b0:	e044      	b.n	800553c <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 80054b2:	7bfb      	ldrb	r3, [r7, #15]
 80054b4:	2b0f      	cmp	r3, #15
 80054b6:	d12f      	bne.n	8005518 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 80054b8:	7dbb      	ldrb	r3, [r7, #22]
 80054ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00d      	beq.n	80054de <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	7b5b      	ldrb	r3, [r3, #13]
 80054c8:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 80054ca:	7dbb      	ldrb	r3, [r7, #22]
 80054cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054d0:	75bb      	strb	r3, [r7, #22]
 80054d2:	7dbb      	ldrb	r3, [r7, #22]
 80054d4:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	695a      	ldr	r2, [r3, #20]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80054de:	7dba      	ldrb	r2, [r7, #22]
 80054e0:	7d7b      	ldrb	r3, [r7, #21]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d115      	bne.n	8005512 <dir_read+0xe6>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	330d      	adds	r3, #13
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	7d3a      	ldrb	r2, [r7, #20]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d10e      	bne.n	8005512 <dir_read+0xe6>
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	691a      	ldr	r2, [r3, #16]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a1b      	ldr	r3, [r3, #32]
 80054fc:	4619      	mov	r1, r3
 80054fe:	4610      	mov	r0, r2
 8005500:	f7ff fe02 	bl	8005108 <pick_lfn>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d003      	beq.n	8005512 <dir_read+0xe6>
 800550a:	7d7b      	ldrb	r3, [r7, #21]
 800550c:	3b01      	subs	r3, #1
 800550e:	b2db      	uxtb	r3, r3
 8005510:	e000      	b.n	8005514 <dir_read+0xe8>
 8005512:	23ff      	movs	r3, #255	; 0xff
 8005514:	757b      	strb	r3, [r7, #21]
 8005516:	e011      	b.n	800553c <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8005518:	7d7b      	ldrb	r3, [r7, #21]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d109      	bne.n	8005532 <dir_read+0x106>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	4618      	mov	r0, r3
 8005524:	f7ff ff61 	bl	80053ea <sum_sfn>
 8005528:	4603      	mov	r3, r0
 800552a:	461a      	mov	r2, r3
 800552c:	7d3b      	ldrb	r3, [r7, #20]
 800552e:	4293      	cmp	r3, r2
 8005530:	d015      	beq.n	800555e <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f04f 32ff 	mov.w	r2, #4294967295
 8005538:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800553a:	e010      	b.n	800555e <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800553c:	2100      	movs	r1, #0
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f7ff fc16 	bl	8004d70 <dir_next>
 8005544:	4603      	mov	r3, r0
 8005546:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005548:	7dfb      	ldrb	r3, [r7, #23]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d109      	bne.n	8005562 <dir_read+0x136>
	while (dp->sect) {
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	69db      	ldr	r3, [r3, #28]
 8005552:	2b00      	cmp	r3, #0
 8005554:	f47f af79 	bne.w	800544a <dir_read+0x1e>
 8005558:	e004      	b.n	8005564 <dir_read+0x138>
		if (res != FR_OK) break;
 800555a:	bf00      	nop
 800555c:	e002      	b.n	8005564 <dir_read+0x138>
					break;
 800555e:	bf00      	nop
 8005560:	e000      	b.n	8005564 <dir_read+0x138>
		if (res != FR_OK) break;
 8005562:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8005564:	7dfb      	ldrb	r3, [r7, #23]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d002      	beq.n	8005570 <dir_read+0x144>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	61da      	str	r2, [r3, #28]
	return res;
 8005570:	7dfb      	ldrb	r3, [r7, #23]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3718      	adds	r7, #24
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b086      	sub	sp, #24
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005588:	2100      	movs	r1, #0
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f7ff fb67 	bl	8004c5e <dir_sdi>
 8005590:	4603      	mov	r3, r0
 8005592:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005594:	7dfb      	ldrb	r3, [r7, #23]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <dir_find+0x24>
 800559a:	7dfb      	ldrb	r3, [r7, #23]
 800559c:	e0a9      	b.n	80056f2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800559e:	23ff      	movs	r3, #255	; 0xff
 80055a0:	753b      	strb	r3, [r7, #20]
 80055a2:	7d3b      	ldrb	r3, [r7, #20]
 80055a4:	757b      	strb	r3, [r7, #21]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f04f 32ff 	mov.w	r2, #4294967295
 80055ac:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	69db      	ldr	r3, [r3, #28]
 80055b2:	4619      	mov	r1, r3
 80055b4:	6938      	ldr	r0, [r7, #16]
 80055b6:	f7fe ff79 	bl	80044ac <move_window>
 80055ba:	4603      	mov	r3, r0
 80055bc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80055be:	7dfb      	ldrb	r3, [r7, #23]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f040 8090 	bne.w	80056e6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80055ce:	7dbb      	ldrb	r3, [r7, #22]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d102      	bne.n	80055da <dir_find+0x60>
 80055d4:	2304      	movs	r3, #4
 80055d6:	75fb      	strb	r3, [r7, #23]
 80055d8:	e08a      	b.n	80056f0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	330b      	adds	r3, #11
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055e6:	73fb      	strb	r3, [r7, #15]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	7bfa      	ldrb	r2, [r7, #15]
 80055ec:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80055ee:	7dbb      	ldrb	r3, [r7, #22]
 80055f0:	2be5      	cmp	r3, #229	; 0xe5
 80055f2:	d007      	beq.n	8005604 <dir_find+0x8a>
 80055f4:	7bfb      	ldrb	r3, [r7, #15]
 80055f6:	f003 0308 	and.w	r3, r3, #8
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d009      	beq.n	8005612 <dir_find+0x98>
 80055fe:	7bfb      	ldrb	r3, [r7, #15]
 8005600:	2b0f      	cmp	r3, #15
 8005602:	d006      	beq.n	8005612 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005604:	23ff      	movs	r3, #255	; 0xff
 8005606:	757b      	strb	r3, [r7, #21]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f04f 32ff 	mov.w	r2, #4294967295
 800560e:	631a      	str	r2, [r3, #48]	; 0x30
 8005610:	e05e      	b.n	80056d0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005612:	7bfb      	ldrb	r3, [r7, #15]
 8005614:	2b0f      	cmp	r3, #15
 8005616:	d136      	bne.n	8005686 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800561e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005622:	2b00      	cmp	r3, #0
 8005624:	d154      	bne.n	80056d0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005626:	7dbb      	ldrb	r3, [r7, #22]
 8005628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00d      	beq.n	800564c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a1b      	ldr	r3, [r3, #32]
 8005634:	7b5b      	ldrb	r3, [r3, #13]
 8005636:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8005638:	7dbb      	ldrb	r3, [r7, #22]
 800563a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800563e:	75bb      	strb	r3, [r7, #22]
 8005640:	7dbb      	ldrb	r3, [r7, #22]
 8005642:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	695a      	ldr	r2, [r3, #20]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800564c:	7dba      	ldrb	r2, [r7, #22]
 800564e:	7d7b      	ldrb	r3, [r7, #21]
 8005650:	429a      	cmp	r2, r3
 8005652:	d115      	bne.n	8005680 <dir_find+0x106>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a1b      	ldr	r3, [r3, #32]
 8005658:	330d      	adds	r3, #13
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	7d3a      	ldrb	r2, [r7, #20]
 800565e:	429a      	cmp	r2, r3
 8005660:	d10e      	bne.n	8005680 <dir_find+0x106>
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	691a      	ldr	r2, [r3, #16]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	4619      	mov	r1, r3
 800566c:	4610      	mov	r0, r2
 800566e:	f7ff fcdb 	bl	8005028 <cmp_lfn>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d003      	beq.n	8005680 <dir_find+0x106>
 8005678:	7d7b      	ldrb	r3, [r7, #21]
 800567a:	3b01      	subs	r3, #1
 800567c:	b2db      	uxtb	r3, r3
 800567e:	e000      	b.n	8005682 <dir_find+0x108>
 8005680:	23ff      	movs	r3, #255	; 0xff
 8005682:	757b      	strb	r3, [r7, #21]
 8005684:	e024      	b.n	80056d0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005686:	7d7b      	ldrb	r3, [r7, #21]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d109      	bne.n	80056a0 <dir_find+0x126>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a1b      	ldr	r3, [r3, #32]
 8005690:	4618      	mov	r0, r3
 8005692:	f7ff feaa 	bl	80053ea <sum_sfn>
 8005696:	4603      	mov	r3, r0
 8005698:	461a      	mov	r2, r3
 800569a:	7d3b      	ldrb	r3, [r7, #20]
 800569c:	4293      	cmp	r3, r2
 800569e:	d024      	beq.n	80056ea <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10a      	bne.n	80056c4 <dir_find+0x14a>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a18      	ldr	r0, [r3, #32]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	3324      	adds	r3, #36	; 0x24
 80056b6:	220b      	movs	r2, #11
 80056b8:	4619      	mov	r1, r3
 80056ba:	f7fe fd04 	bl	80040c6 <mem_cmp>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d014      	beq.n	80056ee <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80056c4:	23ff      	movs	r3, #255	; 0xff
 80056c6:	757b      	strb	r3, [r7, #21]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f04f 32ff 	mov.w	r2, #4294967295
 80056ce:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80056d0:	2100      	movs	r1, #0
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f7ff fb4c 	bl	8004d70 <dir_next>
 80056d8:	4603      	mov	r3, r0
 80056da:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80056dc:	7dfb      	ldrb	r3, [r7, #23]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f43f af65 	beq.w	80055ae <dir_find+0x34>
 80056e4:	e004      	b.n	80056f0 <dir_find+0x176>
		if (res != FR_OK) break;
 80056e6:	bf00      	nop
 80056e8:	e002      	b.n	80056f0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80056ea:	bf00      	nop
 80056ec:	e000      	b.n	80056f0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80056ee:	bf00      	nop

	return res;
 80056f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3718      	adds	r7, #24
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
	...

080056fc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b08c      	sub	sp, #48	; 0x30
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005710:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d001      	beq.n	800571c <dir_register+0x20>
 8005718:	2306      	movs	r3, #6
 800571a:	e0e0      	b.n	80058de <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800571c:	2300      	movs	r3, #0
 800571e:	627b      	str	r3, [r7, #36]	; 0x24
 8005720:	e002      	b.n	8005728 <dir_register+0x2c>
 8005722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005724:	3301      	adds	r3, #1
 8005726:	627b      	str	r3, [r7, #36]	; 0x24
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	691a      	ldr	r2, [r3, #16]
 800572c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572e:	005b      	lsls	r3, r3, #1
 8005730:	4413      	add	r3, r2
 8005732:	881b      	ldrh	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d1f4      	bne.n	8005722 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800573e:	f107 030c 	add.w	r3, r7, #12
 8005742:	220c      	movs	r2, #12
 8005744:	4618      	mov	r0, r3
 8005746:	f7fe fc83 	bl	8004050 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800574a:	7dfb      	ldrb	r3, [r7, #23]
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	2b00      	cmp	r3, #0
 8005752:	d032      	beq.n	80057ba <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2240      	movs	r2, #64	; 0x40
 8005758:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800575c:	2301      	movs	r3, #1
 800575e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005760:	e016      	b.n	8005790 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	691a      	ldr	r2, [r3, #16]
 800576c:	f107 010c 	add.w	r1, r7, #12
 8005770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005772:	f7ff fd95 	bl	80052a0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7ff feff 	bl	800557a <dir_find>
 800577c:	4603      	mov	r3, r0
 800577e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8005782:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005786:	2b00      	cmp	r3, #0
 8005788:	d106      	bne.n	8005798 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800578a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578c:	3301      	adds	r3, #1
 800578e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005792:	2b63      	cmp	r3, #99	; 0x63
 8005794:	d9e5      	bls.n	8005762 <dir_register+0x66>
 8005796:	e000      	b.n	800579a <dir_register+0x9e>
			if (res != FR_OK) break;
 8005798:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800579a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579c:	2b64      	cmp	r3, #100	; 0x64
 800579e:	d101      	bne.n	80057a4 <dir_register+0xa8>
 80057a0:	2307      	movs	r3, #7
 80057a2:	e09c      	b.n	80058de <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80057a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80057a8:	2b04      	cmp	r3, #4
 80057aa:	d002      	beq.n	80057b2 <dir_register+0xb6>
 80057ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80057b0:	e095      	b.n	80058de <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80057b2:	7dfa      	ldrb	r2, [r7, #23]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80057ba:	7dfb      	ldrb	r3, [r7, #23]
 80057bc:	f003 0302 	and.w	r3, r3, #2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d007      	beq.n	80057d4 <dir_register+0xd8>
 80057c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c6:	330c      	adds	r3, #12
 80057c8:	4a47      	ldr	r2, [pc, #284]	; (80058e8 <dir_register+0x1ec>)
 80057ca:	fba2 2303 	umull	r2, r3, r2, r3
 80057ce:	089b      	lsrs	r3, r3, #2
 80057d0:	3301      	adds	r3, #1
 80057d2:	e000      	b.n	80057d6 <dir_register+0xda>
 80057d4:	2301      	movs	r3, #1
 80057d6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80057d8:	6a39      	ldr	r1, [r7, #32]
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f7ff fb9e 	bl	8004f1c <dir_alloc>
 80057e0:	4603      	mov	r3, r0
 80057e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80057e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d148      	bne.n	8005880 <dir_register+0x184>
 80057ee:	6a3b      	ldr	r3, [r7, #32]
 80057f0:	3b01      	subs	r3, #1
 80057f2:	623b      	str	r3, [r7, #32]
 80057f4:	6a3b      	ldr	r3, [r7, #32]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d042      	beq.n	8005880 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	695a      	ldr	r2, [r3, #20]
 80057fe:	6a3b      	ldr	r3, [r7, #32]
 8005800:	015b      	lsls	r3, r3, #5
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	4619      	mov	r1, r3
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f7ff fa29 	bl	8004c5e <dir_sdi>
 800580c:	4603      	mov	r3, r0
 800580e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8005812:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005816:	2b00      	cmp	r3, #0
 8005818:	d132      	bne.n	8005880 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	3324      	adds	r3, #36	; 0x24
 800581e:	4618      	mov	r0, r3
 8005820:	f7ff fde3 	bl	80053ea <sum_sfn>
 8005824:	4603      	mov	r3, r0
 8005826:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	69db      	ldr	r3, [r3, #28]
 800582c:	4619      	mov	r1, r3
 800582e:	69f8      	ldr	r0, [r7, #28]
 8005830:	f7fe fe3c 	bl	80044ac <move_window>
 8005834:	4603      	mov	r3, r0
 8005836:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800583a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800583e:	2b00      	cmp	r3, #0
 8005840:	d11d      	bne.n	800587e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	6918      	ldr	r0, [r3, #16]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a19      	ldr	r1, [r3, #32]
 800584a:	6a3b      	ldr	r3, [r7, #32]
 800584c:	b2da      	uxtb	r2, r3
 800584e:	7efb      	ldrb	r3, [r7, #27]
 8005850:	f7ff fcbe 	bl	80051d0 <put_lfn>
				fs->wflag = 1;
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	2201      	movs	r2, #1
 8005858:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800585a:	2100      	movs	r1, #0
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f7ff fa87 	bl	8004d70 <dir_next>
 8005862:	4603      	mov	r3, r0
 8005864:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8005868:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800586c:	2b00      	cmp	r3, #0
 800586e:	d107      	bne.n	8005880 <dir_register+0x184>
 8005870:	6a3b      	ldr	r3, [r7, #32]
 8005872:	3b01      	subs	r3, #1
 8005874:	623b      	str	r3, [r7, #32]
 8005876:	6a3b      	ldr	r3, [r7, #32]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1d5      	bne.n	8005828 <dir_register+0x12c>
 800587c:	e000      	b.n	8005880 <dir_register+0x184>
				if (res != FR_OK) break;
 800587e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005880:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005884:	2b00      	cmp	r3, #0
 8005886:	d128      	bne.n	80058da <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	69db      	ldr	r3, [r3, #28]
 800588c:	4619      	mov	r1, r3
 800588e:	69f8      	ldr	r0, [r7, #28]
 8005890:	f7fe fe0c 	bl	80044ac <move_window>
 8005894:	4603      	mov	r3, r0
 8005896:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800589a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d11b      	bne.n	80058da <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	2220      	movs	r2, #32
 80058a8:	2100      	movs	r1, #0
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7fe fbf1 	bl	8004092 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a18      	ldr	r0, [r3, #32]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	3324      	adds	r3, #36	; 0x24
 80058b8:	220b      	movs	r2, #11
 80058ba:	4619      	mov	r1, r3
 80058bc:	f7fe fbc8 	bl	8004050 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	330c      	adds	r3, #12
 80058cc:	f002 0218 	and.w	r2, r2, #24
 80058d0:	b2d2      	uxtb	r2, r2
 80058d2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	2201      	movs	r2, #1
 80058d8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80058da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3730      	adds	r7, #48	; 0x30
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	4ec4ec4f 	.word	0x4ec4ec4f

080058ec <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b088      	sub	sp, #32
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	2200      	movs	r2, #0
 8005900:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	69db      	ldr	r3, [r3, #28]
 8005906:	2b00      	cmp	r3, #0
 8005908:	f000 80d7 	beq.w	8005aba <get_fileinfo+0x1ce>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005914:	d040      	beq.n	8005998 <get_fileinfo+0xac>
			i = j = 0;
 8005916:	2300      	movs	r3, #0
 8005918:	61bb      	str	r3, [r7, #24]
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800591e:	e029      	b.n	8005974 <get_fileinfo+0x88>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8005920:	89fb      	ldrh	r3, [r7, #14]
 8005922:	2100      	movs	r1, #0
 8005924:	4618      	mov	r0, r3
 8005926:	f002 f819 	bl	800795c <ff_convert>
 800592a:	4603      	mov	r3, r0
 800592c:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800592e:	89fb      	ldrh	r3, [r7, #14]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d102      	bne.n	800593a <get_fileinfo+0x4e>
 8005934:	2300      	movs	r3, #0
 8005936:	61fb      	str	r3, [r7, #28]
 8005938:	e028      	b.n	800598c <get_fileinfo+0xa0>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
 800593a:	89fb      	ldrh	r3, [r7, #14]
 800593c:	2bff      	cmp	r3, #255	; 0xff
 800593e:	d90a      	bls.n	8005956 <get_fileinfo+0x6a>
					fno->fname[i++] = (char)(w >> 8);
 8005940:	89fb      	ldrh	r3, [r7, #14]
 8005942:	0a1b      	lsrs	r3, r3, #8
 8005944:	b299      	uxth	r1, r3
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	1c5a      	adds	r2, r3, #1
 800594a:	61fa      	str	r2, [r7, #28]
 800594c:	b2c9      	uxtb	r1, r1
 800594e:	683a      	ldr	r2, [r7, #0]
 8005950:	4413      	add	r3, r2
 8005952:	460a      	mov	r2, r1
 8005954:	759a      	strb	r2, [r3, #22]
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	2bfe      	cmp	r3, #254	; 0xfe
 800595a:	d902      	bls.n	8005962 <get_fileinfo+0x76>
 800595c:	2300      	movs	r3, #0
 800595e:	61fb      	str	r3, [r7, #28]
 8005960:	e014      	b.n	800598c <get_fileinfo+0xa0>
				fno->fname[i++] = (TCHAR)w;
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	1c5a      	adds	r2, r3, #1
 8005966:	61fa      	str	r2, [r7, #28]
 8005968:	89fa      	ldrh	r2, [r7, #14]
 800596a:	b2d1      	uxtb	r1, r2
 800596c:	683a      	ldr	r2, [r7, #0]
 800596e:	4413      	add	r3, r2
 8005970:	460a      	mov	r2, r1
 8005972:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	691a      	ldr	r2, [r3, #16]
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	1c59      	adds	r1, r3, #1
 800597c:	61b9      	str	r1, [r7, #24]
 800597e:	005b      	lsls	r3, r3, #1
 8005980:	4413      	add	r3, r2
 8005982:	881b      	ldrh	r3, [r3, #0]
 8005984:	81fb      	strh	r3, [r7, #14]
 8005986:	89fb      	ldrh	r3, [r7, #14]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1c9      	bne.n	8005920 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800598c:	683a      	ldr	r2, [r7, #0]
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	4413      	add	r3, r2
 8005992:	3316      	adds	r3, #22
 8005994:	2200      	movs	r2, #0
 8005996:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8005998:	2300      	movs	r3, #0
 800599a:	61bb      	str	r3, [r7, #24]
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	4413      	add	r3, r2
 80059a6:	3316      	adds	r3, #22
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 80059ac:	e04c      	b.n	8005a48 <get_fileinfo+0x15c>
		c = (TCHAR)dp->dir[i++];
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a1a      	ldr	r2, [r3, #32]
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	1c59      	adds	r1, r3, #1
 80059b6:	61f9      	str	r1, [r7, #28]
 80059b8:	4413      	add	r3, r2
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 80059be:	7dfb      	ldrb	r3, [r7, #23]
 80059c0:	2b20      	cmp	r3, #32
 80059c2:	d100      	bne.n	80059c6 <get_fileinfo+0xda>
 80059c4:	e040      	b.n	8005a48 <get_fileinfo+0x15c>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80059c6:	7dfb      	ldrb	r3, [r7, #23]
 80059c8:	2b05      	cmp	r3, #5
 80059ca:	d101      	bne.n	80059d0 <get_fileinfo+0xe4>
 80059cc:	23e5      	movs	r3, #229	; 0xe5
 80059ce:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	2b09      	cmp	r3, #9
 80059d4:	d10f      	bne.n	80059f6 <get_fileinfo+0x10a>
			if (!lfv) fno->fname[j] = '.';
 80059d6:	89bb      	ldrh	r3, [r7, #12]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d105      	bne.n	80059e8 <get_fileinfo+0xfc>
 80059dc:	683a      	ldr	r2, [r7, #0]
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	4413      	add	r3, r2
 80059e2:	3316      	adds	r3, #22
 80059e4:	222e      	movs	r2, #46	; 0x2e
 80059e6:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	1c5a      	adds	r2, r3, #1
 80059ec:	61ba      	str	r2, [r7, #24]
 80059ee:	683a      	ldr	r2, [r7, #0]
 80059f0:	4413      	add	r3, r2
 80059f2:	222e      	movs	r2, #46	; 0x2e
 80059f4:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 80059f6:	683a      	ldr	r2, [r7, #0]
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	4413      	add	r3, r2
 80059fc:	3309      	adds	r3, #9
 80059fe:	7dfa      	ldrb	r2, [r7, #23]
 8005a00:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8005a02:	89bb      	ldrh	r3, [r7, #12]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d11c      	bne.n	8005a42 <get_fileinfo+0x156>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8005a08:	7dfb      	ldrb	r3, [r7, #23]
 8005a0a:	2b40      	cmp	r3, #64	; 0x40
 8005a0c:	d913      	bls.n	8005a36 <get_fileinfo+0x14a>
 8005a0e:	7dfb      	ldrb	r3, [r7, #23]
 8005a10:	2b5a      	cmp	r3, #90	; 0x5a
 8005a12:	d810      	bhi.n	8005a36 <get_fileinfo+0x14a>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a1b      	ldr	r3, [r3, #32]
 8005a18:	330c      	adds	r3, #12
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	2b08      	cmp	r3, #8
 8005a22:	d901      	bls.n	8005a28 <get_fileinfo+0x13c>
 8005a24:	2310      	movs	r3, #16
 8005a26:	e000      	b.n	8005a2a <get_fileinfo+0x13e>
 8005a28:	2308      	movs	r3, #8
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d002      	beq.n	8005a36 <get_fileinfo+0x14a>
				c += 0x20;			/* To lower */
 8005a30:	7dfb      	ldrb	r3, [r7, #23]
 8005a32:	3320      	adds	r3, #32
 8005a34:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8005a36:	683a      	ldr	r2, [r7, #0]
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	3316      	adds	r3, #22
 8005a3e:	7dfa      	ldrb	r2, [r7, #23]
 8005a40:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	3301      	adds	r3, #1
 8005a46:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	2b0a      	cmp	r3, #10
 8005a4c:	d9af      	bls.n	80059ae <get_fileinfo+0xc2>
	}
	if (!lfv) {
 8005a4e:	89bb      	ldrh	r3, [r7, #12]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d10d      	bne.n	8005a70 <get_fileinfo+0x184>
		fno->fname[j] = 0;
 8005a54:	683a      	ldr	r2, [r7, #0]
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	4413      	add	r3, r2
 8005a5a:	3316      	adds	r3, #22
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a1b      	ldr	r3, [r3, #32]
 8005a64:	330c      	adds	r3, #12
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d101      	bne.n	8005a70 <get_fileinfo+0x184>
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8005a70:	683a      	ldr	r2, [r7, #0]
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	4413      	add	r3, r2
 8005a76:	3309      	adds	r3, #9
 8005a78:	2200      	movs	r2, #0
 8005a7a:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a1b      	ldr	r3, [r3, #32]
 8005a80:	7ada      	ldrb	r2, [r3, #11]
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	331c      	adds	r3, #28
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f7fe fa75 	bl	8003f7c <ld_dword>
 8005a92:	4602      	mov	r2, r0
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a1b      	ldr	r3, [r3, #32]
 8005a9c:	3316      	adds	r3, #22
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7fe fa6c 	bl	8003f7c <ld_dword>
 8005aa4:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	b29a      	uxth	r2, r3
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	80da      	strh	r2, [r3, #6]
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	0c1b      	lsrs	r3, r3, #16
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	809a      	strh	r2, [r3, #4]
 8005ab8:	e000      	b.n	8005abc <get_fileinfo+0x1d0>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8005aba:	bf00      	nop
}
 8005abc:	3720      	adds	r7, #32
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b085      	sub	sp, #20
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	1c59      	adds	r1, r3, #1
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	6011      	str	r1, [r2, #0]
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8005ad8:	89fb      	ldrh	r3, [r7, #14]
 8005ada:	2b60      	cmp	r3, #96	; 0x60
 8005adc:	d905      	bls.n	8005aea <get_achar+0x28>
 8005ade:	89fb      	ldrh	r3, [r7, #14]
 8005ae0:	2b7a      	cmp	r3, #122	; 0x7a
 8005ae2:	d802      	bhi.n	8005aea <get_achar+0x28>
 8005ae4:	89fb      	ldrh	r3, [r7, #14]
 8005ae6:	3b20      	subs	r3, #32
 8005ae8:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
 8005aea:	89fb      	ldrh	r3, [r7, #14]
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	2b80      	cmp	r3, #128	; 0x80
 8005af0:	d92e      	bls.n	8005b50 <get_achar+0x8e>
 8005af2:	89fb      	ldrh	r3, [r7, #14]
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2bff      	cmp	r3, #255	; 0xff
 8005af8:	d02a      	beq.n	8005b50 <get_achar+0x8e>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	2b40      	cmp	r3, #64	; 0x40
 8005b02:	d904      	bls.n	8005b0e <get_achar+0x4c>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	2b5a      	cmp	r3, #90	; 0x5a
 8005b0c:	d913      	bls.n	8005b36 <get_achar+0x74>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	2b60      	cmp	r3, #96	; 0x60
 8005b16:	d904      	bls.n	8005b22 <get_achar+0x60>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	2b7a      	cmp	r3, #122	; 0x7a
 8005b20:	d909      	bls.n	8005b36 <get_achar+0x74>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	2b80      	cmp	r3, #128	; 0x80
 8005b2a:	d911      	bls.n	8005b50 <get_achar+0x8e>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	2bff      	cmp	r3, #255	; 0xff
 8005b34:	d00c      	beq.n	8005b50 <get_achar+0x8e>
		chr = chr << 8 | (BYTE)*(*ptr)++;
 8005b36:	89fb      	ldrh	r3, [r7, #14]
 8005b38:	021b      	lsls	r3, r3, #8
 8005b3a:	b21a      	sxth	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	1c58      	adds	r0, r3, #1
 8005b42:	6879      	ldr	r1, [r7, #4]
 8005b44:	6008      	str	r0, [r1, #0]
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	b21b      	sxth	r3, r3
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	b21b      	sxth	r3, r3
 8005b4e:	81fb      	strh	r3, [r7, #14]
	}
#endif
	return chr;
 8005b50:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3714      	adds	r7, #20
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr

08005b5e <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b08a      	sub	sp, #40	; 0x28
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	60f8      	str	r0, [r7, #12]
 8005b66:	60b9      	str	r1, [r7, #8]
 8005b68:	607a      	str	r2, [r7, #4]
 8005b6a:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 8005b6c:	e009      	b.n	8005b82 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 8005b6e:	f107 0308 	add.w	r3, r7, #8
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7ff ffa5 	bl	8005ac2 <get_achar>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d101      	bne.n	8005b82 <pattern_matching+0x24>
 8005b7e:	2300      	movs	r3, #0
 8005b80:	e064      	b.n	8005c4c <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	1e5a      	subs	r2, r3, #1
 8005b86:	607a      	str	r2, [r7, #4]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d1f0      	bne.n	8005b6e <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d104      	bne.n	8005b9e <pattern_matching+0x40>
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d001      	beq.n	8005b9e <pattern_matching+0x40>
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e056      	b.n	8005c4c <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	617b      	str	r3, [r7, #20]
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	2b3f      	cmp	r3, #63	; 0x3f
 8005bac:	d003      	beq.n	8005bb6 <pattern_matching+0x58>
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	2b2a      	cmp	r3, #42	; 0x2a
 8005bb4:	d126      	bne.n	8005c04 <pattern_matching+0xa6>
				nm = nx = 0;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	61fb      	str	r3, [r7, #28]
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	1c5a      	adds	r2, r3, #1
 8005bc2:	617a      	str	r2, [r7, #20]
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	2b3f      	cmp	r3, #63	; 0x3f
 8005bc8:	d103      	bne.n	8005bd2 <pattern_matching+0x74>
 8005bca:	6a3b      	ldr	r3, [r7, #32]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	623b      	str	r3, [r7, #32]
 8005bd0:	e001      	b.n	8005bd6 <pattern_matching+0x78>
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	2b3f      	cmp	r3, #63	; 0x3f
 8005bdc:	d0ef      	beq.n	8005bbe <pattern_matching+0x60>
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	2b2a      	cmp	r3, #42	; 0x2a
 8005be4:	d0eb      	beq.n	8005bbe <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 8005be6:	6978      	ldr	r0, [r7, #20]
 8005be8:	6939      	ldr	r1, [r7, #16]
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	6a3a      	ldr	r2, [r7, #32]
 8005bee:	f7ff ffb6 	bl	8005b5e <pattern_matching>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d001      	beq.n	8005bfc <pattern_matching+0x9e>
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e027      	b.n	8005c4c <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005c02:	e017      	b.n	8005c34 <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 8005c04:	f107 0314 	add.w	r3, r7, #20
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f7ff ff5a 	bl	8005ac2 <get_achar>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 8005c12:	f107 0310 	add.w	r3, r7, #16
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7ff ff53 	bl	8005ac2 <get_achar>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 8005c20:	8b7a      	ldrh	r2, [r7, #26]
 8005c22:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d104      	bne.n	8005c32 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 8005c28:	8b7b      	ldrh	r3, [r7, #26]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1bb      	bne.n	8005ba6 <pattern_matching+0x48>
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e00c      	b.n	8005c4c <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 8005c32:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 8005c34:	f107 0308 	add.w	r3, r7, #8
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f7ff ff42 	bl	8005ac2 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d002      	beq.n	8005c4a <pattern_matching+0xec>
 8005c44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1a9      	bne.n	8005b9e <pattern_matching+0x40>

	return 0;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3728      	adds	r7, #40	; 0x28
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b08a      	sub	sp, #40	; 0x28
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	613b      	str	r3, [r7, #16]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	60fb      	str	r3, [r7, #12]
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	617b      	str	r3, [r7, #20]
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	1c5a      	adds	r2, r3, #1
 8005c78:	61ba      	str	r2, [r7, #24]
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8005c82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c84:	2b1f      	cmp	r3, #31
 8005c86:	d972      	bls.n	8005d6e <create_name+0x11a>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8005c88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c8a:	2b2f      	cmp	r3, #47	; 0x2f
 8005c8c:	d006      	beq.n	8005c9c <create_name+0x48>
 8005c8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c90:	2b5c      	cmp	r3, #92	; 0x5c
 8005c92:	d110      	bne.n	8005cb6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005c94:	e002      	b.n	8005c9c <create_name+0x48>
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	61bb      	str	r3, [r7, #24]
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	2b2f      	cmp	r3, #47	; 0x2f
 8005ca6:	d0f6      	beq.n	8005c96 <create_name+0x42>
 8005ca8:	693a      	ldr	r2, [r7, #16]
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	4413      	add	r3, r2
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	2b5c      	cmp	r3, #92	; 0x5c
 8005cb2:	d0f0      	beq.n	8005c96 <create_name+0x42>
			break;
 8005cb4:	e05c      	b.n	8005d70 <create_name+0x11c>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	2bfe      	cmp	r3, #254	; 0xfe
 8005cba:	d901      	bls.n	8005cc0 <create_name+0x6c>
 8005cbc:	2306      	movs	r3, #6
 8005cbe:	e1c7      	b.n	8006050 <create_name+0x3fc>
#if !_LFN_UNICODE
		w &= 0xFF;
 8005cc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
 8005cc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	2b80      	cmp	r3, #128	; 0x80
 8005ccc:	d92d      	bls.n	8005d2a <create_name+0xd6>
 8005cce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2bff      	cmp	r3, #255	; 0xff
 8005cd4:	d029      	beq.n	8005d2a <create_name+0xd6>
			b = (BYTE)p[si++];			/* Get 2nd byte */
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	1c5a      	adds	r2, r3, #1
 8005cda:	61ba      	str	r2, [r7, #24]
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	4413      	add	r3, r2
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			w = (w << 8) + b;			/* Create a DBC */
 8005ce6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ce8:	021b      	lsls	r3, r3, #8
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	4413      	add	r3, r2
 8005cf4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
 8005cf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cfa:	2b40      	cmp	r3, #64	; 0x40
 8005cfc:	d903      	bls.n	8005d06 <create_name+0xb2>
 8005cfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d02:	2b5a      	cmp	r3, #90	; 0x5a
 8005d04:	d911      	bls.n	8005d2a <create_name+0xd6>
 8005d06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d0a:	2b60      	cmp	r3, #96	; 0x60
 8005d0c:	d903      	bls.n	8005d16 <create_name+0xc2>
 8005d0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d12:	2b7a      	cmp	r3, #122	; 0x7a
 8005d14:	d909      	bls.n	8005d2a <create_name+0xd6>
 8005d16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d1a:	2b80      	cmp	r3, #128	; 0x80
 8005d1c:	d903      	bls.n	8005d26 <create_name+0xd2>
 8005d1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d22:	2bff      	cmp	r3, #255	; 0xff
 8005d24:	d101      	bne.n	8005d2a <create_name+0xd6>
 8005d26:	2306      	movs	r3, #6
 8005d28:	e192      	b.n	8006050 <create_name+0x3fc>
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8005d2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d2c:	2101      	movs	r1, #1
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f001 fe14 	bl	800795c <ff_convert>
 8005d34:	4603      	mov	r3, r0
 8005d36:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005d38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <create_name+0xee>
 8005d3e:	2306      	movs	r3, #6
 8005d40:	e186      	b.n	8006050 <create_name+0x3fc>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8005d42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d44:	2b7f      	cmp	r3, #127	; 0x7f
 8005d46:	d809      	bhi.n	8005d5c <create_name+0x108>
 8005d48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	489a      	ldr	r0, [pc, #616]	; (8005fb8 <create_name+0x364>)
 8005d4e:	f7fe f9e1 	bl	8004114 <chk_chr>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d001      	beq.n	8005d5c <create_name+0x108>
 8005d58:	2306      	movs	r3, #6
 8005d5a:	e179      	b.n	8006050 <create_name+0x3fc>
		lfn[di++] = w;					/* Store the Unicode character */
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	1c5a      	adds	r2, r3, #1
 8005d60:	617a      	str	r2, [r7, #20]
 8005d62:	005b      	lsls	r3, r3, #1
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	4413      	add	r3, r2
 8005d68:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005d6a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8005d6c:	e782      	b.n	8005c74 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8005d6e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	441a      	add	r2, r3
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005d7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d7c:	2b1f      	cmp	r3, #31
 8005d7e:	d801      	bhi.n	8005d84 <create_name+0x130>
 8005d80:	2304      	movs	r3, #4
 8005d82:	e000      	b.n	8005d86 <create_name+0x132>
 8005d84:	2300      	movs	r3, #0
 8005d86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005d8a:	e011      	b.n	8005db0 <create_name+0x15c>
		w = lfn[di - 1];
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005d92:	3b01      	subs	r3, #1
 8005d94:	005b      	lsls	r3, r3, #1
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	4413      	add	r3, r2
 8005d9a:	881b      	ldrh	r3, [r3, #0]
 8005d9c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8005d9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005da0:	2b20      	cmp	r3, #32
 8005da2:	d002      	beq.n	8005daa <create_name+0x156>
 8005da4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005da6:	2b2e      	cmp	r3, #46	; 0x2e
 8005da8:	d106      	bne.n	8005db8 <create_name+0x164>
		di--;
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	3b01      	subs	r3, #1
 8005dae:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1ea      	bne.n	8005d8c <create_name+0x138>
 8005db6:	e000      	b.n	8005dba <create_name+0x166>
		if (w != ' ' && w != '.') break;
 8005db8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	005b      	lsls	r3, r3, #1
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d101      	bne.n	8005dd0 <create_name+0x17c>
 8005dcc:	2306      	movs	r3, #6
 8005dce:	e13f      	b.n	8006050 <create_name+0x3fc>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	3324      	adds	r3, #36	; 0x24
 8005dd4:	220b      	movs	r2, #11
 8005dd6:	2120      	movs	r1, #32
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7fe f95a 	bl	8004092 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005dde:	2300      	movs	r3, #0
 8005de0:	61bb      	str	r3, [r7, #24]
 8005de2:	e002      	b.n	8005dea <create_name+0x196>
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	3301      	adds	r3, #1
 8005de8:	61bb      	str	r3, [r7, #24]
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	005b      	lsls	r3, r3, #1
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	4413      	add	r3, r2
 8005df2:	881b      	ldrh	r3, [r3, #0]
 8005df4:	2b20      	cmp	r3, #32
 8005df6:	d0f5      	beq.n	8005de4 <create_name+0x190>
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	005b      	lsls	r3, r3, #1
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	4413      	add	r3, r2
 8005e00:	881b      	ldrh	r3, [r3, #0]
 8005e02:	2b2e      	cmp	r3, #46	; 0x2e
 8005e04:	d0ee      	beq.n	8005de4 <create_name+0x190>
	if (si) cf |= NS_LOSS | NS_LFN;
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d009      	beq.n	8005e20 <create_name+0x1cc>
 8005e0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005e10:	f043 0303 	orr.w	r3, r3, #3
 8005e14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8005e18:	e002      	b.n	8005e20 <create_name+0x1cc>
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	617b      	str	r3, [r7, #20]
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d009      	beq.n	8005e3a <create_name+0x1e6>
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	005b      	lsls	r3, r3, #1
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	4413      	add	r3, r2
 8005e34:	881b      	ldrh	r3, [r3, #0]
 8005e36:	2b2e      	cmp	r3, #46	; 0x2e
 8005e38:	d1ef      	bne.n	8005e1a <create_name+0x1c6>

	i = b = 0; ni = 8;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005e40:	2300      	movs	r3, #0
 8005e42:	623b      	str	r3, [r7, #32]
 8005e44:	2308      	movs	r3, #8
 8005e46:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	1c5a      	adds	r2, r3, #1
 8005e4c:	61ba      	str	r2, [r7, #24]
 8005e4e:	005b      	lsls	r3, r3, #1
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	4413      	add	r3, r2
 8005e54:	881b      	ldrh	r3, [r3, #0]
 8005e56:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8005e58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	f000 80aa 	beq.w	8005fb4 <create_name+0x360>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005e60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e62:	2b20      	cmp	r3, #32
 8005e64:	d006      	beq.n	8005e74 <create_name+0x220>
 8005e66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e68:	2b2e      	cmp	r3, #46	; 0x2e
 8005e6a:	d10a      	bne.n	8005e82 <create_name+0x22e>
 8005e6c:	69ba      	ldr	r2, [r7, #24]
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d006      	beq.n	8005e82 <create_name+0x22e>
			cf |= NS_LOSS | NS_LFN; continue;
 8005e74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005e78:	f043 0303 	orr.w	r3, r3, #3
 8005e7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005e80:	e097      	b.n	8005fb2 <create_name+0x35e>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005e82:	6a3a      	ldr	r2, [r7, #32]
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d203      	bcs.n	8005e92 <create_name+0x23e>
 8005e8a:	69ba      	ldr	r2, [r7, #24]
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d123      	bne.n	8005eda <create_name+0x286>
			if (ni == 11) {				/* Long extension */
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	2b0b      	cmp	r3, #11
 8005e96:	d106      	bne.n	8005ea6 <create_name+0x252>
				cf |= NS_LOSS | NS_LFN; break;
 8005e98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005e9c:	f043 0303 	orr.w	r3, r3, #3
 8005ea0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005ea4:	e08d      	b.n	8005fc2 <create_name+0x36e>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8005ea6:	69ba      	ldr	r2, [r7, #24]
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d005      	beq.n	8005eba <create_name+0x266>
 8005eae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005eb2:	f043 0303 	orr.w	r3, r3, #3
 8005eb6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
 8005eba:	69ba      	ldr	r2, [r7, #24]
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d87e      	bhi.n	8005fc0 <create_name+0x36c>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	61bb      	str	r3, [r7, #24]
 8005ec6:	2308      	movs	r3, #8
 8005ec8:	623b      	str	r3, [r7, #32]
 8005eca:	230b      	movs	r3, #11
 8005ecc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8005ece:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005ed8:	e06b      	b.n	8005fb2 <create_name+0x35e>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8005eda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005edc:	2b7f      	cmp	r3, #127	; 0x7f
 8005ede:	d910      	bls.n	8005f02 <create_name+0x2ae>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
 8005ee0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f001 fd9a 	bl	8007a1c <ff_wtoupper>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2100      	movs	r1, #0
 8005eec:	4618      	mov	r0, r3
 8005eee:	f001 fd35 	bl	800795c <ff_convert>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	84bb      	strh	r3, [r7, #36]	; 0x24
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8005ef6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005efa:	f043 0302 	orr.w	r3, r3, #2
 8005efe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		}

		if (_DF1S && w >= 0x100) {		/* Is this DBC? (always false at SBCS cfg) */
 8005f02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f04:	2bff      	cmp	r3, #255	; 0xff
 8005f06:	d91a      	bls.n	8005f3e <create_name+0x2ea>
			if (i >= ni - 1) {
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	6a3a      	ldr	r2, [r7, #32]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d308      	bcc.n	8005f24 <create_name+0x2d0>
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
 8005f12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005f16:	f043 0303 	orr.w	r3, r3, #3
 8005f1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	623b      	str	r3, [r7, #32]
 8005f22:	e046      	b.n	8005fb2 <create_name+0x35e>
			}
			dp->fn[i++] = (BYTE)(w >> 8);
 8005f24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f26:	0a1b      	lsrs	r3, r3, #8
 8005f28:	b299      	uxth	r1, r3
 8005f2a:	6a3b      	ldr	r3, [r7, #32]
 8005f2c:	1c5a      	adds	r2, r3, #1
 8005f2e:	623a      	str	r2, [r7, #32]
 8005f30:	b2c9      	uxtb	r1, r1
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	4413      	add	r3, r2
 8005f36:	460a      	mov	r2, r1
 8005f38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005f3c:	e02f      	b.n	8005f9e <create_name+0x34a>
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005f3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d007      	beq.n	8005f54 <create_name+0x300>
 8005f44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f46:	4619      	mov	r1, r3
 8005f48:	481c      	ldr	r0, [pc, #112]	; (8005fbc <create_name+0x368>)
 8005f4a:	f7fe f8e3 	bl	8004114 <chk_chr>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d008      	beq.n	8005f66 <create_name+0x312>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005f54:	235f      	movs	r3, #95	; 0x5f
 8005f56:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005f58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005f5c:	f043 0303 	orr.w	r3, r3, #3
 8005f60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005f64:	e01b      	b.n	8005f9e <create_name+0x34a>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8005f66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f68:	2b40      	cmp	r3, #64	; 0x40
 8005f6a:	d909      	bls.n	8005f80 <create_name+0x32c>
 8005f6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f6e:	2b5a      	cmp	r3, #90	; 0x5a
 8005f70:	d806      	bhi.n	8005f80 <create_name+0x32c>
					b |= 2;
 8005f72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f76:	f043 0302 	orr.w	r3, r3, #2
 8005f7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005f7e:	e00e      	b.n	8005f9e <create_name+0x34a>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8005f80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f82:	2b60      	cmp	r3, #96	; 0x60
 8005f84:	d90b      	bls.n	8005f9e <create_name+0x34a>
 8005f86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f88:	2b7a      	cmp	r3, #122	; 0x7a
 8005f8a:	d808      	bhi.n	8005f9e <create_name+0x34a>
						b |= 1; w -= 0x20;
 8005f8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f90:	f043 0301 	orr.w	r3, r3, #1
 8005f94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005f98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f9a:	3b20      	subs	r3, #32
 8005f9c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8005f9e:	6a3b      	ldr	r3, [r7, #32]
 8005fa0:	1c5a      	adds	r2, r3, #1
 8005fa2:	623a      	str	r2, [r7, #32]
 8005fa4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005fa6:	b2d1      	uxtb	r1, r2
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	4413      	add	r3, r2
 8005fac:	460a      	mov	r2, r1
 8005fae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8005fb2:	e749      	b.n	8005e48 <create_name+0x1f4>
		if (!w) break;					/* Break on end of the LFN */
 8005fb4:	bf00      	nop
 8005fb6:	e004      	b.n	8005fc2 <create_name+0x36e>
 8005fb8:	0800a480 	.word	0x0800a480
 8005fbc:	0800a48c 	.word	0x0800a48c
			if (si > di) break;			/* No extension */
 8005fc0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005fc8:	2be5      	cmp	r3, #229	; 0xe5
 8005fca:	d103      	bne.n	8005fd4 <create_name+0x380>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2205      	movs	r2, #5
 8005fd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	2b08      	cmp	r3, #8
 8005fd8:	d104      	bne.n	8005fe4 <create_name+0x390>
 8005fda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8005fe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fe8:	f003 030c 	and.w	r3, r3, #12
 8005fec:	2b0c      	cmp	r3, #12
 8005fee:	d005      	beq.n	8005ffc <create_name+0x3a8>
 8005ff0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ff4:	f003 0303 	and.w	r3, r3, #3
 8005ff8:	2b03      	cmp	r3, #3
 8005ffa:	d105      	bne.n	8006008 <create_name+0x3b4>
 8005ffc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006000:	f043 0302 	orr.w	r3, r3, #2
 8006004:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006008:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800600c:	f003 0302 	and.w	r3, r3, #2
 8006010:	2b00      	cmp	r3, #0
 8006012:	d117      	bne.n	8006044 <create_name+0x3f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006014:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006018:	f003 0303 	and.w	r3, r3, #3
 800601c:	2b01      	cmp	r3, #1
 800601e:	d105      	bne.n	800602c <create_name+0x3d8>
 8006020:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006024:	f043 0310 	orr.w	r3, r3, #16
 8006028:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800602c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006030:	f003 030c 	and.w	r3, r3, #12
 8006034:	2b04      	cmp	r3, #4
 8006036:	d105      	bne.n	8006044 <create_name+0x3f0>
 8006038:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800603c:	f043 0308 	orr.w	r3, r3, #8
 8006040:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800604a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800604e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8006050:	4618      	mov	r0, r3
 8006052:	3728      	adds	r7, #40	; 0x28
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b086      	sub	sp, #24
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800606c:	e002      	b.n	8006074 <follow_path+0x1c>
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	3301      	adds	r3, #1
 8006072:	603b      	str	r3, [r7, #0]
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	2b2f      	cmp	r3, #47	; 0x2f
 800607a:	d0f8      	beq.n	800606e <follow_path+0x16>
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	2b5c      	cmp	r3, #92	; 0x5c
 8006082:	d0f4      	beq.n	800606e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	2200      	movs	r2, #0
 8006088:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	2b1f      	cmp	r3, #31
 8006090:	d80a      	bhi.n	80060a8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2280      	movs	r2, #128	; 0x80
 8006096:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800609a:	2100      	movs	r1, #0
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f7fe fdde 	bl	8004c5e <dir_sdi>
 80060a2:	4603      	mov	r3, r0
 80060a4:	75fb      	strb	r3, [r7, #23]
 80060a6:	e048      	b.n	800613a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80060a8:	463b      	mov	r3, r7
 80060aa:	4619      	mov	r1, r3
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f7ff fdd1 	bl	8005c54 <create_name>
 80060b2:	4603      	mov	r3, r0
 80060b4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80060b6:	7dfb      	ldrb	r3, [r7, #23]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d139      	bne.n	8006130 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f7ff fa5c 	bl	800557a <dir_find>
 80060c2:	4603      	mov	r3, r0
 80060c4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80060cc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80060ce:	7dfb      	ldrb	r3, [r7, #23]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00a      	beq.n	80060ea <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80060d4:	7dfb      	ldrb	r3, [r7, #23]
 80060d6:	2b04      	cmp	r3, #4
 80060d8:	d12c      	bne.n	8006134 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80060da:	7afb      	ldrb	r3, [r7, #11]
 80060dc:	f003 0304 	and.w	r3, r3, #4
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d127      	bne.n	8006134 <follow_path+0xdc>
 80060e4:	2305      	movs	r3, #5
 80060e6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80060e8:	e024      	b.n	8006134 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80060ea:	7afb      	ldrb	r3, [r7, #11]
 80060ec:	f003 0304 	and.w	r3, r3, #4
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d121      	bne.n	8006138 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	799b      	ldrb	r3, [r3, #6]
 80060f8:	f003 0310 	and.w	r3, r3, #16
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d102      	bne.n	8006106 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006100:	2305      	movs	r3, #5
 8006102:	75fb      	strb	r3, [r7, #23]
 8006104:	e019      	b.n	800613a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	695b      	ldr	r3, [r3, #20]
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	8992      	ldrh	r2, [r2, #12]
 8006114:	fbb3 f0f2 	udiv	r0, r3, r2
 8006118:	fb02 f200 	mul.w	r2, r2, r0
 800611c:	1a9b      	subs	r3, r3, r2
 800611e:	440b      	add	r3, r1
 8006120:	4619      	mov	r1, r3
 8006122:	68f8      	ldr	r0, [r7, #12]
 8006124:	f7fe ff41 	bl	8004faa <ld_clust>
 8006128:	4602      	mov	r2, r0
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800612e:	e7bb      	b.n	80060a8 <follow_path+0x50>
			if (res != FR_OK) break;
 8006130:	bf00      	nop
 8006132:	e002      	b.n	800613a <follow_path+0xe2>
				break;
 8006134:	bf00      	nop
 8006136:	e000      	b.n	800613a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006138:	bf00      	nop
			}
		}
	}

	return res;
 800613a:	7dfb      	ldrb	r3, [r7, #23]
}
 800613c:	4618      	mov	r0, r3
 800613e:	3718      	adds	r7, #24
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006144:	b480      	push	{r7}
 8006146:	b087      	sub	sp, #28
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800614c:	f04f 33ff 	mov.w	r3, #4294967295
 8006150:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d031      	beq.n	80061be <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	617b      	str	r3, [r7, #20]
 8006160:	e002      	b.n	8006168 <get_ldnumber+0x24>
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	3301      	adds	r3, #1
 8006166:	617b      	str	r3, [r7, #20]
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	2b1f      	cmp	r3, #31
 800616e:	d903      	bls.n	8006178 <get_ldnumber+0x34>
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	2b3a      	cmp	r3, #58	; 0x3a
 8006176:	d1f4      	bne.n	8006162 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	2b3a      	cmp	r3, #58	; 0x3a
 800617e:	d11c      	bne.n	80061ba <get_ldnumber+0x76>
			tp = *path;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	1c5a      	adds	r2, r3, #1
 800618a:	60fa      	str	r2, [r7, #12]
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	3b30      	subs	r3, #48	; 0x30
 8006190:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	2b09      	cmp	r3, #9
 8006196:	d80e      	bhi.n	80061b6 <get_ldnumber+0x72>
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	429a      	cmp	r2, r3
 800619e:	d10a      	bne.n	80061b6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d107      	bne.n	80061b6 <get_ldnumber+0x72>
					vol = (int)i;
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	3301      	adds	r3, #1
 80061ae:	617b      	str	r3, [r7, #20]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	697a      	ldr	r2, [r7, #20]
 80061b4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	e002      	b.n	80061c0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80061ba:	2300      	movs	r3, #0
 80061bc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80061be:	693b      	ldr	r3, [r7, #16]
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	371c      	adds	r7, #28
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	70da      	strb	r2, [r3, #3]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f04f 32ff 	mov.w	r2, #4294967295
 80061e2:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80061e4:	6839      	ldr	r1, [r7, #0]
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f7fe f960 	bl	80044ac <move_window>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d001      	beq.n	80061f6 <check_fs+0x2a>
 80061f2:	2304      	movs	r3, #4
 80061f4:	e038      	b.n	8006268 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	3338      	adds	r3, #56	; 0x38
 80061fa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80061fe:	4618      	mov	r0, r3
 8006200:	f7fd fea4 	bl	8003f4c <ld_word>
 8006204:	4603      	mov	r3, r0
 8006206:	461a      	mov	r2, r3
 8006208:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800620c:	429a      	cmp	r2, r3
 800620e:	d001      	beq.n	8006214 <check_fs+0x48>
 8006210:	2303      	movs	r3, #3
 8006212:	e029      	b.n	8006268 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800621a:	2be9      	cmp	r3, #233	; 0xe9
 800621c:	d009      	beq.n	8006232 <check_fs+0x66>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006224:	2beb      	cmp	r3, #235	; 0xeb
 8006226:	d11e      	bne.n	8006266 <check_fs+0x9a>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800622e:	2b90      	cmp	r3, #144	; 0x90
 8006230:	d119      	bne.n	8006266 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	3338      	adds	r3, #56	; 0x38
 8006236:	3336      	adds	r3, #54	; 0x36
 8006238:	4618      	mov	r0, r3
 800623a:	f7fd fe9f 	bl	8003f7c <ld_dword>
 800623e:	4603      	mov	r3, r0
 8006240:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006244:	4a0a      	ldr	r2, [pc, #40]	; (8006270 <check_fs+0xa4>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d101      	bne.n	800624e <check_fs+0x82>
 800624a:	2300      	movs	r3, #0
 800624c:	e00c      	b.n	8006268 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	3338      	adds	r3, #56	; 0x38
 8006252:	3352      	adds	r3, #82	; 0x52
 8006254:	4618      	mov	r0, r3
 8006256:	f7fd fe91 	bl	8003f7c <ld_dword>
 800625a:	4602      	mov	r2, r0
 800625c:	4b05      	ldr	r3, [pc, #20]	; (8006274 <check_fs+0xa8>)
 800625e:	429a      	cmp	r2, r3
 8006260:	d101      	bne.n	8006266 <check_fs+0x9a>
 8006262:	2300      	movs	r3, #0
 8006264:	e000      	b.n	8006268 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006266:	2302      	movs	r3, #2
}
 8006268:	4618      	mov	r0, r3
 800626a:	3708      	adds	r7, #8
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	00544146 	.word	0x00544146
 8006274:	33544146 	.word	0x33544146

08006278 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b096      	sub	sp, #88	; 0x58
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	4613      	mov	r3, r2
 8006284:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	2200      	movs	r2, #0
 800628a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800628c:	68f8      	ldr	r0, [r7, #12]
 800628e:	f7ff ff59 	bl	8006144 <get_ldnumber>
 8006292:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006296:	2b00      	cmp	r3, #0
 8006298:	da01      	bge.n	800629e <find_volume+0x26>
 800629a:	230b      	movs	r3, #11
 800629c:	e268      	b.n	8006770 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800629e:	4ab0      	ldr	r2, [pc, #704]	; (8006560 <find_volume+0x2e8>)
 80062a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062a6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80062a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d101      	bne.n	80062b2 <find_volume+0x3a>
 80062ae:	230c      	movs	r3, #12
 80062b0:	e25e      	b.n	8006770 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062b6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80062b8:	79fb      	ldrb	r3, [r7, #7]
 80062ba:	f023 0301 	bic.w	r3, r3, #1
 80062be:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80062c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d01a      	beq.n	80062fe <find_volume+0x86>
		stat = disk_status(fs->drv);
 80062c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ca:	785b      	ldrb	r3, [r3, #1]
 80062cc:	4618      	mov	r0, r3
 80062ce:	f7fd fd9f 	bl	8003e10 <disk_status>
 80062d2:	4603      	mov	r3, r0
 80062d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80062d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80062dc:	f003 0301 	and.w	r3, r3, #1
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d10c      	bne.n	80062fe <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80062e4:	79fb      	ldrb	r3, [r7, #7]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d007      	beq.n	80062fa <find_volume+0x82>
 80062ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80062ee:	f003 0304 	and.w	r3, r3, #4
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80062f6:	230a      	movs	r3, #10
 80062f8:	e23a      	b.n	8006770 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 80062fa:	2300      	movs	r3, #0
 80062fc:	e238      	b.n	8006770 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80062fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006300:	2200      	movs	r2, #0
 8006302:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006306:	b2da      	uxtb	r2, r3
 8006308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800630c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630e:	785b      	ldrb	r3, [r3, #1]
 8006310:	4618      	mov	r0, r3
 8006312:	f7fd fd97 	bl	8003e44 <disk_initialize>
 8006316:	4603      	mov	r3, r0
 8006318:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800631c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006320:	f003 0301 	and.w	r3, r3, #1
 8006324:	2b00      	cmp	r3, #0
 8006326:	d001      	beq.n	800632c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006328:	2303      	movs	r3, #3
 800632a:	e221      	b.n	8006770 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800632c:	79fb      	ldrb	r3, [r7, #7]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d007      	beq.n	8006342 <find_volume+0xca>
 8006332:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006336:	f003 0304 	and.w	r3, r3, #4
 800633a:	2b00      	cmp	r3, #0
 800633c:	d001      	beq.n	8006342 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800633e:	230a      	movs	r3, #10
 8006340:	e216      	b.n	8006770 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006344:	7858      	ldrb	r0, [r3, #1]
 8006346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006348:	330c      	adds	r3, #12
 800634a:	461a      	mov	r2, r3
 800634c:	2102      	movs	r1, #2
 800634e:	f7fd fddf 	bl	8003f10 <disk_ioctl>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d001      	beq.n	800635c <find_volume+0xe4>
 8006358:	2301      	movs	r3, #1
 800635a:	e209      	b.n	8006770 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800635c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800635e:	899b      	ldrh	r3, [r3, #12]
 8006360:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006364:	d80d      	bhi.n	8006382 <find_volume+0x10a>
 8006366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006368:	899b      	ldrh	r3, [r3, #12]
 800636a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800636e:	d308      	bcc.n	8006382 <find_volume+0x10a>
 8006370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006372:	899b      	ldrh	r3, [r3, #12]
 8006374:	461a      	mov	r2, r3
 8006376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006378:	899b      	ldrh	r3, [r3, #12]
 800637a:	3b01      	subs	r3, #1
 800637c:	4013      	ands	r3, r2
 800637e:	2b00      	cmp	r3, #0
 8006380:	d001      	beq.n	8006386 <find_volume+0x10e>
 8006382:	2301      	movs	r3, #1
 8006384:	e1f4      	b.n	8006770 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006386:	2300      	movs	r3, #0
 8006388:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800638a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800638c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800638e:	f7ff ff1d 	bl	80061cc <check_fs>
 8006392:	4603      	mov	r3, r0
 8006394:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006398:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800639c:	2b02      	cmp	r3, #2
 800639e:	d14b      	bne.n	8006438 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80063a0:	2300      	movs	r3, #0
 80063a2:	643b      	str	r3, [r7, #64]	; 0x40
 80063a4:	e01f      	b.n	80063e6 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80063a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80063ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063ae:	011b      	lsls	r3, r3, #4
 80063b0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80063b4:	4413      	add	r3, r2
 80063b6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80063b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ba:	3304      	adds	r3, #4
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d006      	beq.n	80063d0 <find_volume+0x158>
 80063c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c4:	3308      	adds	r3, #8
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7fd fdd8 	bl	8003f7c <ld_dword>
 80063cc:	4602      	mov	r2, r0
 80063ce:	e000      	b.n	80063d2 <find_volume+0x15a>
 80063d0:	2200      	movs	r2, #0
 80063d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80063da:	440b      	add	r3, r1
 80063dc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80063e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063e2:	3301      	adds	r3, #1
 80063e4:	643b      	str	r3, [r7, #64]	; 0x40
 80063e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063e8:	2b03      	cmp	r3, #3
 80063ea:	d9dc      	bls.n	80063a6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80063ec:	2300      	movs	r3, #0
 80063ee:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80063f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d002      	beq.n	80063fc <find_volume+0x184>
 80063f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063f8:	3b01      	subs	r3, #1
 80063fa:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80063fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006404:	4413      	add	r3, r2
 8006406:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800640a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800640c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800640e:	2b00      	cmp	r3, #0
 8006410:	d005      	beq.n	800641e <find_volume+0x1a6>
 8006412:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006414:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006416:	f7ff fed9 	bl	80061cc <check_fs>
 800641a:	4603      	mov	r3, r0
 800641c:	e000      	b.n	8006420 <find_volume+0x1a8>
 800641e:	2303      	movs	r3, #3
 8006420:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006424:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006428:	2b01      	cmp	r3, #1
 800642a:	d905      	bls.n	8006438 <find_volume+0x1c0>
 800642c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800642e:	3301      	adds	r3, #1
 8006430:	643b      	str	r3, [r7, #64]	; 0x40
 8006432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006434:	2b03      	cmp	r3, #3
 8006436:	d9e1      	bls.n	80063fc <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006438:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800643c:	2b04      	cmp	r3, #4
 800643e:	d101      	bne.n	8006444 <find_volume+0x1cc>
 8006440:	2301      	movs	r3, #1
 8006442:	e195      	b.n	8006770 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006444:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006448:	2b01      	cmp	r3, #1
 800644a:	d901      	bls.n	8006450 <find_volume+0x1d8>
 800644c:	230d      	movs	r3, #13
 800644e:	e18f      	b.n	8006770 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006452:	3338      	adds	r3, #56	; 0x38
 8006454:	330b      	adds	r3, #11
 8006456:	4618      	mov	r0, r3
 8006458:	f7fd fd78 	bl	8003f4c <ld_word>
 800645c:	4603      	mov	r3, r0
 800645e:	461a      	mov	r2, r3
 8006460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006462:	899b      	ldrh	r3, [r3, #12]
 8006464:	429a      	cmp	r2, r3
 8006466:	d001      	beq.n	800646c <find_volume+0x1f4>
 8006468:	230d      	movs	r3, #13
 800646a:	e181      	b.n	8006770 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800646c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800646e:	3338      	adds	r3, #56	; 0x38
 8006470:	3316      	adds	r3, #22
 8006472:	4618      	mov	r0, r3
 8006474:	f7fd fd6a 	bl	8003f4c <ld_word>
 8006478:	4603      	mov	r3, r0
 800647a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800647c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800647e:	2b00      	cmp	r3, #0
 8006480:	d106      	bne.n	8006490 <find_volume+0x218>
 8006482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006484:	3338      	adds	r3, #56	; 0x38
 8006486:	3324      	adds	r3, #36	; 0x24
 8006488:	4618      	mov	r0, r3
 800648a:	f7fd fd77 	bl	8003f7c <ld_dword>
 800648e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006492:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006494:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006498:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800649c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80064a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a2:	789b      	ldrb	r3, [r3, #2]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d005      	beq.n	80064b4 <find_volume+0x23c>
 80064a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064aa:	789b      	ldrb	r3, [r3, #2]
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d001      	beq.n	80064b4 <find_volume+0x23c>
 80064b0:	230d      	movs	r3, #13
 80064b2:	e15d      	b.n	8006770 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80064b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b6:	789b      	ldrb	r3, [r3, #2]
 80064b8:	461a      	mov	r2, r3
 80064ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064bc:	fb02 f303 	mul.w	r3, r2, r3
 80064c0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80064c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064cc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80064ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d0:	895b      	ldrh	r3, [r3, #10]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d008      	beq.n	80064e8 <find_volume+0x270>
 80064d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d8:	895b      	ldrh	r3, [r3, #10]
 80064da:	461a      	mov	r2, r3
 80064dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064de:	895b      	ldrh	r3, [r3, #10]
 80064e0:	3b01      	subs	r3, #1
 80064e2:	4013      	ands	r3, r2
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d001      	beq.n	80064ec <find_volume+0x274>
 80064e8:	230d      	movs	r3, #13
 80064ea:	e141      	b.n	8006770 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80064ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ee:	3338      	adds	r3, #56	; 0x38
 80064f0:	3311      	adds	r3, #17
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7fd fd2a 	bl	8003f4c <ld_word>
 80064f8:	4603      	mov	r3, r0
 80064fa:	461a      	mov	r2, r3
 80064fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006502:	891b      	ldrh	r3, [r3, #8]
 8006504:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006506:	8992      	ldrh	r2, [r2, #12]
 8006508:	0952      	lsrs	r2, r2, #5
 800650a:	b292      	uxth	r2, r2
 800650c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006510:	fb02 f201 	mul.w	r2, r2, r1
 8006514:	1a9b      	subs	r3, r3, r2
 8006516:	b29b      	uxth	r3, r3
 8006518:	2b00      	cmp	r3, #0
 800651a:	d001      	beq.n	8006520 <find_volume+0x2a8>
 800651c:	230d      	movs	r3, #13
 800651e:	e127      	b.n	8006770 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006522:	3338      	adds	r3, #56	; 0x38
 8006524:	3313      	adds	r3, #19
 8006526:	4618      	mov	r0, r3
 8006528:	f7fd fd10 	bl	8003f4c <ld_word>
 800652c:	4603      	mov	r3, r0
 800652e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006530:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006532:	2b00      	cmp	r3, #0
 8006534:	d106      	bne.n	8006544 <find_volume+0x2cc>
 8006536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006538:	3338      	adds	r3, #56	; 0x38
 800653a:	3320      	adds	r3, #32
 800653c:	4618      	mov	r0, r3
 800653e:	f7fd fd1d 	bl	8003f7c <ld_dword>
 8006542:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006546:	3338      	adds	r3, #56	; 0x38
 8006548:	330e      	adds	r3, #14
 800654a:	4618      	mov	r0, r3
 800654c:	f7fd fcfe 	bl	8003f4c <ld_word>
 8006550:	4603      	mov	r3, r0
 8006552:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006554:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006556:	2b00      	cmp	r3, #0
 8006558:	d104      	bne.n	8006564 <find_volume+0x2ec>
 800655a:	230d      	movs	r3, #13
 800655c:	e108      	b.n	8006770 <find_volume+0x4f8>
 800655e:	bf00      	nop
 8006560:	200000a0 	.word	0x200000a0

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006564:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006568:	4413      	add	r3, r2
 800656a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800656c:	8911      	ldrh	r1, [r2, #8]
 800656e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006570:	8992      	ldrh	r2, [r2, #12]
 8006572:	0952      	lsrs	r2, r2, #5
 8006574:	b292      	uxth	r2, r2
 8006576:	fbb1 f2f2 	udiv	r2, r1, r2
 800657a:	b292      	uxth	r2, r2
 800657c:	4413      	add	r3, r2
 800657e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006580:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006584:	429a      	cmp	r2, r3
 8006586:	d201      	bcs.n	800658c <find_volume+0x314>
 8006588:	230d      	movs	r3, #13
 800658a:	e0f1      	b.n	8006770 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800658c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800658e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006594:	8952      	ldrh	r2, [r2, #10]
 8006596:	fbb3 f3f2 	udiv	r3, r3, r2
 800659a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800659c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d101      	bne.n	80065a6 <find_volume+0x32e>
 80065a2:	230d      	movs	r3, #13
 80065a4:	e0e4      	b.n	8006770 <find_volume+0x4f8>
		fmt = FS_FAT32;
 80065a6:	2303      	movs	r3, #3
 80065a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80065ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ae:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d802      	bhi.n	80065bc <find_volume+0x344>
 80065b6:	2302      	movs	r3, #2
 80065b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80065bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065be:	f640 72f5 	movw	r2, #4085	; 0xff5
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d802      	bhi.n	80065cc <find_volume+0x354>
 80065c6:	2301      	movs	r3, #1
 80065c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80065cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ce:	1c9a      	adds	r2, r3, #2
 80065d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d2:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80065d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80065d8:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80065da:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80065dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065de:	441a      	add	r2, r3
 80065e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e2:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80065e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80065e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e8:	441a      	add	r2, r3
 80065ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ec:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80065ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80065f2:	2b03      	cmp	r3, #3
 80065f4:	d11e      	bne.n	8006634 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80065f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f8:	3338      	adds	r3, #56	; 0x38
 80065fa:	332a      	adds	r3, #42	; 0x2a
 80065fc:	4618      	mov	r0, r3
 80065fe:	f7fd fca5 	bl	8003f4c <ld_word>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d001      	beq.n	800660c <find_volume+0x394>
 8006608:	230d      	movs	r3, #13
 800660a:	e0b1      	b.n	8006770 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800660c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660e:	891b      	ldrh	r3, [r3, #8]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d001      	beq.n	8006618 <find_volume+0x3a0>
 8006614:	230d      	movs	r3, #13
 8006616:	e0ab      	b.n	8006770 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800661a:	3338      	adds	r3, #56	; 0x38
 800661c:	332c      	adds	r3, #44	; 0x2c
 800661e:	4618      	mov	r0, r3
 8006620:	f7fd fcac 	bl	8003f7c <ld_dword>
 8006624:	4602      	mov	r2, r0
 8006626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006628:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800662a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800662c:	69db      	ldr	r3, [r3, #28]
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	647b      	str	r3, [r7, #68]	; 0x44
 8006632:	e01f      	b.n	8006674 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006636:	891b      	ldrh	r3, [r3, #8]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d101      	bne.n	8006640 <find_volume+0x3c8>
 800663c:	230d      	movs	r3, #13
 800663e:	e097      	b.n	8006770 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006642:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006646:	441a      	add	r2, r3
 8006648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800664a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800664c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006650:	2b02      	cmp	r3, #2
 8006652:	d103      	bne.n	800665c <find_volume+0x3e4>
 8006654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006656:	69db      	ldr	r3, [r3, #28]
 8006658:	005b      	lsls	r3, r3, #1
 800665a:	e00a      	b.n	8006672 <find_volume+0x3fa>
 800665c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665e:	69da      	ldr	r2, [r3, #28]
 8006660:	4613      	mov	r3, r2
 8006662:	005b      	lsls	r3, r3, #1
 8006664:	4413      	add	r3, r2
 8006666:	085a      	lsrs	r2, r3, #1
 8006668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666a:	69db      	ldr	r3, [r3, #28]
 800666c:	f003 0301 	and.w	r3, r3, #1
 8006670:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006672:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006676:	6a1a      	ldr	r2, [r3, #32]
 8006678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800667a:	899b      	ldrh	r3, [r3, #12]
 800667c:	4619      	mov	r1, r3
 800667e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006680:	440b      	add	r3, r1
 8006682:	3b01      	subs	r3, #1
 8006684:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006686:	8989      	ldrh	r1, [r1, #12]
 8006688:	fbb3 f3f1 	udiv	r3, r3, r1
 800668c:	429a      	cmp	r2, r3
 800668e:	d201      	bcs.n	8006694 <find_volume+0x41c>
 8006690:	230d      	movs	r3, #13
 8006692:	e06d      	b.n	8006770 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006696:	f04f 32ff 	mov.w	r2, #4294967295
 800669a:	619a      	str	r2, [r3, #24]
 800669c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669e:	699a      	ldr	r2, [r3, #24]
 80066a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a2:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80066a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a6:	2280      	movs	r2, #128	; 0x80
 80066a8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80066aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80066ae:	2b03      	cmp	r3, #3
 80066b0:	d149      	bne.n	8006746 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80066b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b4:	3338      	adds	r3, #56	; 0x38
 80066b6:	3330      	adds	r3, #48	; 0x30
 80066b8:	4618      	mov	r0, r3
 80066ba:	f7fd fc47 	bl	8003f4c <ld_word>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d140      	bne.n	8006746 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 80066c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066c6:	3301      	adds	r3, #1
 80066c8:	4619      	mov	r1, r3
 80066ca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80066cc:	f7fd feee 	bl	80044ac <move_window>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d137      	bne.n	8006746 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 80066d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d8:	2200      	movs	r2, #0
 80066da:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80066dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066de:	3338      	adds	r3, #56	; 0x38
 80066e0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80066e4:	4618      	mov	r0, r3
 80066e6:	f7fd fc31 	bl	8003f4c <ld_word>
 80066ea:	4603      	mov	r3, r0
 80066ec:	461a      	mov	r2, r3
 80066ee:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d127      	bne.n	8006746 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80066f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f8:	3338      	adds	r3, #56	; 0x38
 80066fa:	4618      	mov	r0, r3
 80066fc:	f7fd fc3e 	bl	8003f7c <ld_dword>
 8006700:	4602      	mov	r2, r0
 8006702:	4b1d      	ldr	r3, [pc, #116]	; (8006778 <find_volume+0x500>)
 8006704:	429a      	cmp	r2, r3
 8006706:	d11e      	bne.n	8006746 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800670a:	3338      	adds	r3, #56	; 0x38
 800670c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006710:	4618      	mov	r0, r3
 8006712:	f7fd fc33 	bl	8003f7c <ld_dword>
 8006716:	4602      	mov	r2, r0
 8006718:	4b18      	ldr	r3, [pc, #96]	; (800677c <find_volume+0x504>)
 800671a:	429a      	cmp	r2, r3
 800671c:	d113      	bne.n	8006746 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800671e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006720:	3338      	adds	r3, #56	; 0x38
 8006722:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006726:	4618      	mov	r0, r3
 8006728:	f7fd fc28 	bl	8003f7c <ld_dword>
 800672c:	4602      	mov	r2, r0
 800672e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006730:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006734:	3338      	adds	r3, #56	; 0x38
 8006736:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800673a:	4618      	mov	r0, r3
 800673c:	f7fd fc1e 	bl	8003f7c <ld_dword>
 8006740:	4602      	mov	r2, r0
 8006742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006744:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006748:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800674c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800674e:	4b0c      	ldr	r3, [pc, #48]	; (8006780 <find_volume+0x508>)
 8006750:	881b      	ldrh	r3, [r3, #0]
 8006752:	3301      	adds	r3, #1
 8006754:	b29a      	uxth	r2, r3
 8006756:	4b0a      	ldr	r3, [pc, #40]	; (8006780 <find_volume+0x508>)
 8006758:	801a      	strh	r2, [r3, #0]
 800675a:	4b09      	ldr	r3, [pc, #36]	; (8006780 <find_volume+0x508>)
 800675c:	881a      	ldrh	r2, [r3, #0]
 800675e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006760:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006764:	4a07      	ldr	r2, [pc, #28]	; (8006784 <find_volume+0x50c>)
 8006766:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006768:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800676a:	f7fd fe37 	bl	80043dc <clear_lock>
#endif
	return FR_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	3758      	adds	r7, #88	; 0x58
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	41615252 	.word	0x41615252
 800677c:	61417272 	.word	0x61417272
 8006780:	200000a4 	.word	0x200000a4
 8006784:	200000c8 	.word	0x200000c8

08006788 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006792:	2309      	movs	r3, #9
 8006794:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d01c      	beq.n	80067d6 <validate+0x4e>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d018      	beq.n	80067d6 <validate+0x4e>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d013      	beq.n	80067d6 <validate+0x4e>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	889a      	ldrh	r2, [r3, #4]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	88db      	ldrh	r3, [r3, #6]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d10c      	bne.n	80067d6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	785b      	ldrb	r3, [r3, #1]
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7fd fb24 	bl	8003e10 <disk_status>
 80067c8:	4603      	mov	r3, r0
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d101      	bne.n	80067d6 <validate+0x4e>
			res = FR_OK;
 80067d2:	2300      	movs	r3, #0
 80067d4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80067d6:	7bfb      	ldrb	r3, [r7, #15]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d102      	bne.n	80067e2 <validate+0x5a>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	e000      	b.n	80067e4 <validate+0x5c>
 80067e2:	2300      	movs	r3, #0
 80067e4:	683a      	ldr	r2, [r7, #0]
 80067e6:	6013      	str	r3, [r2, #0]
	return res;
 80067e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
	...

080067f4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b088      	sub	sp, #32
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	4613      	mov	r3, r2
 8006800:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006806:	f107 0310 	add.w	r3, r7, #16
 800680a:	4618      	mov	r0, r3
 800680c:	f7ff fc9a 	bl	8006144 <get_ldnumber>
 8006810:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	2b00      	cmp	r3, #0
 8006816:	da01      	bge.n	800681c <f_mount+0x28>
 8006818:	230b      	movs	r3, #11
 800681a:	e02b      	b.n	8006874 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800681c:	4a17      	ldr	r2, [pc, #92]	; (800687c <f_mount+0x88>)
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006824:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d005      	beq.n	8006838 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800682c:	69b8      	ldr	r0, [r7, #24]
 800682e:	f7fd fdd5 	bl	80043dc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	2200      	movs	r2, #0
 8006836:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d002      	beq.n	8006844 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2200      	movs	r2, #0
 8006842:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	490d      	ldr	r1, [pc, #52]	; (800687c <f_mount+0x88>)
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d002      	beq.n	800685a <f_mount+0x66>
 8006854:	79fb      	ldrb	r3, [r7, #7]
 8006856:	2b01      	cmp	r3, #1
 8006858:	d001      	beq.n	800685e <f_mount+0x6a>
 800685a:	2300      	movs	r3, #0
 800685c:	e00a      	b.n	8006874 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800685e:	f107 010c 	add.w	r1, r7, #12
 8006862:	f107 0308 	add.w	r3, r7, #8
 8006866:	2200      	movs	r2, #0
 8006868:	4618      	mov	r0, r3
 800686a:	f7ff fd05 	bl	8006278 <find_volume>
 800686e:	4603      	mov	r3, r0
 8006870:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006872:	7dfb      	ldrb	r3, [r7, #23]
}
 8006874:	4618      	mov	r0, r3
 8006876:	3720      	adds	r7, #32
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	200000a0 	.word	0x200000a0

08006880 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b09a      	sub	sp, #104	; 0x68
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	4613      	mov	r3, r2
 800688c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d101      	bne.n	8006898 <f_open+0x18>
 8006894:	2309      	movs	r3, #9
 8006896:	e1bb      	b.n	8006c10 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006898:	79fb      	ldrb	r3, [r7, #7]
 800689a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800689e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80068a0:	79fa      	ldrb	r2, [r7, #7]
 80068a2:	f107 0110 	add.w	r1, r7, #16
 80068a6:	f107 0308 	add.w	r3, r7, #8
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7ff fce4 	bl	8006278 <find_volume>
 80068b0:	4603      	mov	r3, r0
 80068b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80068b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f040 819f 	bne.w	8006bfe <f_open+0x37e>
		dj.obj.fs = fs;
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80068c4:	68ba      	ldr	r2, [r7, #8]
 80068c6:	f107 0314 	add.w	r3, r7, #20
 80068ca:	4611      	mov	r1, r2
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7ff fbc3 	bl	8006058 <follow_path>
 80068d2:	4603      	mov	r3, r0
 80068d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80068d8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d11a      	bne.n	8006916 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80068e0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80068e4:	b25b      	sxtb	r3, r3
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	da03      	bge.n	80068f2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80068ea:	2306      	movs	r3, #6
 80068ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80068f0:	e011      	b.n	8006916 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80068f2:	79fb      	ldrb	r3, [r7, #7]
 80068f4:	f023 0301 	bic.w	r3, r3, #1
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	bf14      	ite	ne
 80068fc:	2301      	movne	r3, #1
 80068fe:	2300      	moveq	r3, #0
 8006900:	b2db      	uxtb	r3, r3
 8006902:	461a      	mov	r2, r3
 8006904:	f107 0314 	add.w	r3, r7, #20
 8006908:	4611      	mov	r1, r2
 800690a:	4618      	mov	r0, r3
 800690c:	f7fd fc1e 	bl	800414c <chk_lock>
 8006910:	4603      	mov	r3, r0
 8006912:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006916:	79fb      	ldrb	r3, [r7, #7]
 8006918:	f003 031c 	and.w	r3, r3, #28
 800691c:	2b00      	cmp	r3, #0
 800691e:	d07f      	beq.n	8006a20 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006920:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006924:	2b00      	cmp	r3, #0
 8006926:	d017      	beq.n	8006958 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006928:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800692c:	2b04      	cmp	r3, #4
 800692e:	d10e      	bne.n	800694e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006930:	f7fd fc68 	bl	8004204 <enq_lock>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d006      	beq.n	8006948 <f_open+0xc8>
 800693a:	f107 0314 	add.w	r3, r7, #20
 800693e:	4618      	mov	r0, r3
 8006940:	f7fe fedc 	bl	80056fc <dir_register>
 8006944:	4603      	mov	r3, r0
 8006946:	e000      	b.n	800694a <f_open+0xca>
 8006948:	2312      	movs	r3, #18
 800694a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800694e:	79fb      	ldrb	r3, [r7, #7]
 8006950:	f043 0308 	orr.w	r3, r3, #8
 8006954:	71fb      	strb	r3, [r7, #7]
 8006956:	e010      	b.n	800697a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006958:	7ebb      	ldrb	r3, [r7, #26]
 800695a:	f003 0311 	and.w	r3, r3, #17
 800695e:	2b00      	cmp	r3, #0
 8006960:	d003      	beq.n	800696a <f_open+0xea>
					res = FR_DENIED;
 8006962:	2307      	movs	r3, #7
 8006964:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006968:	e007      	b.n	800697a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800696a:	79fb      	ldrb	r3, [r7, #7]
 800696c:	f003 0304 	and.w	r3, r3, #4
 8006970:	2b00      	cmp	r3, #0
 8006972:	d002      	beq.n	800697a <f_open+0xfa>
 8006974:	2308      	movs	r3, #8
 8006976:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800697a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800697e:	2b00      	cmp	r3, #0
 8006980:	d168      	bne.n	8006a54 <f_open+0x1d4>
 8006982:	79fb      	ldrb	r3, [r7, #7]
 8006984:	f003 0308 	and.w	r3, r3, #8
 8006988:	2b00      	cmp	r3, #0
 800698a:	d063      	beq.n	8006a54 <f_open+0x1d4>
				dw = GET_FATTIME();
 800698c:	f001 f8e2 	bl	8007b54 <get_fattime>
 8006990:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006994:	330e      	adds	r3, #14
 8006996:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006998:	4618      	mov	r0, r3
 800699a:	f7fd fb2d 	bl	8003ff8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800699e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069a0:	3316      	adds	r3, #22
 80069a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80069a4:	4618      	mov	r0, r3
 80069a6:	f7fd fb27 	bl	8003ff8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80069aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ac:	330b      	adds	r3, #11
 80069ae:	2220      	movs	r2, #32
 80069b0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069b6:	4611      	mov	r1, r2
 80069b8:	4618      	mov	r0, r3
 80069ba:	f7fe faf6 	bl	8004faa <ld_clust>
 80069be:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80069c4:	2200      	movs	r2, #0
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7fe fb0e 	bl	8004fe8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80069cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ce:	331c      	adds	r3, #28
 80069d0:	2100      	movs	r1, #0
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7fd fb10 	bl	8003ff8 <st_dword>
					fs->wflag = 1;
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	2201      	movs	r2, #1
 80069dc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80069de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d037      	beq.n	8006a54 <f_open+0x1d4>
						dw = fs->winsect;
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069e8:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80069ea:	f107 0314 	add.w	r3, r7, #20
 80069ee:	2200      	movs	r2, #0
 80069f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7fd fffe 	bl	80049f4 <remove_chain>
 80069f8:	4603      	mov	r3, r0
 80069fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80069fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d126      	bne.n	8006a54 <f_open+0x1d4>
							res = move_window(fs, dw);
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7fd fd4e 	bl	80044ac <move_window>
 8006a10:	4603      	mov	r3, r0
 8006a12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a1a:	3a01      	subs	r2, #1
 8006a1c:	615a      	str	r2, [r3, #20]
 8006a1e:	e019      	b.n	8006a54 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006a20:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d115      	bne.n	8006a54 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006a28:	7ebb      	ldrb	r3, [r7, #26]
 8006a2a:	f003 0310 	and.w	r3, r3, #16
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d003      	beq.n	8006a3a <f_open+0x1ba>
					res = FR_NO_FILE;
 8006a32:	2304      	movs	r3, #4
 8006a34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006a38:	e00c      	b.n	8006a54 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006a3a:	79fb      	ldrb	r3, [r7, #7]
 8006a3c:	f003 0302 	and.w	r3, r3, #2
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d007      	beq.n	8006a54 <f_open+0x1d4>
 8006a44:	7ebb      	ldrb	r3, [r7, #26]
 8006a46:	f003 0301 	and.w	r3, r3, #1
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d002      	beq.n	8006a54 <f_open+0x1d4>
						res = FR_DENIED;
 8006a4e:	2307      	movs	r3, #7
 8006a50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8006a54:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d128      	bne.n	8006aae <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006a5c:	79fb      	ldrb	r3, [r7, #7]
 8006a5e:	f003 0308 	and.w	r3, r3, #8
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d003      	beq.n	8006a6e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8006a66:	79fb      	ldrb	r3, [r7, #7]
 8006a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a6c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006a76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006a7c:	79fb      	ldrb	r3, [r7, #7]
 8006a7e:	f023 0301 	bic.w	r3, r3, #1
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	bf14      	ite	ne
 8006a86:	2301      	movne	r3, #1
 8006a88:	2300      	moveq	r3, #0
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	f107 0314 	add.w	r3, r7, #20
 8006a92:	4611      	mov	r1, r2
 8006a94:	4618      	mov	r0, r3
 8006a96:	f7fd fbd7 	bl	8004248 <inc_lock>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d102      	bne.n	8006aae <f_open+0x22e>
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006aae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f040 80a3 	bne.w	8006bfe <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006abc:	4611      	mov	r1, r2
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7fe fa73 	bl	8004faa <ld_clust>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006acc:	331c      	adds	r3, #28
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7fd fa54 	bl	8003f7c <ld_dword>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006ae0:	693a      	ldr	r2, [r7, #16]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	88da      	ldrh	r2, [r3, #6]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	79fa      	ldrb	r2, [r7, #7]
 8006af2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2200      	movs	r2, #0
 8006af8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2200      	movs	r2, #0
 8006afe:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2200      	movs	r2, #0
 8006b04:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	3330      	adds	r3, #48	; 0x30
 8006b0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006b0e:	2100      	movs	r1, #0
 8006b10:	4618      	mov	r0, r3
 8006b12:	f7fd fabe 	bl	8004092 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006b16:	79fb      	ldrb	r3, [r7, #7]
 8006b18:	f003 0320 	and.w	r3, r3, #32
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d06e      	beq.n	8006bfe <f_open+0x37e>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d06a      	beq.n	8006bfe <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	68da      	ldr	r2, [r3, #12]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	895b      	ldrh	r3, [r3, #10]
 8006b34:	461a      	mov	r2, r3
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	899b      	ldrh	r3, [r3, #12]
 8006b3a:	fb03 f302 	mul.w	r3, r3, r2
 8006b3e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b4c:	e016      	b.n	8006b7c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7fd fd67 	bl	8004626 <get_fat>
 8006b58:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8006b5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d802      	bhi.n	8006b66 <f_open+0x2e6>
 8006b60:	2302      	movs	r3, #2
 8006b62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006b66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b6c:	d102      	bne.n	8006b74 <f_open+0x2f4>
 8006b6e:	2301      	movs	r3, #1
 8006b70:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006b74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006b76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b78:	1ad3      	subs	r3, r2, r3
 8006b7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b7c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d103      	bne.n	8006b8c <f_open+0x30c>
 8006b84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006b86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d8e0      	bhi.n	8006b4e <f_open+0x2ce>
				}
				fp->clust = clst;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006b90:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006b92:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d131      	bne.n	8006bfe <f_open+0x37e>
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	899b      	ldrh	r3, [r3, #12]
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ba2:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ba6:	fb02 f201 	mul.w	r2, r2, r1
 8006baa:	1a9b      	subs	r3, r3, r2
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d026      	beq.n	8006bfe <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7fd fd17 	bl	80045e8 <clust2sect>
 8006bba:	64f8      	str	r0, [r7, #76]	; 0x4c
 8006bbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d103      	bne.n	8006bca <f_open+0x34a>
						res = FR_INT_ERR;
 8006bc2:	2302      	movs	r3, #2
 8006bc4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006bc8:	e019      	b.n	8006bfe <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	899b      	ldrh	r3, [r3, #12]
 8006bce:	461a      	mov	r2, r3
 8006bd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bd2:	fbb3 f2f2 	udiv	r2, r3, r2
 8006bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bd8:	441a      	add	r2, r3
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	7858      	ldrb	r0, [r3, #1]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6a1a      	ldr	r2, [r3, #32]
 8006bec:	2301      	movs	r3, #1
 8006bee:	f7fd f94f 	bl	8003e90 <disk_read>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d002      	beq.n	8006bfe <f_open+0x37e>
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006bfe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d002      	beq.n	8006c0c <f_open+0x38c>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006c0c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3768      	adds	r7, #104	; 0x68
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b08e      	sub	sp, #56	; 0x38
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
 8006c24:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f107 0214 	add.w	r2, r7, #20
 8006c36:	4611      	mov	r1, r2
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7ff fda5 	bl	8006788 <validate>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006c44:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d107      	bne.n	8006c5c <f_read+0x44>
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	7d5b      	ldrb	r3, [r3, #21]
 8006c50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006c54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d002      	beq.n	8006c62 <f_read+0x4a>
 8006c5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006c60:	e135      	b.n	8006ece <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	7d1b      	ldrb	r3, [r3, #20]
 8006c66:	f003 0301 	and.w	r3, r3, #1
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d101      	bne.n	8006c72 <f_read+0x5a>
 8006c6e:	2307      	movs	r3, #7
 8006c70:	e12d      	b.n	8006ece <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	68da      	ldr	r2, [r3, #12]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	699b      	ldr	r3, [r3, #24]
 8006c7a:	1ad3      	subs	r3, r2, r3
 8006c7c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	6a3b      	ldr	r3, [r7, #32]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	f240 811e 	bls.w	8006ec4 <f_read+0x2ac>
 8006c88:	6a3b      	ldr	r3, [r7, #32]
 8006c8a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006c8c:	e11a      	b.n	8006ec4 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	699b      	ldr	r3, [r3, #24]
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	8992      	ldrh	r2, [r2, #12]
 8006c96:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c9a:	fb02 f201 	mul.w	r2, r2, r1
 8006c9e:	1a9b      	subs	r3, r3, r2
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f040 80d5 	bne.w	8006e50 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	699b      	ldr	r3, [r3, #24]
 8006caa:	697a      	ldr	r2, [r7, #20]
 8006cac:	8992      	ldrh	r2, [r2, #12]
 8006cae:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	8952      	ldrh	r2, [r2, #10]
 8006cb6:	3a01      	subs	r2, #1
 8006cb8:	4013      	ands	r3, r2
 8006cba:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d12f      	bne.n	8006d22 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d103      	bne.n	8006cd2 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	633b      	str	r3, [r7, #48]	; 0x30
 8006cd0:	e013      	b.n	8006cfa <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d007      	beq.n	8006cea <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	4619      	mov	r1, r3
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f7fd ff84 	bl	8004bee <clmt_clust>
 8006ce6:	6338      	str	r0, [r7, #48]	; 0x30
 8006ce8:	e007      	b.n	8006cfa <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	69db      	ldr	r3, [r3, #28]
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	4610      	mov	r0, r2
 8006cf4:	f7fd fc97 	bl	8004626 <get_fat>
 8006cf8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d804      	bhi.n	8006d0a <f_read+0xf2>
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2202      	movs	r2, #2
 8006d04:	755a      	strb	r2, [r3, #21]
 8006d06:	2302      	movs	r3, #2
 8006d08:	e0e1      	b.n	8006ece <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d10:	d104      	bne.n	8006d1c <f_read+0x104>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2201      	movs	r2, #1
 8006d16:	755a      	strb	r2, [r3, #21]
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e0d8      	b.n	8006ece <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d20:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006d22:	697a      	ldr	r2, [r7, #20]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	69db      	ldr	r3, [r3, #28]
 8006d28:	4619      	mov	r1, r3
 8006d2a:	4610      	mov	r0, r2
 8006d2c:	f7fd fc5c 	bl	80045e8 <clust2sect>
 8006d30:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d104      	bne.n	8006d42 <f_read+0x12a>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2202      	movs	r2, #2
 8006d3c:	755a      	strb	r2, [r3, #21]
 8006d3e:	2302      	movs	r3, #2
 8006d40:	e0c5      	b.n	8006ece <f_read+0x2b6>
			sect += csect;
 8006d42:	69ba      	ldr	r2, [r7, #24]
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	4413      	add	r3, r2
 8006d48:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	899b      	ldrh	r3, [r3, #12]
 8006d4e:	461a      	mov	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d56:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d041      	beq.n	8006de2 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006d5e:	69fa      	ldr	r2, [r7, #28]
 8006d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d62:	4413      	add	r3, r2
 8006d64:	697a      	ldr	r2, [r7, #20]
 8006d66:	8952      	ldrh	r2, [r2, #10]
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d905      	bls.n	8006d78 <f_read+0x160>
					cc = fs->csize - csect;
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	895b      	ldrh	r3, [r3, #10]
 8006d70:	461a      	mov	r2, r3
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	1ad3      	subs	r3, r2, r3
 8006d76:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	7858      	ldrb	r0, [r3, #1]
 8006d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7e:	69ba      	ldr	r2, [r7, #24]
 8006d80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d82:	f7fd f885 	bl	8003e90 <disk_read>
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d004      	beq.n	8006d96 <f_read+0x17e>
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	755a      	strb	r2, [r3, #21]
 8006d92:	2301      	movs	r3, #1
 8006d94:	e09b      	b.n	8006ece <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	7d1b      	ldrb	r3, [r3, #20]
 8006d9a:	b25b      	sxtb	r3, r3
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	da18      	bge.n	8006dd2 <f_read+0x1ba>
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6a1a      	ldr	r2, [r3, #32]
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d911      	bls.n	8006dd2 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6a1a      	ldr	r2, [r3, #32]
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	8992      	ldrh	r2, [r2, #12]
 8006dba:	fb02 f303 	mul.w	r3, r2, r3
 8006dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dc0:	18d0      	adds	r0, r2, r3
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	899b      	ldrh	r3, [r3, #12]
 8006dcc:	461a      	mov	r2, r3
 8006dce:	f7fd f93f 	bl	8004050 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	899b      	ldrh	r3, [r3, #12]
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dda:	fb02 f303 	mul.w	r3, r2, r3
 8006dde:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8006de0:	e05c      	b.n	8006e9c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6a1b      	ldr	r3, [r3, #32]
 8006de6:	69ba      	ldr	r2, [r7, #24]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d02e      	beq.n	8006e4a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	7d1b      	ldrb	r3, [r3, #20]
 8006df0:	b25b      	sxtb	r3, r3
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	da18      	bge.n	8006e28 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	7858      	ldrb	r0, [r3, #1]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6a1a      	ldr	r2, [r3, #32]
 8006e04:	2301      	movs	r3, #1
 8006e06:	f7fd f863 	bl	8003ed0 <disk_write>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d004      	beq.n	8006e1a <f_read+0x202>
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2201      	movs	r2, #1
 8006e14:	755a      	strb	r2, [r3, #21]
 8006e16:	2301      	movs	r3, #1
 8006e18:	e059      	b.n	8006ece <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	7d1b      	ldrb	r3, [r3, #20]
 8006e1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e22:	b2da      	uxtb	r2, r3
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	7858      	ldrb	r0, [r3, #1]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006e32:	2301      	movs	r3, #1
 8006e34:	69ba      	ldr	r2, [r7, #24]
 8006e36:	f7fd f82b 	bl	8003e90 <disk_read>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d004      	beq.n	8006e4a <f_read+0x232>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2201      	movs	r2, #1
 8006e44:	755a      	strb	r2, [r3, #21]
 8006e46:	2301      	movs	r3, #1
 8006e48:	e041      	b.n	8006ece <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	69ba      	ldr	r2, [r7, #24]
 8006e4e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	899b      	ldrh	r3, [r3, #12]
 8006e54:	4618      	mov	r0, r3
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	699b      	ldr	r3, [r3, #24]
 8006e5a:	697a      	ldr	r2, [r7, #20]
 8006e5c:	8992      	ldrh	r2, [r2, #12]
 8006e5e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e62:	fb02 f201 	mul.w	r2, r2, r1
 8006e66:	1a9b      	subs	r3, r3, r2
 8006e68:	1ac3      	subs	r3, r0, r3
 8006e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006e6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d901      	bls.n	8006e78 <f_read+0x260>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	699b      	ldr	r3, [r3, #24]
 8006e82:	697a      	ldr	r2, [r7, #20]
 8006e84:	8992      	ldrh	r2, [r2, #12]
 8006e86:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e8a:	fb02 f200 	mul.w	r2, r2, r0
 8006e8e:	1a9b      	subs	r3, r3, r2
 8006e90:	440b      	add	r3, r1
 8006e92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e94:	4619      	mov	r1, r3
 8006e96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e98:	f7fd f8da 	bl	8004050 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006e9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea0:	4413      	add	r3, r2
 8006ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	699a      	ldr	r2, [r3, #24]
 8006ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eaa:	441a      	add	r2, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	619a      	str	r2, [r3, #24]
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb6:	441a      	add	r2, r3
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	601a      	str	r2, [r3, #0]
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f47f aee1 	bne.w	8006c8e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3738      	adds	r7, #56	; 0x38
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006ed6:	b580      	push	{r7, lr}
 8006ed8:	b08c      	sub	sp, #48	; 0x30
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	60f8      	str	r0, [r7, #12]
 8006ede:	60b9      	str	r1, [r7, #8]
 8006ee0:	607a      	str	r2, [r7, #4]
 8006ee2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	2200      	movs	r2, #0
 8006eec:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f107 0210 	add.w	r2, r7, #16
 8006ef4:	4611      	mov	r1, r2
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7ff fc46 	bl	8006788 <validate>
 8006efc:	4603      	mov	r3, r0
 8006efe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006f02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d107      	bne.n	8006f1a <f_write+0x44>
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	7d5b      	ldrb	r3, [r3, #21]
 8006f0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006f12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d002      	beq.n	8006f20 <f_write+0x4a>
 8006f1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f1e:	e16a      	b.n	80071f6 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	7d1b      	ldrb	r3, [r3, #20]
 8006f24:	f003 0302 	and.w	r3, r3, #2
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d101      	bne.n	8006f30 <f_write+0x5a>
 8006f2c:	2307      	movs	r3, #7
 8006f2e:	e162      	b.n	80071f6 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	699a      	ldr	r2, [r3, #24]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	441a      	add	r2, r3
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	699b      	ldr	r3, [r3, #24]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	f080 814c 	bcs.w	80071da <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	699b      	ldr	r3, [r3, #24]
 8006f46:	43db      	mvns	r3, r3
 8006f48:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006f4a:	e146      	b.n	80071da <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	699b      	ldr	r3, [r3, #24]
 8006f50:	693a      	ldr	r2, [r7, #16]
 8006f52:	8992      	ldrh	r2, [r2, #12]
 8006f54:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f58:	fb02 f201 	mul.w	r2, r2, r1
 8006f5c:	1a9b      	subs	r3, r3, r2
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	f040 80f1 	bne.w	8007146 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	699b      	ldr	r3, [r3, #24]
 8006f68:	693a      	ldr	r2, [r7, #16]
 8006f6a:	8992      	ldrh	r2, [r2, #12]
 8006f6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f70:	693a      	ldr	r2, [r7, #16]
 8006f72:	8952      	ldrh	r2, [r2, #10]
 8006f74:	3a01      	subs	r2, #1
 8006f76:	4013      	ands	r3, r2
 8006f78:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d143      	bne.n	8007008 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	699b      	ldr	r3, [r3, #24]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10c      	bne.n	8006fa2 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d11a      	bne.n	8006fca <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2100      	movs	r1, #0
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f7fd fd90 	bl	8004abe <create_chain>
 8006f9e:	62b8      	str	r0, [r7, #40]	; 0x28
 8006fa0:	e013      	b.n	8006fca <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d007      	beq.n	8006fba <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	699b      	ldr	r3, [r3, #24]
 8006fae:	4619      	mov	r1, r3
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f7fd fe1c 	bl	8004bee <clmt_clust>
 8006fb6:	62b8      	str	r0, [r7, #40]	; 0x28
 8006fb8:	e007      	b.n	8006fca <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006fba:	68fa      	ldr	r2, [r7, #12]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	69db      	ldr	r3, [r3, #28]
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	4610      	mov	r0, r2
 8006fc4:	f7fd fd7b 	bl	8004abe <create_chain>
 8006fc8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	f000 8109 	beq.w	80071e4 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d104      	bne.n	8006fe2 <f_write+0x10c>
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2202      	movs	r2, #2
 8006fdc:	755a      	strb	r2, [r3, #21]
 8006fde:	2302      	movs	r3, #2
 8006fe0:	e109      	b.n	80071f6 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe8:	d104      	bne.n	8006ff4 <f_write+0x11e>
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2201      	movs	r2, #1
 8006fee:	755a      	strb	r2, [r3, #21]
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e100      	b.n	80071f6 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ff8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d102      	bne.n	8007008 <f_write+0x132>
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007006:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	7d1b      	ldrb	r3, [r3, #20]
 800700c:	b25b      	sxtb	r3, r3
 800700e:	2b00      	cmp	r3, #0
 8007010:	da18      	bge.n	8007044 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	7858      	ldrb	r0, [r3, #1]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6a1a      	ldr	r2, [r3, #32]
 8007020:	2301      	movs	r3, #1
 8007022:	f7fc ff55 	bl	8003ed0 <disk_write>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d004      	beq.n	8007036 <f_write+0x160>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2201      	movs	r2, #1
 8007030:	755a      	strb	r2, [r3, #21]
 8007032:	2301      	movs	r3, #1
 8007034:	e0df      	b.n	80071f6 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	7d1b      	ldrb	r3, [r3, #20]
 800703a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800703e:	b2da      	uxtb	r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007044:	693a      	ldr	r2, [r7, #16]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	69db      	ldr	r3, [r3, #28]
 800704a:	4619      	mov	r1, r3
 800704c:	4610      	mov	r0, r2
 800704e:	f7fd facb 	bl	80045e8 <clust2sect>
 8007052:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d104      	bne.n	8007064 <f_write+0x18e>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2202      	movs	r2, #2
 800705e:	755a      	strb	r2, [r3, #21]
 8007060:	2302      	movs	r3, #2
 8007062:	e0c8      	b.n	80071f6 <f_write+0x320>
			sect += csect;
 8007064:	697a      	ldr	r2, [r7, #20]
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	4413      	add	r3, r2
 800706a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	899b      	ldrh	r3, [r3, #12]
 8007070:	461a      	mov	r2, r3
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	fbb3 f3f2 	udiv	r3, r3, r2
 8007078:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800707a:	6a3b      	ldr	r3, [r7, #32]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d043      	beq.n	8007108 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007080:	69ba      	ldr	r2, [r7, #24]
 8007082:	6a3b      	ldr	r3, [r7, #32]
 8007084:	4413      	add	r3, r2
 8007086:	693a      	ldr	r2, [r7, #16]
 8007088:	8952      	ldrh	r2, [r2, #10]
 800708a:	4293      	cmp	r3, r2
 800708c:	d905      	bls.n	800709a <f_write+0x1c4>
					cc = fs->csize - csect;
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	895b      	ldrh	r3, [r3, #10]
 8007092:	461a      	mov	r2, r3
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	1ad3      	subs	r3, r2, r3
 8007098:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	7858      	ldrb	r0, [r3, #1]
 800709e:	6a3b      	ldr	r3, [r7, #32]
 80070a0:	697a      	ldr	r2, [r7, #20]
 80070a2:	69f9      	ldr	r1, [r7, #28]
 80070a4:	f7fc ff14 	bl	8003ed0 <disk_write>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d004      	beq.n	80070b8 <f_write+0x1e2>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2201      	movs	r2, #1
 80070b2:	755a      	strb	r2, [r3, #21]
 80070b4:	2301      	movs	r3, #1
 80070b6:	e09e      	b.n	80071f6 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6a1a      	ldr	r2, [r3, #32]
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	1ad3      	subs	r3, r2, r3
 80070c0:	6a3a      	ldr	r2, [r7, #32]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d918      	bls.n	80070f8 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6a1a      	ldr	r2, [r3, #32]
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	693a      	ldr	r2, [r7, #16]
 80070d6:	8992      	ldrh	r2, [r2, #12]
 80070d8:	fb02 f303 	mul.w	r3, r2, r3
 80070dc:	69fa      	ldr	r2, [r7, #28]
 80070de:	18d1      	adds	r1, r2, r3
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	899b      	ldrh	r3, [r3, #12]
 80070e4:	461a      	mov	r2, r3
 80070e6:	f7fc ffb3 	bl	8004050 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	7d1b      	ldrb	r3, [r3, #20]
 80070ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070f2:	b2da      	uxtb	r2, r3
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	899b      	ldrh	r3, [r3, #12]
 80070fc:	461a      	mov	r2, r3
 80070fe:	6a3b      	ldr	r3, [r7, #32]
 8007100:	fb02 f303 	mul.w	r3, r2, r3
 8007104:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007106:	e04b      	b.n	80071a0 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6a1b      	ldr	r3, [r3, #32]
 800710c:	697a      	ldr	r2, [r7, #20]
 800710e:	429a      	cmp	r2, r3
 8007110:	d016      	beq.n	8007140 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	699a      	ldr	r2, [r3, #24]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800711a:	429a      	cmp	r2, r3
 800711c:	d210      	bcs.n	8007140 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	7858      	ldrb	r0, [r3, #1]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007128:	2301      	movs	r3, #1
 800712a:	697a      	ldr	r2, [r7, #20]
 800712c:	f7fc feb0 	bl	8003e90 <disk_read>
 8007130:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007132:	2b00      	cmp	r3, #0
 8007134:	d004      	beq.n	8007140 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2201      	movs	r2, #1
 800713a:	755a      	strb	r2, [r3, #21]
 800713c:	2301      	movs	r3, #1
 800713e:	e05a      	b.n	80071f6 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	697a      	ldr	r2, [r7, #20]
 8007144:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	899b      	ldrh	r3, [r3, #12]
 800714a:	4618      	mov	r0, r3
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	699b      	ldr	r3, [r3, #24]
 8007150:	693a      	ldr	r2, [r7, #16]
 8007152:	8992      	ldrh	r2, [r2, #12]
 8007154:	fbb3 f1f2 	udiv	r1, r3, r2
 8007158:	fb02 f201 	mul.w	r2, r2, r1
 800715c:	1a9b      	subs	r3, r3, r2
 800715e:	1ac3      	subs	r3, r0, r3
 8007160:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	429a      	cmp	r2, r3
 8007168:	d901      	bls.n	800716e <f_write+0x298>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	693a      	ldr	r2, [r7, #16]
 800717a:	8992      	ldrh	r2, [r2, #12]
 800717c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007180:	fb02 f200 	mul.w	r2, r2, r0
 8007184:	1a9b      	subs	r3, r3, r2
 8007186:	440b      	add	r3, r1
 8007188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800718a:	69f9      	ldr	r1, [r7, #28]
 800718c:	4618      	mov	r0, r3
 800718e:	f7fc ff5f 	bl	8004050 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	7d1b      	ldrb	r3, [r3, #20]
 8007196:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800719a:	b2da      	uxtb	r2, r3
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80071a0:	69fa      	ldr	r2, [r7, #28]
 80071a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a4:	4413      	add	r3, r2
 80071a6:	61fb      	str	r3, [r7, #28]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	699a      	ldr	r2, [r3, #24]
 80071ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ae:	441a      	add	r2, r3
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	619a      	str	r2, [r3, #24]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	68da      	ldr	r2, [r3, #12]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	699b      	ldr	r3, [r3, #24]
 80071bc:	429a      	cmp	r2, r3
 80071be:	bf38      	it	cc
 80071c0:	461a      	movcc	r2, r3
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	60da      	str	r2, [r3, #12]
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071cc:	441a      	add	r2, r3
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	601a      	str	r2, [r3, #0]
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d6:	1ad3      	subs	r3, r2, r3
 80071d8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	f47f aeb5 	bne.w	8006f4c <f_write+0x76>
 80071e2:	e000      	b.n	80071e6 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80071e4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	7d1b      	ldrb	r3, [r3, #20]
 80071ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071ee:	b2da      	uxtb	r2, r3
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3730      	adds	r7, #48	; 0x30
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b086      	sub	sp, #24
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f107 0208 	add.w	r2, r7, #8
 800720c:	4611      	mov	r1, r2
 800720e:	4618      	mov	r0, r3
 8007210:	f7ff faba 	bl	8006788 <validate>
 8007214:	4603      	mov	r3, r0
 8007216:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007218:	7dfb      	ldrb	r3, [r7, #23]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d168      	bne.n	80072f0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	7d1b      	ldrb	r3, [r3, #20]
 8007222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007226:	2b00      	cmp	r3, #0
 8007228:	d062      	beq.n	80072f0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	7d1b      	ldrb	r3, [r3, #20]
 800722e:	b25b      	sxtb	r3, r3
 8007230:	2b00      	cmp	r3, #0
 8007232:	da15      	bge.n	8007260 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	7858      	ldrb	r0, [r3, #1]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a1a      	ldr	r2, [r3, #32]
 8007242:	2301      	movs	r3, #1
 8007244:	f7fc fe44 	bl	8003ed0 <disk_write>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d001      	beq.n	8007252 <f_sync+0x54>
 800724e:	2301      	movs	r3, #1
 8007250:	e04f      	b.n	80072f2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	7d1b      	ldrb	r3, [r3, #20]
 8007256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800725a:	b2da      	uxtb	r2, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007260:	f000 fc78 	bl	8007b54 <get_fattime>
 8007264:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007266:	68ba      	ldr	r2, [r7, #8]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726c:	4619      	mov	r1, r3
 800726e:	4610      	mov	r0, r2
 8007270:	f7fd f91c 	bl	80044ac <move_window>
 8007274:	4603      	mov	r3, r0
 8007276:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007278:	7dfb      	ldrb	r3, [r7, #23]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d138      	bne.n	80072f0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007282:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	330b      	adds	r3, #11
 8007288:	781a      	ldrb	r2, [r3, #0]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	330b      	adds	r3, #11
 800728e:	f042 0220 	orr.w	r2, r2, #32
 8007292:	b2d2      	uxtb	r2, r2
 8007294:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6818      	ldr	r0, [r3, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	461a      	mov	r2, r3
 80072a0:	68f9      	ldr	r1, [r7, #12]
 80072a2:	f7fd fea1 	bl	8004fe8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f103 021c 	add.w	r2, r3, #28
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	4619      	mov	r1, r3
 80072b2:	4610      	mov	r0, r2
 80072b4:	f7fc fea0 	bl	8003ff8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	3316      	adds	r3, #22
 80072bc:	6939      	ldr	r1, [r7, #16]
 80072be:	4618      	mov	r0, r3
 80072c0:	f7fc fe9a 	bl	8003ff8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	3312      	adds	r3, #18
 80072c8:	2100      	movs	r1, #0
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7fc fe79 	bl	8003fc2 <st_word>
					fs->wflag = 1;
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	2201      	movs	r2, #1
 80072d4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	4618      	mov	r0, r3
 80072da:	f7fd f915 	bl	8004508 <sync_fs>
 80072de:	4603      	mov	r3, r0
 80072e0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	7d1b      	ldrb	r3, [r3, #20]
 80072e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072ea:	b2da      	uxtb	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80072f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3718      	adds	r7, #24
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b084      	sub	sp, #16
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f7ff ff7b 	bl	80071fe <f_sync>
 8007308:	4603      	mov	r3, r0
 800730a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800730c:	7bfb      	ldrb	r3, [r7, #15]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d118      	bne.n	8007344 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f107 0208 	add.w	r2, r7, #8
 8007318:	4611      	mov	r1, r2
 800731a:	4618      	mov	r0, r3
 800731c:	f7ff fa34 	bl	8006788 <validate>
 8007320:	4603      	mov	r3, r0
 8007322:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007324:	7bfb      	ldrb	r3, [r7, #15]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d10c      	bne.n	8007344 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	4618      	mov	r0, r3
 8007330:	f7fd f818 	bl	8004364 <dec_lock>
 8007334:	4603      	mov	r3, r0
 8007336:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007338:	7bfb      	ldrb	r3, [r7, #15]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d102      	bne.n	8007344 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007344:	7bfb      	ldrb	r3, [r7, #15]
}
 8007346:	4618      	mov	r0, r3
 8007348:	3710      	adds	r7, #16
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b086      	sub	sp, #24
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
 8007356:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d101      	bne.n	8007362 <f_opendir+0x14>
 800735e:	2309      	movs	r3, #9
 8007360:	e064      	b.n	800742c <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8007366:	f107 010c 	add.w	r1, r7, #12
 800736a:	463b      	mov	r3, r7
 800736c:	2200      	movs	r2, #0
 800736e:	4618      	mov	r0, r3
 8007370:	f7fe ff82 	bl	8006278 <find_volume>
 8007374:	4603      	mov	r3, r0
 8007376:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007378:	7dfb      	ldrb	r3, [r7, #23]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d14f      	bne.n	800741e <f_opendir+0xd0>
		obj->fs = fs;
 800737e:	68fa      	ldr	r2, [r7, #12]
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	4619      	mov	r1, r3
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f7fe fe65 	bl	8006058 <follow_path>
 800738e:	4603      	mov	r3, r0
 8007390:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8007392:	7dfb      	ldrb	r3, [r7, #23]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d13d      	bne.n	8007414 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800739e:	b25b      	sxtb	r3, r3
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	db12      	blt.n	80073ca <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	799b      	ldrb	r3, [r3, #6]
 80073a8:	f003 0310 	and.w	r3, r3, #16
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d00a      	beq.n	80073c6 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a1b      	ldr	r3, [r3, #32]
 80073b6:	4619      	mov	r1, r3
 80073b8:	4610      	mov	r0, r2
 80073ba:	f7fd fdf6 	bl	8004faa <ld_clust>
 80073be:	4602      	mov	r2, r0
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	609a      	str	r2, [r3, #8]
 80073c4:	e001      	b.n	80073ca <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80073c6:	2305      	movs	r3, #5
 80073c8:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80073ca:	7dfb      	ldrb	r3, [r7, #23]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d121      	bne.n	8007414 <f_opendir+0xc6>
				obj->id = fs->id;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	88da      	ldrh	r2, [r3, #6]
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80073d8:	2100      	movs	r1, #0
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f7fd fc3f 	bl	8004c5e <dir_sdi>
 80073e0:	4603      	mov	r3, r0
 80073e2:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80073e4:	7dfb      	ldrb	r3, [r7, #23]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d114      	bne.n	8007414 <f_opendir+0xc6>
					if (obj->sclust) {
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d00d      	beq.n	800740e <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80073f2:	2100      	movs	r1, #0
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f7fc ff27 	bl	8004248 <inc_lock>
 80073fa:	4602      	mov	r2, r0
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d105      	bne.n	8007414 <f_opendir+0xc6>
 8007408:	2312      	movs	r3, #18
 800740a:	75fb      	strb	r3, [r7, #23]
 800740c:	e002      	b.n	8007414 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	2200      	movs	r2, #0
 8007412:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8007414:	7dfb      	ldrb	r3, [r7, #23]
 8007416:	2b04      	cmp	r3, #4
 8007418:	d101      	bne.n	800741e <f_opendir+0xd0>
 800741a:	2305      	movs	r3, #5
 800741c:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800741e:	7dfb      	ldrb	r3, [r7, #23]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d002      	beq.n	800742a <f_opendir+0xdc>
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	2200      	movs	r2, #0
 8007428:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800742a:	7dfb      	ldrb	r3, [r7, #23]
}
 800742c:	4618      	mov	r0, r3
 800742e:	3718      	adds	r7, #24
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f107 0208 	add.w	r2, r7, #8
 8007442:	4611      	mov	r1, r2
 8007444:	4618      	mov	r0, r3
 8007446:	f7ff f99f 	bl	8006788 <validate>
 800744a:	4603      	mov	r3, r0
 800744c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800744e:	7bfb      	ldrb	r3, [r7, #15]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d110      	bne.n	8007476 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d006      	beq.n	800746a <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	691b      	ldr	r3, [r3, #16]
 8007460:	4618      	mov	r0, r3
 8007462:	f7fc ff7f 	bl	8004364 <dec_lock>
 8007466:	4603      	mov	r3, r0
 8007468:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800746a:	7bfb      	ldrb	r3, [r7, #15]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d102      	bne.n	8007476 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8007476:	7bfb      	ldrb	r3, [r7, #15]
}
 8007478:	4618      	mov	r0, r3
 800747a:	3710      	adds	r7, #16
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f107 0208 	add.w	r2, r7, #8
 8007490:	4611      	mov	r1, r2
 8007492:	4618      	mov	r0, r3
 8007494:	f7ff f978 	bl	8006788 <validate>
 8007498:	4603      	mov	r3, r0
 800749a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800749c:	7bfb      	ldrb	r3, [r7, #15]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d126      	bne.n	80074f0 <f_readdir+0x70>
		if (!fno) {
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d106      	bne.n	80074b6 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80074a8:	2100      	movs	r1, #0
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f7fd fbd7 	bl	8004c5e <dir_sdi>
 80074b0:	4603      	mov	r3, r0
 80074b2:	73fb      	strb	r3, [r7, #15]
 80074b4:	e01c      	b.n	80074f0 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 80074b6:	2100      	movs	r1, #0
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f7fd ffb7 	bl	800542c <dir_read>
 80074be:	4603      	mov	r3, r0
 80074c0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80074c2:	7bfb      	ldrb	r3, [r7, #15]
 80074c4:	2b04      	cmp	r3, #4
 80074c6:	d101      	bne.n	80074cc <f_readdir+0x4c>
 80074c8:	2300      	movs	r3, #0
 80074ca:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 80074cc:	7bfb      	ldrb	r3, [r7, #15]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d10e      	bne.n	80074f0 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 80074d2:	6839      	ldr	r1, [r7, #0]
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f7fe fa09 	bl	80058ec <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80074da:	2100      	movs	r1, #0
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f7fd fc47 	bl	8004d70 <dir_next>
 80074e2:	4603      	mov	r3, r0
 80074e4:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80074e6:	7bfb      	ldrb	r3, [r7, #15]
 80074e8:	2b04      	cmp	r3, #4
 80074ea:	d101      	bne.n	80074f0 <f_readdir+0x70>
 80074ec:	2300      	movs	r3, #0
 80074ee:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80074f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3710      	adds	r7, #16
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}

080074fa <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 80074fa:	b580      	push	{r7, lr}
 80074fc:	b084      	sub	sp, #16
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
 8007502:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 8007504:	6839      	ldr	r1, [r7, #0]
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f7ff ffba 	bl	8007480 <f_readdir>
 800750c:	4603      	mov	r3, r0
 800750e:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 8007510:	7bfb      	ldrb	r3, [r7, #15]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d114      	bne.n	8007540 <f_findnext+0x46>
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d011      	beq.n	8007540 <f_findnext+0x46>
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	7d9b      	ldrb	r3, [r3, #22]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00d      	beq.n	8007540 <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	f103 0116 	add.w	r1, r3, #22
 800752e:	2300      	movs	r3, #0
 8007530:	2200      	movs	r2, #0
 8007532:	f7fe fb14 	bl	8005b5e <pattern_matching>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d100      	bne.n	800753e <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 800753c:	e7e2      	b.n	8007504 <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800753e:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 8007540:	7bfb      	ldrb	r3, [r7, #15]
}
 8007542:	4618      	mov	r0, r3
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}

0800754a <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 800754a:	b580      	push	{r7, lr}
 800754c:	b086      	sub	sp, #24
 800754e:	af00      	add	r7, sp, #0
 8007550:	60f8      	str	r0, [r7, #12]
 8007552:	60b9      	str	r1, [r7, #8]
 8007554:	607a      	str	r2, [r7, #4]
 8007556:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	683a      	ldr	r2, [r7, #0]
 800755c:	635a      	str	r2, [r3, #52]	; 0x34
	res = f_opendir(dp, path);		/* Open the target directory */
 800755e:	6879      	ldr	r1, [r7, #4]
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f7ff fef4 	bl	800734e <f_opendir>
 8007566:	4603      	mov	r3, r0
 8007568:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800756a:	7dfb      	ldrb	r3, [r7, #23]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d105      	bne.n	800757c <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 8007570:	68b9      	ldr	r1, [r7, #8]
 8007572:	68f8      	ldr	r0, [r7, #12]
 8007574:	f7ff ffc1 	bl	80074fa <f_findnext>
 8007578:	4603      	mov	r3, r0
 800757a:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 800757c:	7dfb      	ldrb	r3, [r7, #23]
}
 800757e:	4618      	mov	r0, r3
 8007580:	3718      	adds	r7, #24
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b092      	sub	sp, #72	; 0x48
 800758a:	af00      	add	r7, sp, #0
 800758c:	60f8      	str	r0, [r7, #12]
 800758e:	60b9      	str	r1, [r7, #8]
 8007590:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8007592:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8007596:	f107 030c 	add.w	r3, r7, #12
 800759a:	2200      	movs	r2, #0
 800759c:	4618      	mov	r0, r3
 800759e:	f7fe fe6b 	bl	8006278 <find_volume>
 80075a2:	4603      	mov	r3, r0
 80075a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80075a8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	f040 8099 	bne.w	80076e4 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80075b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80075b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ba:	699a      	ldr	r2, [r3, #24]
 80075bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075be:	69db      	ldr	r3, [r3, #28]
 80075c0:	3b02      	subs	r3, #2
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d804      	bhi.n	80075d0 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80075c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c8:	699a      	ldr	r2, [r3, #24]
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	601a      	str	r2, [r3, #0]
 80075ce:	e089      	b.n	80076e4 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80075d0:	2300      	movs	r3, #0
 80075d2:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80075d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d128      	bne.n	800762e <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80075dc:	2302      	movs	r3, #2
 80075de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e2:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80075e4:	f107 0314 	add.w	r3, r7, #20
 80075e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80075ea:	4618      	mov	r0, r3
 80075ec:	f7fd f81b 	bl	8004626 <get_fat>
 80075f0:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80075f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075f8:	d103      	bne.n	8007602 <f_getfree+0x7c>
 80075fa:	2301      	movs	r3, #1
 80075fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007600:	e063      	b.n	80076ca <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8007602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007604:	2b01      	cmp	r3, #1
 8007606:	d103      	bne.n	8007610 <f_getfree+0x8a>
 8007608:	2302      	movs	r3, #2
 800760a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800760e:	e05c      	b.n	80076ca <f_getfree+0x144>
					if (stat == 0) nfree++;
 8007610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007612:	2b00      	cmp	r3, #0
 8007614:	d102      	bne.n	800761c <f_getfree+0x96>
 8007616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007618:	3301      	adds	r3, #1
 800761a:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800761c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800761e:	3301      	adds	r3, #1
 8007620:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007624:	69db      	ldr	r3, [r3, #28]
 8007626:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007628:	429a      	cmp	r2, r3
 800762a:	d3db      	bcc.n	80075e4 <f_getfree+0x5e>
 800762c:	e04d      	b.n	80076ca <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800762e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007630:	69db      	ldr	r3, [r3, #28]
 8007632:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007638:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800763a:	2300      	movs	r3, #0
 800763c:	637b      	str	r3, [r7, #52]	; 0x34
 800763e:	2300      	movs	r3, #0
 8007640:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8007642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007644:	2b00      	cmp	r3, #0
 8007646:	d113      	bne.n	8007670 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8007648:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800764a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800764c:	1c5a      	adds	r2, r3, #1
 800764e:	63ba      	str	r2, [r7, #56]	; 0x38
 8007650:	4619      	mov	r1, r3
 8007652:	f7fc ff2b 	bl	80044ac <move_window>
 8007656:	4603      	mov	r3, r0
 8007658:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800765c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007660:	2b00      	cmp	r3, #0
 8007662:	d131      	bne.n	80076c8 <f_getfree+0x142>
							p = fs->win;
 8007664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007666:	3338      	adds	r3, #56	; 0x38
 8007668:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800766a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766c:	899b      	ldrh	r3, [r3, #12]
 800766e:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8007670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	2b02      	cmp	r3, #2
 8007676:	d10f      	bne.n	8007698 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8007678:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800767a:	f7fc fc67 	bl	8003f4c <ld_word>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d102      	bne.n	800768a <f_getfree+0x104>
 8007684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007686:	3301      	adds	r3, #1
 8007688:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800768a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768c:	3302      	adds	r3, #2
 800768e:	633b      	str	r3, [r7, #48]	; 0x30
 8007690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007692:	3b02      	subs	r3, #2
 8007694:	637b      	str	r3, [r7, #52]	; 0x34
 8007696:	e010      	b.n	80076ba <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8007698:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800769a:	f7fc fc6f 	bl	8003f7c <ld_dword>
 800769e:	4603      	mov	r3, r0
 80076a0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d102      	bne.n	80076ae <f_getfree+0x128>
 80076a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076aa:	3301      	adds	r3, #1
 80076ac:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 80076ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b0:	3304      	adds	r3, #4
 80076b2:	633b      	str	r3, [r7, #48]	; 0x30
 80076b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076b6:	3b04      	subs	r3, #4
 80076b8:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 80076ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076bc:	3b01      	subs	r3, #1
 80076be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d1bd      	bne.n	8007642 <f_getfree+0xbc>
 80076c6:	e000      	b.n	80076ca <f_getfree+0x144>
							if (res != FR_OK) break;
 80076c8:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80076ce:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80076d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80076d4:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80076d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d8:	791a      	ldrb	r2, [r3, #4]
 80076da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076dc:	f042 0201 	orr.w	r2, r2, #1
 80076e0:	b2d2      	uxtb	r2, r2
 80076e2:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80076e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3748      	adds	r7, #72	; 0x48
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b088      	sub	sp, #32
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	607a      	str	r2, [r7, #4]
	int n = 0;
 80076fc:	2300      	movs	r3, #0
 80076fe:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007704:	e01b      	b.n	800773e <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8007706:	f107 0310 	add.w	r3, r7, #16
 800770a:	f107 0114 	add.w	r1, r7, #20
 800770e:	2201      	movs	r2, #1
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f7ff fa81 	bl	8006c18 <f_read>
		if (rc != 1) break;
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	2b01      	cmp	r3, #1
 800771a:	d116      	bne.n	800774a <f_gets+0x5a>
		c = s[0];
 800771c:	7d3b      	ldrb	r3, [r7, #20]
 800771e:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8007720:	7dfb      	ldrb	r3, [r7, #23]
 8007722:	2b0d      	cmp	r3, #13
 8007724:	d100      	bne.n	8007728 <f_gets+0x38>
 8007726:	e00a      	b.n	800773e <f_gets+0x4e>
		*p++ = c;
 8007728:	69bb      	ldr	r3, [r7, #24]
 800772a:	1c5a      	adds	r2, r3, #1
 800772c:	61ba      	str	r2, [r7, #24]
 800772e:	7dfa      	ldrb	r2, [r7, #23]
 8007730:	701a      	strb	r2, [r3, #0]
		n++;
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	3301      	adds	r3, #1
 8007736:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8007738:	7dfb      	ldrb	r3, [r7, #23]
 800773a:	2b0a      	cmp	r3, #10
 800773c:	d007      	beq.n	800774e <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	3b01      	subs	r3, #1
 8007742:	69fa      	ldr	r2, [r7, #28]
 8007744:	429a      	cmp	r2, r3
 8007746:	dbde      	blt.n	8007706 <f_gets+0x16>
 8007748:	e002      	b.n	8007750 <f_gets+0x60>
		if (rc != 1) break;
 800774a:	bf00      	nop
 800774c:	e000      	b.n	8007750 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800774e:	bf00      	nop
	}
	*p = 0;
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	2200      	movs	r2, #0
 8007754:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d001      	beq.n	8007760 <f_gets+0x70>
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	e000      	b.n	8007762 <f_gets+0x72>
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	3720      	adds	r7, #32
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800776a:	b580      	push	{r7, lr}
 800776c:	b084      	sub	sp, #16
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
 8007772:	460b      	mov	r3, r1
 8007774:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8007776:	78fb      	ldrb	r3, [r7, #3]
 8007778:	2b0a      	cmp	r3, #10
 800777a:	d103      	bne.n	8007784 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800777c:	210d      	movs	r1, #13
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f7ff fff3 	bl	800776a <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2b00      	cmp	r3, #0
 800778e:	db25      	blt.n	80077dc <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	1c5a      	adds	r2, r3, #1
 8007794:	60fa      	str	r2, [r7, #12]
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	4413      	add	r3, r2
 800779a:	78fa      	ldrb	r2, [r7, #3]
 800779c:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2b3c      	cmp	r3, #60	; 0x3c
 80077a2:	dd12      	ble.n	80077ca <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6818      	ldr	r0, [r3, #0]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f103 010c 	add.w	r1, r3, #12
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	f107 0308 	add.w	r3, r7, #8
 80077b4:	f7ff fb8f 	bl	8006ed6 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80077b8:	68ba      	ldr	r2, [r7, #8]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d101      	bne.n	80077c4 <putc_bfd+0x5a>
 80077c0:	2300      	movs	r3, #0
 80077c2:	e001      	b.n	80077c8 <putc_bfd+0x5e>
 80077c4:	f04f 33ff 	mov.w	r3, #4294967295
 80077c8:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	68fa      	ldr	r2, [r7, #12]
 80077ce:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	1c5a      	adds	r2, r3, #1
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	609a      	str	r2, [r3, #8]
 80077da:	e000      	b.n	80077de <putc_bfd+0x74>
	if (i < 0) return;
 80077dc:	bf00      	nop
}
 80077de:	3710      	adds	r7, #16
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	db17      	blt.n	8007824 <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6818      	ldr	r0, [r3, #0]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f103 010c 	add.w	r1, r3, #12
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	461a      	mov	r2, r3
 8007804:	f107 030c 	add.w	r3, r7, #12
 8007808:	f7ff fb65 	bl	8006ed6 <f_write>
 800780c:	4603      	mov	r3, r0
 800780e:	2b00      	cmp	r3, #0
 8007810:	d108      	bne.n	8007824 <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	461a      	mov	r2, r3
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	429a      	cmp	r2, r3
 800781c:	d102      	bne.n	8007824 <putc_flush+0x40>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	e001      	b.n	8007828 <putc_flush+0x44>
	return EOF;
 8007824:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007828:	4618      	mov	r0, r3
 800782a:	3710      	adds	r7, #16
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	683a      	ldr	r2, [r7, #0]
 800783e:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2200      	movs	r2, #0
 8007844:	605a      	str	r2, [r3, #4]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	685a      	ldr	r2, [r3, #4]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	609a      	str	r2, [r3, #8]
}
 800784e:	bf00      	nop
 8007850:	370c      	adds	r7, #12
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr

0800785a <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800785a:	b580      	push	{r7, lr}
 800785c:	b096      	sub	sp, #88	; 0x58
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
 8007862:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8007864:	f107 030c 	add.w	r3, r7, #12
 8007868:	6839      	ldr	r1, [r7, #0]
 800786a:	4618      	mov	r0, r3
 800786c:	f7ff ffe0 	bl	8007830 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8007870:	e009      	b.n	8007886 <f_puts+0x2c>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	1c5a      	adds	r2, r3, #1
 8007876:	607a      	str	r2, [r7, #4]
 8007878:	781a      	ldrb	r2, [r3, #0]
 800787a:	f107 030c 	add.w	r3, r7, #12
 800787e:	4611      	mov	r1, r2
 8007880:	4618      	mov	r0, r3
 8007882:	f7ff ff72 	bl	800776a <putc_bfd>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d1f1      	bne.n	8007872 <f_puts+0x18>
	return putc_flush(&pb);
 800788e:	f107 030c 	add.w	r3, r7, #12
 8007892:	4618      	mov	r0, r3
 8007894:	f7ff ffa6 	bl	80077e4 <putc_flush>
 8007898:	4603      	mov	r3, r0
}
 800789a:	4618      	mov	r0, r3
 800789c:	3758      	adds	r7, #88	; 0x58
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
	...

080078a4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b087      	sub	sp, #28
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	60b9      	str	r1, [r7, #8]
 80078ae:	4613      	mov	r3, r2
 80078b0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80078b2:	2301      	movs	r3, #1
 80078b4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80078b6:	2300      	movs	r3, #0
 80078b8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80078ba:	4b1f      	ldr	r3, [pc, #124]	; (8007938 <FATFS_LinkDriverEx+0x94>)
 80078bc:	7a5b      	ldrb	r3, [r3, #9]
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d131      	bne.n	8007928 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80078c4:	4b1c      	ldr	r3, [pc, #112]	; (8007938 <FATFS_LinkDriverEx+0x94>)
 80078c6:	7a5b      	ldrb	r3, [r3, #9]
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	461a      	mov	r2, r3
 80078cc:	4b1a      	ldr	r3, [pc, #104]	; (8007938 <FATFS_LinkDriverEx+0x94>)
 80078ce:	2100      	movs	r1, #0
 80078d0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80078d2:	4b19      	ldr	r3, [pc, #100]	; (8007938 <FATFS_LinkDriverEx+0x94>)
 80078d4:	7a5b      	ldrb	r3, [r3, #9]
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	4a17      	ldr	r2, [pc, #92]	; (8007938 <FATFS_LinkDriverEx+0x94>)
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	4413      	add	r3, r2
 80078de:	68fa      	ldr	r2, [r7, #12]
 80078e0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80078e2:	4b15      	ldr	r3, [pc, #84]	; (8007938 <FATFS_LinkDriverEx+0x94>)
 80078e4:	7a5b      	ldrb	r3, [r3, #9]
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	461a      	mov	r2, r3
 80078ea:	4b13      	ldr	r3, [pc, #76]	; (8007938 <FATFS_LinkDriverEx+0x94>)
 80078ec:	4413      	add	r3, r2
 80078ee:	79fa      	ldrb	r2, [r7, #7]
 80078f0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80078f2:	4b11      	ldr	r3, [pc, #68]	; (8007938 <FATFS_LinkDriverEx+0x94>)
 80078f4:	7a5b      	ldrb	r3, [r3, #9]
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	1c5a      	adds	r2, r3, #1
 80078fa:	b2d1      	uxtb	r1, r2
 80078fc:	4a0e      	ldr	r2, [pc, #56]	; (8007938 <FATFS_LinkDriverEx+0x94>)
 80078fe:	7251      	strb	r1, [r2, #9]
 8007900:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007902:	7dbb      	ldrb	r3, [r7, #22]
 8007904:	3330      	adds	r3, #48	; 0x30
 8007906:	b2da      	uxtb	r2, r3
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	3301      	adds	r3, #1
 8007910:	223a      	movs	r2, #58	; 0x3a
 8007912:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	3302      	adds	r3, #2
 8007918:	222f      	movs	r2, #47	; 0x2f
 800791a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	3303      	adds	r3, #3
 8007920:	2200      	movs	r2, #0
 8007922:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007924:	2300      	movs	r3, #0
 8007926:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007928:	7dfb      	ldrb	r3, [r7, #23]
}
 800792a:	4618      	mov	r0, r3
 800792c:	371c      	adds	r7, #28
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr
 8007936:	bf00      	nop
 8007938:	200002c8 	.word	0x200002c8

0800793c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007946:	2200      	movs	r2, #0
 8007948:	6839      	ldr	r1, [r7, #0]
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f7ff ffaa 	bl	80078a4 <FATFS_LinkDriverEx>
 8007950:	4603      	mov	r3, r0
}
 8007952:	4618      	mov	r0, r3
 8007954:	3708      	adds	r7, #8
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
	...

0800795c <ff_convert>:

WCHAR ff_convert (	/* Converted code, 0 means conversion error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800795c:	b480      	push	{r7}
 800795e:	b089      	sub	sp, #36	; 0x24
 8007960:	af00      	add	r7, sp, #0
 8007962:	4603      	mov	r3, r0
 8007964:	6039      	str	r1, [r7, #0]
 8007966:	80fb      	strh	r3, [r7, #6]
	const WCHAR *p;
	WCHAR c;
	int i, n, li, hi;


	if (chr < 0x80) {	/* ASCII */
 8007968:	88fb      	ldrh	r3, [r7, #6]
 800796a:	2b7f      	cmp	r3, #127	; 0x7f
 800796c:	d802      	bhi.n	8007974 <ff_convert+0x18>
		c = chr;
 800796e:	88fb      	ldrh	r3, [r7, #6]
 8007970:	837b      	strh	r3, [r7, #26]
 8007972:	e047      	b.n	8007a04 <ff_convert+0xa8>
	} else {
		if (dir) {		/* OEM code to unicode */
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d005      	beq.n	8007986 <ff_convert+0x2a>
			p = oem2uni;
 800797a:	4b26      	ldr	r3, [pc, #152]	; (8007a14 <ff_convert+0xb8>)
 800797c:	61fb      	str	r3, [r7, #28]
			hi = sizeof oem2uni / 4 - 1;
 800797e:	f244 2398 	movw	r3, #17048	; 0x4298
 8007982:	60bb      	str	r3, [r7, #8]
 8007984:	e004      	b.n	8007990 <ff_convert+0x34>
		} else {		/* Unicode to OEM code */
			p = uni2oem;
 8007986:	4b24      	ldr	r3, [pc, #144]	; (8007a18 <ff_convert+0xbc>)
 8007988:	61fb      	str	r3, [r7, #28]
			hi = sizeof uni2oem / 4 - 1;
 800798a:	f244 2398 	movw	r3, #17048	; 0x4298
 800798e:	60bb      	str	r3, [r7, #8]
		}
		li = 0;
 8007990:	2300      	movs	r3, #0
 8007992:	60fb      	str	r3, [r7, #12]
		for (n = 16; n; n--) {
 8007994:	2310      	movs	r3, #16
 8007996:	613b      	str	r3, [r7, #16]
 8007998:	e023      	b.n	80079e2 <ff_convert+0x86>
			i = li + (hi - li) / 2;
 800799a:	68ba      	ldr	r2, [r7, #8]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	1ad3      	subs	r3, r2, r3
 80079a0:	0fda      	lsrs	r2, r3, #31
 80079a2:	4413      	add	r3, r2
 80079a4:	105b      	asrs	r3, r3, #1
 80079a6:	461a      	mov	r2, r3
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	4413      	add	r3, r2
 80079ac:	617b      	str	r3, [r7, #20]
			if (chr == p[i * 2]) break;
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	461a      	mov	r2, r3
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	4413      	add	r3, r2
 80079b8:	881b      	ldrh	r3, [r3, #0]
 80079ba:	88fa      	ldrh	r2, [r7, #6]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d014      	beq.n	80079ea <ff_convert+0x8e>
			if (chr > p[i * 2])
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	461a      	mov	r2, r3
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	4413      	add	r3, r2
 80079ca:	881b      	ldrh	r3, [r3, #0]
 80079cc:	88fa      	ldrh	r2, [r7, #6]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d902      	bls.n	80079d8 <ff_convert+0x7c>
				li = i;
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	60fb      	str	r3, [r7, #12]
 80079d6:	e001      	b.n	80079dc <ff_convert+0x80>
			else
				hi = i;
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	60bb      	str	r3, [r7, #8]
		for (n = 16; n; n--) {
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	3b01      	subs	r3, #1
 80079e0:	613b      	str	r3, [r7, #16]
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1d8      	bne.n	800799a <ff_convert+0x3e>
 80079e8:	e000      	b.n	80079ec <ff_convert+0x90>
			if (chr == p[i * 2]) break;
 80079ea:	bf00      	nop
		}
		c = n ? p[i * 2 + 1] : 0;
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d006      	beq.n	8007a00 <ff_convert+0xa4>
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	3302      	adds	r3, #2
 80079f8:	69fa      	ldr	r2, [r7, #28]
 80079fa:	4413      	add	r3, r2
 80079fc:	881b      	ldrh	r3, [r3, #0]
 80079fe:	e000      	b.n	8007a02 <ff_convert+0xa6>
 8007a00:	2300      	movs	r3, #0
 8007a02:	837b      	strh	r3, [r7, #26]
	}

	return c;
 8007a04:	8b7b      	ldrh	r3, [r7, #26]
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3724      	adds	r7, #36	; 0x24
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	0801b248 	.word	0x0801b248
 8007a18:	0800a7e4 	.word	0x0800a7e4

08007a1c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b087      	sub	sp, #28
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	4603      	mov	r3, r0
 8007a24:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007a26:	88fb      	ldrh	r3, [r7, #6]
 8007a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a2c:	d201      	bcs.n	8007a32 <ff_wtoupper+0x16>
 8007a2e:	4b3e      	ldr	r3, [pc, #248]	; (8007b28 <ff_wtoupper+0x10c>)
 8007a30:	e000      	b.n	8007a34 <ff_wtoupper+0x18>
 8007a32:	4b3e      	ldr	r3, [pc, #248]	; (8007b2c <ff_wtoupper+0x110>)
 8007a34:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	1c9a      	adds	r2, r3, #2
 8007a3a:	617a      	str	r2, [r7, #20]
 8007a3c:	881b      	ldrh	r3, [r3, #0]
 8007a3e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8007a40:	8a7b      	ldrh	r3, [r7, #18]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d068      	beq.n	8007b18 <ff_wtoupper+0xfc>
 8007a46:	88fa      	ldrh	r2, [r7, #6]
 8007a48:	8a7b      	ldrh	r3, [r7, #18]
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d364      	bcc.n	8007b18 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	1c9a      	adds	r2, r3, #2
 8007a52:	617a      	str	r2, [r7, #20]
 8007a54:	881b      	ldrh	r3, [r3, #0]
 8007a56:	823b      	strh	r3, [r7, #16]
 8007a58:	8a3b      	ldrh	r3, [r7, #16]
 8007a5a:	0a1b      	lsrs	r3, r3, #8
 8007a5c:	81fb      	strh	r3, [r7, #14]
 8007a5e:	8a3b      	ldrh	r3, [r7, #16]
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8007a64:	88fa      	ldrh	r2, [r7, #6]
 8007a66:	8a79      	ldrh	r1, [r7, #18]
 8007a68:	8a3b      	ldrh	r3, [r7, #16]
 8007a6a:	440b      	add	r3, r1
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	da49      	bge.n	8007b04 <ff_wtoupper+0xe8>
			switch (cmd) {
 8007a70:	89fb      	ldrh	r3, [r7, #14]
 8007a72:	2b08      	cmp	r3, #8
 8007a74:	d84f      	bhi.n	8007b16 <ff_wtoupper+0xfa>
 8007a76:	a201      	add	r2, pc, #4	; (adr r2, 8007a7c <ff_wtoupper+0x60>)
 8007a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a7c:	08007aa1 	.word	0x08007aa1
 8007a80:	08007ab3 	.word	0x08007ab3
 8007a84:	08007ac9 	.word	0x08007ac9
 8007a88:	08007ad1 	.word	0x08007ad1
 8007a8c:	08007ad9 	.word	0x08007ad9
 8007a90:	08007ae1 	.word	0x08007ae1
 8007a94:	08007ae9 	.word	0x08007ae9
 8007a98:	08007af1 	.word	0x08007af1
 8007a9c:	08007af9 	.word	0x08007af9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007aa0:	88fa      	ldrh	r2, [r7, #6]
 8007aa2:	8a7b      	ldrh	r3, [r7, #18]
 8007aa4:	1ad3      	subs	r3, r2, r3
 8007aa6:	005b      	lsls	r3, r3, #1
 8007aa8:	697a      	ldr	r2, [r7, #20]
 8007aaa:	4413      	add	r3, r2
 8007aac:	881b      	ldrh	r3, [r3, #0]
 8007aae:	80fb      	strh	r3, [r7, #6]
 8007ab0:	e027      	b.n	8007b02 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8007ab2:	88fa      	ldrh	r2, [r7, #6]
 8007ab4:	8a7b      	ldrh	r3, [r7, #18]
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	f003 0301 	and.w	r3, r3, #1
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	88fa      	ldrh	r2, [r7, #6]
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	80fb      	strh	r3, [r7, #6]
 8007ac6:	e01c      	b.n	8007b02 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007ac8:	88fb      	ldrh	r3, [r7, #6]
 8007aca:	3b10      	subs	r3, #16
 8007acc:	80fb      	strh	r3, [r7, #6]
 8007ace:	e018      	b.n	8007b02 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007ad0:	88fb      	ldrh	r3, [r7, #6]
 8007ad2:	3b20      	subs	r3, #32
 8007ad4:	80fb      	strh	r3, [r7, #6]
 8007ad6:	e014      	b.n	8007b02 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007ad8:	88fb      	ldrh	r3, [r7, #6]
 8007ada:	3b30      	subs	r3, #48	; 0x30
 8007adc:	80fb      	strh	r3, [r7, #6]
 8007ade:	e010      	b.n	8007b02 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007ae0:	88fb      	ldrh	r3, [r7, #6]
 8007ae2:	3b1a      	subs	r3, #26
 8007ae4:	80fb      	strh	r3, [r7, #6]
 8007ae6:	e00c      	b.n	8007b02 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007ae8:	88fb      	ldrh	r3, [r7, #6]
 8007aea:	3308      	adds	r3, #8
 8007aec:	80fb      	strh	r3, [r7, #6]
 8007aee:	e008      	b.n	8007b02 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8007af0:	88fb      	ldrh	r3, [r7, #6]
 8007af2:	3b50      	subs	r3, #80	; 0x50
 8007af4:	80fb      	strh	r3, [r7, #6]
 8007af6:	e004      	b.n	8007b02 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007af8:	88fb      	ldrh	r3, [r7, #6]
 8007afa:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8007afe:	80fb      	strh	r3, [r7, #6]
 8007b00:	bf00      	nop
			}
			break;
 8007b02:	e008      	b.n	8007b16 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007b04:	89fb      	ldrh	r3, [r7, #14]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d195      	bne.n	8007a36 <ff_wtoupper+0x1a>
 8007b0a:	8a3b      	ldrh	r3, [r7, #16]
 8007b0c:	005b      	lsls	r3, r3, #1
 8007b0e:	697a      	ldr	r2, [r7, #20]
 8007b10:	4413      	add	r3, r2
 8007b12:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007b14:	e78f      	b.n	8007a36 <ff_wtoupper+0x1a>
			break;
 8007b16:	bf00      	nop
	}

	return chr;
 8007b18:	88fb      	ldrh	r3, [r7, #6]
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	371c      	adds	r7, #28
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop
 8007b28:	0802bcac 	.word	0x0802bcac
 8007b2c:	0802bea0 	.word	0x0802bea0

08007b30 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007b34:	4904      	ldr	r1, [pc, #16]	; (8007b48 <MX_FATFS_Init+0x18>)
 8007b36:	4805      	ldr	r0, [pc, #20]	; (8007b4c <MX_FATFS_Init+0x1c>)
 8007b38:	f7ff ff00 	bl	800793c <FATFS_LinkDriver>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	461a      	mov	r2, r3
 8007b40:	4b03      	ldr	r3, [pc, #12]	; (8007b50 <MX_FATFS_Init+0x20>)
 8007b42:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8007b44:	bf00      	nop
 8007b46:	bd80      	pop	{r7, pc}
 8007b48:	200002e8 	.word	0x200002e8
 8007b4c:	2000000c 	.word	0x2000000c
 8007b50:	200002ec 	.word	0x200002ec

08007b54 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007b54:	b480      	push	{r7}
 8007b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007b58:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007b6e:	4804      	ldr	r0, [pc, #16]	; (8007b80 <SELECT+0x1c>)
 8007b70:	f7f9 fe56 	bl	8001820 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8007b74:	2001      	movs	r0, #1
 8007b76:	f7f9 f973 	bl	8000e60 <HAL_Delay>
}
 8007b7a:	bf00      	nop
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	40020400 	.word	0x40020400

08007b84 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007b8e:	4804      	ldr	r0, [pc, #16]	; (8007ba0 <DESELECT+0x1c>)
 8007b90:	f7f9 fe46 	bl	8001820 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8007b94:	2001      	movs	r0, #1
 8007b96:	f7f9 f963 	bl	8000e60 <HAL_Delay>
}
 8007b9a:	bf00      	nop
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	40020400 	.word	0x40020400

08007ba4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b082      	sub	sp, #8
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	4603      	mov	r3, r0
 8007bac:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8007bae:	bf00      	nop
 8007bb0:	4b08      	ldr	r3, [pc, #32]	; (8007bd4 <SPI_TxByte+0x30>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	f003 0302 	and.w	r3, r3, #2
 8007bba:	2b02      	cmp	r3, #2
 8007bbc:	d1f8      	bne.n	8007bb0 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8007bbe:	1df9      	adds	r1, r7, #7
 8007bc0:	2364      	movs	r3, #100	; 0x64
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	4803      	ldr	r0, [pc, #12]	; (8007bd4 <SPI_TxByte+0x30>)
 8007bc6:	f7fa fb12 	bl	80021ee <HAL_SPI_Transmit>
}
 8007bca:	bf00      	nop
 8007bcc:	3708      	adds	r7, #8
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	bf00      	nop
 8007bd4:	20002598 	.word	0x20002598

08007bd8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	460b      	mov	r3, r1
 8007be2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8007be4:	bf00      	nop
 8007be6:	4b08      	ldr	r3, [pc, #32]	; (8007c08 <SPI_TxBuffer+0x30>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	f003 0302 	and.w	r3, r3, #2
 8007bf0:	2b02      	cmp	r3, #2
 8007bf2:	d1f8      	bne.n	8007be6 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8007bf4:	887a      	ldrh	r2, [r7, #2]
 8007bf6:	2364      	movs	r3, #100	; 0x64
 8007bf8:	6879      	ldr	r1, [r7, #4]
 8007bfa:	4803      	ldr	r0, [pc, #12]	; (8007c08 <SPI_TxBuffer+0x30>)
 8007bfc:	f7fa faf7 	bl	80021ee <HAL_SPI_Transmit>
}
 8007c00:	bf00      	nop
 8007c02:	3708      	adds	r7, #8
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	20002598 	.word	0x20002598

08007c0c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8007c12:	23ff      	movs	r3, #255	; 0xff
 8007c14:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8007c16:	bf00      	nop
 8007c18:	4b09      	ldr	r3, [pc, #36]	; (8007c40 <SPI_RxByte+0x34>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	f003 0302 	and.w	r3, r3, #2
 8007c22:	2b02      	cmp	r3, #2
 8007c24:	d1f8      	bne.n	8007c18 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8007c26:	1dba      	adds	r2, r7, #6
 8007c28:	1df9      	adds	r1, r7, #7
 8007c2a:	2364      	movs	r3, #100	; 0x64
 8007c2c:	9300      	str	r3, [sp, #0]
 8007c2e:	2301      	movs	r3, #1
 8007c30:	4803      	ldr	r0, [pc, #12]	; (8007c40 <SPI_RxByte+0x34>)
 8007c32:	f7fa fc3b 	bl	80024ac <HAL_SPI_TransmitReceive>

	return data;
 8007c36:	79bb      	ldrb	r3, [r7, #6]
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3708      	adds	r7, #8
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}
 8007c40:	20002598 	.word	0x20002598

08007c44 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8007c4c:	f7ff ffde 	bl	8007c0c <SPI_RxByte>
 8007c50:	4603      	mov	r3, r0
 8007c52:	461a      	mov	r2, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	701a      	strb	r2, [r3, #0]
}
 8007c58:	bf00      	nop
 8007c5a:	3708      	adds	r7, #8
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b082      	sub	sp, #8
 8007c64:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8007c66:	4b0a      	ldr	r3, [pc, #40]	; (8007c90 <SD_ReadyWait+0x30>)
 8007c68:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007c6c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8007c6e:	f7ff ffcd 	bl	8007c0c <SPI_RxByte>
 8007c72:	4603      	mov	r3, r0
 8007c74:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8007c76:	79fb      	ldrb	r3, [r7, #7]
 8007c78:	2bff      	cmp	r3, #255	; 0xff
 8007c7a:	d003      	beq.n	8007c84 <SD_ReadyWait+0x24>
 8007c7c:	4b04      	ldr	r3, [pc, #16]	; (8007c90 <SD_ReadyWait+0x30>)
 8007c7e:	881b      	ldrh	r3, [r3, #0]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d1f4      	bne.n	8007c6e <SD_ReadyWait+0xe>

	return res;
 8007c84:	79fb      	ldrb	r3, [r7, #7]
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3708      	adds	r7, #8
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	20002358 	.word	0x20002358

08007c94 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8007c9a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8007c9e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8007ca0:	f7ff ff70 	bl	8007b84 <DESELECT>
	for(int i = 0; i < 10; i++)
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	60bb      	str	r3, [r7, #8]
 8007ca8:	e005      	b.n	8007cb6 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8007caa:	20ff      	movs	r0, #255	; 0xff
 8007cac:	f7ff ff7a 	bl	8007ba4 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	60bb      	str	r3, [r7, #8]
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	2b09      	cmp	r3, #9
 8007cba:	ddf6      	ble.n	8007caa <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8007cbc:	f7ff ff52 	bl	8007b64 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8007cc0:	2340      	movs	r3, #64	; 0x40
 8007cc2:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8007cd4:	2395      	movs	r3, #149	; 0x95
 8007cd6:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8007cd8:	463b      	mov	r3, r7
 8007cda:	2106      	movs	r1, #6
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f7ff ff7b 	bl	8007bd8 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8007ce2:	e002      	b.n	8007cea <SD_PowerOn+0x56>
	{
		cnt--;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8007cea:	f7ff ff8f 	bl	8007c0c <SPI_RxByte>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d002      	beq.n	8007cfa <SD_PowerOn+0x66>
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d1f4      	bne.n	8007ce4 <SD_PowerOn+0x50>
	}

	DESELECT();
 8007cfa:	f7ff ff43 	bl	8007b84 <DESELECT>
	SPI_TxByte(0XFF);
 8007cfe:	20ff      	movs	r0, #255	; 0xff
 8007d00:	f7ff ff50 	bl	8007ba4 <SPI_TxByte>

	PowerFlag = 1;
 8007d04:	4b03      	ldr	r3, [pc, #12]	; (8007d14 <SD_PowerOn+0x80>)
 8007d06:	2201      	movs	r2, #1
 8007d08:	701a      	strb	r2, [r3, #0]
}
 8007d0a:	bf00      	nop
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	200002d5 	.word	0x200002d5

08007d18 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8007d18:	b480      	push	{r7}
 8007d1a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8007d1c:	4b03      	ldr	r3, [pc, #12]	; (8007d2c <SD_PowerOff+0x14>)
 8007d1e:	2200      	movs	r2, #0
 8007d20:	701a      	strb	r2, [r3, #0]
}
 8007d22:	bf00      	nop
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr
 8007d2c:	200002d5 	.word	0x200002d5

08007d30 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8007d30:	b480      	push	{r7}
 8007d32:	af00      	add	r7, sp, #0
	return PowerFlag;
 8007d34:	4b03      	ldr	r3, [pc, #12]	; (8007d44 <SD_CheckPower+0x14>)
 8007d36:	781b      	ldrb	r3, [r3, #0]
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop
 8007d44:	200002d5 	.word	0x200002d5

08007d48 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8007d52:	4b13      	ldr	r3, [pc, #76]	; (8007da0 <SD_RxDataBlock+0x58>)
 8007d54:	22c8      	movs	r2, #200	; 0xc8
 8007d56:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8007d58:	f7ff ff58 	bl	8007c0c <SPI_RxByte>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8007d60:	7bfb      	ldrb	r3, [r7, #15]
 8007d62:	2bff      	cmp	r3, #255	; 0xff
 8007d64:	d103      	bne.n	8007d6e <SD_RxDataBlock+0x26>
 8007d66:	4b0e      	ldr	r3, [pc, #56]	; (8007da0 <SD_RxDataBlock+0x58>)
 8007d68:	881b      	ldrh	r3, [r3, #0]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d1f4      	bne.n	8007d58 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8007d6e:	7bfb      	ldrb	r3, [r7, #15]
 8007d70:	2bfe      	cmp	r3, #254	; 0xfe
 8007d72:	d001      	beq.n	8007d78 <SD_RxDataBlock+0x30>
 8007d74:	2300      	movs	r3, #0
 8007d76:	e00f      	b.n	8007d98 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	1c5a      	adds	r2, r3, #1
 8007d7c:	607a      	str	r2, [r7, #4]
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7ff ff60 	bl	8007c44 <SPI_RxBytePtr>
	} while(len--);
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	1e5a      	subs	r2, r3, #1
 8007d88:	603a      	str	r2, [r7, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d1f4      	bne.n	8007d78 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8007d8e:	f7ff ff3d 	bl	8007c0c <SPI_RxByte>
	SPI_RxByte();
 8007d92:	f7ff ff3b 	bl	8007c0c <SPI_RxByte>

	return TRUE;
 8007d96:	2301      	movs	r3, #1
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3710      	adds	r7, #16
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	2000235a 	.word	0x2000235a

08007da4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	460b      	mov	r3, r1
 8007dae:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8007db0:	2300      	movs	r3, #0
 8007db2:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8007db4:	f7ff ff54 	bl	8007c60 <SD_ReadyWait>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2bff      	cmp	r3, #255	; 0xff
 8007dbc:	d001      	beq.n	8007dc2 <SD_TxDataBlock+0x1e>
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	e02f      	b.n	8007e22 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8007dc2:	78fb      	ldrb	r3, [r7, #3]
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7ff feed 	bl	8007ba4 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8007dca:	78fb      	ldrb	r3, [r7, #3]
 8007dcc:	2bfd      	cmp	r3, #253	; 0xfd
 8007dce:	d020      	beq.n	8007e12 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8007dd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f7ff feff 	bl	8007bd8 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8007dda:	f7ff ff17 	bl	8007c0c <SPI_RxByte>
		SPI_RxByte();
 8007dde:	f7ff ff15 	bl	8007c0c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8007de2:	e00b      	b.n	8007dfc <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8007de4:	f7ff ff12 	bl	8007c0c <SPI_RxByte>
 8007de8:	4603      	mov	r3, r0
 8007dea:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8007dec:	7bfb      	ldrb	r3, [r7, #15]
 8007dee:	f003 031f 	and.w	r3, r3, #31
 8007df2:	2b05      	cmp	r3, #5
 8007df4:	d006      	beq.n	8007e04 <SD_TxDataBlock+0x60>
			i++;
 8007df6:	7bbb      	ldrb	r3, [r7, #14]
 8007df8:	3301      	adds	r3, #1
 8007dfa:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8007dfc:	7bbb      	ldrb	r3, [r7, #14]
 8007dfe:	2b40      	cmp	r3, #64	; 0x40
 8007e00:	d9f0      	bls.n	8007de4 <SD_TxDataBlock+0x40>
 8007e02:	e000      	b.n	8007e06 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8007e04:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8007e06:	bf00      	nop
 8007e08:	f7ff ff00 	bl	8007c0c <SPI_RxByte>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d0fa      	beq.n	8007e08 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8007e12:	7bfb      	ldrb	r3, [r7, #15]
 8007e14:	f003 031f 	and.w	r3, r3, #31
 8007e18:	2b05      	cmp	r3, #5
 8007e1a:	d101      	bne.n	8007e20 <SD_TxDataBlock+0x7c>
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e000      	b.n	8007e22 <SD_TxDataBlock+0x7e>

	return FALSE;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3710      	adds	r7, #16
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b084      	sub	sp, #16
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	4603      	mov	r3, r0
 8007e32:	6039      	str	r1, [r7, #0]
 8007e34:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8007e36:	f7ff ff13 	bl	8007c60 <SD_ReadyWait>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2bff      	cmp	r3, #255	; 0xff
 8007e3e:	d001      	beq.n	8007e44 <SD_SendCmd+0x1a>
 8007e40:	23ff      	movs	r3, #255	; 0xff
 8007e42:	e042      	b.n	8007eca <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8007e44:	79fb      	ldrb	r3, [r7, #7]
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7ff feac 	bl	8007ba4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	0e1b      	lsrs	r3, r3, #24
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	4618      	mov	r0, r3
 8007e54:	f7ff fea6 	bl	8007ba4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	0c1b      	lsrs	r3, r3, #16
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7ff fea0 	bl	8007ba4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	0a1b      	lsrs	r3, r3, #8
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7ff fe9a 	bl	8007ba4 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	4618      	mov	r0, r3
 8007e76:	f7ff fe95 	bl	8007ba4 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8007e7a:	79fb      	ldrb	r3, [r7, #7]
 8007e7c:	2b40      	cmp	r3, #64	; 0x40
 8007e7e:	d102      	bne.n	8007e86 <SD_SendCmd+0x5c>
 8007e80:	2395      	movs	r3, #149	; 0x95
 8007e82:	73fb      	strb	r3, [r7, #15]
 8007e84:	e007      	b.n	8007e96 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8007e86:	79fb      	ldrb	r3, [r7, #7]
 8007e88:	2b48      	cmp	r3, #72	; 0x48
 8007e8a:	d102      	bne.n	8007e92 <SD_SendCmd+0x68>
 8007e8c:	2387      	movs	r3, #135	; 0x87
 8007e8e:	73fb      	strb	r3, [r7, #15]
 8007e90:	e001      	b.n	8007e96 <SD_SendCmd+0x6c>
	else crc = 1;
 8007e92:	2301      	movs	r3, #1
 8007e94:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8007e96:	7bfb      	ldrb	r3, [r7, #15]
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f7ff fe83 	bl	8007ba4 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8007e9e:	79fb      	ldrb	r3, [r7, #7]
 8007ea0:	2b4c      	cmp	r3, #76	; 0x4c
 8007ea2:	d101      	bne.n	8007ea8 <SD_SendCmd+0x7e>
 8007ea4:	f7ff feb2 	bl	8007c0c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8007ea8:	230a      	movs	r3, #10
 8007eaa:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8007eac:	f7ff feae 	bl	8007c0c <SPI_RxByte>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8007eb4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	da05      	bge.n	8007ec8 <SD_SendCmd+0x9e>
 8007ebc:	7bbb      	ldrb	r3, [r7, #14]
 8007ebe:	3b01      	subs	r3, #1
 8007ec0:	73bb      	strb	r3, [r7, #14]
 8007ec2:	7bbb      	ldrb	r3, [r7, #14]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d1f1      	bne.n	8007eac <SD_SendCmd+0x82>

	return res;
 8007ec8:	7b7b      	ldrb	r3, [r7, #13]
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3710      	adds	r7, #16
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
	...

08007ed4 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8007ed4:	b590      	push	{r4, r7, lr}
 8007ed6:	b085      	sub	sp, #20
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	4603      	mov	r3, r0
 8007edc:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8007ede:	79fb      	ldrb	r3, [r7, #7]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d001      	beq.n	8007ee8 <SD_disk_initialize+0x14>
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	e0d1      	b.n	800808c <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8007ee8:	4b6a      	ldr	r3, [pc, #424]	; (8008094 <SD_disk_initialize+0x1c0>)
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	f003 0302 	and.w	r3, r3, #2
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d003      	beq.n	8007efe <SD_disk_initialize+0x2a>
 8007ef6:	4b67      	ldr	r3, [pc, #412]	; (8008094 <SD_disk_initialize+0x1c0>)
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	e0c6      	b.n	800808c <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8007efe:	f7ff fec9 	bl	8007c94 <SD_PowerOn>

	/* slave select */
	SELECT();
 8007f02:	f7ff fe2f 	bl	8007b64 <SELECT>

	/* check disk type */
	type = 0;
 8007f06:	2300      	movs	r3, #0
 8007f08:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8007f0a:	2100      	movs	r1, #0
 8007f0c:	2040      	movs	r0, #64	; 0x40
 8007f0e:	f7ff ff8c 	bl	8007e2a <SD_SendCmd>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	f040 80a1 	bne.w	800805c <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8007f1a:	4b5f      	ldr	r3, [pc, #380]	; (8008098 <SD_disk_initialize+0x1c4>)
 8007f1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007f20:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8007f22:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007f26:	2048      	movs	r0, #72	; 0x48
 8007f28:	f7ff ff7f 	bl	8007e2a <SD_SendCmd>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d155      	bne.n	8007fde <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8007f32:	2300      	movs	r3, #0
 8007f34:	73fb      	strb	r3, [r7, #15]
 8007f36:	e00c      	b.n	8007f52 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8007f38:	7bfc      	ldrb	r4, [r7, #15]
 8007f3a:	f7ff fe67 	bl	8007c0c <SPI_RxByte>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	461a      	mov	r2, r3
 8007f42:	f107 0310 	add.w	r3, r7, #16
 8007f46:	4423      	add	r3, r4
 8007f48:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8007f4c:	7bfb      	ldrb	r3, [r7, #15]
 8007f4e:	3301      	adds	r3, #1
 8007f50:	73fb      	strb	r3, [r7, #15]
 8007f52:	7bfb      	ldrb	r3, [r7, #15]
 8007f54:	2b03      	cmp	r3, #3
 8007f56:	d9ef      	bls.n	8007f38 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8007f58:	7abb      	ldrb	r3, [r7, #10]
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d17e      	bne.n	800805c <SD_disk_initialize+0x188>
 8007f5e:	7afb      	ldrb	r3, [r7, #11]
 8007f60:	2baa      	cmp	r3, #170	; 0xaa
 8007f62:	d17b      	bne.n	800805c <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8007f64:	2100      	movs	r1, #0
 8007f66:	2077      	movs	r0, #119	; 0x77
 8007f68:	f7ff ff5f 	bl	8007e2a <SD_SendCmd>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d807      	bhi.n	8007f82 <SD_disk_initialize+0xae>
 8007f72:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007f76:	2069      	movs	r0, #105	; 0x69
 8007f78:	f7ff ff57 	bl	8007e2a <SD_SendCmd>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d004      	beq.n	8007f8c <SD_disk_initialize+0xb8>
				} while (Timer1);
 8007f82:	4b45      	ldr	r3, [pc, #276]	; (8008098 <SD_disk_initialize+0x1c4>)
 8007f84:	881b      	ldrh	r3, [r3, #0]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d1ec      	bne.n	8007f64 <SD_disk_initialize+0x90>
 8007f8a:	e000      	b.n	8007f8e <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8007f8c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8007f8e:	4b42      	ldr	r3, [pc, #264]	; (8008098 <SD_disk_initialize+0x1c4>)
 8007f90:	881b      	ldrh	r3, [r3, #0]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d062      	beq.n	800805c <SD_disk_initialize+0x188>
 8007f96:	2100      	movs	r1, #0
 8007f98:	207a      	movs	r0, #122	; 0x7a
 8007f9a:	f7ff ff46 	bl	8007e2a <SD_SendCmd>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d15b      	bne.n	800805c <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	73fb      	strb	r3, [r7, #15]
 8007fa8:	e00c      	b.n	8007fc4 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8007faa:	7bfc      	ldrb	r4, [r7, #15]
 8007fac:	f7ff fe2e 	bl	8007c0c <SPI_RxByte>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	f107 0310 	add.w	r3, r7, #16
 8007fb8:	4423      	add	r3, r4
 8007fba:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8007fbe:	7bfb      	ldrb	r3, [r7, #15]
 8007fc0:	3301      	adds	r3, #1
 8007fc2:	73fb      	strb	r3, [r7, #15]
 8007fc4:	7bfb      	ldrb	r3, [r7, #15]
 8007fc6:	2b03      	cmp	r3, #3
 8007fc8:	d9ef      	bls.n	8007faa <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8007fca:	7a3b      	ldrb	r3, [r7, #8]
 8007fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d001      	beq.n	8007fd8 <SD_disk_initialize+0x104>
 8007fd4:	230c      	movs	r3, #12
 8007fd6:	e000      	b.n	8007fda <SD_disk_initialize+0x106>
 8007fd8:	2304      	movs	r3, #4
 8007fda:	73bb      	strb	r3, [r7, #14]
 8007fdc:	e03e      	b.n	800805c <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8007fde:	2100      	movs	r1, #0
 8007fe0:	2077      	movs	r0, #119	; 0x77
 8007fe2:	f7ff ff22 	bl	8007e2a <SD_SendCmd>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d808      	bhi.n	8007ffe <SD_disk_initialize+0x12a>
 8007fec:	2100      	movs	r1, #0
 8007fee:	2069      	movs	r0, #105	; 0x69
 8007ff0:	f7ff ff1b 	bl	8007e2a <SD_SendCmd>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d801      	bhi.n	8007ffe <SD_disk_initialize+0x12a>
 8007ffa:	2302      	movs	r3, #2
 8007ffc:	e000      	b.n	8008000 <SD_disk_initialize+0x12c>
 8007ffe:	2301      	movs	r3, #1
 8008000:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8008002:	7bbb      	ldrb	r3, [r7, #14]
 8008004:	2b02      	cmp	r3, #2
 8008006:	d10e      	bne.n	8008026 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8008008:	2100      	movs	r1, #0
 800800a:	2077      	movs	r0, #119	; 0x77
 800800c:	f7ff ff0d 	bl	8007e2a <SD_SendCmd>
 8008010:	4603      	mov	r3, r0
 8008012:	2b01      	cmp	r3, #1
 8008014:	d80e      	bhi.n	8008034 <SD_disk_initialize+0x160>
 8008016:	2100      	movs	r1, #0
 8008018:	2069      	movs	r0, #105	; 0x69
 800801a:	f7ff ff06 	bl	8007e2a <SD_SendCmd>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d107      	bne.n	8008034 <SD_disk_initialize+0x160>
 8008024:	e00c      	b.n	8008040 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8008026:	2100      	movs	r1, #0
 8008028:	2041      	movs	r0, #65	; 0x41
 800802a:	f7ff fefe 	bl	8007e2a <SD_SendCmd>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d004      	beq.n	800803e <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8008034:	4b18      	ldr	r3, [pc, #96]	; (8008098 <SD_disk_initialize+0x1c4>)
 8008036:	881b      	ldrh	r3, [r3, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1e2      	bne.n	8008002 <SD_disk_initialize+0x12e>
 800803c:	e000      	b.n	8008040 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800803e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8008040:	4b15      	ldr	r3, [pc, #84]	; (8008098 <SD_disk_initialize+0x1c4>)
 8008042:	881b      	ldrh	r3, [r3, #0]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d007      	beq.n	8008058 <SD_disk_initialize+0x184>
 8008048:	f44f 7100 	mov.w	r1, #512	; 0x200
 800804c:	2050      	movs	r0, #80	; 0x50
 800804e:	f7ff feec 	bl	8007e2a <SD_SendCmd>
 8008052:	4603      	mov	r3, r0
 8008054:	2b00      	cmp	r3, #0
 8008056:	d001      	beq.n	800805c <SD_disk_initialize+0x188>
 8008058:	2300      	movs	r3, #0
 800805a:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800805c:	4a0f      	ldr	r2, [pc, #60]	; (800809c <SD_disk_initialize+0x1c8>)
 800805e:	7bbb      	ldrb	r3, [r7, #14]
 8008060:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8008062:	f7ff fd8f 	bl	8007b84 <DESELECT>
	SPI_RxByte();
 8008066:	f7ff fdd1 	bl	8007c0c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800806a:	7bbb      	ldrb	r3, [r7, #14]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d008      	beq.n	8008082 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8008070:	4b08      	ldr	r3, [pc, #32]	; (8008094 <SD_disk_initialize+0x1c0>)
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	b2db      	uxtb	r3, r3
 8008076:	f023 0301 	bic.w	r3, r3, #1
 800807a:	b2da      	uxtb	r2, r3
 800807c:	4b05      	ldr	r3, [pc, #20]	; (8008094 <SD_disk_initialize+0x1c0>)
 800807e:	701a      	strb	r2, [r3, #0]
 8008080:	e001      	b.n	8008086 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8008082:	f7ff fe49 	bl	8007d18 <SD_PowerOff>
	}

	return Stat;
 8008086:	4b03      	ldr	r3, [pc, #12]	; (8008094 <SD_disk_initialize+0x1c0>)
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	b2db      	uxtb	r3, r3
}
 800808c:	4618      	mov	r0, r3
 800808e:	3714      	adds	r7, #20
 8008090:	46bd      	mov	sp, r7
 8008092:	bd90      	pop	{r4, r7, pc}
 8008094:	20000005 	.word	0x20000005
 8008098:	2000235a 	.word	0x2000235a
 800809c:	200002d4 	.word	0x200002d4

080080a0 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	4603      	mov	r3, r0
 80080a8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80080aa:	79fb      	ldrb	r3, [r7, #7]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d001      	beq.n	80080b4 <SD_disk_status+0x14>
 80080b0:	2301      	movs	r3, #1
 80080b2:	e002      	b.n	80080ba <SD_disk_status+0x1a>
	return Stat;
 80080b4:	4b04      	ldr	r3, [pc, #16]	; (80080c8 <SD_disk_status+0x28>)
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	b2db      	uxtb	r3, r3
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	370c      	adds	r7, #12
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr
 80080c6:	bf00      	nop
 80080c8:	20000005 	.word	0x20000005

080080cc <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60b9      	str	r1, [r7, #8]
 80080d4:	607a      	str	r2, [r7, #4]
 80080d6:	603b      	str	r3, [r7, #0]
 80080d8:	4603      	mov	r3, r0
 80080da:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80080dc:	7bfb      	ldrb	r3, [r7, #15]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d102      	bne.n	80080e8 <SD_disk_read+0x1c>
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d101      	bne.n	80080ec <SD_disk_read+0x20>
 80080e8:	2304      	movs	r3, #4
 80080ea:	e051      	b.n	8008190 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80080ec:	4b2a      	ldr	r3, [pc, #168]	; (8008198 <SD_disk_read+0xcc>)
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	f003 0301 	and.w	r3, r3, #1
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d001      	beq.n	80080fe <SD_disk_read+0x32>
 80080fa:	2303      	movs	r3, #3
 80080fc:	e048      	b.n	8008190 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80080fe:	4b27      	ldr	r3, [pc, #156]	; (800819c <SD_disk_read+0xd0>)
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	f003 0304 	and.w	r3, r3, #4
 8008106:	2b00      	cmp	r3, #0
 8008108:	d102      	bne.n	8008110 <SD_disk_read+0x44>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	025b      	lsls	r3, r3, #9
 800810e:	607b      	str	r3, [r7, #4]

	SELECT();
 8008110:	f7ff fd28 	bl	8007b64 <SELECT>

	if (count == 1)
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	2b01      	cmp	r3, #1
 8008118:	d111      	bne.n	800813e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800811a:	6879      	ldr	r1, [r7, #4]
 800811c:	2051      	movs	r0, #81	; 0x51
 800811e:	f7ff fe84 	bl	8007e2a <SD_SendCmd>
 8008122:	4603      	mov	r3, r0
 8008124:	2b00      	cmp	r3, #0
 8008126:	d129      	bne.n	800817c <SD_disk_read+0xb0>
 8008128:	f44f 7100 	mov.w	r1, #512	; 0x200
 800812c:	68b8      	ldr	r0, [r7, #8]
 800812e:	f7ff fe0b 	bl	8007d48 <SD_RxDataBlock>
 8008132:	4603      	mov	r3, r0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d021      	beq.n	800817c <SD_disk_read+0xb0>
 8008138:	2300      	movs	r3, #0
 800813a:	603b      	str	r3, [r7, #0]
 800813c:	e01e      	b.n	800817c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800813e:	6879      	ldr	r1, [r7, #4]
 8008140:	2052      	movs	r0, #82	; 0x52
 8008142:	f7ff fe72 	bl	8007e2a <SD_SendCmd>
 8008146:	4603      	mov	r3, r0
 8008148:	2b00      	cmp	r3, #0
 800814a:	d117      	bne.n	800817c <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 800814c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008150:	68b8      	ldr	r0, [r7, #8]
 8008152:	f7ff fdf9 	bl	8007d48 <SD_RxDataBlock>
 8008156:	4603      	mov	r3, r0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00a      	beq.n	8008172 <SD_disk_read+0xa6>
				buff += 512;
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008162:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	3b01      	subs	r3, #1
 8008168:	603b      	str	r3, [r7, #0]
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d1ed      	bne.n	800814c <SD_disk_read+0x80>
 8008170:	e000      	b.n	8008174 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8008172:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8008174:	2100      	movs	r1, #0
 8008176:	204c      	movs	r0, #76	; 0x4c
 8008178:	f7ff fe57 	bl	8007e2a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 800817c:	f7ff fd02 	bl	8007b84 <DESELECT>
	SPI_RxByte();
 8008180:	f7ff fd44 	bl	8007c0c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	2b00      	cmp	r3, #0
 8008188:	bf14      	ite	ne
 800818a:	2301      	movne	r3, #1
 800818c:	2300      	moveq	r3, #0
 800818e:	b2db      	uxtb	r3, r3
}
 8008190:	4618      	mov	r0, r3
 8008192:	3710      	adds	r7, #16
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}
 8008198:	20000005 	.word	0x20000005
 800819c:	200002d4 	.word	0x200002d4

080081a0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60b9      	str	r1, [r7, #8]
 80081a8:	607a      	str	r2, [r7, #4]
 80081aa:	603b      	str	r3, [r7, #0]
 80081ac:	4603      	mov	r3, r0
 80081ae:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80081b0:	7bfb      	ldrb	r3, [r7, #15]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d102      	bne.n	80081bc <SD_disk_write+0x1c>
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d101      	bne.n	80081c0 <SD_disk_write+0x20>
 80081bc:	2304      	movs	r3, #4
 80081be:	e06b      	b.n	8008298 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80081c0:	4b37      	ldr	r3, [pc, #220]	; (80082a0 <SD_disk_write+0x100>)
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	f003 0301 	and.w	r3, r3, #1
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d001      	beq.n	80081d2 <SD_disk_write+0x32>
 80081ce:	2303      	movs	r3, #3
 80081d0:	e062      	b.n	8008298 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80081d2:	4b33      	ldr	r3, [pc, #204]	; (80082a0 <SD_disk_write+0x100>)
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	f003 0304 	and.w	r3, r3, #4
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d001      	beq.n	80081e4 <SD_disk_write+0x44>
 80081e0:	2302      	movs	r3, #2
 80081e2:	e059      	b.n	8008298 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80081e4:	4b2f      	ldr	r3, [pc, #188]	; (80082a4 <SD_disk_write+0x104>)
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	f003 0304 	and.w	r3, r3, #4
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d102      	bne.n	80081f6 <SD_disk_write+0x56>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	025b      	lsls	r3, r3, #9
 80081f4:	607b      	str	r3, [r7, #4]

	SELECT();
 80081f6:	f7ff fcb5 	bl	8007b64 <SELECT>

	if (count == 1)
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d110      	bne.n	8008222 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8008200:	6879      	ldr	r1, [r7, #4]
 8008202:	2058      	movs	r0, #88	; 0x58
 8008204:	f7ff fe11 	bl	8007e2a <SD_SendCmd>
 8008208:	4603      	mov	r3, r0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d13a      	bne.n	8008284 <SD_disk_write+0xe4>
 800820e:	21fe      	movs	r1, #254	; 0xfe
 8008210:	68b8      	ldr	r0, [r7, #8]
 8008212:	f7ff fdc7 	bl	8007da4 <SD_TxDataBlock>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d033      	beq.n	8008284 <SD_disk_write+0xe4>
			count = 0;
 800821c:	2300      	movs	r3, #0
 800821e:	603b      	str	r3, [r7, #0]
 8008220:	e030      	b.n	8008284 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8008222:	4b20      	ldr	r3, [pc, #128]	; (80082a4 <SD_disk_write+0x104>)
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	f003 0302 	and.w	r3, r3, #2
 800822a:	2b00      	cmp	r3, #0
 800822c:	d007      	beq.n	800823e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800822e:	2100      	movs	r1, #0
 8008230:	2077      	movs	r0, #119	; 0x77
 8008232:	f7ff fdfa 	bl	8007e2a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8008236:	6839      	ldr	r1, [r7, #0]
 8008238:	2057      	movs	r0, #87	; 0x57
 800823a:	f7ff fdf6 	bl	8007e2a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800823e:	6879      	ldr	r1, [r7, #4]
 8008240:	2059      	movs	r0, #89	; 0x59
 8008242:	f7ff fdf2 	bl	8007e2a <SD_SendCmd>
 8008246:	4603      	mov	r3, r0
 8008248:	2b00      	cmp	r3, #0
 800824a:	d11b      	bne.n	8008284 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800824c:	21fc      	movs	r1, #252	; 0xfc
 800824e:	68b8      	ldr	r0, [r7, #8]
 8008250:	f7ff fda8 	bl	8007da4 <SD_TxDataBlock>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00a      	beq.n	8008270 <SD_disk_write+0xd0>
				buff += 512;
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008260:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	3b01      	subs	r3, #1
 8008266:	603b      	str	r3, [r7, #0]
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1ee      	bne.n	800824c <SD_disk_write+0xac>
 800826e:	e000      	b.n	8008272 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8008270:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8008272:	21fd      	movs	r1, #253	; 0xfd
 8008274:	2000      	movs	r0, #0
 8008276:	f7ff fd95 	bl	8007da4 <SD_TxDataBlock>
 800827a:	4603      	mov	r3, r0
 800827c:	2b00      	cmp	r3, #0
 800827e:	d101      	bne.n	8008284 <SD_disk_write+0xe4>
			{
				count = 1;
 8008280:	2301      	movs	r3, #1
 8008282:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8008284:	f7ff fc7e 	bl	8007b84 <DESELECT>
	SPI_RxByte();
 8008288:	f7ff fcc0 	bl	8007c0c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	bf14      	ite	ne
 8008292:	2301      	movne	r3, #1
 8008294:	2300      	moveq	r3, #0
 8008296:	b2db      	uxtb	r3, r3
}
 8008298:	4618      	mov	r0, r3
 800829a:	3710      	adds	r7, #16
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	20000005 	.word	0x20000005
 80082a4:	200002d4 	.word	0x200002d4

080082a8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80082a8:	b590      	push	{r4, r7, lr}
 80082aa:	b08b      	sub	sp, #44	; 0x2c
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	4603      	mov	r3, r0
 80082b0:	603a      	str	r2, [r7, #0]
 80082b2:	71fb      	strb	r3, [r7, #7]
 80082b4:	460b      	mov	r3, r1
 80082b6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80082bc:	79fb      	ldrb	r3, [r7, #7]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d001      	beq.n	80082c6 <SD_disk_ioctl+0x1e>
 80082c2:	2304      	movs	r3, #4
 80082c4:	e113      	b.n	80084ee <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80082cc:	79bb      	ldrb	r3, [r7, #6]
 80082ce:	2b05      	cmp	r3, #5
 80082d0:	d121      	bne.n	8008316 <SD_disk_ioctl+0x6e>
	{
		switch (*ptr)
 80082d2:	6a3b      	ldr	r3, [r7, #32]
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d009      	beq.n	80082ee <SD_disk_ioctl+0x46>
 80082da:	2b02      	cmp	r3, #2
 80082dc:	d00d      	beq.n	80082fa <SD_disk_ioctl+0x52>
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d115      	bne.n	800830e <SD_disk_ioctl+0x66>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80082e2:	f7ff fd19 	bl	8007d18 <SD_PowerOff>
			res = RES_OK;
 80082e6:	2300      	movs	r3, #0
 80082e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80082ec:	e0fd      	b.n	80084ea <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 80082ee:	f7ff fcd1 	bl	8007c94 <SD_PowerOn>
			res = RES_OK;
 80082f2:	2300      	movs	r3, #0
 80082f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80082f8:	e0f7      	b.n	80084ea <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80082fa:	6a3b      	ldr	r3, [r7, #32]
 80082fc:	1c5c      	adds	r4, r3, #1
 80082fe:	f7ff fd17 	bl	8007d30 <SD_CheckPower>
 8008302:	4603      	mov	r3, r0
 8008304:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8008306:	2300      	movs	r3, #0
 8008308:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800830c:	e0ed      	b.n	80084ea <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 800830e:	2304      	movs	r3, #4
 8008310:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008314:	e0e9      	b.n	80084ea <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008316:	4b78      	ldr	r3, [pc, #480]	; (80084f8 <SD_disk_ioctl+0x250>)
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	b2db      	uxtb	r3, r3
 800831c:	f003 0301 	and.w	r3, r3, #1
 8008320:	2b00      	cmp	r3, #0
 8008322:	d001      	beq.n	8008328 <SD_disk_ioctl+0x80>
 8008324:	2303      	movs	r3, #3
 8008326:	e0e2      	b.n	80084ee <SD_disk_ioctl+0x246>

		SELECT();
 8008328:	f7ff fc1c 	bl	8007b64 <SELECT>

		switch (ctrl)
 800832c:	79bb      	ldrb	r3, [r7, #6]
 800832e:	2b0d      	cmp	r3, #13
 8008330:	f200 80cc 	bhi.w	80084cc <SD_disk_ioctl+0x224>
 8008334:	a201      	add	r2, pc, #4	; (adr r2, 800833c <SD_disk_ioctl+0x94>)
 8008336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800833a:	bf00      	nop
 800833c:	08008437 	.word	0x08008437
 8008340:	08008375 	.word	0x08008375
 8008344:	08008427 	.word	0x08008427
 8008348:	080084cd 	.word	0x080084cd
 800834c:	080084cd 	.word	0x080084cd
 8008350:	080084cd 	.word	0x080084cd
 8008354:	080084cd 	.word	0x080084cd
 8008358:	080084cd 	.word	0x080084cd
 800835c:	080084cd 	.word	0x080084cd
 8008360:	080084cd 	.word	0x080084cd
 8008364:	080084cd 	.word	0x080084cd
 8008368:	08008449 	.word	0x08008449
 800836c:	0800846d 	.word	0x0800846d
 8008370:	08008491 	.word	0x08008491
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8008374:	2100      	movs	r1, #0
 8008376:	2049      	movs	r0, #73	; 0x49
 8008378:	f7ff fd57 	bl	8007e2a <SD_SendCmd>
 800837c:	4603      	mov	r3, r0
 800837e:	2b00      	cmp	r3, #0
 8008380:	f040 80a8 	bne.w	80084d4 <SD_disk_ioctl+0x22c>
 8008384:	f107 030c 	add.w	r3, r7, #12
 8008388:	2110      	movs	r1, #16
 800838a:	4618      	mov	r0, r3
 800838c:	f7ff fcdc 	bl	8007d48 <SD_RxDataBlock>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	f000 809e 	beq.w	80084d4 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8008398:	7b3b      	ldrb	r3, [r7, #12]
 800839a:	099b      	lsrs	r3, r3, #6
 800839c:	b2db      	uxtb	r3, r3
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d10e      	bne.n	80083c0 <SD_disk_ioctl+0x118>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80083a2:	7d7b      	ldrb	r3, [r7, #21]
 80083a4:	b29a      	uxth	r2, r3
 80083a6:	7d3b      	ldrb	r3, [r7, #20]
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	021b      	lsls	r3, r3, #8
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	4413      	add	r3, r2
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	3301      	adds	r3, #1
 80083b4:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80083b6:	8bfb      	ldrh	r3, [r7, #30]
 80083b8:	029a      	lsls	r2, r3, #10
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	601a      	str	r2, [r3, #0]
 80083be:	e02e      	b.n	800841e <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80083c0:	7c7b      	ldrb	r3, [r7, #17]
 80083c2:	f003 030f 	and.w	r3, r3, #15
 80083c6:	b2da      	uxtb	r2, r3
 80083c8:	7dbb      	ldrb	r3, [r7, #22]
 80083ca:	09db      	lsrs	r3, r3, #7
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	4413      	add	r3, r2
 80083d0:	b2da      	uxtb	r2, r3
 80083d2:	7d7b      	ldrb	r3, [r7, #21]
 80083d4:	005b      	lsls	r3, r3, #1
 80083d6:	b2db      	uxtb	r3, r3
 80083d8:	f003 0306 	and.w	r3, r3, #6
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	4413      	add	r3, r2
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	3302      	adds	r3, #2
 80083e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80083e8:	7d3b      	ldrb	r3, [r7, #20]
 80083ea:	099b      	lsrs	r3, r3, #6
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	b29a      	uxth	r2, r3
 80083f0:	7cfb      	ldrb	r3, [r7, #19]
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	4413      	add	r3, r2
 80083fa:	b29a      	uxth	r2, r3
 80083fc:	7cbb      	ldrb	r3, [r7, #18]
 80083fe:	029b      	lsls	r3, r3, #10
 8008400:	b29b      	uxth	r3, r3
 8008402:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008406:	b29b      	uxth	r3, r3
 8008408:	4413      	add	r3, r2
 800840a:	b29b      	uxth	r3, r3
 800840c:	3301      	adds	r3, #1
 800840e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8008410:	8bfa      	ldrh	r2, [r7, #30]
 8008412:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008416:	3b09      	subs	r3, #9
 8008418:	409a      	lsls	r2, r3
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800841e:	2300      	movs	r3, #0
 8008420:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8008424:	e056      	b.n	80084d4 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	f44f 7200 	mov.w	r2, #512	; 0x200
 800842c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800842e:	2300      	movs	r3, #0
 8008430:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8008434:	e055      	b.n	80084e2 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8008436:	f7ff fc13 	bl	8007c60 <SD_ReadyWait>
 800843a:	4603      	mov	r3, r0
 800843c:	2bff      	cmp	r3, #255	; 0xff
 800843e:	d14b      	bne.n	80084d8 <SD_disk_ioctl+0x230>
 8008440:	2300      	movs	r3, #0
 8008442:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8008446:	e047      	b.n	80084d8 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8008448:	2100      	movs	r1, #0
 800844a:	2049      	movs	r0, #73	; 0x49
 800844c:	f7ff fced 	bl	8007e2a <SD_SendCmd>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	d142      	bne.n	80084dc <SD_disk_ioctl+0x234>
 8008456:	2110      	movs	r1, #16
 8008458:	6a38      	ldr	r0, [r7, #32]
 800845a:	f7ff fc75 	bl	8007d48 <SD_RxDataBlock>
 800845e:	4603      	mov	r3, r0
 8008460:	2b00      	cmp	r3, #0
 8008462:	d03b      	beq.n	80084dc <SD_disk_ioctl+0x234>
 8008464:	2300      	movs	r3, #0
 8008466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800846a:	e037      	b.n	80084dc <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800846c:	2100      	movs	r1, #0
 800846e:	204a      	movs	r0, #74	; 0x4a
 8008470:	f7ff fcdb 	bl	8007e2a <SD_SendCmd>
 8008474:	4603      	mov	r3, r0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d132      	bne.n	80084e0 <SD_disk_ioctl+0x238>
 800847a:	2110      	movs	r1, #16
 800847c:	6a38      	ldr	r0, [r7, #32]
 800847e:	f7ff fc63 	bl	8007d48 <SD_RxDataBlock>
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d02b      	beq.n	80084e0 <SD_disk_ioctl+0x238>
 8008488:	2300      	movs	r3, #0
 800848a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800848e:	e027      	b.n	80084e0 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8008490:	2100      	movs	r1, #0
 8008492:	207a      	movs	r0, #122	; 0x7a
 8008494:	f7ff fcc9 	bl	8007e2a <SD_SendCmd>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d116      	bne.n	80084cc <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 800849e:	2300      	movs	r3, #0
 80084a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80084a4:	e00b      	b.n	80084be <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 80084a6:	6a3c      	ldr	r4, [r7, #32]
 80084a8:	1c63      	adds	r3, r4, #1
 80084aa:	623b      	str	r3, [r7, #32]
 80084ac:	f7ff fbae 	bl	8007c0c <SPI_RxByte>
 80084b0:	4603      	mov	r3, r0
 80084b2:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80084b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80084b8:	3301      	adds	r3, #1
 80084ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80084be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80084c2:	2b03      	cmp	r3, #3
 80084c4:	d9ef      	bls.n	80084a6 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 80084c6:	2300      	movs	r3, #0
 80084c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80084cc:	2304      	movs	r3, #4
 80084ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80084d2:	e006      	b.n	80084e2 <SD_disk_ioctl+0x23a>
			break;
 80084d4:	bf00      	nop
 80084d6:	e004      	b.n	80084e2 <SD_disk_ioctl+0x23a>
			break;
 80084d8:	bf00      	nop
 80084da:	e002      	b.n	80084e2 <SD_disk_ioctl+0x23a>
			break;
 80084dc:	bf00      	nop
 80084de:	e000      	b.n	80084e2 <SD_disk_ioctl+0x23a>
			break;
 80084e0:	bf00      	nop
		}

		DESELECT();
 80084e2:	f7ff fb4f 	bl	8007b84 <DESELECT>
		SPI_RxByte();
 80084e6:	f7ff fb91 	bl	8007c0c <SPI_RxByte>
	}

	return res;
 80084ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	372c      	adds	r7, #44	; 0x2c
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd90      	pop	{r4, r7, pc}
 80084f6:	bf00      	nop
 80084f8:	20000005 	.word	0x20000005

080084fc <transmit_uart>:
/* Private function prototypes -----------------------------------------------*/
static void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);

void transmit_uart(char *string){
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f7f7 fe6b 	bl	80001e0 <strlen>
 800850a:	4603      	mov	r3, r0
 800850c:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t*) string, len, 200);
 800850e:	7bfb      	ldrb	r3, [r7, #15]
 8008510:	b29a      	uxth	r2, r3
 8008512:	23c8      	movs	r3, #200	; 0xc8
 8008514:	6879      	ldr	r1, [r7, #4]
 8008516:	4803      	ldr	r0, [pc, #12]	; (8008524 <transmit_uart+0x28>)
 8008518:	f7fb f81a 	bl	8003550 <HAL_UART_Transmit>
}
 800851c:	bf00      	nop
 800851e:	3710      	adds	r7, #16
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}
 8008524:	20002454 	.word	0x20002454

08008528 <main>:
  * @brief  Main program.
  * @param  None
  * @retval None
  */
int main(void)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b08e      	sub	sp, #56	; 0x38
 800852c:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800852e:	f7f8 fc1d 	bl	8000d6c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();		// Configure system clock to 180MHz
 8008532:	f000 f873 	bl	800861c <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008536:	f000 f8dd 	bl	80086f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800853a:	f000 f961 	bl	8008800 <MX_USART2_UART_Init>

  // microSD Setup
  microSD_init();
 800853e:	f000 f9e5 	bl	800890c <microSD_init>
  MX_FATFS_Init();
 8008542:	f7ff faf5 	bl	8007b30 <MX_FATFS_Init>

  // WS2812B Setup
  LED_Init();
 8008546:	f001 fa29 	bl	800999c <LED_Init>
  LED_set_color_all(0x00, 0x00, 0x00);	//Set color order of array. Ex: R0,G0,B0,R1,G1,B1
 800854a:	2200      	movs	r2, #0
 800854c:	2100      	movs	r1, #0
 800854e:	2000      	movs	r0, #0
 8008550:	f000 febe 	bl	80092d0 <LED_set_color_all>
  LED_update(1);
 8008554:	2001      	movs	r0, #1
 8008556:	f001 f833 	bl	80095c0 <LED_update>
  // ------------------------------ //
  //       microSD Card Init        //
  // -------------------------------//

  /* Wait for microSD to initialize */
  HAL_Delay(500);
 800855a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800855e:	f7f8 fc7f 	bl	8000e60 <HAL_Delay>

  /* Check if microSD is connected physically */
	transmit_uart("-----------------------\r\n");
 8008562:	482a      	ldr	r0, [pc, #168]	; (800860c <main+0xe4>)
 8008564:	f7ff ffca 	bl	80084fc <transmit_uart>
	while (!check_microSD_conn()){
 8008568:	e004      	b.n	8008574 <main+0x4c>
  	transmit_uart("MicroSD card not detected!\r\n");
 800856a:	4829      	ldr	r0, [pc, #164]	; (8008610 <main+0xe8>)
 800856c:	f7ff ffc6 	bl	80084fc <transmit_uart>
  	pulse_red();
 8008570:	f000 fe7c 	bl	800926c <pulse_red>
	while (!check_microSD_conn()){
 8008574:	f000 fa56 	bl	8008a24 <check_microSD_conn>
 8008578:	4603      	mov	r3, r0
 800857a:	2b00      	cmp	r3, #0
 800857c:	d0f5      	beq.n	800856a <main+0x42>
  	//HAL_Delay(1000);
	}
	transmit_uart("MicroSD card detected!\r\n");
 800857e:	4825      	ldr	r0, [pc, #148]	; (8008614 <main+0xec>)
 8008580:	f7ff ffbc 	bl	80084fc <transmit_uart>
	transmit_uart("-----------------------\r\n");
 8008584:	4821      	ldr	r0, [pc, #132]	; (800860c <main+0xe4>)
 8008586:	f7ff ffb9 	bl	80084fc <transmit_uart>

	/* Waiting for the Micro SD module to initialize */
	HAL_Delay(500);
 800858a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800858e:	f7f8 fc67 	bl	8000e60 <HAL_Delay>

	char file_name[50] = "Crystal.txt";
 8008592:	4a21      	ldr	r2, [pc, #132]	; (8008618 <main+0xf0>)
 8008594:	1d3b      	adds	r3, r7, #4
 8008596:	ca07      	ldmia	r2, {r0, r1, r2}
 8008598:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800859c:	f107 0310 	add.w	r3, r7, #16
 80085a0:	2226      	movs	r2, #38	; 0x26
 80085a2:	2100      	movs	r1, #0
 80085a4:	4618      	mov	r0, r3
 80085a6:	f001 fb49 	bl	8009c3c <memset>

	mount_sd();
 80085aa:	f000 fa4b 	bl	8008a44 <mount_sd>
	open_file(file_name);
 80085ae:	1d3b      	adds	r3, r7, #4
 80085b0:	4618      	mov	r0, r3
 80085b2:	f000 fa69 	bl	8008a88 <open_file>

	get_freespace();
 80085b6:	f000 fa85 	bl	8008ac4 <get_freespace>

	write_file();
 80085ba:	f000 fafb 	bl	8008bb4 <write_file>
	close_file();
 80085be:	f000 fb17 	bl	8008bf0 <close_file>
	open_file(file_name);
 80085c2:	1d3b      	adds	r3, r7, #4
 80085c4:	4618      	mov	r0, r3
 80085c6:	f000 fa5f 	bl	8008a88 <open_file>
	read_file();
 80085ca:	f000 fb35 	bl	8008c38 <read_file>
	close_file();
 80085ce:	f000 fb0f 	bl	8008bf0 <close_file>

	find_mp3_file();
 80085d2:	f000 fbf3 	bl	8008dbc <find_mp3_file>
	find_txt_file();
 80085d6:	f000 fb85 	bl	8008ce4 <find_txt_file>

	unmount();
 80085da:	f000 fb61 	bl	8008ca0 <unmount>

	// ------------- //
	// Infinite Loop //
	// ------------- //
  while (1) {
  	if (check_microSD_conn()){
 80085de:	f000 fa21 	bl	8008a24 <check_microSD_conn>
 80085e2:	4603      	mov	r3, r0
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d007      	beq.n	80085f8 <main+0xd0>
  		pulse();	// Send pulse lighting to W2812B LED Strip
 80085e8:	f000 fe0e 	bl	8009208 <pulse>
 80085ec:	e7f7      	b.n	80085de <main+0xb6>
  	} else {
  		while (!(check_microSD_conn())){
  			transmit_uart("MicroSD card not detected!\r\n");
 80085ee:	4808      	ldr	r0, [pc, #32]	; (8008610 <main+0xe8>)
 80085f0:	f7ff ff84 	bl	80084fc <transmit_uart>
  			pulse_red();
 80085f4:	f000 fe3a 	bl	800926c <pulse_red>
  		while (!(check_microSD_conn())){
 80085f8:	f000 fa14 	bl	8008a24 <check_microSD_conn>
 80085fc:	4603      	mov	r3, r0
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d0f5      	beq.n	80085ee <main+0xc6>
  			//HAL_Delay(1000);
  		}
			transmit_uart("MicroSD card detected!\r\n");
 8008602:	4804      	ldr	r0, [pc, #16]	; (8008614 <main+0xec>)
 8008604:	f7ff ff7a 	bl	80084fc <transmit_uart>
  	if (check_microSD_conn()){
 8008608:	e7e9      	b.n	80085de <main+0xb6>
 800860a:	bf00      	nop
 800860c:	0800a4c8 	.word	0x0800a4c8
 8008610:	0800a4e4 	.word	0x0800a4e4
 8008614:	0800a504 	.word	0x0800a504
 8008618:	0800a520 	.word	0x0800a520

0800861c <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b094      	sub	sp, #80	; 0x50
 8008620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008622:	f107 0320 	add.w	r3, r7, #32
 8008626:	2230      	movs	r2, #48	; 0x30
 8008628:	2100      	movs	r1, #0
 800862a:	4618      	mov	r0, r3
 800862c:	f001 fb06 	bl	8009c3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008630:	f107 030c 	add.w	r3, r7, #12
 8008634:	2200      	movs	r2, #0
 8008636:	601a      	str	r2, [r3, #0]
 8008638:	605a      	str	r2, [r3, #4]
 800863a:	609a      	str	r2, [r3, #8]
 800863c:	60da      	str	r2, [r3, #12]
 800863e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008640:	2300      	movs	r3, #0
 8008642:	60bb      	str	r3, [r7, #8]
 8008644:	4b29      	ldr	r3, [pc, #164]	; (80086ec <SystemClock_Config+0xd0>)
 8008646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008648:	4a28      	ldr	r2, [pc, #160]	; (80086ec <SystemClock_Config+0xd0>)
 800864a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800864e:	6413      	str	r3, [r2, #64]	; 0x40
 8008650:	4b26      	ldr	r3, [pc, #152]	; (80086ec <SystemClock_Config+0xd0>)
 8008652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008658:	60bb      	str	r3, [r7, #8]
 800865a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800865c:	2300      	movs	r3, #0
 800865e:	607b      	str	r3, [r7, #4]
 8008660:	4b23      	ldr	r3, [pc, #140]	; (80086f0 <SystemClock_Config+0xd4>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a22      	ldr	r2, [pc, #136]	; (80086f0 <SystemClock_Config+0xd4>)
 8008666:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800866a:	6013      	str	r3, [r2, #0]
 800866c:	4b20      	ldr	r3, [pc, #128]	; (80086f0 <SystemClock_Config+0xd4>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008674:	607b      	str	r3, [r7, #4]
 8008676:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008678:	2302      	movs	r3, #2
 800867a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800867c:	2301      	movs	r3, #1
 800867e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008680:	2310      	movs	r3, #16
 8008682:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008684:	2302      	movs	r3, #2
 8008686:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008688:	2300      	movs	r3, #0
 800868a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800868c:	2310      	movs	r3, #16
 800868e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8008690:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8008694:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8008696:	2304      	movs	r3, #4
 8008698:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800869a:	2304      	movs	r3, #4
 800869c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800869e:	f107 0320 	add.w	r3, r7, #32
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7f9 f8d6 	bl	8001854 <HAL_RCC_OscConfig>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d002      	beq.n	80086b4 <SystemClock_Config+0x98>
  {
    Error_Handler(SYSCONF_ERROR1);
 80086ae:	2000      	movs	r0, #0
 80086b0:	f000 f8d0 	bl	8008854 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80086b4:	230f      	movs	r3, #15
 80086b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80086b8:	2302      	movs	r3, #2
 80086ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80086bc:	2300      	movs	r3, #0
 80086be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80086c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80086c6:	2300      	movs	r3, #0
 80086c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80086ca:	f107 030c 	add.w	r3, r7, #12
 80086ce:	2102      	movs	r1, #2
 80086d0:	4618      	mov	r0, r3
 80086d2:	f7f9 fb2f 	bl	8001d34 <HAL_RCC_ClockConfig>
 80086d6:	4603      	mov	r3, r0
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d002      	beq.n	80086e2 <SystemClock_Config+0xc6>
  {
    Error_Handler(SYSCONF_ERROR2);
 80086dc:	2001      	movs	r0, #1
 80086de:	f000 f8b9 	bl	8008854 <Error_Handler>
  }
}
 80086e2:	bf00      	nop
 80086e4:	3750      	adds	r7, #80	; 0x50
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	40023800 	.word	0x40023800
 80086f0:	40007000 	.word	0x40007000

080086f4 <MX_GPIO_Init>:
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void){
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b08a      	sub	sp, #40	; 0x28
 80086f8:	af00      	add	r7, sp, #0
  // GPIO Ports Clock Enable
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80086fa:	2300      	movs	r3, #0
 80086fc:	613b      	str	r3, [r7, #16]
 80086fe:	4b3b      	ldr	r3, [pc, #236]	; (80087ec <MX_GPIO_Init+0xf8>)
 8008700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008702:	4a3a      	ldr	r2, [pc, #232]	; (80087ec <MX_GPIO_Init+0xf8>)
 8008704:	f043 0304 	orr.w	r3, r3, #4
 8008708:	6313      	str	r3, [r2, #48]	; 0x30
 800870a:	4b38      	ldr	r3, [pc, #224]	; (80087ec <MX_GPIO_Init+0xf8>)
 800870c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800870e:	f003 0304 	and.w	r3, r3, #4
 8008712:	613b      	str	r3, [r7, #16]
 8008714:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008716:	2300      	movs	r3, #0
 8008718:	60fb      	str	r3, [r7, #12]
 800871a:	4b34      	ldr	r3, [pc, #208]	; (80087ec <MX_GPIO_Init+0xf8>)
 800871c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800871e:	4a33      	ldr	r2, [pc, #204]	; (80087ec <MX_GPIO_Init+0xf8>)
 8008720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008724:	6313      	str	r3, [r2, #48]	; 0x30
 8008726:	4b31      	ldr	r3, [pc, #196]	; (80087ec <MX_GPIO_Init+0xf8>)
 8008728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800872a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800872e:	60fb      	str	r3, [r7, #12]
 8008730:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008732:	2300      	movs	r3, #0
 8008734:	60bb      	str	r3, [r7, #8]
 8008736:	4b2d      	ldr	r3, [pc, #180]	; (80087ec <MX_GPIO_Init+0xf8>)
 8008738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800873a:	4a2c      	ldr	r2, [pc, #176]	; (80087ec <MX_GPIO_Init+0xf8>)
 800873c:	f043 0301 	orr.w	r3, r3, #1
 8008740:	6313      	str	r3, [r2, #48]	; 0x30
 8008742:	4b2a      	ldr	r3, [pc, #168]	; (80087ec <MX_GPIO_Init+0xf8>)
 8008744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008746:	f003 0301 	and.w	r3, r3, #1
 800874a:	60bb      	str	r3, [r7, #8]
 800874c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800874e:	2300      	movs	r3, #0
 8008750:	607b      	str	r3, [r7, #4]
 8008752:	4b26      	ldr	r3, [pc, #152]	; (80087ec <MX_GPIO_Init+0xf8>)
 8008754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008756:	4a25      	ldr	r2, [pc, #148]	; (80087ec <MX_GPIO_Init+0xf8>)
 8008758:	f043 0302 	orr.w	r3, r3, #2
 800875c:	6313      	str	r3, [r2, #48]	; 0x30
 800875e:	4b23      	ldr	r3, [pc, #140]	; (80087ec <MX_GPIO_Init+0xf8>)
 8008760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008762:	f003 0302 	and.w	r3, r3, #2
 8008766:	607b      	str	r3, [r7, #4]
 8008768:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800876a:	f107 0314 	add.w	r3, r7, #20
 800876e:	2200      	movs	r2, #0
 8008770:	601a      	str	r2, [r3, #0]
 8008772:	605a      	str	r2, [r3, #4]
 8008774:	609a      	str	r2, [r3, #8]
 8008776:	60da      	str	r2, [r3, #12]
 8008778:	611a      	str	r2, [r3, #16]

  // Configure GPIO pin Output Level
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800877a:	2200      	movs	r2, #0
 800877c:	2120      	movs	r1, #32
 800877e:	481c      	ldr	r0, [pc, #112]	; (80087f0 <MX_GPIO_Init+0xfc>)
 8008780:	f7f9 f84e 	bl	8001820 <HAL_GPIO_WritePin>

  // Configure GPIO pin : B1_Pin
  GPIO_InitStruct.Pin = B1_Pin;
 8008784:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800878a:	4b1a      	ldr	r3, [pc, #104]	; (80087f4 <MX_GPIO_Init+0x100>)
 800878c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800878e:	2300      	movs	r3, #0
 8008790:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8008792:	f107 0314 	add.w	r3, r7, #20
 8008796:	4619      	mov	r1, r3
 8008798:	4817      	ldr	r0, [pc, #92]	; (80087f8 <MX_GPIO_Init+0x104>)
 800879a:	f7f8 fea7 	bl	80014ec <HAL_GPIO_Init>

  // Configure GPIO pin : LD2_Pin
  GPIO_InitStruct.Pin = LD2_Pin;
 800879e:	2320      	movs	r3, #32
 80087a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80087a2:	2301      	movs	r3, #1
 80087a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087a6:	2300      	movs	r3, #0
 80087a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087aa:	2300      	movs	r3, #0
 80087ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80087ae:	f107 0314 	add.w	r3, r7, #20
 80087b2:	4619      	mov	r1, r3
 80087b4:	480e      	ldr	r0, [pc, #56]	; (80087f0 <MX_GPIO_Init+0xfc>)
 80087b6:	f7f8 fe99 	bl	80014ec <HAL_GPIO_Init>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80087ba:	2200      	movs	r2, #0
 80087bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80087c0:	480e      	ldr	r0, [pc, #56]	; (80087fc <MX_GPIO_Init+0x108>)
 80087c2:	f7f9 f82d 	bl	8001820 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : SD_CS_Pin */
	GPIO_InitStruct.Pin = SD_CS_Pin;
 80087c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80087ca:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80087cc:	2301      	movs	r3, #1
 80087ce:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087d0:	2300      	movs	r3, #0
 80087d2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087d4:	2300      	movs	r3, #0
 80087d6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80087d8:	f107 0314 	add.w	r3, r7, #20
 80087dc:	4619      	mov	r1, r3
 80087de:	4807      	ldr	r0, [pc, #28]	; (80087fc <MX_GPIO_Init+0x108>)
 80087e0:	f7f8 fe84 	bl	80014ec <HAL_GPIO_Init>
}
 80087e4:	bf00      	nop
 80087e6:	3728      	adds	r7, #40	; 0x28
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}
 80087ec:	40023800 	.word	0x40023800
 80087f0:	40020000 	.word	0x40020000
 80087f4:	10210000 	.word	0x10210000
 80087f8:	40020800 	.word	0x40020800
 80087fc:	40020400 	.word	0x40020400

08008800 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008804:	4b11      	ldr	r3, [pc, #68]	; (800884c <MX_USART2_UART_Init+0x4c>)
 8008806:	4a12      	ldr	r2, [pc, #72]	; (8008850 <MX_USART2_UART_Init+0x50>)
 8008808:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800880a:	4b10      	ldr	r3, [pc, #64]	; (800884c <MX_USART2_UART_Init+0x4c>)
 800880c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008810:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008812:	4b0e      	ldr	r3, [pc, #56]	; (800884c <MX_USART2_UART_Init+0x4c>)
 8008814:	2200      	movs	r2, #0
 8008816:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008818:	4b0c      	ldr	r3, [pc, #48]	; (800884c <MX_USART2_UART_Init+0x4c>)
 800881a:	2200      	movs	r2, #0
 800881c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800881e:	4b0b      	ldr	r3, [pc, #44]	; (800884c <MX_USART2_UART_Init+0x4c>)
 8008820:	2200      	movs	r2, #0
 8008822:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008824:	4b09      	ldr	r3, [pc, #36]	; (800884c <MX_USART2_UART_Init+0x4c>)
 8008826:	220c      	movs	r2, #12
 8008828:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800882a:	4b08      	ldr	r3, [pc, #32]	; (800884c <MX_USART2_UART_Init+0x4c>)
 800882c:	2200      	movs	r2, #0
 800882e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008830:	4b06      	ldr	r3, [pc, #24]	; (800884c <MX_USART2_UART_Init+0x4c>)
 8008832:	2200      	movs	r2, #0
 8008834:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008836:	4805      	ldr	r0, [pc, #20]	; (800884c <MX_USART2_UART_Init+0x4c>)
 8008838:	f7fa fe3d 	bl	80034b6 <HAL_UART_Init>
 800883c:	4603      	mov	r3, r0
 800883e:	2b00      	cmp	r3, #0
 8008840:	d002      	beq.n	8008848 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler(UART_ERROR);
 8008842:	2007      	movs	r0, #7
 8008844:	f000 f806 	bl	8008854 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008848:	bf00      	nop
 800884a:	bd80      	pop	{r7, pc}
 800884c:	20002454 	.word	0x20002454
 8008850:	40004400 	.word	0x40004400

08008854 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(uint8_t ERROR)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b082      	sub	sp, #8
 8008858:	af00      	add	r7, sp, #0
 800885a:	4603      	mov	r3, r0
 800885c:	71fb      	strb	r3, [r7, #7]
  while (1) {
    /* Turn LED2 on */
  	switch(ERROR){
 800885e:	79fb      	ldrb	r3, [r7, #7]
 8008860:	2b08      	cmp	r3, #8
 8008862:	d84b      	bhi.n	80088fc <Error_Handler+0xa8>
 8008864:	a201      	add	r2, pc, #4	; (adr r2, 800886c <Error_Handler+0x18>)
 8008866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800886a:	bf00      	nop
 800886c:	08008891 	.word	0x08008891
 8008870:	0800889d 	.word	0x0800889d
 8008874:	080088b5 	.word	0x080088b5
 8008878:	080088c1 	.word	0x080088c1
 800887c:	080088a9 	.word	0x080088a9
 8008880:	080088d9 	.word	0x080088d9
 8008884:	080088cd 	.word	0x080088cd
 8008888:	080088e5 	.word	0x080088e5
 800888c:	080088f1 	.word	0x080088f1
  	case SYSCONF_ERROR1:
  		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8008890:	2201      	movs	r2, #1
 8008892:	2120      	movs	r1, #32
 8008894:	481c      	ldr	r0, [pc, #112]	; (8008908 <Error_Handler+0xb4>)
 8008896:	f7f8 ffc3 	bl	8001820 <HAL_GPIO_WritePin>
  		break;
 800889a:	e034      	b.n	8008906 <Error_Handler+0xb2>
  	case SYSCONF_ERROR2:
  		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800889c:	2201      	movs	r2, #1
 800889e:	2120      	movs	r1, #32
 80088a0:	4819      	ldr	r0, [pc, #100]	; (8008908 <Error_Handler+0xb4>)
 80088a2:	f7f8 ffbd 	bl	8001820 <HAL_GPIO_WritePin>
  		break;
 80088a6:	e02e      	b.n	8008906 <Error_Handler+0xb2>
  	case TIM_INIT_ERROR:
  	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80088a8:	2201      	movs	r2, #1
 80088aa:	2120      	movs	r1, #32
 80088ac:	4816      	ldr	r0, [pc, #88]	; (8008908 <Error_Handler+0xb4>)
 80088ae:	f7f8 ffb7 	bl	8001820 <HAL_GPIO_WritePin>
  	  break;
 80088b2:	e028      	b.n	8008906 <Error_Handler+0xb2>
  	case EN_PWM_ERROR:
  	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80088b4:	2201      	movs	r2, #1
 80088b6:	2120      	movs	r1, #32
 80088b8:	4813      	ldr	r0, [pc, #76]	; (8008908 <Error_Handler+0xb4>)
 80088ba:	f7f8 ffb1 	bl	8001820 <HAL_GPIO_WritePin>
  	  break;
 80088be:	e022      	b.n	8008906 <Error_Handler+0xb2>
  	case TIM_CONFIG_ERROR:
  	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80088c0:	2201      	movs	r2, #1
 80088c2:	2120      	movs	r1, #32
 80088c4:	4810      	ldr	r0, [pc, #64]	; (8008908 <Error_Handler+0xb4>)
 80088c6:	f7f8 ffab 	bl	8001820 <HAL_GPIO_WritePin>
  	  break;
 80088ca:	e01c      	b.n	8008906 <Error_Handler+0xb2>
  	case DMA_ERROR:
  	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80088cc:	2201      	movs	r2, #1
 80088ce:	2120      	movs	r1, #32
 80088d0:	480d      	ldr	r0, [pc, #52]	; (8008908 <Error_Handler+0xb4>)
 80088d2:	f7f8 ffa5 	bl	8001820 <HAL_GPIO_WritePin>
  	  break;
 80088d6:	e016      	b.n	8008906 <Error_Handler+0xb2>
  	case GPIO_ERROR:
  	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80088d8:	2201      	movs	r2, #1
 80088da:	2120      	movs	r1, #32
 80088dc:	480a      	ldr	r0, [pc, #40]	; (8008908 <Error_Handler+0xb4>)
 80088de:	f7f8 ff9f 	bl	8001820 <HAL_GPIO_WritePin>
  	  break;
 80088e2:	e010      	b.n	8008906 <Error_Handler+0xb2>
  	case UART_ERROR:
  		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80088e4:	2201      	movs	r2, #1
 80088e6:	2120      	movs	r1, #32
 80088e8:	4807      	ldr	r0, [pc, #28]	; (8008908 <Error_Handler+0xb4>)
 80088ea:	f7f8 ff99 	bl	8001820 <HAL_GPIO_WritePin>
  		break;
 80088ee:	e00a      	b.n	8008906 <Error_Handler+0xb2>
  	case OPEN_ERROR:
  		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80088f0:	2201      	movs	r2, #1
 80088f2:	2120      	movs	r1, #32
 80088f4:	4804      	ldr	r0, [pc, #16]	; (8008908 <Error_Handler+0xb4>)
 80088f6:	f7f8 ff93 	bl	8001820 <HAL_GPIO_WritePin>
  		break;
 80088fa:	e004      	b.n	8008906 <Error_Handler+0xb2>
  	default:
  	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80088fc:	2200      	movs	r2, #0
 80088fe:	2120      	movs	r1, #32
 8008900:	4801      	ldr	r0, [pc, #4]	; (8008908 <Error_Handler+0xb4>)
 8008902:	f7f8 ff8d 	bl	8001820 <HAL_GPIO_WritePin>
  	switch(ERROR){
 8008906:	e7aa      	b.n	800885e <Error_Handler+0xa>
 8008908:	40020000 	.word	0x40020000

0800890c <microSD_init>:
uint32_t totalSpace, freeSpace;

char buffer[100];
char file_name[50];

void microSD_init (void){
 800890c:	b580      	push	{r7, lr}
 800890e:	b086      	sub	sp, #24
 8008910:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8008912:	2300      	movs	r3, #0
 8008914:	603b      	str	r3, [r7, #0]
 8008916:	4b33      	ldr	r3, [pc, #204]	; (80089e4 <microSD_init+0xd8>)
 8008918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800891a:	4a32      	ldr	r2, [pc, #200]	; (80089e4 <microSD_init+0xd8>)
 800891c:	f043 0302 	orr.w	r3, r3, #2
 8008920:	6313      	str	r3, [r2, #48]	; 0x30
 8008922:	4b30      	ldr	r3, [pc, #192]	; (80089e4 <microSD_init+0xd8>)
 8008924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008926:	f003 0302 	and.w	r3, r3, #2
 800892a:	603b      	str	r3, [r7, #0]
 800892c:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800892e:	1d3b      	adds	r3, r7, #4
 8008930:	2200      	movs	r2, #0
 8008932:	601a      	str	r2, [r3, #0]
 8008934:	605a      	str	r2, [r3, #4]
 8008936:	609a      	str	r2, [r3, #8]
 8008938:	60da      	str	r2, [r3, #12]
 800893a:	611a      	str	r2, [r3, #16]

  // Configure GPIO pin : PH1_Pin
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_1, GPIO_PIN_RESET);
 800893c:	2200      	movs	r2, #0
 800893e:	2102      	movs	r1, #2
 8008940:	4829      	ldr	r0, [pc, #164]	; (80089e8 <microSD_init+0xdc>)
 8008942:	f7f8 ff6d 	bl	8001820 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8008946:	2302      	movs	r3, #2
 8008948:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800894a:	2300      	movs	r3, #0
 800894c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800894e:	2300      	movs	r3, #0
 8008950:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008952:	2300      	movs	r3, #0
 8008954:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8008956:	1d3b      	adds	r3, r7, #4
 8008958:	4619      	mov	r1, r3
 800895a:	4823      	ldr	r0, [pc, #140]	; (80089e8 <microSD_init+0xdc>)
 800895c:	f7f8 fdc6 	bl	80014ec <HAL_GPIO_Init>

  // Configure GPIO pin : SD_CS_Pin
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8008960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008964:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008966:	2301      	movs	r3, #1
 8008968:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800896a:	2300      	movs	r3, #0
 800896c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800896e:	2300      	movs	r3, #0
 8008970:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8008972:	1d3b      	adds	r3, r7, #4
 8008974:	4619      	mov	r1, r3
 8008976:	481d      	ldr	r0, [pc, #116]	; (80089ec <microSD_init+0xe0>)
 8008978:	f7f8 fdb8 	bl	80014ec <HAL_GPIO_Init>


  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800897c:	4b1c      	ldr	r3, [pc, #112]	; (80089f0 <microSD_init+0xe4>)
 800897e:	4a1d      	ldr	r2, [pc, #116]	; (80089f4 <microSD_init+0xe8>)
 8008980:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8008982:	4b1b      	ldr	r3, [pc, #108]	; (80089f0 <microSD_init+0xe4>)
 8008984:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008988:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800898a:	4b19      	ldr	r3, [pc, #100]	; (80089f0 <microSD_init+0xe4>)
 800898c:	2200      	movs	r2, #0
 800898e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8008990:	4b17      	ldr	r3, [pc, #92]	; (80089f0 <microSD_init+0xe4>)
 8008992:	2200      	movs	r2, #0
 8008994:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008996:	4b16      	ldr	r3, [pc, #88]	; (80089f0 <microSD_init+0xe4>)
 8008998:	2200      	movs	r2, #0
 800899a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800899c:	4b14      	ldr	r3, [pc, #80]	; (80089f0 <microSD_init+0xe4>)
 800899e:	2200      	movs	r2, #0
 80089a0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80089a2:	4b13      	ldr	r3, [pc, #76]	; (80089f0 <microSD_init+0xe4>)
 80089a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80089a8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;	//SPI_BAUDRATEPRESCALER_2
 80089aa:	4b11      	ldr	r3, [pc, #68]	; (80089f0 <microSD_init+0xe4>)
 80089ac:	2200      	movs	r2, #0
 80089ae:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80089b0:	4b0f      	ldr	r3, [pc, #60]	; (80089f0 <microSD_init+0xe4>)
 80089b2:	2200      	movs	r2, #0
 80089b4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80089b6:	4b0e      	ldr	r3, [pc, #56]	; (80089f0 <microSD_init+0xe4>)
 80089b8:	2200      	movs	r2, #0
 80089ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80089bc:	4b0c      	ldr	r3, [pc, #48]	; (80089f0 <microSD_init+0xe4>)
 80089be:	2200      	movs	r2, #0
 80089c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80089c2:	4b0b      	ldr	r3, [pc, #44]	; (80089f0 <microSD_init+0xe4>)
 80089c4:	220a      	movs	r2, #10
 80089c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80089c8:	4809      	ldr	r0, [pc, #36]	; (80089f0 <microSD_init+0xe4>)
 80089ca:	f7f9 fba5 	bl	8002118 <HAL_SPI_Init>
 80089ce:	4603      	mov	r3, r0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d002      	beq.n	80089da <microSD_init+0xce>
  {
    Error_Handler(SPI_ERROR);
 80089d4:	2009      	movs	r0, #9
 80089d6:	f7ff ff3d 	bl	8008854 <Error_Handler>
  }
}
 80089da:	bf00      	nop
 80089dc:	3718      	adds	r7, #24
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop
 80089e4:	40023800 	.word	0x40023800
 80089e8:	40021c00 	.word	0x40021c00
 80089ec:	40020400 	.word	0x40020400
 80089f0:	20002598 	.word	0x20002598
 80089f4:	40003800 	.word	0x40003800

080089f8 <transmit_uart_SD>:

void transmit_uart_SD(char *string){
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b084      	sub	sp, #16
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f7f7 fbed 	bl	80001e0 <strlen>
 8008a06:	4603      	mov	r3, r0
 8008a08:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t*) string, len, 200);
 8008a0a:	7bfb      	ldrb	r3, [r7, #15]
 8008a0c:	b29a      	uxth	r2, r3
 8008a0e:	23c8      	movs	r3, #200	; 0xc8
 8008a10:	6879      	ldr	r1, [r7, #4]
 8008a12:	4803      	ldr	r0, [pc, #12]	; (8008a20 <transmit_uart_SD+0x28>)
 8008a14:	f7fa fd9c 	bl	8003550 <HAL_UART_Transmit>
}
 8008a18:	bf00      	nop
 8008a1a:	3710      	adds	r7, #16
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}
 8008a20:	20002454 	.word	0x20002454

08008a24 <check_microSD_conn>:

uint8_t check_microSD_conn (void) {
 8008a24:	b580      	push	{r7, lr}
 8008a26:	af00      	add	r7, sp, #0
	if(!(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_1))){
 8008a28:	2102      	movs	r1, #2
 8008a2a:	4805      	ldr	r0, [pc, #20]	; (8008a40 <check_microSD_conn+0x1c>)
 8008a2c:	f7f8 fee0 	bl	80017f0 <HAL_GPIO_ReadPin>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d101      	bne.n	8008a3a <check_microSD_conn+0x16>
		return 0;
 8008a36:	2300      	movs	r3, #0
 8008a38:	e000      	b.n	8008a3c <check_microSD_conn+0x18>
	}
	return 1;
 8008a3a:	2301      	movs	r3, #1
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	40021c00 	.word	0x40021c00

08008a44 <mount_sd>:

void mount_sd(void){
 8008a44:	b580      	push	{r7, lr}
 8008a46:	af00      	add	r7, sp, #0
	fres = f_mount(&fs, "", 0);
 8008a48:	2200      	movs	r2, #0
 8008a4a:	490a      	ldr	r1, [pc, #40]	; (8008a74 <mount_sd+0x30>)
 8008a4c:	480a      	ldr	r0, [pc, #40]	; (8008a78 <mount_sd+0x34>)
 8008a4e:	f7fd fed1 	bl	80067f4 <f_mount>
 8008a52:	4603      	mov	r3, r0
 8008a54:	461a      	mov	r2, r3
 8008a56:	4b09      	ldr	r3, [pc, #36]	; (8008a7c <mount_sd+0x38>)
 8008a58:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK) {
 8008a5a:	4b08      	ldr	r3, [pc, #32]	; (8008a7c <mount_sd+0x38>)
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d103      	bne.n	8008a6a <mount_sd+0x26>
		transmit_uart_SD("PASS - MicroSD card is mounted successfully!\r\n");
 8008a62:	4807      	ldr	r0, [pc, #28]	; (8008a80 <mount_sd+0x3c>)
 8008a64:	f7ff ffc8 	bl	80089f8 <transmit_uart_SD>
	} else {
		transmit_uart_SD("FAIL - MicroSD card's mount error!\r\n");
	}
	return;
 8008a68:	e003      	b.n	8008a72 <mount_sd+0x2e>
		transmit_uart_SD("FAIL - MicroSD card's mount error!\r\n");
 8008a6a:	4806      	ldr	r0, [pc, #24]	; (8008a84 <mount_sd+0x40>)
 8008a6c:	f7ff ffc4 	bl	80089f8 <transmit_uart_SD>
	return;
 8008a70:	bf00      	nop
}
 8008a72:	bd80      	pop	{r7, pc}
 8008a74:	0800a554 	.word	0x0800a554
 8008a78:	200025f0 	.word	0x200025f0
 8008a7c:	200036cc 	.word	0x200036cc
 8008a80:	0800a558 	.word	0x0800a558
 8008a84:	0800a588 	.word	0x0800a588

08008a88 <open_file>:

void open_file(char* file_name){
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
	if(f_open(&fil, file_name, FA_OPEN_ALWAYS | FA_READ | FA_WRITE) != FR_OK) {
 8008a90:	2213      	movs	r2, #19
 8008a92:	6879      	ldr	r1, [r7, #4]
 8008a94:	4808      	ldr	r0, [pc, #32]	; (8008ab8 <open_file+0x30>)
 8008a96:	f7fd fef3 	bl	8006880 <f_open>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d003      	beq.n	8008aa8 <open_file+0x20>
		transmit_uart_SD("FAIL - File not opened.\r\n");
 8008aa0:	4806      	ldr	r0, [pc, #24]	; (8008abc <open_file+0x34>)
 8008aa2:	f7ff ffa9 	bl	80089f8 <transmit_uart_SD>
	} else {
		transmit_uart_SD("PASS - File successfully opened.\r\n");
	}
	return;
 8008aa6:	e003      	b.n	8008ab0 <open_file+0x28>
		transmit_uart_SD("PASS - File successfully opened.\r\n");
 8008aa8:	4805      	ldr	r0, [pc, #20]	; (8008ac0 <open_file+0x38>)
 8008aaa:	f7ff ffa5 	bl	80089f8 <transmit_uart_SD>
	return;
 8008aae:	bf00      	nop
}
 8008ab0:	3708      	adds	r7, #8
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	200036d0 	.word	0x200036d0
 8008abc:	0800a5b0 	.word	0x0800a5b0
 8008ac0:	0800a5cc 	.word	0x0800a5cc

08008ac4 <get_freespace>:

void get_freespace(void){
 8008ac4:	b590      	push	{r4, r7, lr}
 8008ac6:	b085      	sub	sp, #20
 8008ac8:	af00      	add	r7, sp, #0
	fres = f_getfree("", &fre_clust, &pfs);
 8008aca:	4a2f      	ldr	r2, [pc, #188]	; (8008b88 <get_freespace+0xc4>)
 8008acc:	492f      	ldr	r1, [pc, #188]	; (8008b8c <get_freespace+0xc8>)
 8008ace:	4830      	ldr	r0, [pc, #192]	; (8008b90 <get_freespace+0xcc>)
 8008ad0:	f7fe fd59 	bl	8007586 <f_getfree>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	4b2e      	ldr	r3, [pc, #184]	; (8008b94 <get_freespace+0xd0>)
 8008ada:	701a      	strb	r2, [r3, #0]
	totalSpace = (uint32_t) ((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8008adc:	4b2a      	ldr	r3, [pc, #168]	; (8008b88 <get_freespace+0xc4>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	69db      	ldr	r3, [r3, #28]
 8008ae2:	3b02      	subs	r3, #2
 8008ae4:	4a28      	ldr	r2, [pc, #160]	; (8008b88 <get_freespace+0xc4>)
 8008ae6:	6812      	ldr	r2, [r2, #0]
 8008ae8:	8952      	ldrh	r2, [r2, #10]
 8008aea:	fb02 f303 	mul.w	r3, r2, r3
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7f7 fd10 	bl	8000514 <__aeabi_ui2d>
 8008af4:	f04f 0200 	mov.w	r2, #0
 8008af8:	4b27      	ldr	r3, [pc, #156]	; (8008b98 <get_freespace+0xd4>)
 8008afa:	f7f7 fd85 	bl	8000608 <__aeabi_dmul>
 8008afe:	4603      	mov	r3, r0
 8008b00:	460c      	mov	r4, r1
 8008b02:	4618      	mov	r0, r3
 8008b04:	4621      	mov	r1, r4
 8008b06:	f7f7 ff91 	bl	8000a2c <__aeabi_d2uiz>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	4b23      	ldr	r3, [pc, #140]	; (8008b9c <get_freespace+0xd8>)
 8008b0e:	601a      	str	r2, [r3, #0]
	freeSpace = (uint32_t) (fre_clust * pfs->csize * 0.5);
 8008b10:	4b1d      	ldr	r3, [pc, #116]	; (8008b88 <get_freespace+0xc4>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	895b      	ldrh	r3, [r3, #10]
 8008b16:	461a      	mov	r2, r3
 8008b18:	4b1c      	ldr	r3, [pc, #112]	; (8008b8c <get_freespace+0xc8>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	fb03 f302 	mul.w	r3, r3, r2
 8008b20:	4618      	mov	r0, r3
 8008b22:	f7f7 fcf7 	bl	8000514 <__aeabi_ui2d>
 8008b26:	f04f 0200 	mov.w	r2, #0
 8008b2a:	4b1b      	ldr	r3, [pc, #108]	; (8008b98 <get_freespace+0xd4>)
 8008b2c:	f7f7 fd6c 	bl	8000608 <__aeabi_dmul>
 8008b30:	4603      	mov	r3, r0
 8008b32:	460c      	mov	r4, r1
 8008b34:	4618      	mov	r0, r3
 8008b36:	4621      	mov	r1, r4
 8008b38:	f7f7 ff78 	bl	8000a2c <__aeabi_d2uiz>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	4b18      	ldr	r3, [pc, #96]	; (8008ba0 <get_freespace+0xdc>)
 8008b40:	601a      	str	r2, [r3, #0]

	char mSz[12];
	sprintf(mSz, "%lu", freeSpace);
 8008b42:	4b17      	ldr	r3, [pc, #92]	; (8008ba0 <get_freespace+0xdc>)
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	1d3b      	adds	r3, r7, #4
 8008b48:	4916      	ldr	r1, [pc, #88]	; (8008ba4 <get_freespace+0xe0>)
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f001 f87e 	bl	8009c4c <siprintf>

	if (fres == FR_OK) {
 8008b50:	4b10      	ldr	r3, [pc, #64]	; (8008b94 <get_freespace+0xd0>)
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d10a      	bne.n	8008b6e <get_freespace+0xaa>
		transmit_uart_SD("PASS - Free space (kb): ");
 8008b58:	4813      	ldr	r0, [pc, #76]	; (8008ba8 <get_freespace+0xe4>)
 8008b5a:	f7ff ff4d 	bl	80089f8 <transmit_uart_SD>
		transmit_uart_SD(mSz);
 8008b5e:	1d3b      	adds	r3, r7, #4
 8008b60:	4618      	mov	r0, r3
 8008b62:	f7ff ff49 	bl	80089f8 <transmit_uart_SD>
		transmit_uart_SD("\r\n");
 8008b66:	4811      	ldr	r0, [pc, #68]	; (8008bac <get_freespace+0xe8>)
 8008b68:	f7ff ff46 	bl	80089f8 <transmit_uart_SD>
	} else if (fres != FR_OK) {
		transmit_uart_SD("FAIL - Free space failed to be determined.\r\n");
	}
	return;
 8008b6c:	e007      	b.n	8008b7e <get_freespace+0xba>
	} else if (fres != FR_OK) {
 8008b6e:	4b09      	ldr	r3, [pc, #36]	; (8008b94 <get_freespace+0xd0>)
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d003      	beq.n	8008b7e <get_freespace+0xba>
		transmit_uart_SD("FAIL - Free space failed to be determined.\r\n");
 8008b76:	480e      	ldr	r0, [pc, #56]	; (8008bb0 <get_freespace+0xec>)
 8008b78:	f7ff ff3e 	bl	80089f8 <transmit_uart_SD>
	return;
 8008b7c:	bf00      	nop
 8008b7e:	bf00      	nop
}
 8008b80:	3714      	adds	r7, #20
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd90      	pop	{r4, r7, pc}
 8008b86:	bf00      	nop
 8008b88:	200036c8 	.word	0x200036c8
 8008b8c:	20002594 	.word	0x20002594
 8008b90:	0800a554 	.word	0x0800a554
 8008b94:	200036cc 	.word	0x200036cc
 8008b98:	3fe00000 	.word	0x3fe00000
 8008b9c:	20003628 	.word	0x20003628
 8008ba0:	200036c4 	.word	0x200036c4
 8008ba4:	0800a5f0 	.word	0x0800a5f0
 8008ba8:	0800a5f4 	.word	0x0800a5f4
 8008bac:	0800a610 	.word	0x0800a610
 8008bb0:	0800a614 	.word	0x0800a614

08008bb4 <write_file>:

void write_file(void){
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 10; i++) {
 8008bba:	2300      	movs	r3, #0
 8008bbc:	71fb      	strb	r3, [r7, #7]
 8008bbe:	e006      	b.n	8008bce <write_file+0x1a>
		f_puts("This text is written in the file.\n", &fil);
 8008bc0:	4908      	ldr	r1, [pc, #32]	; (8008be4 <write_file+0x30>)
 8008bc2:	4809      	ldr	r0, [pc, #36]	; (8008be8 <write_file+0x34>)
 8008bc4:	f7fe fe49 	bl	800785a <f_puts>
	for (uint8_t i = 0; i < 10; i++) {
 8008bc8:	79fb      	ldrb	r3, [r7, #7]
 8008bca:	3301      	adds	r3, #1
 8008bcc:	71fb      	strb	r3, [r7, #7]
 8008bce:	79fb      	ldrb	r3, [r7, #7]
 8008bd0:	2b09      	cmp	r3, #9
 8008bd2:	d9f5      	bls.n	8008bc0 <write_file+0xc>
	}
	transmit_uart_SD("PASS - Writing complete.\r\n");
 8008bd4:	4805      	ldr	r0, [pc, #20]	; (8008bec <write_file+0x38>)
 8008bd6:	f7ff ff0f 	bl	80089f8 <transmit_uart_SD>
	return;
 8008bda:	bf00      	nop
}
 8008bdc:	3708      	adds	r7, #8
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	200036d0 	.word	0x200036d0
 8008be8:	0800a644 	.word	0x0800a644
 8008bec:	0800a668 	.word	0x0800a668

08008bf0 <close_file>:

void close_file(void){
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	af00      	add	r7, sp, #0
	fres = f_close(&fil);
 8008bf4:	480c      	ldr	r0, [pc, #48]	; (8008c28 <close_file+0x38>)
 8008bf6:	f7fe fb80 	bl	80072fa <f_close>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	4b0b      	ldr	r3, [pc, #44]	; (8008c2c <close_file+0x3c>)
 8008c00:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK) {
 8008c02:	4b0a      	ldr	r3, [pc, #40]	; (8008c2c <close_file+0x3c>)
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d103      	bne.n	8008c12 <close_file+0x22>
		transmit_uart_SD("PASS - File successfully closed.\r\n");
 8008c0a:	4809      	ldr	r0, [pc, #36]	; (8008c30 <close_file+0x40>)
 8008c0c:	f7ff fef4 	bl	80089f8 <transmit_uart_SD>
	} else if (fres != FR_OK) {
		transmit_uart_SD("FAIL - File failed to close.\r\n");
	}
	return;
 8008c10:	e007      	b.n	8008c22 <close_file+0x32>
	} else if (fres != FR_OK) {
 8008c12:	4b06      	ldr	r3, [pc, #24]	; (8008c2c <close_file+0x3c>)
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d003      	beq.n	8008c22 <close_file+0x32>
		transmit_uart_SD("FAIL - File failed to close.\r\n");
 8008c1a:	4806      	ldr	r0, [pc, #24]	; (8008c34 <close_file+0x44>)
 8008c1c:	f7ff feec 	bl	80089f8 <transmit_uart_SD>
	return;
 8008c20:	bf00      	nop
 8008c22:	bf00      	nop
}
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	200036d0 	.word	0x200036d0
 8008c2c:	200036cc 	.word	0x200036cc
 8008c30:	0800a684 	.word	0x0800a684
 8008c34:	0800a6a8 	.word	0x0800a6a8

08008c38 <read_file>:

void read_file(void){
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b09a      	sub	sp, #104	; 0x68
 8008c3c:	af00      	add	r7, sp, #0
	transmit_uart_SD("Reading File...\r\n");
 8008c3e:	4812      	ldr	r0, [pc, #72]	; (8008c88 <read_file+0x50>)
 8008c40:	f7ff feda 	bl	80089f8 <transmit_uart_SD>
	transmit_uart_SD("Contents of File:\r\n");
 8008c44:	4811      	ldr	r0, [pc, #68]	; (8008c8c <read_file+0x54>)
 8008c46:	f7ff fed7 	bl	80089f8 <transmit_uart_SD>
	transmit_uart_SD("-----------------\r\n");
 8008c4a:	4811      	ldr	r0, [pc, #68]	; (8008c90 <read_file+0x58>)
 8008c4c:	f7ff fed4 	bl	80089f8 <transmit_uart_SD>

	while (f_gets(buffer, sizeof(buffer), &fil)) {
 8008c50:	e00b      	b.n	8008c6a <read_file+0x32>
		char mRd[100];
		sprintf(mRd, "%s", buffer);
 8008c52:	1d3b      	adds	r3, r7, #4
 8008c54:	490f      	ldr	r1, [pc, #60]	; (8008c94 <read_file+0x5c>)
 8008c56:	4618      	mov	r0, r3
 8008c58:	f001 f818 	bl	8009c8c <strcpy>

		transmit_uart_SD(mRd);
 8008c5c:	1d3b      	adds	r3, r7, #4
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f7ff feca 	bl	80089f8 <transmit_uart_SD>
		transmit_uart_SD("\r\n");
 8008c64:	480c      	ldr	r0, [pc, #48]	; (8008c98 <read_file+0x60>)
 8008c66:	f7ff fec7 	bl	80089f8 <transmit_uart_SD>
	while (f_gets(buffer, sizeof(buffer), &fil)) {
 8008c6a:	4a0c      	ldr	r2, [pc, #48]	; (8008c9c <read_file+0x64>)
 8008c6c:	2164      	movs	r1, #100	; 0x64
 8008c6e:	4809      	ldr	r0, [pc, #36]	; (8008c94 <read_file+0x5c>)
 8008c70:	f7fe fd3e 	bl	80076f0 <f_gets>
 8008c74:	4603      	mov	r3, r0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d1eb      	bne.n	8008c52 <read_file+0x1a>
	}

	transmit_uart_SD("-----------------\r\n");
 8008c7a:	4805      	ldr	r0, [pc, #20]	; (8008c90 <read_file+0x58>)
 8008c7c:	f7ff febc 	bl	80089f8 <transmit_uart_SD>
	return;
 8008c80:	bf00      	nop
}
 8008c82:	3768      	adds	r7, #104	; 0x68
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}
 8008c88:	0800a6c8 	.word	0x0800a6c8
 8008c8c:	0800a6dc 	.word	0x0800a6dc
 8008c90:	0800a6f0 	.word	0x0800a6f0
 8008c94:	20003660 	.word	0x20003660
 8008c98:	0800a610 	.word	0x0800a610
 8008c9c:	200036d0 	.word	0x200036d0

08008ca0 <unmount>:

void unmount(void){
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	af00      	add	r7, sp, #0
	f_mount(NULL, "", 1);
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	490b      	ldr	r1, [pc, #44]	; (8008cd4 <unmount+0x34>)
 8008ca8:	2000      	movs	r0, #0
 8008caa:	f7fd fda3 	bl	80067f4 <f_mount>
	if (fres == FR_OK) {
 8008cae:	4b0a      	ldr	r3, [pc, #40]	; (8008cd8 <unmount+0x38>)
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d103      	bne.n	8008cbe <unmount+0x1e>
		transmit_uart_SD("PASS - MicroSD successfully unmounted.\r\n");
 8008cb6:	4809      	ldr	r0, [pc, #36]	; (8008cdc <unmount+0x3c>)
 8008cb8:	f7ff fe9e 	bl	80089f8 <transmit_uart_SD>
	} else if (fres != FR_OK) {
		transmit_uart_SD("FAIL - MicroSD failed to unmount.\r\n");
	}
	return;
 8008cbc:	e007      	b.n	8008cce <unmount+0x2e>
	} else if (fres != FR_OK) {
 8008cbe:	4b06      	ldr	r3, [pc, #24]	; (8008cd8 <unmount+0x38>)
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d003      	beq.n	8008cce <unmount+0x2e>
		transmit_uart_SD("FAIL - MicroSD failed to unmount.\r\n");
 8008cc6:	4806      	ldr	r0, [pc, #24]	; (8008ce0 <unmount+0x40>)
 8008cc8:	f7ff fe96 	bl	80089f8 <transmit_uart_SD>
	return;
 8008ccc:	bf00      	nop
 8008cce:	bf00      	nop
}
 8008cd0:	bd80      	pop	{r7, pc}
 8008cd2:	bf00      	nop
 8008cd4:	0800a554 	.word	0x0800a554
 8008cd8:	200036cc 	.word	0x200036cc
 8008cdc:	0800a704 	.word	0x0800a704
 8008ce0:	0800a730 	.word	0x0800a730

08008ce4 <find_txt_file>:

/* Search a directory for objects and display it */
void find_txt_file (void)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b0d8      	sub	sp, #352	; 0x160
 8008ce8:	af00      	add	r7, sp, #0
    FRESULT fr;     /* Return value */
    DIR dj;         /* Directory object */
    FILINFO fno;    /* File information */

    uint8_t idx = 1;
 8008cea:	2301      	movs	r3, #1
 8008cec:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
    char index[5];

    transmit_uart_SD("\r\n");
 8008cf0:	482a      	ldr	r0, [pc, #168]	; (8008d9c <find_txt_file+0xb8>)
 8008cf2:	f7ff fe81 	bl	80089f8 <transmit_uart_SD>
    transmit_uart_SD("Text Files Found:\n\r");
 8008cf6:	482a      	ldr	r0, [pc, #168]	; (8008da0 <find_txt_file+0xbc>)
 8008cf8:	f7ff fe7e 	bl	80089f8 <transmit_uart_SD>
    transmit_uart_SD("-----------------\n\r");
 8008cfc:	4829      	ldr	r0, [pc, #164]	; (8008da4 <find_txt_file+0xc0>)
 8008cfe:	f7ff fe7b 	bl	80089f8 <transmit_uart_SD>

    //fr = f_findfirst(&dj, &fno, "", "dsc*.mp3");  /* Start to search for photo files */
    fr = f_findfirst(&dj, &fno, "", "???*.txt");
 8008d02:	f107 010c 	add.w	r1, r7, #12
 8008d06:	f507 7092 	add.w	r0, r7, #292	; 0x124
 8008d0a:	4b27      	ldr	r3, [pc, #156]	; (8008da8 <find_txt_file+0xc4>)
 8008d0c:	4a27      	ldr	r2, [pc, #156]	; (8008dac <find_txt_file+0xc8>)
 8008d0e:	f7fe fc1c 	bl	800754a <f_findfirst>
 8008d12:	4603      	mov	r3, r0
 8008d14:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f

    while (fr == FR_OK && fno.fname[0]) {         /* Repeat while an item is found */
 8008d18:	e029      	b.n	8008d6e <find_txt_file+0x8a>
      sprintf(index, "%u", idx);
 8008d1a:	f897 215e 	ldrb.w	r2, [r7, #350]	; 0x15e
 8008d1e:	1d3b      	adds	r3, r7, #4
 8008d20:	4923      	ldr	r1, [pc, #140]	; (8008db0 <find_txt_file+0xcc>)
 8008d22:	4618      	mov	r0, r3
 8008d24:	f000 ff92 	bl	8009c4c <siprintf>
      transmit_uart_SD("File ");
 8008d28:	4822      	ldr	r0, [pc, #136]	; (8008db4 <find_txt_file+0xd0>)
 8008d2a:	f7ff fe65 	bl	80089f8 <transmit_uart_SD>
    	transmit_uart_SD(index);
 8008d2e:	1d3b      	adds	r3, r7, #4
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7ff fe61 	bl	80089f8 <transmit_uart_SD>
    	transmit_uart_SD(": ");
 8008d36:	4820      	ldr	r0, [pc, #128]	; (8008db8 <find_txt_file+0xd4>)
 8008d38:	f7ff fe5e 	bl	80089f8 <transmit_uart_SD>
    	transmit_uart_SD(fno.fname);							/* Print the object name */
 8008d3c:	f107 030c 	add.w	r3, r7, #12
 8008d40:	3316      	adds	r3, #22
 8008d42:	4618      	mov	r0, r3
 8008d44:	f7ff fe58 	bl	80089f8 <transmit_uart_SD>
    	transmit_uart_SD("\r\n");
 8008d48:	4814      	ldr	r0, [pc, #80]	; (8008d9c <find_txt_file+0xb8>)
 8008d4a:	f7ff fe55 	bl	80089f8 <transmit_uart_SD>

    	fr = f_findnext(&dj, &fno);               /* Search for next item */
 8008d4e:	f107 020c 	add.w	r2, r7, #12
 8008d52:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8008d56:	4611      	mov	r1, r2
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f7fe fbce 	bl	80074fa <f_findnext>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f

    	idx++;
 8008d64:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8008d68:	3301      	adds	r3, #1
 8008d6a:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
    while (fr == FR_OK && fno.fname[0]) {         /* Repeat while an item is found */
 8008d6e:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d104      	bne.n	8008d80 <find_txt_file+0x9c>
 8008d76:	f107 030c 	add.w	r3, r7, #12
 8008d7a:	7d9b      	ldrb	r3, [r3, #22]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d1cc      	bne.n	8008d1a <find_txt_file+0x36>
    }

    transmit_uart_SD("-----------------\n\r");
 8008d80:	4808      	ldr	r0, [pc, #32]	; (8008da4 <find_txt_file+0xc0>)
 8008d82:	f7ff fe39 	bl	80089f8 <transmit_uart_SD>
    f_closedir(&dj);
 8008d86:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f7fe fb52 	bl	8007434 <f_closedir>
}
 8008d90:	bf00      	nop
 8008d92:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	0800a610 	.word	0x0800a610
 8008da0:	0800a754 	.word	0x0800a754
 8008da4:	0800a768 	.word	0x0800a768
 8008da8:	0800a77c 	.word	0x0800a77c
 8008dac:	0800a554 	.word	0x0800a554
 8008db0:	0800a788 	.word	0x0800a788
 8008db4:	0800a78c 	.word	0x0800a78c
 8008db8:	0800a794 	.word	0x0800a794

08008dbc <find_mp3_file>:

/* Search a directory for objects and display it */
void find_mp3_file (void)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b0d8      	sub	sp, #352	; 0x160
 8008dc0:	af00      	add	r7, sp, #0
    FRESULT fr;     /* Return value */
    DIR dj;         /* Directory object */
    FILINFO fno;    /* File information */

    uint8_t idx = 1;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
    char index[5];

    transmit_uart_SD("\r\n");
 8008dc8:	482a      	ldr	r0, [pc, #168]	; (8008e74 <find_mp3_file+0xb8>)
 8008dca:	f7ff fe15 	bl	80089f8 <transmit_uart_SD>
    transmit_uart_SD("MP3 Files Found:\n\r");
 8008dce:	482a      	ldr	r0, [pc, #168]	; (8008e78 <find_mp3_file+0xbc>)
 8008dd0:	f7ff fe12 	bl	80089f8 <transmit_uart_SD>
    transmit_uart_SD("----------------\n\r");
 8008dd4:	4829      	ldr	r0, [pc, #164]	; (8008e7c <find_mp3_file+0xc0>)
 8008dd6:	f7ff fe0f 	bl	80089f8 <transmit_uart_SD>
    //fr = f_findfirst(&dj, &fno, "", "dsc*.mp3");  /* Start to search for photo files */
    fr = f_findfirst(&dj, &fno, "", "???*.mp3");
 8008dda:	f107 010c 	add.w	r1, r7, #12
 8008dde:	f507 7092 	add.w	r0, r7, #292	; 0x124
 8008de2:	4b27      	ldr	r3, [pc, #156]	; (8008e80 <find_mp3_file+0xc4>)
 8008de4:	4a27      	ldr	r2, [pc, #156]	; (8008e84 <find_mp3_file+0xc8>)
 8008de6:	f7fe fbb0 	bl	800754a <f_findfirst>
 8008dea:	4603      	mov	r3, r0
 8008dec:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f

    while (fr == FR_OK && fno.fname[0]) {         /* Repeat while an item is found */
 8008df0:	e029      	b.n	8008e46 <find_mp3_file+0x8a>

      sprintf(index, "%u", idx);
 8008df2:	f897 215e 	ldrb.w	r2, [r7, #350]	; 0x15e
 8008df6:	1d3b      	adds	r3, r7, #4
 8008df8:	4923      	ldr	r1, [pc, #140]	; (8008e88 <find_mp3_file+0xcc>)
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f000 ff26 	bl	8009c4c <siprintf>
      transmit_uart_SD("File ");
 8008e00:	4822      	ldr	r0, [pc, #136]	; (8008e8c <find_mp3_file+0xd0>)
 8008e02:	f7ff fdf9 	bl	80089f8 <transmit_uart_SD>
    	transmit_uart_SD(index);
 8008e06:	1d3b      	adds	r3, r7, #4
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f7ff fdf5 	bl	80089f8 <transmit_uart_SD>
    	transmit_uart_SD(": ");
 8008e0e:	4820      	ldr	r0, [pc, #128]	; (8008e90 <find_mp3_file+0xd4>)
 8008e10:	f7ff fdf2 	bl	80089f8 <transmit_uart_SD>
    	transmit_uart_SD(fno.fname);							/* Print the object name */
 8008e14:	f107 030c 	add.w	r3, r7, #12
 8008e18:	3316      	adds	r3, #22
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f7ff fdec 	bl	80089f8 <transmit_uart_SD>
    	transmit_uart_SD("\r\n");
 8008e20:	4814      	ldr	r0, [pc, #80]	; (8008e74 <find_mp3_file+0xb8>)
 8008e22:	f7ff fde9 	bl	80089f8 <transmit_uart_SD>

    	fr = f_findnext(&dj, &fno);               /* Search for next item */
 8008e26:	f107 020c 	add.w	r2, r7, #12
 8008e2a:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8008e2e:	4611      	mov	r1, r2
 8008e30:	4618      	mov	r0, r3
 8008e32:	f7fe fb62 	bl	80074fa <f_findnext>
 8008e36:	4603      	mov	r3, r0
 8008e38:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f

    	idx++;
 8008e3c:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8008e40:	3301      	adds	r3, #1
 8008e42:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
    while (fr == FR_OK && fno.fname[0]) {         /* Repeat while an item is found */
 8008e46:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d104      	bne.n	8008e58 <find_mp3_file+0x9c>
 8008e4e:	f107 030c 	add.w	r3, r7, #12
 8008e52:	7d9b      	ldrb	r3, [r3, #22]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d1cc      	bne.n	8008df2 <find_mp3_file+0x36>
    }
    transmit_uart_SD("----------------\n\r");
 8008e58:	4808      	ldr	r0, [pc, #32]	; (8008e7c <find_mp3_file+0xc0>)
 8008e5a:	f7ff fdcd 	bl	80089f8 <transmit_uart_SD>
    f_closedir(&dj);
 8008e5e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8008e62:	4618      	mov	r0, r3
 8008e64:	f7fe fae6 	bl	8007434 <f_closedir>
}
 8008e68:	bf00      	nop
 8008e6a:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	0800a610 	.word	0x0800a610
 8008e78:	0800a798 	.word	0x0800a798
 8008e7c:	0800a7ac 	.word	0x0800a7ac
 8008e80:	0800a7c0 	.word	0x0800a7c0
 8008e84:	0800a554 	.word	0x0800a554
 8008e88:	0800a788 	.word	0x0800a788
 8008e8c:	0800a78c 	.word	0x0800a78c
 8008e90:	0800a794 	.word	0x0800a794

08008e94 <HAL_TIM_PWM_MspInit>:
  */

//Msp = MCU Support Package

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b083      	sub	sp, #12
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  // ##-2- Configure the NVIC for DMA #########################################
  // NVIC configuration for DMA transfer complete interrupt
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
  */
}
 8008e9c:	bf00      	nop
 8008e9e:	370c      	adds	r7, #12
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr

08008ea8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b08a      	sub	sp, #40	; 0x28
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008eb0:	f107 0314 	add.w	r3, r7, #20
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	601a      	str	r2, [r3, #0]
 8008eb8:	605a      	str	r2, [r3, #4]
 8008eba:	609a      	str	r2, [r3, #8]
 8008ebc:	60da      	str	r2, [r3, #12]
 8008ebe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a19      	ldr	r2, [pc, #100]	; (8008f2c <HAL_UART_MspInit+0x84>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d12b      	bne.n	8008f22 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008eca:	2300      	movs	r3, #0
 8008ecc:	613b      	str	r3, [r7, #16]
 8008ece:	4b18      	ldr	r3, [pc, #96]	; (8008f30 <HAL_UART_MspInit+0x88>)
 8008ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ed2:	4a17      	ldr	r2, [pc, #92]	; (8008f30 <HAL_UART_MspInit+0x88>)
 8008ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8008eda:	4b15      	ldr	r3, [pc, #84]	; (8008f30 <HAL_UART_MspInit+0x88>)
 8008edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ee2:	613b      	str	r3, [r7, #16]
 8008ee4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	60fb      	str	r3, [r7, #12]
 8008eea:	4b11      	ldr	r3, [pc, #68]	; (8008f30 <HAL_UART_MspInit+0x88>)
 8008eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eee:	4a10      	ldr	r2, [pc, #64]	; (8008f30 <HAL_UART_MspInit+0x88>)
 8008ef0:	f043 0301 	orr.w	r3, r3, #1
 8008ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8008ef6:	4b0e      	ldr	r3, [pc, #56]	; (8008f30 <HAL_UART_MspInit+0x88>)
 8008ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008efa:	f003 0301 	and.w	r3, r3, #1
 8008efe:	60fb      	str	r3, [r7, #12]
 8008f00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8008f02:	230c      	movs	r3, #12
 8008f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f06:	2302      	movs	r3, #2
 8008f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f0e:	2303      	movs	r3, #3
 8008f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008f12:	2307      	movs	r3, #7
 8008f14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f16:	f107 0314 	add.w	r3, r7, #20
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	4805      	ldr	r0, [pc, #20]	; (8008f34 <HAL_UART_MspInit+0x8c>)
 8008f1e:	f7f8 fae5 	bl	80014ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8008f22:	bf00      	nop
 8008f24:	3728      	adds	r7, #40	; 0x28
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	bf00      	nop
 8008f2c:	40004400 	.word	0x40004400
 8008f30:	40023800 	.word	0x40023800
 8008f34:	40020000 	.word	0x40020000

08008f38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b08a      	sub	sp, #40	; 0x28
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f40:	f107 0314 	add.w	r3, r7, #20
 8008f44:	2200      	movs	r2, #0
 8008f46:	601a      	str	r2, [r3, #0]
 8008f48:	605a      	str	r2, [r3, #4]
 8008f4a:	609a      	str	r2, [r3, #8]
 8008f4c:	60da      	str	r2, [r3, #12]
 8008f4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a28      	ldr	r2, [pc, #160]	; (8008ff8 <HAL_SPI_MspInit+0xc0>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d14a      	bne.n	8008ff0 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	613b      	str	r3, [r7, #16]
 8008f5e:	4b27      	ldr	r3, [pc, #156]	; (8008ffc <HAL_SPI_MspInit+0xc4>)
 8008f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f62:	4a26      	ldr	r2, [pc, #152]	; (8008ffc <HAL_SPI_MspInit+0xc4>)
 8008f64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008f68:	6413      	str	r3, [r2, #64]	; 0x40
 8008f6a:	4b24      	ldr	r3, [pc, #144]	; (8008ffc <HAL_SPI_MspInit+0xc4>)
 8008f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f72:	613b      	str	r3, [r7, #16]
 8008f74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008f76:	2300      	movs	r3, #0
 8008f78:	60fb      	str	r3, [r7, #12]
 8008f7a:	4b20      	ldr	r3, [pc, #128]	; (8008ffc <HAL_SPI_MspInit+0xc4>)
 8008f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f7e:	4a1f      	ldr	r2, [pc, #124]	; (8008ffc <HAL_SPI_MspInit+0xc4>)
 8008f80:	f043 0304 	orr.w	r3, r3, #4
 8008f84:	6313      	str	r3, [r2, #48]	; 0x30
 8008f86:	4b1d      	ldr	r3, [pc, #116]	; (8008ffc <HAL_SPI_MspInit+0xc4>)
 8008f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f8a:	f003 0304 	and.w	r3, r3, #4
 8008f8e:	60fb      	str	r3, [r7, #12]
 8008f90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008f92:	2300      	movs	r3, #0
 8008f94:	60bb      	str	r3, [r7, #8]
 8008f96:	4b19      	ldr	r3, [pc, #100]	; (8008ffc <HAL_SPI_MspInit+0xc4>)
 8008f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f9a:	4a18      	ldr	r2, [pc, #96]	; (8008ffc <HAL_SPI_MspInit+0xc4>)
 8008f9c:	f043 0302 	orr.w	r3, r3, #2
 8008fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8008fa2:	4b16      	ldr	r3, [pc, #88]	; (8008ffc <HAL_SPI_MspInit+0xc4>)
 8008fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fa6:	f003 0302 	and.w	r3, r3, #2
 8008faa:	60bb      	str	r3, [r7, #8]
 8008fac:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO  --> DO
    PC3     ------> SPI2_MOSI  --> DI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8008fae:	230c      	movs	r3, #12
 8008fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008fb2:	2302      	movs	r3, #2
 8008fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008fba:	2303      	movs	r3, #3
 8008fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008fbe:	2305      	movs	r3, #5
 8008fc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008fc2:	f107 0314 	add.w	r3, r7, #20
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	480d      	ldr	r0, [pc, #52]	; (8009000 <HAL_SPI_MspInit+0xc8>)
 8008fca:	f7f8 fa8f 	bl	80014ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008fce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008fd4:	2302      	movs	r3, #2
 8008fd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008fdc:	2303      	movs	r3, #3
 8008fde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008fe0:	2305      	movs	r3, #5
 8008fe2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008fe4:	f107 0314 	add.w	r3, r7, #20
 8008fe8:	4619      	mov	r1, r3
 8008fea:	4806      	ldr	r0, [pc, #24]	; (8009004 <HAL_SPI_MspInit+0xcc>)
 8008fec:	f7f8 fa7e 	bl	80014ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8008ff0:	bf00      	nop
 8008ff2:	3728      	adds	r7, #40	; 0x28
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}
 8008ff8:	40003800 	.word	0x40003800
 8008ffc:	40023800 	.word	0x40023800
 8009000:	40020800 	.word	0x40020800
 8009004:	40020400 	.word	0x40020400

08009008 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8009008:	b480      	push	{r7}
 800900a:	af00      	add	r7, sp, #0
}
 800900c:	bf00      	nop
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr

08009016 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8009016:	b480      	push	{r7}
 8009018:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800901a:	e7fe      	b.n	800901a <HardFault_Handler+0x4>

0800901c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800901c:	b480      	push	{r7}
 800901e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8009020:	e7fe      	b.n	8009020 <MemManage_Handler+0x4>

08009022 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8009022:	b480      	push	{r7}
 8009024:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8009026:	e7fe      	b.n	8009026 <BusFault_Handler+0x4>

08009028 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8009028:	b480      	push	{r7}
 800902a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800902c:	e7fe      	b.n	800902c <UsageFault_Handler+0x4>

0800902e <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800902e:	b480      	push	{r7}
 8009030:	af00      	add	r7, sp, #0
}
 8009032:	bf00      	nop
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800903c:	b480      	push	{r7}
 800903e:	af00      	add	r7, sp, #0
}
 8009040:	bf00      	nop
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr

0800904a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800904a:	b480      	push	{r7}
 800904c:	af00      	add	r7, sp, #0
}
 800904e:	bf00      	nop
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr

08009058 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	af00      	add	r7, sp, #0
	/* USER CODE 1 */
	// For SPI microSD
	if(Timer1 > 0)
 800905c:	4b0c      	ldr	r3, [pc, #48]	; (8009090 <SysTick_Handler+0x38>)
 800905e:	881b      	ldrh	r3, [r3, #0]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d005      	beq.n	8009070 <SysTick_Handler+0x18>
		Timer1--;
 8009064:	4b0a      	ldr	r3, [pc, #40]	; (8009090 <SysTick_Handler+0x38>)
 8009066:	881b      	ldrh	r3, [r3, #0]
 8009068:	3b01      	subs	r3, #1
 800906a:	b29a      	uxth	r2, r3
 800906c:	4b08      	ldr	r3, [pc, #32]	; (8009090 <SysTick_Handler+0x38>)
 800906e:	801a      	strh	r2, [r3, #0]

	if(Timer2 > 0)
 8009070:	4b08      	ldr	r3, [pc, #32]	; (8009094 <SysTick_Handler+0x3c>)
 8009072:	881b      	ldrh	r3, [r3, #0]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d005      	beq.n	8009084 <SysTick_Handler+0x2c>
		Timer2--;
 8009078:	4b06      	ldr	r3, [pc, #24]	; (8009094 <SysTick_Handler+0x3c>)
 800907a:	881b      	ldrh	r3, [r3, #0]
 800907c:	3b01      	subs	r3, #1
 800907e:	b29a      	uxth	r2, r3
 8009080:	4b04      	ldr	r3, [pc, #16]	; (8009094 <SysTick_Handler+0x3c>)
 8009082:	801a      	strh	r2, [r3, #0]

	/* USER CODE 1 END */
  HAL_IncTick();
 8009084:	f7f7 fecc 	bl	8000e20 <HAL_IncTick>

  /* USER CODE 2 */
  HAL_SYSTICK_IRQHandler();
 8009088:	f7f8 f81d 	bl	80010c6 <HAL_SYSTICK_IRQHandler>
  /* USER CODE 2 END */
}
 800908c:	bf00      	nop
 800908e:	bd80      	pop	{r7, pc}
 8009090:	2000235a 	.word	0x2000235a
 8009094:	20002358 	.word	0x20002358

08009098 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80090a0:	4b11      	ldr	r3, [pc, #68]	; (80090e8 <_sbrk+0x50>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d102      	bne.n	80090ae <_sbrk+0x16>
		heap_end = &end;
 80090a8:	4b0f      	ldr	r3, [pc, #60]	; (80090e8 <_sbrk+0x50>)
 80090aa:	4a10      	ldr	r2, [pc, #64]	; (80090ec <_sbrk+0x54>)
 80090ac:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80090ae:	4b0e      	ldr	r3, [pc, #56]	; (80090e8 <_sbrk+0x50>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80090b4:	4b0c      	ldr	r3, [pc, #48]	; (80090e8 <_sbrk+0x50>)
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	4413      	add	r3, r2
 80090bc:	466a      	mov	r2, sp
 80090be:	4293      	cmp	r3, r2
 80090c0:	d907      	bls.n	80090d2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80090c2:	f000 fd91 	bl	8009be8 <__errno>
 80090c6:	4602      	mov	r2, r0
 80090c8:	230c      	movs	r3, #12
 80090ca:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80090cc:	f04f 33ff 	mov.w	r3, #4294967295
 80090d0:	e006      	b.n	80090e0 <_sbrk+0x48>
	}

	heap_end += incr;
 80090d2:	4b05      	ldr	r3, [pc, #20]	; (80090e8 <_sbrk+0x50>)
 80090d4:	681a      	ldr	r2, [r3, #0]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	4413      	add	r3, r2
 80090da:	4a03      	ldr	r2, [pc, #12]	; (80090e8 <_sbrk+0x50>)
 80090dc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80090de:	68fb      	ldr	r3, [r7, #12]
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3710      	adds	r7, #16
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}
 80090e8:	200002d8 	.word	0x200002d8
 80090ec:	20004708 	.word	0x20004708

080090f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80090f0:	b480      	push	{r7}
 80090f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80090f4:	4b16      	ldr	r3, [pc, #88]	; (8009150 <SystemInit+0x60>)
 80090f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090fa:	4a15      	ldr	r2, [pc, #84]	; (8009150 <SystemInit+0x60>)
 80090fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009100:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8009104:	4b13      	ldr	r3, [pc, #76]	; (8009154 <SystemInit+0x64>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a12      	ldr	r2, [pc, #72]	; (8009154 <SystemInit+0x64>)
 800910a:	f043 0301 	orr.w	r3, r3, #1
 800910e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009110:	4b10      	ldr	r3, [pc, #64]	; (8009154 <SystemInit+0x64>)
 8009112:	2200      	movs	r2, #0
 8009114:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8009116:	4b0f      	ldr	r3, [pc, #60]	; (8009154 <SystemInit+0x64>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4a0e      	ldr	r2, [pc, #56]	; (8009154 <SystemInit+0x64>)
 800911c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8009120:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009124:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8009126:	4b0b      	ldr	r3, [pc, #44]	; (8009154 <SystemInit+0x64>)
 8009128:	4a0b      	ldr	r2, [pc, #44]	; (8009158 <SystemInit+0x68>)
 800912a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800912c:	4b09      	ldr	r3, [pc, #36]	; (8009154 <SystemInit+0x64>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a08      	ldr	r2, [pc, #32]	; (8009154 <SystemInit+0x64>)
 8009132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009136:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8009138:	4b06      	ldr	r3, [pc, #24]	; (8009154 <SystemInit+0x64>)
 800913a:	2200      	movs	r2, #0
 800913c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800913e:	4b04      	ldr	r3, [pc, #16]	; (8009150 <SystemInit+0x60>)
 8009140:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009144:	609a      	str	r2, [r3, #8]
#endif
}
 8009146:	bf00      	nop
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr
 8009150:	e000ed00 	.word	0xe000ed00
 8009154:	40023800 	.word	0x40023800
 8009158:	24003010 	.word	0x24003010

0800915c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b082      	sub	sp, #8
 8009160:	af00      	add	r7, sp, #0
 8009162:	4603      	mov	r3, r0
 8009164:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8009166:	79fb      	ldrb	r3, [r7, #7]
 8009168:	4618      	mov	r0, r3
 800916a:	f7fe feb3 	bl	8007ed4 <SD_disk_initialize>
 800916e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8009170:	4618      	mov	r0, r3
 8009172:	3708      	adds	r7, #8
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
 800917e:	4603      	mov	r3, r0
 8009180:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8009182:	79fb      	ldrb	r3, [r7, #7]
 8009184:	4618      	mov	r0, r3
 8009186:	f7fe ff8b 	bl	80080a0 <SD_disk_status>
 800918a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800918c:	4618      	mov	r0, r3
 800918e:	3708      	adds	r7, #8
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b084      	sub	sp, #16
 8009198:	af00      	add	r7, sp, #0
 800919a:	60b9      	str	r1, [r7, #8]
 800919c:	607a      	str	r2, [r7, #4]
 800919e:	603b      	str	r3, [r7, #0]
 80091a0:	4603      	mov	r3, r0
 80091a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 80091a4:	7bf8      	ldrb	r0, [r7, #15]
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	687a      	ldr	r2, [r7, #4]
 80091aa:	68b9      	ldr	r1, [r7, #8]
 80091ac:	f7fe ff8e 	bl	80080cc <SD_disk_read>
 80091b0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3710      	adds	r7, #16
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}

080091ba <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b084      	sub	sp, #16
 80091be:	af00      	add	r7, sp, #0
 80091c0:	60b9      	str	r1, [r7, #8]
 80091c2:	607a      	str	r2, [r7, #4]
 80091c4:	603b      	str	r3, [r7, #0]
 80091c6:	4603      	mov	r3, r0
 80091c8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 80091ca:	7bf8      	ldrb	r0, [r7, #15]
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	68b9      	ldr	r1, [r7, #8]
 80091d2:	f7fe ffe5 	bl	80081a0 <SD_disk_write>
 80091d6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3710      	adds	r7, #16
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}

080091e0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b082      	sub	sp, #8
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	4603      	mov	r3, r0
 80091e8:	603a      	str	r2, [r7, #0]
 80091ea:	71fb      	strb	r3, [r7, #7]
 80091ec:	460b      	mov	r3, r1
 80091ee:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 80091f0:	79b9      	ldrb	r1, [r7, #6]
 80091f2:	79fb      	ldrb	r3, [r7, #7]
 80091f4:	683a      	ldr	r2, [r7, #0]
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7ff f856 	bl	80082a8 <SD_disk_ioctl>
 80091fc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3708      	adds	r7, #8
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
	...

08009208 <pulse>:
	}
	return;
}

// Pulse
void pulse(void){
 8009208:	b580      	push	{r7, lr}
 800920a:	b082      	sub	sp, #8
 800920c:	af00      	add	r7, sp, #0
	volatile uint32_t timeout;
	for (size_t i = 0; i < LED_CFG_STRIP_CNT; i++) {
 800920e:	2300      	movs	r3, #0
 8009210:	607b      	str	r3, [r7, #4]
 8009212:	e020      	b.n	8009256 <pulse+0x4e>
		set_LED_colors((i + 0) % LED_CFG_STRIP_CNT, 0x1F, 0x0, 0x1F);
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	4b13      	ldr	r3, [pc, #76]	; (8009264 <pulse+0x5c>)
 8009218:	fba3 1302 	umull	r1, r3, r3, r2
 800921c:	0898      	lsrs	r0, r3, #2
 800921e:	4603      	mov	r3, r0
 8009220:	009b      	lsls	r3, r3, #2
 8009222:	4403      	add	r3, r0
 8009224:	1ad0      	subs	r0, r2, r3
 8009226:	231f      	movs	r3, #31
 8009228:	2200      	movs	r2, #0
 800922a:	211f      	movs	r1, #31
 800922c:	f000 f882 	bl	8009334 <set_LED_colors>
		//set_LED_colors((i + 5) % LED_CFG_STRIP_CNT, 0, 0x1F, 0);
		//set_LED_colors((i + 6) % LED_CFG_STRIP_CNT, 0, 0x1F, 0);
		//set_LED_colors((i + 7) % LED_CFG_STRIP_CNT, 0, 0x7, 0);
		//set_LED_colors((i + 8) % LED_CFG_STRIP_CNT, 0, 0x7, 0);

		LED_update(1);
 8009230:	2001      	movs	r0, #1
 8009232:	f000 f9c5 	bl	80095c0 <LED_update>
		LED_set_color_all(0, 0, 0);
 8009236:	2200      	movs	r2, #0
 8009238:	2100      	movs	r1, #0
 800923a:	2000      	movs	r0, #0
 800923c:	f000 f848 	bl	80092d0 <LED_set_color_all>
		timeout = 0x7FFFF;
 8009240:	4b09      	ldr	r3, [pc, #36]	; (8009268 <pulse+0x60>)
 8009242:	603b      	str	r3, [r7, #0]
		while (--timeout) {}
 8009244:	bf00      	nop
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	3b01      	subs	r3, #1
 800924a:	603b      	str	r3, [r7, #0]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d1fa      	bne.n	8009246 <pulse+0x3e>
	for (size_t i = 0; i < LED_CFG_STRIP_CNT; i++) {
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	3301      	adds	r3, #1
 8009254:	607b      	str	r3, [r7, #4]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2b04      	cmp	r3, #4
 800925a:	d9db      	bls.n	8009214 <pulse+0xc>
	}
	return;
 800925c:	bf00      	nop
}
 800925e:	3708      	adds	r7, #8
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}
 8009264:	cccccccd 	.word	0xcccccccd
 8009268:	0007ffff 	.word	0x0007ffff

0800926c <pulse_red>:

void pulse_red(void){
 800926c:	b580      	push	{r7, lr}
 800926e:	b082      	sub	sp, #8
 8009270:	af00      	add	r7, sp, #0
	volatile uint32_t timeout;
	for (size_t i = 0; i < LED_CFG_STRIP_CNT; i++) {
 8009272:	2300      	movs	r3, #0
 8009274:	607b      	str	r3, [r7, #4]
 8009276:	e020      	b.n	80092ba <pulse_red+0x4e>
		set_LED_colors((i + 0) % LED_CFG_STRIP_CNT, 0x1F, 0x0, 0x0);
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	4b13      	ldr	r3, [pc, #76]	; (80092c8 <pulse_red+0x5c>)
 800927c:	fba3 1302 	umull	r1, r3, r3, r2
 8009280:	0898      	lsrs	r0, r3, #2
 8009282:	4603      	mov	r3, r0
 8009284:	009b      	lsls	r3, r3, #2
 8009286:	4403      	add	r3, r0
 8009288:	1ad0      	subs	r0, r2, r3
 800928a:	2300      	movs	r3, #0
 800928c:	2200      	movs	r2, #0
 800928e:	211f      	movs	r1, #31
 8009290:	f000 f850 	bl	8009334 <set_LED_colors>
		//set_LED_colors((i + 5) % LED_CFG_STRIP_CNT, 0, 0x1F, 0);
		//set_LED_colors((i + 6) % LED_CFG_STRIP_CNT, 0, 0x1F, 0);
		//set_LED_colors((i + 7) % LED_CFG_STRIP_CNT, 0, 0x7, 0);
		//set_LED_colors((i + 8) % LED_CFG_STRIP_CNT, 0, 0x7, 0);

		LED_update(1);
 8009294:	2001      	movs	r0, #1
 8009296:	f000 f993 	bl	80095c0 <LED_update>
		LED_set_color_all(0, 0, 0);
 800929a:	2200      	movs	r2, #0
 800929c:	2100      	movs	r1, #0
 800929e:	2000      	movs	r0, #0
 80092a0:	f000 f816 	bl	80092d0 <LED_set_color_all>
		timeout = 0x7FFFF;
 80092a4:	4b09      	ldr	r3, [pc, #36]	; (80092cc <pulse_red+0x60>)
 80092a6:	603b      	str	r3, [r7, #0]
		while (--timeout) {}
 80092a8:	bf00      	nop
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	3b01      	subs	r3, #1
 80092ae:	603b      	str	r3, [r7, #0]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d1fa      	bne.n	80092aa <pulse_red+0x3e>
	for (size_t i = 0; i < LED_CFG_STRIP_CNT; i++) {
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	3301      	adds	r3, #1
 80092b8:	607b      	str	r3, [r7, #4]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2b04      	cmp	r3, #4
 80092be:	d9db      	bls.n	8009278 <pulse_red+0xc>
	}
	return;
 80092c0:	bf00      	nop
}
 80092c2:	3708      	adds	r7, #8
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	cccccccd 	.word	0xcccccccd
 80092cc:	0007ffff 	.word	0x0007ffff

080092d0 <LED_set_color_all>:
	}
	return;
}


uint8_t LED_set_color_all(uint8_t red, uint8_t green, uint8_t blue){
 80092d0:	b480      	push	{r7}
 80092d2:	b085      	sub	sp, #20
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	4603      	mov	r3, r0
 80092d8:	71fb      	strb	r3, [r7, #7]
 80092da:	460b      	mov	r3, r1
 80092dc:	71bb      	strb	r3, [r7, #6]
 80092de:	4613      	mov	r3, r2
 80092e0:	717b      	strb	r3, [r7, #5]
	for (size_t led_idx = 0; led_idx < LED_CFG_STRIP_CNT; led_idx++){
 80092e2:	2300      	movs	r3, #0
 80092e4:	60fb      	str	r3, [r7, #12]
 80092e6:	e019      	b.n	800931c <LED_set_color_all+0x4c>
		LED_colors[led_idx * LED_CFG_BYTES_PER_LED + 0] = green;
 80092e8:	68fa      	ldr	r2, [r7, #12]
 80092ea:	4613      	mov	r3, r2
 80092ec:	005b      	lsls	r3, r3, #1
 80092ee:	4413      	add	r3, r2
 80092f0:	490f      	ldr	r1, [pc, #60]	; (8009330 <LED_set_color_all+0x60>)
 80092f2:	79ba      	ldrb	r2, [r7, #6]
 80092f4:	54ca      	strb	r2, [r1, r3]
		LED_colors[led_idx * LED_CFG_BYTES_PER_LED + 1] = red;
 80092f6:	68fa      	ldr	r2, [r7, #12]
 80092f8:	4613      	mov	r3, r2
 80092fa:	005b      	lsls	r3, r3, #1
 80092fc:	4413      	add	r3, r2
 80092fe:	3301      	adds	r3, #1
 8009300:	490b      	ldr	r1, [pc, #44]	; (8009330 <LED_set_color_all+0x60>)
 8009302:	79fa      	ldrb	r2, [r7, #7]
 8009304:	54ca      	strb	r2, [r1, r3]
		LED_colors[led_idx * LED_CFG_BYTES_PER_LED + 2] = blue;
 8009306:	68fa      	ldr	r2, [r7, #12]
 8009308:	4613      	mov	r3, r2
 800930a:	005b      	lsls	r3, r3, #1
 800930c:	4413      	add	r3, r2
 800930e:	3302      	adds	r3, #2
 8009310:	4907      	ldr	r1, [pc, #28]	; (8009330 <LED_set_color_all+0x60>)
 8009312:	797a      	ldrb	r2, [r7, #5]
 8009314:	54ca      	strb	r2, [r1, r3]
	for (size_t led_idx = 0; led_idx < LED_CFG_STRIP_CNT; led_idx++){
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	3301      	adds	r3, #1
 800931a:	60fb      	str	r3, [r7, #12]
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2b04      	cmp	r3, #4
 8009320:	d9e2      	bls.n	80092e8 <LED_set_color_all+0x18>
	}
	return 1;
 8009322:	2301      	movs	r3, #1
}
 8009324:	4618      	mov	r0, r3
 8009326:	3714      	adds	r7, #20
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr
 8009330:	200024c4 	.word	0x200024c4

08009334 <set_LED_colors>:

// Set R,G,B values for a specific LED
// index: LED index in array, starting from '0'
// return 1 if successful, else 0 for fail
uint8_t set_LED_colors(size_t led_idx, uint8_t red, uint8_t green, uint8_t blue){
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	4608      	mov	r0, r1
 800933e:	4611      	mov	r1, r2
 8009340:	461a      	mov	r2, r3
 8009342:	4603      	mov	r3, r0
 8009344:	70fb      	strb	r3, [r7, #3]
 8009346:	460b      	mov	r3, r1
 8009348:	70bb      	strb	r3, [r7, #2]
 800934a:	4613      	mov	r3, r2
 800934c:	707b      	strb	r3, [r7, #1]
	if (led_idx < LED_CFG_STRIP_CNT){
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2b04      	cmp	r3, #4
 8009352:	d818      	bhi.n	8009386 <set_LED_colors+0x52>
		LED_colors[led_idx * LED_CFG_BYTES_PER_LED + 0] = green;
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	4613      	mov	r3, r2
 8009358:	005b      	lsls	r3, r3, #1
 800935a:	4413      	add	r3, r2
 800935c:	490d      	ldr	r1, [pc, #52]	; (8009394 <set_LED_colors+0x60>)
 800935e:	78ba      	ldrb	r2, [r7, #2]
 8009360:	54ca      	strb	r2, [r1, r3]
		LED_colors[led_idx * LED_CFG_BYTES_PER_LED + 1] = red;
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	4613      	mov	r3, r2
 8009366:	005b      	lsls	r3, r3, #1
 8009368:	4413      	add	r3, r2
 800936a:	3301      	adds	r3, #1
 800936c:	4909      	ldr	r1, [pc, #36]	; (8009394 <set_LED_colors+0x60>)
 800936e:	78fa      	ldrb	r2, [r7, #3]
 8009370:	54ca      	strb	r2, [r1, r3]
		LED_colors[led_idx * LED_CFG_BYTES_PER_LED + 2] = blue;
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	4613      	mov	r3, r2
 8009376:	005b      	lsls	r3, r3, #1
 8009378:	4413      	add	r3, r2
 800937a:	3302      	adds	r3, #2
 800937c:	4905      	ldr	r1, [pc, #20]	; (8009394 <set_LED_colors+0x60>)
 800937e:	787a      	ldrb	r2, [r7, #1]
 8009380:	54ca      	strb	r2, [r1, r3]
		return 1;
 8009382:	2301      	movs	r3, #1
 8009384:	e000      	b.n	8009388 <set_LED_colors+0x54>
	}
	return 0;
 8009386:	2300      	movs	r3, #0
}
 8009388:	4618      	mov	r0, r3
 800938a:	370c      	adds	r7, #12
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr
 8009394:	200024c4 	.word	0x200024c4

08009398 <write_PWM_data>:

// Iterate through each byte of LED_colors[] and determine if bit in LED_array[] is a HIGH_BIT or LOW_BIT
uint8_t write_PWM_data(size_t led_idx, uint32_t* LED_array){
 8009398:	b480      	push	{r7}
 800939a:	b085      	sub	sp, #20
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]

	if (led_idx < LED_CFG_STRIP_CNT){
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2b04      	cmp	r3, #4
 80093a6:	d859      	bhi.n	800945c <write_PWM_data+0xc4>

		// Retrieve color hex values for RGB
		uint8_t green_hex_val = LED_colors[LED_CFG_BYTES_PER_LED * led_idx + 0];
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	4613      	mov	r3, r2
 80093ac:	005b      	lsls	r3, r3, #1
 80093ae:	4413      	add	r3, r2
 80093b0:	4a2e      	ldr	r2, [pc, #184]	; (800946c <write_PWM_data+0xd4>)
 80093b2:	5cd3      	ldrb	r3, [r2, r3]
 80093b4:	72fb      	strb	r3, [r7, #11]
		uint8_t red_hex_val = LED_colors[LED_CFG_BYTES_PER_LED * led_idx + 1];
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	4613      	mov	r3, r2
 80093ba:	005b      	lsls	r3, r3, #1
 80093bc:	4413      	add	r3, r2
 80093be:	3301      	adds	r3, #1
 80093c0:	4a2a      	ldr	r2, [pc, #168]	; (800946c <write_PWM_data+0xd4>)
 80093c2:	5cd3      	ldrb	r3, [r2, r3]
 80093c4:	72bb      	strb	r3, [r7, #10]
		uint8_t blue_hex_val = LED_colors[LED_CFG_BYTES_PER_LED * led_idx + 2];
 80093c6:	687a      	ldr	r2, [r7, #4]
 80093c8:	4613      	mov	r3, r2
 80093ca:	005b      	lsls	r3, r3, #1
 80093cc:	4413      	add	r3, r2
 80093ce:	3302      	adds	r3, #2
 80093d0:	4a26      	ldr	r2, [pc, #152]	; (800946c <write_PWM_data+0xd4>)
 80093d2:	5cd3      	ldrb	r3, [r2, r3]
 80093d4:	727b      	strb	r3, [r7, #9]

		// Set each 24 bits in LED_array based on hex value. Ex: 0x1F = 8'b00011111, therefore LED_array[0] = LOW_BIT
		for (size_t i = 0; i < NUM_BITS_PER_COLOR; i++){
 80093d6:	2300      	movs	r3, #0
 80093d8:	60fb      	str	r3, [r7, #12]
 80093da:	e03a      	b.n	8009452 <write_PWM_data+0xba>
			LED_array[i] = 			(green_hex_val & (1 << (7 - i))) ? HIGH_BIT : LOW_BIT;		// Set green color
 80093dc:	7afa      	ldrb	r2, [r7, #11]
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f1c3 0307 	rsb	r3, r3, #7
 80093e4:	fa42 f303 	asr.w	r3, r2, r3
 80093e8:	f003 0301 	and.w	r3, r3, #1
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d001      	beq.n	80093f4 <write_PWM_data+0x5c>
 80093f0:	2244      	movs	r2, #68	; 0x44
 80093f2:	e000      	b.n	80093f6 <write_PWM_data+0x5e>
 80093f4:	2222      	movs	r2, #34	; 0x22
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	009b      	lsls	r3, r3, #2
 80093fa:	6839      	ldr	r1, [r7, #0]
 80093fc:	440b      	add	r3, r1
 80093fe:	601a      	str	r2, [r3, #0]
			LED_array[i + 8] = 	(red_hex_val & (1 << (7 - i))) ? HIGH_BIT : LOW_BIT;			// Set blue color
 8009400:	7aba      	ldrb	r2, [r7, #10]
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f1c3 0307 	rsb	r3, r3, #7
 8009408:	fa42 f303 	asr.w	r3, r2, r3
 800940c:	f003 0301 	and.w	r3, r3, #1
 8009410:	2b00      	cmp	r3, #0
 8009412:	d001      	beq.n	8009418 <write_PWM_data+0x80>
 8009414:	2244      	movs	r2, #68	; 0x44
 8009416:	e000      	b.n	800941a <write_PWM_data+0x82>
 8009418:	2222      	movs	r2, #34	; 0x22
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	3308      	adds	r3, #8
 800941e:	009b      	lsls	r3, r3, #2
 8009420:	6839      	ldr	r1, [r7, #0]
 8009422:	440b      	add	r3, r1
 8009424:	601a      	str	r2, [r3, #0]
			LED_array[i + 16] = (blue_hex_val & (1 << (7 - i))) ? HIGH_BIT : LOW_BIT;		// Set red color
 8009426:	7a7a      	ldrb	r2, [r7, #9]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f1c3 0307 	rsb	r3, r3, #7
 800942e:	fa42 f303 	asr.w	r3, r2, r3
 8009432:	f003 0301 	and.w	r3, r3, #1
 8009436:	2b00      	cmp	r3, #0
 8009438:	d001      	beq.n	800943e <write_PWM_data+0xa6>
 800943a:	2244      	movs	r2, #68	; 0x44
 800943c:	e000      	b.n	8009440 <write_PWM_data+0xa8>
 800943e:	2222      	movs	r2, #34	; 0x22
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	3310      	adds	r3, #16
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	6839      	ldr	r1, [r7, #0]
 8009448:	440b      	add	r3, r1
 800944a:	601a      	str	r2, [r3, #0]
		for (size_t i = 0; i < NUM_BITS_PER_COLOR; i++){
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	3301      	adds	r3, #1
 8009450:	60fb      	str	r3, [r7, #12]
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2b07      	cmp	r3, #7
 8009456:	d9c1      	bls.n	80093dc <write_PWM_data+0x44>
		}

		return 1;
 8009458:	2301      	movs	r3, #1
 800945a:	e000      	b.n	800945e <write_PWM_data+0xc6>
	}
	return 0;
 800945c:	2300      	movs	r3, #0
}
 800945e:	4618      	mov	r0, r3
 8009460:	3714      	adds	r7, #20
 8009462:	46bd      	mov	sp, r7
 8009464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009468:	4770      	bx	lr
 800946a:	bf00      	nop
 800946c:	200024c4 	.word	0x200024c4

08009470 <LED_reset_pulse>:

uint8_t LED_reset_pulse(uint8_t rst){
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
 8009476:	4603      	mov	r3, r0
 8009478:	71fb      	strb	r3, [r7, #7]
	rst_flag = rst;		// Set reset flag
 800947a:	4a3f      	ldr	r2, [pc, #252]	; (8009578 <LED_reset_pulse+0x108>)
 800947c:	79fb      	ldrb	r3, [r7, #7]
 800947e:	7013      	strb	r3, [r2, #0]

  hdma_tim2_ch1.Init.Mode = DMA_NORMAL;							// Modify DMA config to Normal Mode
 8009480:	4b3e      	ldr	r3, [pc, #248]	; (800957c <LED_reset_pulse+0x10c>)
 8009482:	2200      	movs	r2, #0
 8009484:	61da      	str	r2, [r3, #28]
  memset(tmp_led_data, 0, sizeof(tmp_led_data));	  // Set all data for tmp_led_data to 0
 8009486:	22c0      	movs	r2, #192	; 0xc0
 8009488:	2100      	movs	r1, #0
 800948a:	483d      	ldr	r0, [pc, #244]	; (8009580 <LED_reset_pulse+0x110>)
 800948c:	f000 fbd6 	bl	8009c3c <memset>

  // Initialize TIM2 DMA handle
  if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK) {
 8009490:	483a      	ldr	r0, [pc, #232]	; (800957c <LED_reset_pulse+0x10c>)
 8009492:	f7f7 fe25 	bl	80010e0 <HAL_DMA_Init>
 8009496:	4603      	mov	r3, r0
 8009498:	2b00      	cmp	r3, #0
 800949a:	d002      	beq.n	80094a2 <LED_reset_pulse+0x32>
    Error_Handler(DMA_ERROR);
 800949c:	2006      	movs	r0, #6
 800949e:	f7ff f9d9 	bl	8008854 <Error_Handler>
  }

  // Clear Half Transfer and Transfer Complete flags for DMA1 Stream5
  __HAL_DMA_CLEAR_FLAG(&hdma_tim2_ch1, DMA_FLAG_HTIF1_5);
 80094a2:	4b36      	ldr	r3, [pc, #216]	; (800957c <LED_reset_pulse+0x10c>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	461a      	mov	r2, r3
 80094a8:	4b36      	ldr	r3, [pc, #216]	; (8009584 <LED_reset_pulse+0x114>)
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d904      	bls.n	80094b8 <LED_reset_pulse+0x48>
 80094ae:	4b36      	ldr	r3, [pc, #216]	; (8009588 <LED_reset_pulse+0x118>)
 80094b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80094b4:	60da      	str	r2, [r3, #12]
 80094b6:	e019      	b.n	80094ec <LED_reset_pulse+0x7c>
 80094b8:	4b30      	ldr	r3, [pc, #192]	; (800957c <LED_reset_pulse+0x10c>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	461a      	mov	r2, r3
 80094be:	4b33      	ldr	r3, [pc, #204]	; (800958c <LED_reset_pulse+0x11c>)
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d904      	bls.n	80094ce <LED_reset_pulse+0x5e>
 80094c4:	4b30      	ldr	r3, [pc, #192]	; (8009588 <LED_reset_pulse+0x118>)
 80094c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80094ca:	609a      	str	r2, [r3, #8]
 80094cc:	e00e      	b.n	80094ec <LED_reset_pulse+0x7c>
 80094ce:	4b2b      	ldr	r3, [pc, #172]	; (800957c <LED_reset_pulse+0x10c>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	461a      	mov	r2, r3
 80094d4:	4b2e      	ldr	r3, [pc, #184]	; (8009590 <LED_reset_pulse+0x120>)
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d904      	bls.n	80094e4 <LED_reset_pulse+0x74>
 80094da:	4b2e      	ldr	r3, [pc, #184]	; (8009594 <LED_reset_pulse+0x124>)
 80094dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80094e0:	60da      	str	r2, [r3, #12]
 80094e2:	e003      	b.n	80094ec <LED_reset_pulse+0x7c>
 80094e4:	4b2b      	ldr	r3, [pc, #172]	; (8009594 <LED_reset_pulse+0x124>)
 80094e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80094ea:	609a      	str	r2, [r3, #8]
  __HAL_DMA_CLEAR_FLAG(&hdma_tim2_ch1, DMA_FLAG_TCIF1_5);
 80094ec:	4b23      	ldr	r3, [pc, #140]	; (800957c <LED_reset_pulse+0x10c>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	461a      	mov	r2, r3
 80094f2:	4b24      	ldr	r3, [pc, #144]	; (8009584 <LED_reset_pulse+0x114>)
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d904      	bls.n	8009502 <LED_reset_pulse+0x92>
 80094f8:	4b23      	ldr	r3, [pc, #140]	; (8009588 <LED_reset_pulse+0x118>)
 80094fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80094fe:	60da      	str	r2, [r3, #12]
 8009500:	e019      	b.n	8009536 <LED_reset_pulse+0xc6>
 8009502:	4b1e      	ldr	r3, [pc, #120]	; (800957c <LED_reset_pulse+0x10c>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	461a      	mov	r2, r3
 8009508:	4b20      	ldr	r3, [pc, #128]	; (800958c <LED_reset_pulse+0x11c>)
 800950a:	429a      	cmp	r2, r3
 800950c:	d904      	bls.n	8009518 <LED_reset_pulse+0xa8>
 800950e:	4b1e      	ldr	r3, [pc, #120]	; (8009588 <LED_reset_pulse+0x118>)
 8009510:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009514:	609a      	str	r2, [r3, #8]
 8009516:	e00e      	b.n	8009536 <LED_reset_pulse+0xc6>
 8009518:	4b18      	ldr	r3, [pc, #96]	; (800957c <LED_reset_pulse+0x10c>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	461a      	mov	r2, r3
 800951e:	4b1c      	ldr	r3, [pc, #112]	; (8009590 <LED_reset_pulse+0x120>)
 8009520:	429a      	cmp	r2, r3
 8009522:	d904      	bls.n	800952e <LED_reset_pulse+0xbe>
 8009524:	4b1b      	ldr	r3, [pc, #108]	; (8009594 <LED_reset_pulse+0x124>)
 8009526:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800952a:	60da      	str	r2, [r3, #12]
 800952c:	e003      	b.n	8009536 <LED_reset_pulse+0xc6>
 800952e:	4b19      	ldr	r3, [pc, #100]	; (8009594 <LED_reset_pulse+0x124>)
 8009530:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009534:	609a      	str	r2, [r3, #8]

  // Disable Half Transfer Interrupt
  __HAL_DMA_DISABLE_IT(&hdma_tim2_ch1, DMA_IT_HT);
 8009536:	4b11      	ldr	r3, [pc, #68]	; (800957c <LED_reset_pulse+0x10c>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	681a      	ldr	r2, [r3, #0]
 800953c:	4b0f      	ldr	r3, [pc, #60]	; (800957c <LED_reset_pulse+0x10c>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f022 0208 	bic.w	r2, r2, #8
 8009544:	601a      	str	r2, [r3, #0]

  // Enable Complete Transfer Interrupt
  __HAL_DMA_ENABLE_IT(&hdma_tim2_ch1, DMA_IT_TC);
 8009546:	4b0d      	ldr	r3, [pc, #52]	; (800957c <LED_reset_pulse+0x10c>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	4b0b      	ldr	r3, [pc, #44]	; (800957c <LED_reset_pulse+0x10c>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f042 0210 	orr.w	r2, r2, #16
 8009554:	601a      	str	r2, [r3, #0]

  // Start Reset Pulse. Contains 40 low pulses: 40 x 800kHz = ~50us
  if (HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*)tmp_led_data, 2 * LED_CFG_RAW_BITS_PER_LED) != HAL_OK){
 8009556:	2330      	movs	r3, #48	; 0x30
 8009558:	4a09      	ldr	r2, [pc, #36]	; (8009580 <LED_reset_pulse+0x110>)
 800955a:	2100      	movs	r1, #0
 800955c:	480e      	ldr	r0, [pc, #56]	; (8009598 <LED_reset_pulse+0x128>)
 800955e:	f7f9 fa67 	bl	8002a30 <HAL_TIM_PWM_Start_DMA>
 8009562:	4603      	mov	r3, r0
 8009564:	2b00      	cmp	r3, #0
 8009566:	d002      	beq.n	800956e <LED_reset_pulse+0xfe>
    Error_Handler(EN_PWM_ERROR);
 8009568:	2002      	movs	r0, #2
 800956a:	f7ff f973 	bl	8008854 <Error_Handler>
  }
  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
  return 1;
 800956e:	2301      	movs	r3, #1
}
 8009570:	4618      	mov	r0, r3
 8009572:	3708      	adds	r7, #8
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}
 8009578:	2000235c 	.word	0x2000235c
 800957c:	20002360 	.word	0x20002360
 8009580:	200024d4 	.word	0x200024d4
 8009584:	40026458 	.word	0x40026458
 8009588:	40026400 	.word	0x40026400
 800958c:	400260b8 	.word	0x400260b8
 8009590:	40026058 	.word	0x40026058
 8009594:	40026000 	.word	0x40026000
 8009598:	20002414 	.word	0x20002414

0800959c <led_is_update_finished>:

// return 1 if not updating, 0 if updating process is in progress
uint8_t led_is_update_finished(void) {
 800959c:	b480      	push	{r7}
 800959e:	af00      	add	r7, sp, #0
	return !update_flag;
 80095a0:	4b06      	ldr	r3, [pc, #24]	; (80095bc <led_is_update_finished+0x20>)
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	b2db      	uxtb	r3, r3
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	bf0c      	ite	eq
 80095aa:	2301      	moveq	r3, #1
 80095ac:	2300      	movne	r3, #0
 80095ae:	b2db      	uxtb	r3, r3
	//return !is_updating;                        /* Return updating flag status */
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	46bd      	mov	sp, r7
 80095b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b8:	4770      	bx	lr
 80095ba:	bf00      	nop
 80095bc:	200023c0 	.word	0x200023c0

080095c0 <LED_update>:

// Block = 1 if want to wait until update process is finished
uint8_t LED_update(uint8_t block){
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b082      	sub	sp, #8
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	4603      	mov	r3, r0
 80095c8:	71fb      	strb	r3, [r7, #7]
	if (update_flag) {
 80095ca:	4b0d      	ldr	r3, [pc, #52]	; (8009600 <LED_update+0x40>)
 80095cc:	781b      	ldrb	r3, [r3, #0]
 80095ce:	b2db      	uxtb	r3, r3
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d001      	beq.n	80095d8 <LED_update+0x18>
		return 0;
 80095d4:	2300      	movs	r3, #0
 80095d6:	e00f      	b.n	80095f8 <LED_update+0x38>
	}
	update_flag = 1;		// Signify that LEDs are being updated
 80095d8:	4b09      	ldr	r3, [pc, #36]	; (8009600 <LED_update+0x40>)
 80095da:	2201      	movs	r2, #1
 80095dc:	701a      	strb	r2, [r3, #0]

	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
	LED_reset_pulse(RESET_AT_START);	// Reset LED scheme with 50us pulse low
 80095de:	2001      	movs	r0, #1
 80095e0:	f7ff ff46 	bl	8009470 <LED_reset_pulse>

	if (block){
 80095e4:	79fb      	ldrb	r3, [r7, #7]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d005      	beq.n	80095f6 <LED_update+0x36>
		while(!led_is_update_finished());
 80095ea:	bf00      	nop
 80095ec:	f7ff ffd6 	bl	800959c <led_is_update_finished>
 80095f0:	4603      	mov	r3, r0
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d0fa      	beq.n	80095ec <LED_update+0x2c>
	}

	return 1;
 80095f6:	2301      	movs	r3, #1
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3708      	adds	r7, #8
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}
 8009600:	200023c0 	.word	0x200023c0

08009604 <led_update_sequence>:

// Update led sequence. Called on TC and HT events.
// At HT event, first 24 elements are transferred
// At TC event, second 24 elements are transferred
void led_update_sequence(uint8_t event) {
 8009604:	b580      	push	{r7, lr}
 8009606:	b082      	sub	sp, #8
 8009608:	af00      	add	r7, sp, #0
 800960a:	4603      	mov	r3, r0
 800960c:	71fb      	strb	r3, [r7, #7]

	event = !!event;       // Toggle transfer-complete flag
 800960e:	79fb      	ldrb	r3, [r7, #7]
 8009610:	2b00      	cmp	r3, #0
 8009612:	bf14      	ite	ne
 8009614:	2301      	movne	r3, #1
 8009616:	2300      	moveq	r3, #0
 8009618:	b2db      	uxtb	r3, r3
 800961a:	71fb      	strb	r3, [r7, #7]

	// Check for reset pulse at the end of the PWM stream
	if (rst_flag == RESET_AT_END){
 800961c:	4b66      	ldr	r3, [pc, #408]	; (80097b8 <led_update_sequence+0x1b4>)
 800961e:	781b      	ldrb	r3, [r3, #0]
 8009620:	2b02      	cmp	r3, #2
 8009622:	d107      	bne.n	8009634 <led_update_sequence+0x30>

		HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);	// Stop DMA
 8009624:	2100      	movs	r1, #0
 8009626:	4865      	ldr	r0, [pc, #404]	; (80097bc <led_update_sequence+0x1b8>)
 8009628:	f7f9 fb08 	bl	8002c3c <HAL_TIM_PWM_Stop_DMA>
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);

		update_flag = NOT_UPDATING;										// No longer updating
 800962c:	4b64      	ldr	r3, [pc, #400]	; (80097c0 <led_update_sequence+0x1bc>)
 800962e:	2200      	movs	r2, #0
 8009630:	701a      	strb	r2, [r3, #0]
		return;
 8009632:	e0bd      	b.n	80097b0 <led_update_sequence+0x1ac>
	}

	// Check if reset pulse happened at the start of the PWM stream
	if (rst_flag == RESET_AT_START){
 8009634:	4b60      	ldr	r3, [pc, #384]	; (80097b8 <led_update_sequence+0x1b4>)
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	2b01      	cmp	r3, #1
 800963a:	d10e      	bne.n	800965a <led_update_sequence+0x56>
		if (!event) { return; }		// If HT event, return and wait until TC event
 800963c:	79fb      	ldrb	r3, [r7, #7]
 800963e:	2b00      	cmp	r3, #0
 8009640:	f000 80b5 	beq.w	80097ae <led_update_sequence+0x1aa>

		HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);	// Disable PWM generation to update LED sequence
 8009644:	2100      	movs	r1, #0
 8009646:	485d      	ldr	r0, [pc, #372]	; (80097bc <led_update_sequence+0x1b8>)
 8009648:	f7f9 faf8 	bl	8002c3c <HAL_TIM_PWM_Stop_DMA>
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);

		rst_flag = NOT_RESETTING;											// No longer resetting
 800964c:	4b5a      	ldr	r3, [pc, #360]	; (80097b8 <led_update_sequence+0x1b4>)
 800964e:	2200      	movs	r2, #0
 8009650:	701a      	strb	r2, [r3, #0]

		current_led = 0;
 8009652:	4b5c      	ldr	r3, [pc, #368]	; (80097c4 <led_update_sequence+0x1c0>)
 8009654:	2200      	movs	r2, #0
 8009656:	601a      	str	r2, [r3, #0]
 8009658:	e004      	b.n	8009664 <led_update_sequence+0x60>
	} else {

	// Not resetting, move to next LED and process data
		current_led++;	// Move to next LED
 800965a:	4b5a      	ldr	r3, [pc, #360]	; (80097c4 <led_update_sequence+0x1c0>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	3301      	adds	r3, #1
 8009660:	4a58      	ldr	r2, [pc, #352]	; (80097c4 <led_update_sequence+0x1c0>)
 8009662:	6013      	str	r3, [r2, #0]
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
	}

	// Prepare data for the next LED
	if (current_led < LED_CFG_STRIP_CNT){
 8009664:	4b57      	ldr	r3, [pc, #348]	; (80097c4 <led_update_sequence+0x1c0>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	2b04      	cmp	r3, #4
 800966a:	f200 8095 	bhi.w	8009798 <led_update_sequence+0x194>

		// 1. Write PWM signal for first LED (current_led = 0) into first-half of DMA buffer
		// 2. Write PWM signal for second LED (current_led = 1) into second-half of DMA buffer
		// 3. Set DMA to circular, clear interrupt flags and start DMA PWM generation
		// 4. Write PWM signal for third and beyond LEDs (current_led >= 2)
		if ((current_led == 0) || !event) {
 800966e:	4b55      	ldr	r3, [pc, #340]	; (80097c4 <led_update_sequence+0x1c0>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d002      	beq.n	800967c <led_update_sequence+0x78>
 8009676:	79fb      	ldrb	r3, [r7, #7]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d106      	bne.n	800968a <led_update_sequence+0x86>
			write_PWM_data(current_led, &tmp_led_data[0]);	// Step 1
 800967c:	4b51      	ldr	r3, [pc, #324]	; (80097c4 <led_update_sequence+0x1c0>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4951      	ldr	r1, [pc, #324]	; (80097c8 <led_update_sequence+0x1c4>)
 8009682:	4618      	mov	r0, r3
 8009684:	f7ff fe88 	bl	8009398 <write_PWM_data>
 8009688:	e005      	b.n	8009696 <led_update_sequence+0x92>
		} else {
			write_PWM_data(current_led, &tmp_led_data[LED_CFG_RAW_BITS_PER_LED]);	// Step 4
 800968a:	4b4e      	ldr	r3, [pc, #312]	; (80097c4 <led_update_sequence+0x1c0>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	494f      	ldr	r1, [pc, #316]	; (80097cc <led_update_sequence+0x1c8>)
 8009690:	4618      	mov	r0, r3
 8009692:	f7ff fe81 	bl	8009398 <write_PWM_data>
		}

		if (current_led == 0){
 8009696:	4b4b      	ldr	r3, [pc, #300]	; (80097c4 <led_update_sequence+0x1c0>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	2b00      	cmp	r3, #0
 800969c:	f040 8088 	bne.w	80097b0 <led_update_sequence+0x1ac>

			current_led++;
 80096a0:	4b48      	ldr	r3, [pc, #288]	; (80097c4 <led_update_sequence+0x1c0>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	3301      	adds	r3, #1
 80096a6:	4a47      	ldr	r2, [pc, #284]	; (80097c4 <led_update_sequence+0x1c0>)
 80096a8:	6013      	str	r3, [r2, #0]
			write_PWM_data(current_led, &tmp_led_data[LED_CFG_RAW_BITS_PER_LED]);	// Step 2
 80096aa:	4b46      	ldr	r3, [pc, #280]	; (80097c4 <led_update_sequence+0x1c0>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	4947      	ldr	r1, [pc, #284]	; (80097cc <led_update_sequence+0x1c8>)
 80096b0:	4618      	mov	r0, r3
 80096b2:	f7ff fe71 	bl	8009398 <write_PWM_data>

		  hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;										// Step 3
 80096b6:	4b46      	ldr	r3, [pc, #280]	; (80097d0 <led_update_sequence+0x1cc>)
 80096b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80096bc:	61da      	str	r2, [r3, #28]
		  // Initialize TIM2 DMA handle
		  if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK) {
 80096be:	4844      	ldr	r0, [pc, #272]	; (80097d0 <led_update_sequence+0x1cc>)
 80096c0:	f7f7 fd0e 	bl	80010e0 <HAL_DMA_Init>
 80096c4:	4603      	mov	r3, r0
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d002      	beq.n	80096d0 <led_update_sequence+0xcc>
		    Error_Handler(DMA_ERROR);
 80096ca:	2006      	movs	r0, #6
 80096cc:	f7ff f8c2 	bl	8008854 <Error_Handler>
		  }

		  __HAL_DMA_CLEAR_FLAG(&hdma_tim2_ch1, DMA_FLAG_HTIF1_5);
 80096d0:	4b3f      	ldr	r3, [pc, #252]	; (80097d0 <led_update_sequence+0x1cc>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	461a      	mov	r2, r3
 80096d6:	4b3f      	ldr	r3, [pc, #252]	; (80097d4 <led_update_sequence+0x1d0>)
 80096d8:	429a      	cmp	r2, r3
 80096da:	d904      	bls.n	80096e6 <led_update_sequence+0xe2>
 80096dc:	4b3e      	ldr	r3, [pc, #248]	; (80097d8 <led_update_sequence+0x1d4>)
 80096de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80096e2:	60da      	str	r2, [r3, #12]
 80096e4:	e019      	b.n	800971a <led_update_sequence+0x116>
 80096e6:	4b3a      	ldr	r3, [pc, #232]	; (80097d0 <led_update_sequence+0x1cc>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	461a      	mov	r2, r3
 80096ec:	4b3b      	ldr	r3, [pc, #236]	; (80097dc <led_update_sequence+0x1d8>)
 80096ee:	429a      	cmp	r2, r3
 80096f0:	d904      	bls.n	80096fc <led_update_sequence+0xf8>
 80096f2:	4b39      	ldr	r3, [pc, #228]	; (80097d8 <led_update_sequence+0x1d4>)
 80096f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80096f8:	609a      	str	r2, [r3, #8]
 80096fa:	e00e      	b.n	800971a <led_update_sequence+0x116>
 80096fc:	4b34      	ldr	r3, [pc, #208]	; (80097d0 <led_update_sequence+0x1cc>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	461a      	mov	r2, r3
 8009702:	4b37      	ldr	r3, [pc, #220]	; (80097e0 <led_update_sequence+0x1dc>)
 8009704:	429a      	cmp	r2, r3
 8009706:	d904      	bls.n	8009712 <led_update_sequence+0x10e>
 8009708:	4b36      	ldr	r3, [pc, #216]	; (80097e4 <led_update_sequence+0x1e0>)
 800970a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800970e:	60da      	str	r2, [r3, #12]
 8009710:	e003      	b.n	800971a <led_update_sequence+0x116>
 8009712:	4b34      	ldr	r3, [pc, #208]	; (80097e4 <led_update_sequence+0x1e0>)
 8009714:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009718:	609a      	str	r2, [r3, #8]
		  __HAL_DMA_CLEAR_FLAG(&hdma_tim2_ch1, DMA_FLAG_TCIF1_5);
 800971a:	4b2d      	ldr	r3, [pc, #180]	; (80097d0 <led_update_sequence+0x1cc>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	461a      	mov	r2, r3
 8009720:	4b2c      	ldr	r3, [pc, #176]	; (80097d4 <led_update_sequence+0x1d0>)
 8009722:	429a      	cmp	r2, r3
 8009724:	d904      	bls.n	8009730 <led_update_sequence+0x12c>
 8009726:	4b2c      	ldr	r3, [pc, #176]	; (80097d8 <led_update_sequence+0x1d4>)
 8009728:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800972c:	60da      	str	r2, [r3, #12]
 800972e:	e019      	b.n	8009764 <led_update_sequence+0x160>
 8009730:	4b27      	ldr	r3, [pc, #156]	; (80097d0 <led_update_sequence+0x1cc>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	461a      	mov	r2, r3
 8009736:	4b29      	ldr	r3, [pc, #164]	; (80097dc <led_update_sequence+0x1d8>)
 8009738:	429a      	cmp	r2, r3
 800973a:	d904      	bls.n	8009746 <led_update_sequence+0x142>
 800973c:	4b26      	ldr	r3, [pc, #152]	; (80097d8 <led_update_sequence+0x1d4>)
 800973e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009742:	609a      	str	r2, [r3, #8]
 8009744:	e00e      	b.n	8009764 <led_update_sequence+0x160>
 8009746:	4b22      	ldr	r3, [pc, #136]	; (80097d0 <led_update_sequence+0x1cc>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	461a      	mov	r2, r3
 800974c:	4b24      	ldr	r3, [pc, #144]	; (80097e0 <led_update_sequence+0x1dc>)
 800974e:	429a      	cmp	r2, r3
 8009750:	d904      	bls.n	800975c <led_update_sequence+0x158>
 8009752:	4b24      	ldr	r3, [pc, #144]	; (80097e4 <led_update_sequence+0x1e0>)
 8009754:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009758:	60da      	str	r2, [r3, #12]
 800975a:	e003      	b.n	8009764 <led_update_sequence+0x160>
 800975c:	4b21      	ldr	r3, [pc, #132]	; (80097e4 <led_update_sequence+0x1e0>)
 800975e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009762:	609a      	str	r2, [r3, #8]

		  __HAL_DMA_ENABLE_IT(&hdma_tim2_ch1, DMA_IT_HT);	// Enable interrupt for half-transfer event
 8009764:	4b1a      	ldr	r3, [pc, #104]	; (80097d0 <led_update_sequence+0x1cc>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	4b19      	ldr	r3, [pc, #100]	; (80097d0 <led_update_sequence+0x1cc>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f042 0208 	orr.w	r2, r2, #8
 8009772:	601a      	str	r2, [r3, #0]

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8009774:	2201      	movs	r2, #1
 8009776:	2101      	movs	r1, #1
 8009778:	481b      	ldr	r0, [pc, #108]	; (80097e8 <led_update_sequence+0x1e4>)
 800977a:	f7f8 f851 	bl	8001820 <HAL_GPIO_WritePin>
		  // Start PWM generation
		  if (HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*)tmp_led_data, 2 * LED_CFG_RAW_BITS_PER_LED) != HAL_OK){
 800977e:	2330      	movs	r3, #48	; 0x30
 8009780:	4a11      	ldr	r2, [pc, #68]	; (80097c8 <led_update_sequence+0x1c4>)
 8009782:	2100      	movs	r1, #0
 8009784:	480d      	ldr	r0, [pc, #52]	; (80097bc <led_update_sequence+0x1b8>)
 8009786:	f7f9 f953 	bl	8002a30 <HAL_TIM_PWM_Start_DMA>
 800978a:	4603      	mov	r3, r0
 800978c:	2b00      	cmp	r3, #0
 800978e:	d00f      	beq.n	80097b0 <led_update_sequence+0x1ac>
		    Error_Handler(EN_PWM_ERROR);
 8009790:	2002      	movs	r0, #2
 8009792:	f7ff f85f 	bl	8008854 <Error_Handler>
 8009796:	e00b      	b.n	80097b0 <led_update_sequence+0x1ac>
		}

	// When all LEDs have been lit up, wait for all data to be transmitted before modifying DMA
	// !TC && (LED_CFG_STRIP_CNT & 0x01): Half-Transfer event occurred and even-numbered LED
	// TC && !(LED_CFG_STRIP_CNT & 0x01): Transfer-Complete event occured and odd-numbered LED
	} else if ((!event && (LED_CFG_STRIP_CNT & 0x01)) || (event && !(LED_CFG_STRIP_CNT & 0x01))) {
 8009798:	79fb      	ldrb	r3, [r7, #7]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d108      	bne.n	80097b0 <led_update_sequence+0x1ac>
		HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 800979e:	2100      	movs	r1, #0
 80097a0:	4806      	ldr	r0, [pc, #24]	; (80097bc <led_update_sequence+0x1b8>)
 80097a2:	f7f9 fa4b 	bl	8002c3c <HAL_TIM_PWM_Stop_DMA>
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
		LED_reset_pulse(RESET_AT_END);
 80097a6:	2002      	movs	r0, #2
 80097a8:	f7ff fe62 	bl	8009470 <LED_reset_pulse>
 80097ac:	e000      	b.n	80097b0 <led_update_sequence+0x1ac>
		if (!event) { return; }		// If HT event, return and wait until TC event
 80097ae:	bf00      	nop
	}

}
 80097b0:	3708      	adds	r7, #8
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
 80097b6:	bf00      	nop
 80097b8:	2000235c 	.word	0x2000235c
 80097bc:	20002414 	.word	0x20002414
 80097c0:	200023c0 	.word	0x200023c0
 80097c4:	200023f4 	.word	0x200023f4
 80097c8:	200024d4 	.word	0x200024d4
 80097cc:	20002534 	.word	0x20002534
 80097d0:	20002360 	.word	0x20002360
 80097d4:	40026458 	.word	0x40026458
 80097d8:	40026400 	.word	0x40026400
 80097dc:	400260b8 	.word	0x400260b8
 80097e0:	40026058 	.word	0x40026058
 80097e4:	40026000 	.word	0x40026000
 80097e8:	40020400 	.word	0x40020400

080097ec <DMA1_Stream5_IRQHandler>:


// DMA1 Stream 5 Global Interrupt
void DMA1_Stream5_IRQHandler(void){
 80097ec:	b580      	push	{r7, lr}
 80097ee:	af00      	add	r7, sp, #0
	// Check for Half-Transfer (HT) event
	if (__HAL_DMA_GET_FLAG(&hdma_tim2_ch1, DMA_FLAG_HTIF1_5)){
 80097f0:	4b64      	ldr	r3, [pc, #400]	; (8009984 <DMA1_Stream5_IRQHandler+0x198>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	461a      	mov	r2, r3
 80097f6:	4b64      	ldr	r3, [pc, #400]	; (8009988 <DMA1_Stream5_IRQHandler+0x19c>)
 80097f8:	429a      	cmp	r2, r3
 80097fa:	d909      	bls.n	8009810 <DMA1_Stream5_IRQHandler+0x24>
 80097fc:	4b63      	ldr	r3, [pc, #396]	; (800998c <DMA1_Stream5_IRQHandler+0x1a0>)
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009804:	2b00      	cmp	r3, #0
 8009806:	bf14      	ite	ne
 8009808:	2301      	movne	r3, #1
 800980a:	2300      	moveq	r3, #0
 800980c:	b2db      	uxtb	r3, r3
 800980e:	e028      	b.n	8009862 <DMA1_Stream5_IRQHandler+0x76>
 8009810:	4b5c      	ldr	r3, [pc, #368]	; (8009984 <DMA1_Stream5_IRQHandler+0x198>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	461a      	mov	r2, r3
 8009816:	4b5e      	ldr	r3, [pc, #376]	; (8009990 <DMA1_Stream5_IRQHandler+0x1a4>)
 8009818:	429a      	cmp	r2, r3
 800981a:	d909      	bls.n	8009830 <DMA1_Stream5_IRQHandler+0x44>
 800981c:	4b5b      	ldr	r3, [pc, #364]	; (800998c <DMA1_Stream5_IRQHandler+0x1a0>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009824:	2b00      	cmp	r3, #0
 8009826:	bf14      	ite	ne
 8009828:	2301      	movne	r3, #1
 800982a:	2300      	moveq	r3, #0
 800982c:	b2db      	uxtb	r3, r3
 800982e:	e018      	b.n	8009862 <DMA1_Stream5_IRQHandler+0x76>
 8009830:	4b54      	ldr	r3, [pc, #336]	; (8009984 <DMA1_Stream5_IRQHandler+0x198>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	461a      	mov	r2, r3
 8009836:	4b57      	ldr	r3, [pc, #348]	; (8009994 <DMA1_Stream5_IRQHandler+0x1a8>)
 8009838:	429a      	cmp	r2, r3
 800983a:	d909      	bls.n	8009850 <DMA1_Stream5_IRQHandler+0x64>
 800983c:	4b56      	ldr	r3, [pc, #344]	; (8009998 <DMA1_Stream5_IRQHandler+0x1ac>)
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009844:	2b00      	cmp	r3, #0
 8009846:	bf14      	ite	ne
 8009848:	2301      	movne	r3, #1
 800984a:	2300      	moveq	r3, #0
 800984c:	b2db      	uxtb	r3, r3
 800984e:	e008      	b.n	8009862 <DMA1_Stream5_IRQHandler+0x76>
 8009850:	4b51      	ldr	r3, [pc, #324]	; (8009998 <DMA1_Stream5_IRQHandler+0x1ac>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009858:	2b00      	cmp	r3, #0
 800985a:	bf14      	ite	ne
 800985c:	2301      	movne	r3, #1
 800985e:	2300      	moveq	r3, #0
 8009860:	b2db      	uxtb	r3, r3
 8009862:	2b00      	cmp	r3, #0
 8009864:	d028      	beq.n	80098b8 <DMA1_Stream5_IRQHandler+0xcc>
	  __HAL_DMA_CLEAR_FLAG(&hdma_tim2_ch1, DMA_FLAG_HTIF1_5);
 8009866:	4b47      	ldr	r3, [pc, #284]	; (8009984 <DMA1_Stream5_IRQHandler+0x198>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	461a      	mov	r2, r3
 800986c:	4b46      	ldr	r3, [pc, #280]	; (8009988 <DMA1_Stream5_IRQHandler+0x19c>)
 800986e:	429a      	cmp	r2, r3
 8009870:	d904      	bls.n	800987c <DMA1_Stream5_IRQHandler+0x90>
 8009872:	4b46      	ldr	r3, [pc, #280]	; (800998c <DMA1_Stream5_IRQHandler+0x1a0>)
 8009874:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009878:	60da      	str	r2, [r3, #12]
 800987a:	e019      	b.n	80098b0 <DMA1_Stream5_IRQHandler+0xc4>
 800987c:	4b41      	ldr	r3, [pc, #260]	; (8009984 <DMA1_Stream5_IRQHandler+0x198>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	461a      	mov	r2, r3
 8009882:	4b43      	ldr	r3, [pc, #268]	; (8009990 <DMA1_Stream5_IRQHandler+0x1a4>)
 8009884:	429a      	cmp	r2, r3
 8009886:	d904      	bls.n	8009892 <DMA1_Stream5_IRQHandler+0xa6>
 8009888:	4b40      	ldr	r3, [pc, #256]	; (800998c <DMA1_Stream5_IRQHandler+0x1a0>)
 800988a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800988e:	609a      	str	r2, [r3, #8]
 8009890:	e00e      	b.n	80098b0 <DMA1_Stream5_IRQHandler+0xc4>
 8009892:	4b3c      	ldr	r3, [pc, #240]	; (8009984 <DMA1_Stream5_IRQHandler+0x198>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	461a      	mov	r2, r3
 8009898:	4b3e      	ldr	r3, [pc, #248]	; (8009994 <DMA1_Stream5_IRQHandler+0x1a8>)
 800989a:	429a      	cmp	r2, r3
 800989c:	d904      	bls.n	80098a8 <DMA1_Stream5_IRQHandler+0xbc>
 800989e:	4b3e      	ldr	r3, [pc, #248]	; (8009998 <DMA1_Stream5_IRQHandler+0x1ac>)
 80098a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80098a4:	60da      	str	r2, [r3, #12]
 80098a6:	e003      	b.n	80098b0 <DMA1_Stream5_IRQHandler+0xc4>
 80098a8:	4b3b      	ldr	r3, [pc, #236]	; (8009998 <DMA1_Stream5_IRQHandler+0x1ac>)
 80098aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80098ae:	609a      	str	r2, [r3, #8]
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
	  led_update_sequence(HT_EVENT);
 80098b0:	2000      	movs	r0, #0
 80098b2:	f7ff fea7 	bl	8009604 <led_update_sequence>
	} else if (__HAL_DMA_GET_FLAG(&hdma_tim2_ch1, DMA_FLAG_TCIF1_5)) {
	  __HAL_DMA_CLEAR_FLAG(&hdma_tim2_ch1, DMA_FLAG_TCIF1_5);
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
	  led_update_sequence(TC_EVENT);
	}
}
 80098b6:	e062      	b.n	800997e <DMA1_Stream5_IRQHandler+0x192>
	} else if (__HAL_DMA_GET_FLAG(&hdma_tim2_ch1, DMA_FLAG_TCIF1_5)) {
 80098b8:	4b32      	ldr	r3, [pc, #200]	; (8009984 <DMA1_Stream5_IRQHandler+0x198>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	461a      	mov	r2, r3
 80098be:	4b32      	ldr	r3, [pc, #200]	; (8009988 <DMA1_Stream5_IRQHandler+0x19c>)
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d909      	bls.n	80098d8 <DMA1_Stream5_IRQHandler+0xec>
 80098c4:	4b31      	ldr	r3, [pc, #196]	; (800998c <DMA1_Stream5_IRQHandler+0x1a0>)
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	bf14      	ite	ne
 80098d0:	2301      	movne	r3, #1
 80098d2:	2300      	moveq	r3, #0
 80098d4:	b2db      	uxtb	r3, r3
 80098d6:	e028      	b.n	800992a <DMA1_Stream5_IRQHandler+0x13e>
 80098d8:	4b2a      	ldr	r3, [pc, #168]	; (8009984 <DMA1_Stream5_IRQHandler+0x198>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	461a      	mov	r2, r3
 80098de:	4b2c      	ldr	r3, [pc, #176]	; (8009990 <DMA1_Stream5_IRQHandler+0x1a4>)
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d909      	bls.n	80098f8 <DMA1_Stream5_IRQHandler+0x10c>
 80098e4:	4b29      	ldr	r3, [pc, #164]	; (800998c <DMA1_Stream5_IRQHandler+0x1a0>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	bf14      	ite	ne
 80098f0:	2301      	movne	r3, #1
 80098f2:	2300      	moveq	r3, #0
 80098f4:	b2db      	uxtb	r3, r3
 80098f6:	e018      	b.n	800992a <DMA1_Stream5_IRQHandler+0x13e>
 80098f8:	4b22      	ldr	r3, [pc, #136]	; (8009984 <DMA1_Stream5_IRQHandler+0x198>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	461a      	mov	r2, r3
 80098fe:	4b25      	ldr	r3, [pc, #148]	; (8009994 <DMA1_Stream5_IRQHandler+0x1a8>)
 8009900:	429a      	cmp	r2, r3
 8009902:	d909      	bls.n	8009918 <DMA1_Stream5_IRQHandler+0x12c>
 8009904:	4b24      	ldr	r3, [pc, #144]	; (8009998 <DMA1_Stream5_IRQHandler+0x1ac>)
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800990c:	2b00      	cmp	r3, #0
 800990e:	bf14      	ite	ne
 8009910:	2301      	movne	r3, #1
 8009912:	2300      	moveq	r3, #0
 8009914:	b2db      	uxtb	r3, r3
 8009916:	e008      	b.n	800992a <DMA1_Stream5_IRQHandler+0x13e>
 8009918:	4b1f      	ldr	r3, [pc, #124]	; (8009998 <DMA1_Stream5_IRQHandler+0x1ac>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009920:	2b00      	cmp	r3, #0
 8009922:	bf14      	ite	ne
 8009924:	2301      	movne	r3, #1
 8009926:	2300      	moveq	r3, #0
 8009928:	b2db      	uxtb	r3, r3
 800992a:	2b00      	cmp	r3, #0
 800992c:	d027      	beq.n	800997e <DMA1_Stream5_IRQHandler+0x192>
	  __HAL_DMA_CLEAR_FLAG(&hdma_tim2_ch1, DMA_FLAG_TCIF1_5);
 800992e:	4b15      	ldr	r3, [pc, #84]	; (8009984 <DMA1_Stream5_IRQHandler+0x198>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	461a      	mov	r2, r3
 8009934:	4b14      	ldr	r3, [pc, #80]	; (8009988 <DMA1_Stream5_IRQHandler+0x19c>)
 8009936:	429a      	cmp	r2, r3
 8009938:	d904      	bls.n	8009944 <DMA1_Stream5_IRQHandler+0x158>
 800993a:	4b14      	ldr	r3, [pc, #80]	; (800998c <DMA1_Stream5_IRQHandler+0x1a0>)
 800993c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009940:	60da      	str	r2, [r3, #12]
 8009942:	e019      	b.n	8009978 <DMA1_Stream5_IRQHandler+0x18c>
 8009944:	4b0f      	ldr	r3, [pc, #60]	; (8009984 <DMA1_Stream5_IRQHandler+0x198>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	461a      	mov	r2, r3
 800994a:	4b11      	ldr	r3, [pc, #68]	; (8009990 <DMA1_Stream5_IRQHandler+0x1a4>)
 800994c:	429a      	cmp	r2, r3
 800994e:	d904      	bls.n	800995a <DMA1_Stream5_IRQHandler+0x16e>
 8009950:	4b0e      	ldr	r3, [pc, #56]	; (800998c <DMA1_Stream5_IRQHandler+0x1a0>)
 8009952:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009956:	609a      	str	r2, [r3, #8]
 8009958:	e00e      	b.n	8009978 <DMA1_Stream5_IRQHandler+0x18c>
 800995a:	4b0a      	ldr	r3, [pc, #40]	; (8009984 <DMA1_Stream5_IRQHandler+0x198>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	461a      	mov	r2, r3
 8009960:	4b0c      	ldr	r3, [pc, #48]	; (8009994 <DMA1_Stream5_IRQHandler+0x1a8>)
 8009962:	429a      	cmp	r2, r3
 8009964:	d904      	bls.n	8009970 <DMA1_Stream5_IRQHandler+0x184>
 8009966:	4b0c      	ldr	r3, [pc, #48]	; (8009998 <DMA1_Stream5_IRQHandler+0x1ac>)
 8009968:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800996c:	60da      	str	r2, [r3, #12]
 800996e:	e003      	b.n	8009978 <DMA1_Stream5_IRQHandler+0x18c>
 8009970:	4b09      	ldr	r3, [pc, #36]	; (8009998 <DMA1_Stream5_IRQHandler+0x1ac>)
 8009972:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009976:	609a      	str	r2, [r3, #8]
	  led_update_sequence(TC_EVENT);
 8009978:	2001      	movs	r0, #1
 800997a:	f7ff fe43 	bl	8009604 <led_update_sequence>
}
 800997e:	bf00      	nop
 8009980:	bd80      	pop	{r7, pc}
 8009982:	bf00      	nop
 8009984:	20002360 	.word	0x20002360
 8009988:	40026458 	.word	0x40026458
 800998c:	40026400 	.word	0x40026400
 8009990:	400260b8 	.word	0x400260b8
 8009994:	40026058 	.word	0x40026058
 8009998:	40026000 	.word	0x40026000

0800999c <LED_Init>:


void LED_Init(void)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b082      	sub	sp, #8
 80099a0:	af00      	add	r7, sp, #0
  /* ------------- */
  /*  GPIO Config  */
  /* ------------- */

  // Configure TIM2_Channel 1 (PA0) as output, push-pull and alternate function mode
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80099a2:	4b74      	ldr	r3, [pc, #464]	; (8009b74 <LED_Init+0x1d8>)
 80099a4:	2201      	movs	r2, #1
 80099a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099a8:	4b72      	ldr	r3, [pc, #456]	; (8009b74 <LED_Init+0x1d8>)
 80099aa:	2202      	movs	r2, #2
 80099ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099ae:	4b71      	ldr	r3, [pc, #452]	; (8009b74 <LED_Init+0x1d8>)
 80099b0:	2200      	movs	r2, #0
 80099b2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80099b4:	4b6f      	ldr	r3, [pc, #444]	; (8009b74 <LED_Init+0x1d8>)
 80099b6:	2203      	movs	r2, #3
 80099b8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80099ba:	4b6e      	ldr	r3, [pc, #440]	; (8009b74 <LED_Init+0x1d8>)
 80099bc:	2201      	movs	r2, #1
 80099be:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80099c0:	496c      	ldr	r1, [pc, #432]	; (8009b74 <LED_Init+0x1d8>)
 80099c2:	486d      	ldr	r0, [pc, #436]	; (8009b78 <LED_Init+0x1dc>)
 80099c4:	f7f7 fd92 	bl	80014ec <HAL_GPIO_Init>

  // Configure GPIO pin: PA8, debugging for DMA IRQ
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80099c8:	2200      	movs	r2, #0
 80099ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80099ce:	486a      	ldr	r0, [pc, #424]	; (8009b78 <LED_Init+0x1dc>)
 80099d0:	f7f7 ff26 	bl	8001820 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80099d4:	4b67      	ldr	r3, [pc, #412]	; (8009b74 <LED_Init+0x1d8>)
 80099d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80099da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80099dc:	4b65      	ldr	r3, [pc, #404]	; (8009b74 <LED_Init+0x1d8>)
 80099de:	2201      	movs	r2, #1
 80099e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80099e2:	4b64      	ldr	r3, [pc, #400]	; (8009b74 <LED_Init+0x1d8>)
 80099e4:	2200      	movs	r2, #0
 80099e6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80099e8:	4962      	ldr	r1, [pc, #392]	; (8009b74 <LED_Init+0x1d8>)
 80099ea:	4863      	ldr	r0, [pc, #396]	; (8009b78 <LED_Init+0x1dc>)
 80099ec:	f7f7 fd7e 	bl	80014ec <HAL_GPIO_Init>

  // Configure GPIO pin: PB0, PB10, debugging for is_updating flag
  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80099f0:	2200      	movs	r2, #0
 80099f2:	2101      	movs	r1, #1
 80099f4:	4861      	ldr	r0, [pc, #388]	; (8009b7c <LED_Init+0x1e0>)
 80099f6:	f7f7 ff13 	bl	8001820 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80099fa:	4b5e      	ldr	r3, [pc, #376]	; (8009b74 <LED_Init+0x1d8>)
 80099fc:	2201      	movs	r2, #1
 80099fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009a00:	4b5c      	ldr	r3, [pc, #368]	; (8009b74 <LED_Init+0x1d8>)
 8009a02:	2201      	movs	r2, #1
 8009a04:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a06:	4b5b      	ldr	r3, [pc, #364]	; (8009b74 <LED_Init+0x1d8>)
 8009a08:	2200      	movs	r2, #0
 8009a0a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009a0c:	4959      	ldr	r1, [pc, #356]	; (8009b74 <LED_Init+0x1d8>)
 8009a0e:	485b      	ldr	r0, [pc, #364]	; (8009b7c <LED_Init+0x1e0>)
 8009a10:	f7f7 fd6c 	bl	80014ec <HAL_GPIO_Init>
  /* -------------- */
  /* TIM2 Channel 1 */
  /* -------------- */

  // Enable TIM2 clock
  __HAL_RCC_TIM2_CLK_ENABLE();
 8009a14:	2300      	movs	r3, #0
 8009a16:	607b      	str	r3, [r7, #4]
 8009a18:	4b59      	ldr	r3, [pc, #356]	; (8009b80 <LED_Init+0x1e4>)
 8009a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a1c:	4a58      	ldr	r2, [pc, #352]	; (8009b80 <LED_Init+0x1e4>)
 8009a1e:	f043 0301 	orr.w	r3, r3, #1
 8009a22:	6413      	str	r3, [r2, #64]	; 0x40
 8009a24:	4b56      	ldr	r3, [pc, #344]	; (8009b80 <LED_Init+0x1e4>)
 8009a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a28:	f003 0301 	and.w	r3, r3, #1
 8009a2c:	607b      	str	r3, [r7, #4]
 8009a2e:	687b      	ldr	r3, [r7, #4]

  // TIM Time Base handle Structure definition
  // Period = TIM2_counter_clk / PWM_freq - 1
  // Period = 84MHz / 800kHz - 1 = 104
  htim2.Instance               = TIM2;
 8009a30:	4b54      	ldr	r3, [pc, #336]	; (8009b84 <LED_Init+0x1e8>)
 8009a32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009a36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler         = 0;										// Set to 0 to acheive max frequency for timer at 84MHz
 8009a38:	4b52      	ldr	r3, [pc, #328]	; (8009b84 <LED_Init+0x1e8>)
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8009a3e:	4b51      	ldr	r3, [pc, #324]	; (8009b84 <LED_Init+0x1e8>)
 8009a40:	2200      	movs	r2, #0
 8009a42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period            = TIM_PERIOD;
 8009a44:	4b4f      	ldr	r3, [pc, #316]	; (8009b84 <LED_Init+0x1e8>)
 8009a46:	2268      	movs	r2, #104	; 0x68
 8009a48:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 8009a4a:	4b4e      	ldr	r3, [pc, #312]	; (8009b84 <LED_Init+0x1e8>)
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;	//TIM_AUTORELOAD_PRELOAD_DISABLE
 8009a50:	4b4c      	ldr	r3, [pc, #304]	; (8009b84 <LED_Init+0x1e8>)
 8009a52:	2280      	movs	r2, #128	; 0x80
 8009a54:	619a      	str	r2, [r3, #24]

  // TIM2 interrupt Init
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8009a56:	2200      	movs	r2, #0
 8009a58:	2100      	movs	r1, #0
 8009a5a:	201c      	movs	r0, #28
 8009a5c:	f7f7 fafd 	bl	800105a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8009a60:	201c      	movs	r0, #28
 8009a62:	f7f7 fb16 	bl	8001092 <HAL_NVIC_EnableIRQ>

  // Note: HAL_TIM_PWM_Init() calls HAL_TIM_PWM_MspInit()
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8009a66:	4847      	ldr	r0, [pc, #284]	; (8009b84 <LED_Init+0x1e8>)
 8009a68:	f7f8 ffb7 	bl	80029da <HAL_TIM_PWM_Init>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d002      	beq.n	8009a78 <LED_Init+0xdc>
    Error_Handler(TIM_INIT_ERROR);     // Initialization Error
 8009a72:	2004      	movs	r0, #4
 8009a74:	f7fe feee 	bl	8008854 <Error_Handler>
  }

  // Set TIM Output Compare (OC) Configuration Structure definition
  sConfigOC.OCMode       = TIM_OCMODE_PWM1;
 8009a78:	4b43      	ldr	r3, [pc, #268]	; (8009b88 <LED_Init+0x1ec>)
 8009a7a:	2260      	movs	r2, #96	; 0x60
 8009a7c:	601a      	str	r2, [r3, #0]
  sConfigOC.OCPolarity   = TIM_OCPOLARITY_HIGH;
 8009a7e:	4b42      	ldr	r3, [pc, #264]	; (8009b88 <LED_Init+0x1ec>)
 8009a80:	2200      	movs	r2, #0
 8009a82:	609a      	str	r2, [r3, #8]
  sConfigOC.Pulse        = 0;
 8009a84:	4b40      	ldr	r3, [pc, #256]	; (8009b88 <LED_Init+0x1ec>)
 8009a86:	2200      	movs	r2, #0
 8009a88:	605a      	str	r2, [r3, #4]
  sConfigOC.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 8009a8a:	4b3f      	ldr	r3, [pc, #252]	; (8009b88 <LED_Init+0x1ec>)
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode   = TIM_OCFAST_DISABLE;
 8009a90:	4b3d      	ldr	r3, [pc, #244]	; (8009b88 <LED_Init+0x1ec>)
 8009a92:	2200      	movs	r2, #0
 8009a94:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState  = TIM_OCIDLESTATE_RESET;
 8009a96:	4b3c      	ldr	r3, [pc, #240]	; (8009b88 <LED_Init+0x1ec>)
 8009a98:	2200      	movs	r2, #0
 8009a9a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009a9c:	4b3a      	ldr	r3, [pc, #232]	; (8009b88 <LED_Init+0x1ec>)
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	619a      	str	r2, [r3, #24]

  // Apply TIM OC configs to htim2 (TIM2)
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	4938      	ldr	r1, [pc, #224]	; (8009b88 <LED_Init+0x1ec>)
 8009aa6:	4837      	ldr	r0, [pc, #220]	; (8009b84 <LED_Init+0x1e8>)
 8009aa8:	f7f9 f96e 	bl	8002d88 <HAL_TIM_PWM_ConfigChannel>
 8009aac:	4603      	mov	r3, r0
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d002      	beq.n	8009ab8 <LED_Init+0x11c>
    Error_Handler(TIM_CONFIG_ERROR); // Configuration Error
 8009ab2:	2003      	movs	r0, #3
 8009ab4:	f7fe fece 	bl	8008854 <Error_Handler>
  /* ------------------------------ */
  /* DMA1 Channel 3 Stream 5 Config */
  /* ------------------------------ */

  // Enable DMA1 clock
	__HAL_RCC_DMA1_CLK_ENABLE();
 8009ab8:	2300      	movs	r3, #0
 8009aba:	603b      	str	r3, [r7, #0]
 8009abc:	4b30      	ldr	r3, [pc, #192]	; (8009b80 <LED_Init+0x1e4>)
 8009abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ac0:	4a2f      	ldr	r2, [pc, #188]	; (8009b80 <LED_Init+0x1e4>)
 8009ac2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009ac6:	6313      	str	r3, [r2, #48]	; 0x30
 8009ac8:	4b2d      	ldr	r3, [pc, #180]	; (8009b80 <LED_Init+0x1e4>)
 8009aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009acc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009ad0:	603b      	str	r3, [r7, #0]
 8009ad2:	683b      	ldr	r3, [r7, #0]

	// DMA handle Structure definition (Based on RM0383 STM32F411 Ref Manual (Table 27) TIM2_CH1 corresponds to DMA1 Channel 3 Stream 5)
  hdma_tim2_ch1.Instance = DMA1_Stream5;
 8009ad4:	4b2d      	ldr	r3, [pc, #180]	; (8009b8c <LED_Init+0x1f0>)
 8009ad6:	4a2e      	ldr	r2, [pc, #184]	; (8009b90 <LED_Init+0x1f4>)
 8009ad8:	601a      	str	r2, [r3, #0]
  hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8009ada:	4b2c      	ldr	r3, [pc, #176]	; (8009b8c <LED_Init+0x1f0>)
 8009adc:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8009ae0:	605a      	str	r2, [r3, #4]
  hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;							// Memory to Peripheral mode
 8009ae2:	4b2a      	ldr	r3, [pc, #168]	; (8009b8c <LED_Init+0x1f0>)
 8009ae4:	2240      	movs	r2, #64	; 0x40
 8009ae6:	609a      	str	r2, [r3, #8]
  hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8009ae8:	4b28      	ldr	r3, [pc, #160]	; (8009b8c <LED_Init+0x1f0>)
 8009aea:	2200      	movs	r2, #0
 8009aec:	60da      	str	r2, [r3, #12]
  hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8009aee:	4b27      	ldr	r3, [pc, #156]	; (8009b8c <LED_Init+0x1f0>)
 8009af0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009af4:	611a      	str	r2, [r3, #16]
  hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD ;
 8009af6:	4b25      	ldr	r3, [pc, #148]	; (8009b8c <LED_Init+0x1f0>)
 8009af8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009afc:	615a      	str	r2, [r3, #20]
  hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD ;
 8009afe:	4b23      	ldr	r3, [pc, #140]	; (8009b8c <LED_Init+0x1f0>)
 8009b00:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009b04:	619a      	str	r2, [r3, #24]
  hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;														// Set in circular mode
 8009b06:	4b21      	ldr	r3, [pc, #132]	; (8009b8c <LED_Init+0x1f0>)
 8009b08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b0c:	61da      	str	r2, [r3, #28]
  hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;										// Low priority
 8009b0e:	4b1f      	ldr	r3, [pc, #124]	; (8009b8c <LED_Init+0x1f0>)
 8009b10:	2200      	movs	r2, #0
 8009b12:	621a      	str	r2, [r3, #32]
  hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009b14:	4b1d      	ldr	r3, [pc, #116]	; (8009b8c <LED_Init+0x1f0>)
 8009b16:	2200      	movs	r2, #0
 8009b18:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_tim2_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8009b1a:	4b1c      	ldr	r3, [pc, #112]	; (8009b8c <LED_Init+0x1f0>)
 8009b1c:	2203      	movs	r2, #3
 8009b1e:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_tim2_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 8009b20:	4b1a      	ldr	r3, [pc, #104]	; (8009b8c <LED_Init+0x1f0>)
 8009b22:	2200      	movs	r2, #0
 8009b24:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_tim2_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8009b26:	4b19      	ldr	r3, [pc, #100]	; (8009b8c <LED_Init+0x1f0>)
 8009b28:	2200      	movs	r2, #0
 8009b2a:	631a      	str	r2, [r3, #48]	; 0x30

  // Enable Half-Transfer and Full-Transfer complete interrupts
  __HAL_DMA_ENABLE_IT(&hdma_tim2_ch1, (DMA_IT_TC | DMA_IT_HT));
 8009b2c:	4b17      	ldr	r3, [pc, #92]	; (8009b8c <LED_Init+0x1f0>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	681a      	ldr	r2, [r3, #0]
 8009b32:	4b16      	ldr	r3, [pc, #88]	; (8009b8c <LED_Init+0x1f0>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f042 0218 	orr.w	r2, r2, #24
 8009b3a:	601a      	str	r2, [r3, #0]

  // Linking a PPP peripheral to DMA structure pointer (PPP = STM32 peripheral or block)
  // hdma[TIM_DMA_ID_CC1] = Capture/Compare 1 DMA requests peripheral
  // Link htim2 (TIM peripheral) to hdma_tim2_ch1 (DMA struc pointer) with TIM_DMA_ID_CC1
  __HAL_LINKDMA(&htim2, hdma[TIM_DMA_ID_CC1], hdma_tim2_ch1);
 8009b3c:	4b11      	ldr	r3, [pc, #68]	; (8009b84 <LED_Init+0x1e8>)
 8009b3e:	4a13      	ldr	r2, [pc, #76]	; (8009b8c <LED_Init+0x1f0>)
 8009b40:	625a      	str	r2, [r3, #36]	; 0x24
 8009b42:	4b12      	ldr	r3, [pc, #72]	; (8009b8c <LED_Init+0x1f0>)
 8009b44:	4a0f      	ldr	r2, [pc, #60]	; (8009b84 <LED_Init+0x1e8>)
 8009b46:	639a      	str	r2, [r3, #56]	; 0x38

  // Initialize TIM2 DMA handle
  if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK) {
 8009b48:	4810      	ldr	r0, [pc, #64]	; (8009b8c <LED_Init+0x1f0>)
 8009b4a:	f7f7 fac9 	bl	80010e0 <HAL_DMA_Init>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d002      	beq.n	8009b5a <LED_Init+0x1be>
    Error_Handler(DMA_ERROR);
 8009b54:	2006      	movs	r0, #6
 8009b56:	f7fe fe7d 	bl	8008854 <Error_Handler>
  }

  // ##-2- Configure the NVIC for DMA #########################################
  // NVIC configuration for DMA transfer complete interrupt
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	2100      	movs	r1, #0
 8009b5e:	2010      	movs	r0, #16
 8009b60:	f7f7 fa7b 	bl	800105a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8009b64:	2010      	movs	r0, #16
 8009b66:	f7f7 fa94 	bl	8001092 <HAL_NVIC_EnableIRQ>
}
 8009b6a:	bf00      	nop
 8009b6c:	3708      	adds	r7, #8
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	200023e0 	.word	0x200023e0
 8009b78:	40020000 	.word	0x40020000
 8009b7c:	40020400 	.word	0x40020400
 8009b80:	40023800 	.word	0x40023800
 8009b84:	20002414 	.word	0x20002414
 8009b88:	200023c4 	.word	0x200023c4
 8009b8c:	20002360 	.word	0x20002360
 8009b90:	40026088 	.word	0x40026088

08009b94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8009b94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009bcc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009b98:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009b9a:	e003      	b.n	8009ba4 <LoopCopyDataInit>

08009b9c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009b9c:	4b0c      	ldr	r3, [pc, #48]	; (8009bd0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009b9e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009ba0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009ba2:	3104      	adds	r1, #4

08009ba4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009ba4:	480b      	ldr	r0, [pc, #44]	; (8009bd4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009ba6:	4b0c      	ldr	r3, [pc, #48]	; (8009bd8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009ba8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009baa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009bac:	d3f6      	bcc.n	8009b9c <CopyDataInit>
  ldr  r2, =_sbss
 8009bae:	4a0b      	ldr	r2, [pc, #44]	; (8009bdc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009bb0:	e002      	b.n	8009bb8 <LoopFillZerobss>

08009bb2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009bb2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009bb4:	f842 3b04 	str.w	r3, [r2], #4

08009bb8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009bb8:	4b09      	ldr	r3, [pc, #36]	; (8009be0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009bba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009bbc:	d3f9      	bcc.n	8009bb2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009bbe:	f7ff fa97 	bl	80090f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009bc2:	f000 f817 	bl	8009bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009bc6:	f7fe fcaf 	bl	8008528 <main>
  bx  lr    
 8009bca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8009bcc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8009bd0:	0802bfb8 	.word	0x0802bfb8
  ldr  r0, =_sdata
 8009bd4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009bd8:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8009bdc:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 8009be0:	20004704 	.word	0x20004704

08009be4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009be4:	e7fe      	b.n	8009be4 <ADC_IRQHandler>
	...

08009be8 <__errno>:
 8009be8:	4b01      	ldr	r3, [pc, #4]	; (8009bf0 <__errno+0x8>)
 8009bea:	6818      	ldr	r0, [r3, #0]
 8009bec:	4770      	bx	lr
 8009bee:	bf00      	nop
 8009bf0:	20000020 	.word	0x20000020

08009bf4 <__libc_init_array>:
 8009bf4:	b570      	push	{r4, r5, r6, lr}
 8009bf6:	4e0d      	ldr	r6, [pc, #52]	; (8009c2c <__libc_init_array+0x38>)
 8009bf8:	4c0d      	ldr	r4, [pc, #52]	; (8009c30 <__libc_init_array+0x3c>)
 8009bfa:	1ba4      	subs	r4, r4, r6
 8009bfc:	10a4      	asrs	r4, r4, #2
 8009bfe:	2500      	movs	r5, #0
 8009c00:	42a5      	cmp	r5, r4
 8009c02:	d109      	bne.n	8009c18 <__libc_init_array+0x24>
 8009c04:	4e0b      	ldr	r6, [pc, #44]	; (8009c34 <__libc_init_array+0x40>)
 8009c06:	4c0c      	ldr	r4, [pc, #48]	; (8009c38 <__libc_init_array+0x44>)
 8009c08:	f000 fc2e 	bl	800a468 <_init>
 8009c0c:	1ba4      	subs	r4, r4, r6
 8009c0e:	10a4      	asrs	r4, r4, #2
 8009c10:	2500      	movs	r5, #0
 8009c12:	42a5      	cmp	r5, r4
 8009c14:	d105      	bne.n	8009c22 <__libc_init_array+0x2e>
 8009c16:	bd70      	pop	{r4, r5, r6, pc}
 8009c18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009c1c:	4798      	blx	r3
 8009c1e:	3501      	adds	r5, #1
 8009c20:	e7ee      	b.n	8009c00 <__libc_init_array+0xc>
 8009c22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009c26:	4798      	blx	r3
 8009c28:	3501      	adds	r5, #1
 8009c2a:	e7f2      	b.n	8009c12 <__libc_init_array+0x1e>
 8009c2c:	0802bfb0 	.word	0x0802bfb0
 8009c30:	0802bfb0 	.word	0x0802bfb0
 8009c34:	0802bfb0 	.word	0x0802bfb0
 8009c38:	0802bfb4 	.word	0x0802bfb4

08009c3c <memset>:
 8009c3c:	4402      	add	r2, r0
 8009c3e:	4603      	mov	r3, r0
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d100      	bne.n	8009c46 <memset+0xa>
 8009c44:	4770      	bx	lr
 8009c46:	f803 1b01 	strb.w	r1, [r3], #1
 8009c4a:	e7f9      	b.n	8009c40 <memset+0x4>

08009c4c <siprintf>:
 8009c4c:	b40e      	push	{r1, r2, r3}
 8009c4e:	b500      	push	{lr}
 8009c50:	b09c      	sub	sp, #112	; 0x70
 8009c52:	ab1d      	add	r3, sp, #116	; 0x74
 8009c54:	9002      	str	r0, [sp, #8]
 8009c56:	9006      	str	r0, [sp, #24]
 8009c58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009c5c:	4809      	ldr	r0, [pc, #36]	; (8009c84 <siprintf+0x38>)
 8009c5e:	9107      	str	r1, [sp, #28]
 8009c60:	9104      	str	r1, [sp, #16]
 8009c62:	4909      	ldr	r1, [pc, #36]	; (8009c88 <siprintf+0x3c>)
 8009c64:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c68:	9105      	str	r1, [sp, #20]
 8009c6a:	6800      	ldr	r0, [r0, #0]
 8009c6c:	9301      	str	r3, [sp, #4]
 8009c6e:	a902      	add	r1, sp, #8
 8009c70:	f000 f86e 	bl	8009d50 <_svfiprintf_r>
 8009c74:	9b02      	ldr	r3, [sp, #8]
 8009c76:	2200      	movs	r2, #0
 8009c78:	701a      	strb	r2, [r3, #0]
 8009c7a:	b01c      	add	sp, #112	; 0x70
 8009c7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c80:	b003      	add	sp, #12
 8009c82:	4770      	bx	lr
 8009c84:	20000020 	.word	0x20000020
 8009c88:	ffff0208 	.word	0xffff0208

08009c8c <strcpy>:
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c92:	f803 2b01 	strb.w	r2, [r3], #1
 8009c96:	2a00      	cmp	r2, #0
 8009c98:	d1f9      	bne.n	8009c8e <strcpy+0x2>
 8009c9a:	4770      	bx	lr

08009c9c <__ssputs_r>:
 8009c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ca0:	688e      	ldr	r6, [r1, #8]
 8009ca2:	429e      	cmp	r6, r3
 8009ca4:	4682      	mov	sl, r0
 8009ca6:	460c      	mov	r4, r1
 8009ca8:	4690      	mov	r8, r2
 8009caa:	4699      	mov	r9, r3
 8009cac:	d837      	bhi.n	8009d1e <__ssputs_r+0x82>
 8009cae:	898a      	ldrh	r2, [r1, #12]
 8009cb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009cb4:	d031      	beq.n	8009d1a <__ssputs_r+0x7e>
 8009cb6:	6825      	ldr	r5, [r4, #0]
 8009cb8:	6909      	ldr	r1, [r1, #16]
 8009cba:	1a6f      	subs	r7, r5, r1
 8009cbc:	6965      	ldr	r5, [r4, #20]
 8009cbe:	2302      	movs	r3, #2
 8009cc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009cc4:	fb95 f5f3 	sdiv	r5, r5, r3
 8009cc8:	f109 0301 	add.w	r3, r9, #1
 8009ccc:	443b      	add	r3, r7
 8009cce:	429d      	cmp	r5, r3
 8009cd0:	bf38      	it	cc
 8009cd2:	461d      	movcc	r5, r3
 8009cd4:	0553      	lsls	r3, r2, #21
 8009cd6:	d530      	bpl.n	8009d3a <__ssputs_r+0x9e>
 8009cd8:	4629      	mov	r1, r5
 8009cda:	f000 fb2b 	bl	800a334 <_malloc_r>
 8009cde:	4606      	mov	r6, r0
 8009ce0:	b950      	cbnz	r0, 8009cf8 <__ssputs_r+0x5c>
 8009ce2:	230c      	movs	r3, #12
 8009ce4:	f8ca 3000 	str.w	r3, [sl]
 8009ce8:	89a3      	ldrh	r3, [r4, #12]
 8009cea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cee:	81a3      	strh	r3, [r4, #12]
 8009cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8009cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cf8:	463a      	mov	r2, r7
 8009cfa:	6921      	ldr	r1, [r4, #16]
 8009cfc:	f000 faa8 	bl	800a250 <memcpy>
 8009d00:	89a3      	ldrh	r3, [r4, #12]
 8009d02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d0a:	81a3      	strh	r3, [r4, #12]
 8009d0c:	6126      	str	r6, [r4, #16]
 8009d0e:	6165      	str	r5, [r4, #20]
 8009d10:	443e      	add	r6, r7
 8009d12:	1bed      	subs	r5, r5, r7
 8009d14:	6026      	str	r6, [r4, #0]
 8009d16:	60a5      	str	r5, [r4, #8]
 8009d18:	464e      	mov	r6, r9
 8009d1a:	454e      	cmp	r6, r9
 8009d1c:	d900      	bls.n	8009d20 <__ssputs_r+0x84>
 8009d1e:	464e      	mov	r6, r9
 8009d20:	4632      	mov	r2, r6
 8009d22:	4641      	mov	r1, r8
 8009d24:	6820      	ldr	r0, [r4, #0]
 8009d26:	f000 fa9e 	bl	800a266 <memmove>
 8009d2a:	68a3      	ldr	r3, [r4, #8]
 8009d2c:	1b9b      	subs	r3, r3, r6
 8009d2e:	60a3      	str	r3, [r4, #8]
 8009d30:	6823      	ldr	r3, [r4, #0]
 8009d32:	441e      	add	r6, r3
 8009d34:	6026      	str	r6, [r4, #0]
 8009d36:	2000      	movs	r0, #0
 8009d38:	e7dc      	b.n	8009cf4 <__ssputs_r+0x58>
 8009d3a:	462a      	mov	r2, r5
 8009d3c:	f000 fb54 	bl	800a3e8 <_realloc_r>
 8009d40:	4606      	mov	r6, r0
 8009d42:	2800      	cmp	r0, #0
 8009d44:	d1e2      	bne.n	8009d0c <__ssputs_r+0x70>
 8009d46:	6921      	ldr	r1, [r4, #16]
 8009d48:	4650      	mov	r0, sl
 8009d4a:	f000 faa5 	bl	800a298 <_free_r>
 8009d4e:	e7c8      	b.n	8009ce2 <__ssputs_r+0x46>

08009d50 <_svfiprintf_r>:
 8009d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d54:	461d      	mov	r5, r3
 8009d56:	898b      	ldrh	r3, [r1, #12]
 8009d58:	061f      	lsls	r7, r3, #24
 8009d5a:	b09d      	sub	sp, #116	; 0x74
 8009d5c:	4680      	mov	r8, r0
 8009d5e:	460c      	mov	r4, r1
 8009d60:	4616      	mov	r6, r2
 8009d62:	d50f      	bpl.n	8009d84 <_svfiprintf_r+0x34>
 8009d64:	690b      	ldr	r3, [r1, #16]
 8009d66:	b96b      	cbnz	r3, 8009d84 <_svfiprintf_r+0x34>
 8009d68:	2140      	movs	r1, #64	; 0x40
 8009d6a:	f000 fae3 	bl	800a334 <_malloc_r>
 8009d6e:	6020      	str	r0, [r4, #0]
 8009d70:	6120      	str	r0, [r4, #16]
 8009d72:	b928      	cbnz	r0, 8009d80 <_svfiprintf_r+0x30>
 8009d74:	230c      	movs	r3, #12
 8009d76:	f8c8 3000 	str.w	r3, [r8]
 8009d7a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d7e:	e0c8      	b.n	8009f12 <_svfiprintf_r+0x1c2>
 8009d80:	2340      	movs	r3, #64	; 0x40
 8009d82:	6163      	str	r3, [r4, #20]
 8009d84:	2300      	movs	r3, #0
 8009d86:	9309      	str	r3, [sp, #36]	; 0x24
 8009d88:	2320      	movs	r3, #32
 8009d8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d8e:	2330      	movs	r3, #48	; 0x30
 8009d90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d94:	9503      	str	r5, [sp, #12]
 8009d96:	f04f 0b01 	mov.w	fp, #1
 8009d9a:	4637      	mov	r7, r6
 8009d9c:	463d      	mov	r5, r7
 8009d9e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009da2:	b10b      	cbz	r3, 8009da8 <_svfiprintf_r+0x58>
 8009da4:	2b25      	cmp	r3, #37	; 0x25
 8009da6:	d13e      	bne.n	8009e26 <_svfiprintf_r+0xd6>
 8009da8:	ebb7 0a06 	subs.w	sl, r7, r6
 8009dac:	d00b      	beq.n	8009dc6 <_svfiprintf_r+0x76>
 8009dae:	4653      	mov	r3, sl
 8009db0:	4632      	mov	r2, r6
 8009db2:	4621      	mov	r1, r4
 8009db4:	4640      	mov	r0, r8
 8009db6:	f7ff ff71 	bl	8009c9c <__ssputs_r>
 8009dba:	3001      	adds	r0, #1
 8009dbc:	f000 80a4 	beq.w	8009f08 <_svfiprintf_r+0x1b8>
 8009dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dc2:	4453      	add	r3, sl
 8009dc4:	9309      	str	r3, [sp, #36]	; 0x24
 8009dc6:	783b      	ldrb	r3, [r7, #0]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	f000 809d 	beq.w	8009f08 <_svfiprintf_r+0x1b8>
 8009dce:	2300      	movs	r3, #0
 8009dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8009dd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009dd8:	9304      	str	r3, [sp, #16]
 8009dda:	9307      	str	r3, [sp, #28]
 8009ddc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009de0:	931a      	str	r3, [sp, #104]	; 0x68
 8009de2:	462f      	mov	r7, r5
 8009de4:	2205      	movs	r2, #5
 8009de6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009dea:	4850      	ldr	r0, [pc, #320]	; (8009f2c <_svfiprintf_r+0x1dc>)
 8009dec:	f7f6 fa00 	bl	80001f0 <memchr>
 8009df0:	9b04      	ldr	r3, [sp, #16]
 8009df2:	b9d0      	cbnz	r0, 8009e2a <_svfiprintf_r+0xda>
 8009df4:	06d9      	lsls	r1, r3, #27
 8009df6:	bf44      	itt	mi
 8009df8:	2220      	movmi	r2, #32
 8009dfa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009dfe:	071a      	lsls	r2, r3, #28
 8009e00:	bf44      	itt	mi
 8009e02:	222b      	movmi	r2, #43	; 0x2b
 8009e04:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009e08:	782a      	ldrb	r2, [r5, #0]
 8009e0a:	2a2a      	cmp	r2, #42	; 0x2a
 8009e0c:	d015      	beq.n	8009e3a <_svfiprintf_r+0xea>
 8009e0e:	9a07      	ldr	r2, [sp, #28]
 8009e10:	462f      	mov	r7, r5
 8009e12:	2000      	movs	r0, #0
 8009e14:	250a      	movs	r5, #10
 8009e16:	4639      	mov	r1, r7
 8009e18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e1c:	3b30      	subs	r3, #48	; 0x30
 8009e1e:	2b09      	cmp	r3, #9
 8009e20:	d94d      	bls.n	8009ebe <_svfiprintf_r+0x16e>
 8009e22:	b1b8      	cbz	r0, 8009e54 <_svfiprintf_r+0x104>
 8009e24:	e00f      	b.n	8009e46 <_svfiprintf_r+0xf6>
 8009e26:	462f      	mov	r7, r5
 8009e28:	e7b8      	b.n	8009d9c <_svfiprintf_r+0x4c>
 8009e2a:	4a40      	ldr	r2, [pc, #256]	; (8009f2c <_svfiprintf_r+0x1dc>)
 8009e2c:	1a80      	subs	r0, r0, r2
 8009e2e:	fa0b f000 	lsl.w	r0, fp, r0
 8009e32:	4318      	orrs	r0, r3
 8009e34:	9004      	str	r0, [sp, #16]
 8009e36:	463d      	mov	r5, r7
 8009e38:	e7d3      	b.n	8009de2 <_svfiprintf_r+0x92>
 8009e3a:	9a03      	ldr	r2, [sp, #12]
 8009e3c:	1d11      	adds	r1, r2, #4
 8009e3e:	6812      	ldr	r2, [r2, #0]
 8009e40:	9103      	str	r1, [sp, #12]
 8009e42:	2a00      	cmp	r2, #0
 8009e44:	db01      	blt.n	8009e4a <_svfiprintf_r+0xfa>
 8009e46:	9207      	str	r2, [sp, #28]
 8009e48:	e004      	b.n	8009e54 <_svfiprintf_r+0x104>
 8009e4a:	4252      	negs	r2, r2
 8009e4c:	f043 0302 	orr.w	r3, r3, #2
 8009e50:	9207      	str	r2, [sp, #28]
 8009e52:	9304      	str	r3, [sp, #16]
 8009e54:	783b      	ldrb	r3, [r7, #0]
 8009e56:	2b2e      	cmp	r3, #46	; 0x2e
 8009e58:	d10c      	bne.n	8009e74 <_svfiprintf_r+0x124>
 8009e5a:	787b      	ldrb	r3, [r7, #1]
 8009e5c:	2b2a      	cmp	r3, #42	; 0x2a
 8009e5e:	d133      	bne.n	8009ec8 <_svfiprintf_r+0x178>
 8009e60:	9b03      	ldr	r3, [sp, #12]
 8009e62:	1d1a      	adds	r2, r3, #4
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	9203      	str	r2, [sp, #12]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	bfb8      	it	lt
 8009e6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e70:	3702      	adds	r7, #2
 8009e72:	9305      	str	r3, [sp, #20]
 8009e74:	4d2e      	ldr	r5, [pc, #184]	; (8009f30 <_svfiprintf_r+0x1e0>)
 8009e76:	7839      	ldrb	r1, [r7, #0]
 8009e78:	2203      	movs	r2, #3
 8009e7a:	4628      	mov	r0, r5
 8009e7c:	f7f6 f9b8 	bl	80001f0 <memchr>
 8009e80:	b138      	cbz	r0, 8009e92 <_svfiprintf_r+0x142>
 8009e82:	2340      	movs	r3, #64	; 0x40
 8009e84:	1b40      	subs	r0, r0, r5
 8009e86:	fa03 f000 	lsl.w	r0, r3, r0
 8009e8a:	9b04      	ldr	r3, [sp, #16]
 8009e8c:	4303      	orrs	r3, r0
 8009e8e:	3701      	adds	r7, #1
 8009e90:	9304      	str	r3, [sp, #16]
 8009e92:	7839      	ldrb	r1, [r7, #0]
 8009e94:	4827      	ldr	r0, [pc, #156]	; (8009f34 <_svfiprintf_r+0x1e4>)
 8009e96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e9a:	2206      	movs	r2, #6
 8009e9c:	1c7e      	adds	r6, r7, #1
 8009e9e:	f7f6 f9a7 	bl	80001f0 <memchr>
 8009ea2:	2800      	cmp	r0, #0
 8009ea4:	d038      	beq.n	8009f18 <_svfiprintf_r+0x1c8>
 8009ea6:	4b24      	ldr	r3, [pc, #144]	; (8009f38 <_svfiprintf_r+0x1e8>)
 8009ea8:	bb13      	cbnz	r3, 8009ef0 <_svfiprintf_r+0x1a0>
 8009eaa:	9b03      	ldr	r3, [sp, #12]
 8009eac:	3307      	adds	r3, #7
 8009eae:	f023 0307 	bic.w	r3, r3, #7
 8009eb2:	3308      	adds	r3, #8
 8009eb4:	9303      	str	r3, [sp, #12]
 8009eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eb8:	444b      	add	r3, r9
 8009eba:	9309      	str	r3, [sp, #36]	; 0x24
 8009ebc:	e76d      	b.n	8009d9a <_svfiprintf_r+0x4a>
 8009ebe:	fb05 3202 	mla	r2, r5, r2, r3
 8009ec2:	2001      	movs	r0, #1
 8009ec4:	460f      	mov	r7, r1
 8009ec6:	e7a6      	b.n	8009e16 <_svfiprintf_r+0xc6>
 8009ec8:	2300      	movs	r3, #0
 8009eca:	3701      	adds	r7, #1
 8009ecc:	9305      	str	r3, [sp, #20]
 8009ece:	4619      	mov	r1, r3
 8009ed0:	250a      	movs	r5, #10
 8009ed2:	4638      	mov	r0, r7
 8009ed4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ed8:	3a30      	subs	r2, #48	; 0x30
 8009eda:	2a09      	cmp	r2, #9
 8009edc:	d903      	bls.n	8009ee6 <_svfiprintf_r+0x196>
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d0c8      	beq.n	8009e74 <_svfiprintf_r+0x124>
 8009ee2:	9105      	str	r1, [sp, #20]
 8009ee4:	e7c6      	b.n	8009e74 <_svfiprintf_r+0x124>
 8009ee6:	fb05 2101 	mla	r1, r5, r1, r2
 8009eea:	2301      	movs	r3, #1
 8009eec:	4607      	mov	r7, r0
 8009eee:	e7f0      	b.n	8009ed2 <_svfiprintf_r+0x182>
 8009ef0:	ab03      	add	r3, sp, #12
 8009ef2:	9300      	str	r3, [sp, #0]
 8009ef4:	4622      	mov	r2, r4
 8009ef6:	4b11      	ldr	r3, [pc, #68]	; (8009f3c <_svfiprintf_r+0x1ec>)
 8009ef8:	a904      	add	r1, sp, #16
 8009efa:	4640      	mov	r0, r8
 8009efc:	f3af 8000 	nop.w
 8009f00:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009f04:	4681      	mov	r9, r0
 8009f06:	d1d6      	bne.n	8009eb6 <_svfiprintf_r+0x166>
 8009f08:	89a3      	ldrh	r3, [r4, #12]
 8009f0a:	065b      	lsls	r3, r3, #25
 8009f0c:	f53f af35 	bmi.w	8009d7a <_svfiprintf_r+0x2a>
 8009f10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f12:	b01d      	add	sp, #116	; 0x74
 8009f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f18:	ab03      	add	r3, sp, #12
 8009f1a:	9300      	str	r3, [sp, #0]
 8009f1c:	4622      	mov	r2, r4
 8009f1e:	4b07      	ldr	r3, [pc, #28]	; (8009f3c <_svfiprintf_r+0x1ec>)
 8009f20:	a904      	add	r1, sp, #16
 8009f22:	4640      	mov	r0, r8
 8009f24:	f000 f882 	bl	800a02c <_printf_i>
 8009f28:	e7ea      	b.n	8009f00 <_svfiprintf_r+0x1b0>
 8009f2a:	bf00      	nop
 8009f2c:	0802bf74 	.word	0x0802bf74
 8009f30:	0802bf7a 	.word	0x0802bf7a
 8009f34:	0802bf7e 	.word	0x0802bf7e
 8009f38:	00000000 	.word	0x00000000
 8009f3c:	08009c9d 	.word	0x08009c9d

08009f40 <_printf_common>:
 8009f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f44:	4691      	mov	r9, r2
 8009f46:	461f      	mov	r7, r3
 8009f48:	688a      	ldr	r2, [r1, #8]
 8009f4a:	690b      	ldr	r3, [r1, #16]
 8009f4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f50:	4293      	cmp	r3, r2
 8009f52:	bfb8      	it	lt
 8009f54:	4613      	movlt	r3, r2
 8009f56:	f8c9 3000 	str.w	r3, [r9]
 8009f5a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f5e:	4606      	mov	r6, r0
 8009f60:	460c      	mov	r4, r1
 8009f62:	b112      	cbz	r2, 8009f6a <_printf_common+0x2a>
 8009f64:	3301      	adds	r3, #1
 8009f66:	f8c9 3000 	str.w	r3, [r9]
 8009f6a:	6823      	ldr	r3, [r4, #0]
 8009f6c:	0699      	lsls	r1, r3, #26
 8009f6e:	bf42      	ittt	mi
 8009f70:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009f74:	3302      	addmi	r3, #2
 8009f76:	f8c9 3000 	strmi.w	r3, [r9]
 8009f7a:	6825      	ldr	r5, [r4, #0]
 8009f7c:	f015 0506 	ands.w	r5, r5, #6
 8009f80:	d107      	bne.n	8009f92 <_printf_common+0x52>
 8009f82:	f104 0a19 	add.w	sl, r4, #25
 8009f86:	68e3      	ldr	r3, [r4, #12]
 8009f88:	f8d9 2000 	ldr.w	r2, [r9]
 8009f8c:	1a9b      	subs	r3, r3, r2
 8009f8e:	42ab      	cmp	r3, r5
 8009f90:	dc28      	bgt.n	8009fe4 <_printf_common+0xa4>
 8009f92:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009f96:	6822      	ldr	r2, [r4, #0]
 8009f98:	3300      	adds	r3, #0
 8009f9a:	bf18      	it	ne
 8009f9c:	2301      	movne	r3, #1
 8009f9e:	0692      	lsls	r2, r2, #26
 8009fa0:	d42d      	bmi.n	8009ffe <_printf_common+0xbe>
 8009fa2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009fa6:	4639      	mov	r1, r7
 8009fa8:	4630      	mov	r0, r6
 8009faa:	47c0      	blx	r8
 8009fac:	3001      	adds	r0, #1
 8009fae:	d020      	beq.n	8009ff2 <_printf_common+0xb2>
 8009fb0:	6823      	ldr	r3, [r4, #0]
 8009fb2:	68e5      	ldr	r5, [r4, #12]
 8009fb4:	f8d9 2000 	ldr.w	r2, [r9]
 8009fb8:	f003 0306 	and.w	r3, r3, #6
 8009fbc:	2b04      	cmp	r3, #4
 8009fbe:	bf08      	it	eq
 8009fc0:	1aad      	subeq	r5, r5, r2
 8009fc2:	68a3      	ldr	r3, [r4, #8]
 8009fc4:	6922      	ldr	r2, [r4, #16]
 8009fc6:	bf0c      	ite	eq
 8009fc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fcc:	2500      	movne	r5, #0
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	bfc4      	itt	gt
 8009fd2:	1a9b      	subgt	r3, r3, r2
 8009fd4:	18ed      	addgt	r5, r5, r3
 8009fd6:	f04f 0900 	mov.w	r9, #0
 8009fda:	341a      	adds	r4, #26
 8009fdc:	454d      	cmp	r5, r9
 8009fde:	d11a      	bne.n	800a016 <_printf_common+0xd6>
 8009fe0:	2000      	movs	r0, #0
 8009fe2:	e008      	b.n	8009ff6 <_printf_common+0xb6>
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	4652      	mov	r2, sl
 8009fe8:	4639      	mov	r1, r7
 8009fea:	4630      	mov	r0, r6
 8009fec:	47c0      	blx	r8
 8009fee:	3001      	adds	r0, #1
 8009ff0:	d103      	bne.n	8009ffa <_printf_common+0xba>
 8009ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ffa:	3501      	adds	r5, #1
 8009ffc:	e7c3      	b.n	8009f86 <_printf_common+0x46>
 8009ffe:	18e1      	adds	r1, r4, r3
 800a000:	1c5a      	adds	r2, r3, #1
 800a002:	2030      	movs	r0, #48	; 0x30
 800a004:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a008:	4422      	add	r2, r4
 800a00a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a00e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a012:	3302      	adds	r3, #2
 800a014:	e7c5      	b.n	8009fa2 <_printf_common+0x62>
 800a016:	2301      	movs	r3, #1
 800a018:	4622      	mov	r2, r4
 800a01a:	4639      	mov	r1, r7
 800a01c:	4630      	mov	r0, r6
 800a01e:	47c0      	blx	r8
 800a020:	3001      	adds	r0, #1
 800a022:	d0e6      	beq.n	8009ff2 <_printf_common+0xb2>
 800a024:	f109 0901 	add.w	r9, r9, #1
 800a028:	e7d8      	b.n	8009fdc <_printf_common+0x9c>
	...

0800a02c <_printf_i>:
 800a02c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a030:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a034:	460c      	mov	r4, r1
 800a036:	7e09      	ldrb	r1, [r1, #24]
 800a038:	b085      	sub	sp, #20
 800a03a:	296e      	cmp	r1, #110	; 0x6e
 800a03c:	4617      	mov	r7, r2
 800a03e:	4606      	mov	r6, r0
 800a040:	4698      	mov	r8, r3
 800a042:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a044:	f000 80b3 	beq.w	800a1ae <_printf_i+0x182>
 800a048:	d822      	bhi.n	800a090 <_printf_i+0x64>
 800a04a:	2963      	cmp	r1, #99	; 0x63
 800a04c:	d036      	beq.n	800a0bc <_printf_i+0x90>
 800a04e:	d80a      	bhi.n	800a066 <_printf_i+0x3a>
 800a050:	2900      	cmp	r1, #0
 800a052:	f000 80b9 	beq.w	800a1c8 <_printf_i+0x19c>
 800a056:	2958      	cmp	r1, #88	; 0x58
 800a058:	f000 8083 	beq.w	800a162 <_printf_i+0x136>
 800a05c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a060:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a064:	e032      	b.n	800a0cc <_printf_i+0xa0>
 800a066:	2964      	cmp	r1, #100	; 0x64
 800a068:	d001      	beq.n	800a06e <_printf_i+0x42>
 800a06a:	2969      	cmp	r1, #105	; 0x69
 800a06c:	d1f6      	bne.n	800a05c <_printf_i+0x30>
 800a06e:	6820      	ldr	r0, [r4, #0]
 800a070:	6813      	ldr	r3, [r2, #0]
 800a072:	0605      	lsls	r5, r0, #24
 800a074:	f103 0104 	add.w	r1, r3, #4
 800a078:	d52a      	bpl.n	800a0d0 <_printf_i+0xa4>
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	6011      	str	r1, [r2, #0]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	da03      	bge.n	800a08a <_printf_i+0x5e>
 800a082:	222d      	movs	r2, #45	; 0x2d
 800a084:	425b      	negs	r3, r3
 800a086:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a08a:	486f      	ldr	r0, [pc, #444]	; (800a248 <_printf_i+0x21c>)
 800a08c:	220a      	movs	r2, #10
 800a08e:	e039      	b.n	800a104 <_printf_i+0xd8>
 800a090:	2973      	cmp	r1, #115	; 0x73
 800a092:	f000 809d 	beq.w	800a1d0 <_printf_i+0x1a4>
 800a096:	d808      	bhi.n	800a0aa <_printf_i+0x7e>
 800a098:	296f      	cmp	r1, #111	; 0x6f
 800a09a:	d020      	beq.n	800a0de <_printf_i+0xb2>
 800a09c:	2970      	cmp	r1, #112	; 0x70
 800a09e:	d1dd      	bne.n	800a05c <_printf_i+0x30>
 800a0a0:	6823      	ldr	r3, [r4, #0]
 800a0a2:	f043 0320 	orr.w	r3, r3, #32
 800a0a6:	6023      	str	r3, [r4, #0]
 800a0a8:	e003      	b.n	800a0b2 <_printf_i+0x86>
 800a0aa:	2975      	cmp	r1, #117	; 0x75
 800a0ac:	d017      	beq.n	800a0de <_printf_i+0xb2>
 800a0ae:	2978      	cmp	r1, #120	; 0x78
 800a0b0:	d1d4      	bne.n	800a05c <_printf_i+0x30>
 800a0b2:	2378      	movs	r3, #120	; 0x78
 800a0b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a0b8:	4864      	ldr	r0, [pc, #400]	; (800a24c <_printf_i+0x220>)
 800a0ba:	e055      	b.n	800a168 <_printf_i+0x13c>
 800a0bc:	6813      	ldr	r3, [r2, #0]
 800a0be:	1d19      	adds	r1, r3, #4
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	6011      	str	r1, [r2, #0]
 800a0c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	e08c      	b.n	800a1ea <_printf_i+0x1be>
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	6011      	str	r1, [r2, #0]
 800a0d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a0d8:	bf18      	it	ne
 800a0da:	b21b      	sxthne	r3, r3
 800a0dc:	e7cf      	b.n	800a07e <_printf_i+0x52>
 800a0de:	6813      	ldr	r3, [r2, #0]
 800a0e0:	6825      	ldr	r5, [r4, #0]
 800a0e2:	1d18      	adds	r0, r3, #4
 800a0e4:	6010      	str	r0, [r2, #0]
 800a0e6:	0628      	lsls	r0, r5, #24
 800a0e8:	d501      	bpl.n	800a0ee <_printf_i+0xc2>
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	e002      	b.n	800a0f4 <_printf_i+0xc8>
 800a0ee:	0668      	lsls	r0, r5, #25
 800a0f0:	d5fb      	bpl.n	800a0ea <_printf_i+0xbe>
 800a0f2:	881b      	ldrh	r3, [r3, #0]
 800a0f4:	4854      	ldr	r0, [pc, #336]	; (800a248 <_printf_i+0x21c>)
 800a0f6:	296f      	cmp	r1, #111	; 0x6f
 800a0f8:	bf14      	ite	ne
 800a0fa:	220a      	movne	r2, #10
 800a0fc:	2208      	moveq	r2, #8
 800a0fe:	2100      	movs	r1, #0
 800a100:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a104:	6865      	ldr	r5, [r4, #4]
 800a106:	60a5      	str	r5, [r4, #8]
 800a108:	2d00      	cmp	r5, #0
 800a10a:	f2c0 8095 	blt.w	800a238 <_printf_i+0x20c>
 800a10e:	6821      	ldr	r1, [r4, #0]
 800a110:	f021 0104 	bic.w	r1, r1, #4
 800a114:	6021      	str	r1, [r4, #0]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d13d      	bne.n	800a196 <_printf_i+0x16a>
 800a11a:	2d00      	cmp	r5, #0
 800a11c:	f040 808e 	bne.w	800a23c <_printf_i+0x210>
 800a120:	4665      	mov	r5, ip
 800a122:	2a08      	cmp	r2, #8
 800a124:	d10b      	bne.n	800a13e <_printf_i+0x112>
 800a126:	6823      	ldr	r3, [r4, #0]
 800a128:	07db      	lsls	r3, r3, #31
 800a12a:	d508      	bpl.n	800a13e <_printf_i+0x112>
 800a12c:	6923      	ldr	r3, [r4, #16]
 800a12e:	6862      	ldr	r2, [r4, #4]
 800a130:	429a      	cmp	r2, r3
 800a132:	bfde      	ittt	le
 800a134:	2330      	movle	r3, #48	; 0x30
 800a136:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a13a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a13e:	ebac 0305 	sub.w	r3, ip, r5
 800a142:	6123      	str	r3, [r4, #16]
 800a144:	f8cd 8000 	str.w	r8, [sp]
 800a148:	463b      	mov	r3, r7
 800a14a:	aa03      	add	r2, sp, #12
 800a14c:	4621      	mov	r1, r4
 800a14e:	4630      	mov	r0, r6
 800a150:	f7ff fef6 	bl	8009f40 <_printf_common>
 800a154:	3001      	adds	r0, #1
 800a156:	d14d      	bne.n	800a1f4 <_printf_i+0x1c8>
 800a158:	f04f 30ff 	mov.w	r0, #4294967295
 800a15c:	b005      	add	sp, #20
 800a15e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a162:	4839      	ldr	r0, [pc, #228]	; (800a248 <_printf_i+0x21c>)
 800a164:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a168:	6813      	ldr	r3, [r2, #0]
 800a16a:	6821      	ldr	r1, [r4, #0]
 800a16c:	1d1d      	adds	r5, r3, #4
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	6015      	str	r5, [r2, #0]
 800a172:	060a      	lsls	r2, r1, #24
 800a174:	d50b      	bpl.n	800a18e <_printf_i+0x162>
 800a176:	07ca      	lsls	r2, r1, #31
 800a178:	bf44      	itt	mi
 800a17a:	f041 0120 	orrmi.w	r1, r1, #32
 800a17e:	6021      	strmi	r1, [r4, #0]
 800a180:	b91b      	cbnz	r3, 800a18a <_printf_i+0x15e>
 800a182:	6822      	ldr	r2, [r4, #0]
 800a184:	f022 0220 	bic.w	r2, r2, #32
 800a188:	6022      	str	r2, [r4, #0]
 800a18a:	2210      	movs	r2, #16
 800a18c:	e7b7      	b.n	800a0fe <_printf_i+0xd2>
 800a18e:	064d      	lsls	r5, r1, #25
 800a190:	bf48      	it	mi
 800a192:	b29b      	uxthmi	r3, r3
 800a194:	e7ef      	b.n	800a176 <_printf_i+0x14a>
 800a196:	4665      	mov	r5, ip
 800a198:	fbb3 f1f2 	udiv	r1, r3, r2
 800a19c:	fb02 3311 	mls	r3, r2, r1, r3
 800a1a0:	5cc3      	ldrb	r3, [r0, r3]
 800a1a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a1a6:	460b      	mov	r3, r1
 800a1a8:	2900      	cmp	r1, #0
 800a1aa:	d1f5      	bne.n	800a198 <_printf_i+0x16c>
 800a1ac:	e7b9      	b.n	800a122 <_printf_i+0xf6>
 800a1ae:	6813      	ldr	r3, [r2, #0]
 800a1b0:	6825      	ldr	r5, [r4, #0]
 800a1b2:	6961      	ldr	r1, [r4, #20]
 800a1b4:	1d18      	adds	r0, r3, #4
 800a1b6:	6010      	str	r0, [r2, #0]
 800a1b8:	0628      	lsls	r0, r5, #24
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	d501      	bpl.n	800a1c2 <_printf_i+0x196>
 800a1be:	6019      	str	r1, [r3, #0]
 800a1c0:	e002      	b.n	800a1c8 <_printf_i+0x19c>
 800a1c2:	066a      	lsls	r2, r5, #25
 800a1c4:	d5fb      	bpl.n	800a1be <_printf_i+0x192>
 800a1c6:	8019      	strh	r1, [r3, #0]
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	6123      	str	r3, [r4, #16]
 800a1cc:	4665      	mov	r5, ip
 800a1ce:	e7b9      	b.n	800a144 <_printf_i+0x118>
 800a1d0:	6813      	ldr	r3, [r2, #0]
 800a1d2:	1d19      	adds	r1, r3, #4
 800a1d4:	6011      	str	r1, [r2, #0]
 800a1d6:	681d      	ldr	r5, [r3, #0]
 800a1d8:	6862      	ldr	r2, [r4, #4]
 800a1da:	2100      	movs	r1, #0
 800a1dc:	4628      	mov	r0, r5
 800a1de:	f7f6 f807 	bl	80001f0 <memchr>
 800a1e2:	b108      	cbz	r0, 800a1e8 <_printf_i+0x1bc>
 800a1e4:	1b40      	subs	r0, r0, r5
 800a1e6:	6060      	str	r0, [r4, #4]
 800a1e8:	6863      	ldr	r3, [r4, #4]
 800a1ea:	6123      	str	r3, [r4, #16]
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1f2:	e7a7      	b.n	800a144 <_printf_i+0x118>
 800a1f4:	6923      	ldr	r3, [r4, #16]
 800a1f6:	462a      	mov	r2, r5
 800a1f8:	4639      	mov	r1, r7
 800a1fa:	4630      	mov	r0, r6
 800a1fc:	47c0      	blx	r8
 800a1fe:	3001      	adds	r0, #1
 800a200:	d0aa      	beq.n	800a158 <_printf_i+0x12c>
 800a202:	6823      	ldr	r3, [r4, #0]
 800a204:	079b      	lsls	r3, r3, #30
 800a206:	d413      	bmi.n	800a230 <_printf_i+0x204>
 800a208:	68e0      	ldr	r0, [r4, #12]
 800a20a:	9b03      	ldr	r3, [sp, #12]
 800a20c:	4298      	cmp	r0, r3
 800a20e:	bfb8      	it	lt
 800a210:	4618      	movlt	r0, r3
 800a212:	e7a3      	b.n	800a15c <_printf_i+0x130>
 800a214:	2301      	movs	r3, #1
 800a216:	464a      	mov	r2, r9
 800a218:	4639      	mov	r1, r7
 800a21a:	4630      	mov	r0, r6
 800a21c:	47c0      	blx	r8
 800a21e:	3001      	adds	r0, #1
 800a220:	d09a      	beq.n	800a158 <_printf_i+0x12c>
 800a222:	3501      	adds	r5, #1
 800a224:	68e3      	ldr	r3, [r4, #12]
 800a226:	9a03      	ldr	r2, [sp, #12]
 800a228:	1a9b      	subs	r3, r3, r2
 800a22a:	42ab      	cmp	r3, r5
 800a22c:	dcf2      	bgt.n	800a214 <_printf_i+0x1e8>
 800a22e:	e7eb      	b.n	800a208 <_printf_i+0x1dc>
 800a230:	2500      	movs	r5, #0
 800a232:	f104 0919 	add.w	r9, r4, #25
 800a236:	e7f5      	b.n	800a224 <_printf_i+0x1f8>
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d1ac      	bne.n	800a196 <_printf_i+0x16a>
 800a23c:	7803      	ldrb	r3, [r0, #0]
 800a23e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a242:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a246:	e76c      	b.n	800a122 <_printf_i+0xf6>
 800a248:	0802bf85 	.word	0x0802bf85
 800a24c:	0802bf96 	.word	0x0802bf96

0800a250 <memcpy>:
 800a250:	b510      	push	{r4, lr}
 800a252:	1e43      	subs	r3, r0, #1
 800a254:	440a      	add	r2, r1
 800a256:	4291      	cmp	r1, r2
 800a258:	d100      	bne.n	800a25c <memcpy+0xc>
 800a25a:	bd10      	pop	{r4, pc}
 800a25c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a260:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a264:	e7f7      	b.n	800a256 <memcpy+0x6>

0800a266 <memmove>:
 800a266:	4288      	cmp	r0, r1
 800a268:	b510      	push	{r4, lr}
 800a26a:	eb01 0302 	add.w	r3, r1, r2
 800a26e:	d807      	bhi.n	800a280 <memmove+0x1a>
 800a270:	1e42      	subs	r2, r0, #1
 800a272:	4299      	cmp	r1, r3
 800a274:	d00a      	beq.n	800a28c <memmove+0x26>
 800a276:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a27a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a27e:	e7f8      	b.n	800a272 <memmove+0xc>
 800a280:	4283      	cmp	r3, r0
 800a282:	d9f5      	bls.n	800a270 <memmove+0xa>
 800a284:	1881      	adds	r1, r0, r2
 800a286:	1ad2      	subs	r2, r2, r3
 800a288:	42d3      	cmn	r3, r2
 800a28a:	d100      	bne.n	800a28e <memmove+0x28>
 800a28c:	bd10      	pop	{r4, pc}
 800a28e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a292:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a296:	e7f7      	b.n	800a288 <memmove+0x22>

0800a298 <_free_r>:
 800a298:	b538      	push	{r3, r4, r5, lr}
 800a29a:	4605      	mov	r5, r0
 800a29c:	2900      	cmp	r1, #0
 800a29e:	d045      	beq.n	800a32c <_free_r+0x94>
 800a2a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2a4:	1f0c      	subs	r4, r1, #4
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	bfb8      	it	lt
 800a2aa:	18e4      	addlt	r4, r4, r3
 800a2ac:	f000 f8d2 	bl	800a454 <__malloc_lock>
 800a2b0:	4a1f      	ldr	r2, [pc, #124]	; (800a330 <_free_r+0x98>)
 800a2b2:	6813      	ldr	r3, [r2, #0]
 800a2b4:	4610      	mov	r0, r2
 800a2b6:	b933      	cbnz	r3, 800a2c6 <_free_r+0x2e>
 800a2b8:	6063      	str	r3, [r4, #4]
 800a2ba:	6014      	str	r4, [r2, #0]
 800a2bc:	4628      	mov	r0, r5
 800a2be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2c2:	f000 b8c8 	b.w	800a456 <__malloc_unlock>
 800a2c6:	42a3      	cmp	r3, r4
 800a2c8:	d90c      	bls.n	800a2e4 <_free_r+0x4c>
 800a2ca:	6821      	ldr	r1, [r4, #0]
 800a2cc:	1862      	adds	r2, r4, r1
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	bf04      	itt	eq
 800a2d2:	681a      	ldreq	r2, [r3, #0]
 800a2d4:	685b      	ldreq	r3, [r3, #4]
 800a2d6:	6063      	str	r3, [r4, #4]
 800a2d8:	bf04      	itt	eq
 800a2da:	1852      	addeq	r2, r2, r1
 800a2dc:	6022      	streq	r2, [r4, #0]
 800a2de:	6004      	str	r4, [r0, #0]
 800a2e0:	e7ec      	b.n	800a2bc <_free_r+0x24>
 800a2e2:	4613      	mov	r3, r2
 800a2e4:	685a      	ldr	r2, [r3, #4]
 800a2e6:	b10a      	cbz	r2, 800a2ec <_free_r+0x54>
 800a2e8:	42a2      	cmp	r2, r4
 800a2ea:	d9fa      	bls.n	800a2e2 <_free_r+0x4a>
 800a2ec:	6819      	ldr	r1, [r3, #0]
 800a2ee:	1858      	adds	r0, r3, r1
 800a2f0:	42a0      	cmp	r0, r4
 800a2f2:	d10b      	bne.n	800a30c <_free_r+0x74>
 800a2f4:	6820      	ldr	r0, [r4, #0]
 800a2f6:	4401      	add	r1, r0
 800a2f8:	1858      	adds	r0, r3, r1
 800a2fa:	4282      	cmp	r2, r0
 800a2fc:	6019      	str	r1, [r3, #0]
 800a2fe:	d1dd      	bne.n	800a2bc <_free_r+0x24>
 800a300:	6810      	ldr	r0, [r2, #0]
 800a302:	6852      	ldr	r2, [r2, #4]
 800a304:	605a      	str	r2, [r3, #4]
 800a306:	4401      	add	r1, r0
 800a308:	6019      	str	r1, [r3, #0]
 800a30a:	e7d7      	b.n	800a2bc <_free_r+0x24>
 800a30c:	d902      	bls.n	800a314 <_free_r+0x7c>
 800a30e:	230c      	movs	r3, #12
 800a310:	602b      	str	r3, [r5, #0]
 800a312:	e7d3      	b.n	800a2bc <_free_r+0x24>
 800a314:	6820      	ldr	r0, [r4, #0]
 800a316:	1821      	adds	r1, r4, r0
 800a318:	428a      	cmp	r2, r1
 800a31a:	bf04      	itt	eq
 800a31c:	6811      	ldreq	r1, [r2, #0]
 800a31e:	6852      	ldreq	r2, [r2, #4]
 800a320:	6062      	str	r2, [r4, #4]
 800a322:	bf04      	itt	eq
 800a324:	1809      	addeq	r1, r1, r0
 800a326:	6021      	streq	r1, [r4, #0]
 800a328:	605c      	str	r4, [r3, #4]
 800a32a:	e7c7      	b.n	800a2bc <_free_r+0x24>
 800a32c:	bd38      	pop	{r3, r4, r5, pc}
 800a32e:	bf00      	nop
 800a330:	200002dc 	.word	0x200002dc

0800a334 <_malloc_r>:
 800a334:	b570      	push	{r4, r5, r6, lr}
 800a336:	1ccd      	adds	r5, r1, #3
 800a338:	f025 0503 	bic.w	r5, r5, #3
 800a33c:	3508      	adds	r5, #8
 800a33e:	2d0c      	cmp	r5, #12
 800a340:	bf38      	it	cc
 800a342:	250c      	movcc	r5, #12
 800a344:	2d00      	cmp	r5, #0
 800a346:	4606      	mov	r6, r0
 800a348:	db01      	blt.n	800a34e <_malloc_r+0x1a>
 800a34a:	42a9      	cmp	r1, r5
 800a34c:	d903      	bls.n	800a356 <_malloc_r+0x22>
 800a34e:	230c      	movs	r3, #12
 800a350:	6033      	str	r3, [r6, #0]
 800a352:	2000      	movs	r0, #0
 800a354:	bd70      	pop	{r4, r5, r6, pc}
 800a356:	f000 f87d 	bl	800a454 <__malloc_lock>
 800a35a:	4a21      	ldr	r2, [pc, #132]	; (800a3e0 <_malloc_r+0xac>)
 800a35c:	6814      	ldr	r4, [r2, #0]
 800a35e:	4621      	mov	r1, r4
 800a360:	b991      	cbnz	r1, 800a388 <_malloc_r+0x54>
 800a362:	4c20      	ldr	r4, [pc, #128]	; (800a3e4 <_malloc_r+0xb0>)
 800a364:	6823      	ldr	r3, [r4, #0]
 800a366:	b91b      	cbnz	r3, 800a370 <_malloc_r+0x3c>
 800a368:	4630      	mov	r0, r6
 800a36a:	f000 f863 	bl	800a434 <_sbrk_r>
 800a36e:	6020      	str	r0, [r4, #0]
 800a370:	4629      	mov	r1, r5
 800a372:	4630      	mov	r0, r6
 800a374:	f000 f85e 	bl	800a434 <_sbrk_r>
 800a378:	1c43      	adds	r3, r0, #1
 800a37a:	d124      	bne.n	800a3c6 <_malloc_r+0x92>
 800a37c:	230c      	movs	r3, #12
 800a37e:	6033      	str	r3, [r6, #0]
 800a380:	4630      	mov	r0, r6
 800a382:	f000 f868 	bl	800a456 <__malloc_unlock>
 800a386:	e7e4      	b.n	800a352 <_malloc_r+0x1e>
 800a388:	680b      	ldr	r3, [r1, #0]
 800a38a:	1b5b      	subs	r3, r3, r5
 800a38c:	d418      	bmi.n	800a3c0 <_malloc_r+0x8c>
 800a38e:	2b0b      	cmp	r3, #11
 800a390:	d90f      	bls.n	800a3b2 <_malloc_r+0x7e>
 800a392:	600b      	str	r3, [r1, #0]
 800a394:	50cd      	str	r5, [r1, r3]
 800a396:	18cc      	adds	r4, r1, r3
 800a398:	4630      	mov	r0, r6
 800a39a:	f000 f85c 	bl	800a456 <__malloc_unlock>
 800a39e:	f104 000b 	add.w	r0, r4, #11
 800a3a2:	1d23      	adds	r3, r4, #4
 800a3a4:	f020 0007 	bic.w	r0, r0, #7
 800a3a8:	1ac3      	subs	r3, r0, r3
 800a3aa:	d0d3      	beq.n	800a354 <_malloc_r+0x20>
 800a3ac:	425a      	negs	r2, r3
 800a3ae:	50e2      	str	r2, [r4, r3]
 800a3b0:	e7d0      	b.n	800a354 <_malloc_r+0x20>
 800a3b2:	428c      	cmp	r4, r1
 800a3b4:	684b      	ldr	r3, [r1, #4]
 800a3b6:	bf16      	itet	ne
 800a3b8:	6063      	strne	r3, [r4, #4]
 800a3ba:	6013      	streq	r3, [r2, #0]
 800a3bc:	460c      	movne	r4, r1
 800a3be:	e7eb      	b.n	800a398 <_malloc_r+0x64>
 800a3c0:	460c      	mov	r4, r1
 800a3c2:	6849      	ldr	r1, [r1, #4]
 800a3c4:	e7cc      	b.n	800a360 <_malloc_r+0x2c>
 800a3c6:	1cc4      	adds	r4, r0, #3
 800a3c8:	f024 0403 	bic.w	r4, r4, #3
 800a3cc:	42a0      	cmp	r0, r4
 800a3ce:	d005      	beq.n	800a3dc <_malloc_r+0xa8>
 800a3d0:	1a21      	subs	r1, r4, r0
 800a3d2:	4630      	mov	r0, r6
 800a3d4:	f000 f82e 	bl	800a434 <_sbrk_r>
 800a3d8:	3001      	adds	r0, #1
 800a3da:	d0cf      	beq.n	800a37c <_malloc_r+0x48>
 800a3dc:	6025      	str	r5, [r4, #0]
 800a3de:	e7db      	b.n	800a398 <_malloc_r+0x64>
 800a3e0:	200002dc 	.word	0x200002dc
 800a3e4:	200002e0 	.word	0x200002e0

0800a3e8 <_realloc_r>:
 800a3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ea:	4607      	mov	r7, r0
 800a3ec:	4614      	mov	r4, r2
 800a3ee:	460e      	mov	r6, r1
 800a3f0:	b921      	cbnz	r1, 800a3fc <_realloc_r+0x14>
 800a3f2:	4611      	mov	r1, r2
 800a3f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a3f8:	f7ff bf9c 	b.w	800a334 <_malloc_r>
 800a3fc:	b922      	cbnz	r2, 800a408 <_realloc_r+0x20>
 800a3fe:	f7ff ff4b 	bl	800a298 <_free_r>
 800a402:	4625      	mov	r5, r4
 800a404:	4628      	mov	r0, r5
 800a406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a408:	f000 f826 	bl	800a458 <_malloc_usable_size_r>
 800a40c:	42a0      	cmp	r0, r4
 800a40e:	d20f      	bcs.n	800a430 <_realloc_r+0x48>
 800a410:	4621      	mov	r1, r4
 800a412:	4638      	mov	r0, r7
 800a414:	f7ff ff8e 	bl	800a334 <_malloc_r>
 800a418:	4605      	mov	r5, r0
 800a41a:	2800      	cmp	r0, #0
 800a41c:	d0f2      	beq.n	800a404 <_realloc_r+0x1c>
 800a41e:	4631      	mov	r1, r6
 800a420:	4622      	mov	r2, r4
 800a422:	f7ff ff15 	bl	800a250 <memcpy>
 800a426:	4631      	mov	r1, r6
 800a428:	4638      	mov	r0, r7
 800a42a:	f7ff ff35 	bl	800a298 <_free_r>
 800a42e:	e7e9      	b.n	800a404 <_realloc_r+0x1c>
 800a430:	4635      	mov	r5, r6
 800a432:	e7e7      	b.n	800a404 <_realloc_r+0x1c>

0800a434 <_sbrk_r>:
 800a434:	b538      	push	{r3, r4, r5, lr}
 800a436:	4c06      	ldr	r4, [pc, #24]	; (800a450 <_sbrk_r+0x1c>)
 800a438:	2300      	movs	r3, #0
 800a43a:	4605      	mov	r5, r0
 800a43c:	4608      	mov	r0, r1
 800a43e:	6023      	str	r3, [r4, #0]
 800a440:	f7fe fe2a 	bl	8009098 <_sbrk>
 800a444:	1c43      	adds	r3, r0, #1
 800a446:	d102      	bne.n	800a44e <_sbrk_r+0x1a>
 800a448:	6823      	ldr	r3, [r4, #0]
 800a44a:	b103      	cbz	r3, 800a44e <_sbrk_r+0x1a>
 800a44c:	602b      	str	r3, [r5, #0]
 800a44e:	bd38      	pop	{r3, r4, r5, pc}
 800a450:	20004700 	.word	0x20004700

0800a454 <__malloc_lock>:
 800a454:	4770      	bx	lr

0800a456 <__malloc_unlock>:
 800a456:	4770      	bx	lr

0800a458 <_malloc_usable_size_r>:
 800a458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a45c:	1f18      	subs	r0, r3, #4
 800a45e:	2b00      	cmp	r3, #0
 800a460:	bfbc      	itt	lt
 800a462:	580b      	ldrlt	r3, [r1, r0]
 800a464:	18c0      	addlt	r0, r0, r3
 800a466:	4770      	bx	lr

0800a468 <_init>:
 800a468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a46a:	bf00      	nop
 800a46c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a46e:	bc08      	pop	{r3}
 800a470:	469e      	mov	lr, r3
 800a472:	4770      	bx	lr

0800a474 <_fini>:
 800a474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a476:	bf00      	nop
 800a478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a47a:	bc08      	pop	{r3}
 800a47c:	469e      	mov	lr, r3
 800a47e:	4770      	bx	lr
