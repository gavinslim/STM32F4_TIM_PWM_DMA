
exit_escape_box_stm32f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a460  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00021bd4  0800a600  0800a600  0001a600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802c1d4  0802c1d4  000400c8  2**0
                  CONTENTS
  4 .ARM          00000008  0802c1d4  0802c1d4  0003c1d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802c1dc  0802c1dc  000400c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802c1dc  0802c1dc  0003c1dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802c1e0  0802c1e0  0003c1e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  0802c1e4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004750  200000c8  0802c2ac  000400c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004818  0802c2ac  00044818  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000400c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019c0d  00000000  00000000  000400f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000033f9  00000000  00000000  00059d05  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001370  00000000  00000000  0005d100  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011e8  00000000  00000000  0005e470  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001986f  00000000  00000000  0005f658  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010f77  00000000  00000000  00078ec7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000907d6  00000000  00000000  00089e3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011a614  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054c8  00000000  00000000  0011a690  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000c8 	.word	0x200000c8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a5e8 	.word	0x0800a5e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000cc 	.word	0x200000cc
 80001dc:	0800a5e8 	.word	0x0800a5e8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b972 	b.w	8000d68 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9e08      	ldr	r6, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	4688      	mov	r8, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14b      	bne.n	8000b42 <__udivmoddi4+0xa6>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4615      	mov	r5, r2
 8000aae:	d967      	bls.n	8000b80 <__udivmoddi4+0xe4>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b14a      	cbz	r2, 8000aca <__udivmoddi4+0x2e>
 8000ab6:	f1c2 0720 	rsb	r7, r2, #32
 8000aba:	fa01 f302 	lsl.w	r3, r1, r2
 8000abe:	fa20 f707 	lsr.w	r7, r0, r7
 8000ac2:	4095      	lsls	r5, r2
 8000ac4:	ea47 0803 	orr.w	r8, r7, r3
 8000ac8:	4094      	lsls	r4, r2
 8000aca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ace:	0c23      	lsrs	r3, r4, #16
 8000ad0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ad4:	fa1f fc85 	uxth.w	ip, r5
 8000ad8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000adc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ae0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ae4:	4299      	cmp	r1, r3
 8000ae6:	d909      	bls.n	8000afc <__udivmoddi4+0x60>
 8000ae8:	18eb      	adds	r3, r5, r3
 8000aea:	f107 30ff 	add.w	r0, r7, #4294967295
 8000aee:	f080 811b 	bcs.w	8000d28 <__udivmoddi4+0x28c>
 8000af2:	4299      	cmp	r1, r3
 8000af4:	f240 8118 	bls.w	8000d28 <__udivmoddi4+0x28c>
 8000af8:	3f02      	subs	r7, #2
 8000afa:	442b      	add	r3, r5
 8000afc:	1a5b      	subs	r3, r3, r1
 8000afe:	b2a4      	uxth	r4, r4
 8000b00:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b04:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b0c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b10:	45a4      	cmp	ip, r4
 8000b12:	d909      	bls.n	8000b28 <__udivmoddi4+0x8c>
 8000b14:	192c      	adds	r4, r5, r4
 8000b16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b1a:	f080 8107 	bcs.w	8000d2c <__udivmoddi4+0x290>
 8000b1e:	45a4      	cmp	ip, r4
 8000b20:	f240 8104 	bls.w	8000d2c <__udivmoddi4+0x290>
 8000b24:	3802      	subs	r0, #2
 8000b26:	442c      	add	r4, r5
 8000b28:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b2c:	eba4 040c 	sub.w	r4, r4, ip
 8000b30:	2700      	movs	r7, #0
 8000b32:	b11e      	cbz	r6, 8000b3c <__udivmoddi4+0xa0>
 8000b34:	40d4      	lsrs	r4, r2
 8000b36:	2300      	movs	r3, #0
 8000b38:	e9c6 4300 	strd	r4, r3, [r6]
 8000b3c:	4639      	mov	r1, r7
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d909      	bls.n	8000b5a <__udivmoddi4+0xbe>
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	f000 80eb 	beq.w	8000d22 <__udivmoddi4+0x286>
 8000b4c:	2700      	movs	r7, #0
 8000b4e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b52:	4638      	mov	r0, r7
 8000b54:	4639      	mov	r1, r7
 8000b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5a:	fab3 f783 	clz	r7, r3
 8000b5e:	2f00      	cmp	r7, #0
 8000b60:	d147      	bne.n	8000bf2 <__udivmoddi4+0x156>
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d302      	bcc.n	8000b6c <__udivmoddi4+0xd0>
 8000b66:	4282      	cmp	r2, r0
 8000b68:	f200 80fa 	bhi.w	8000d60 <__udivmoddi4+0x2c4>
 8000b6c:	1a84      	subs	r4, r0, r2
 8000b6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b72:	2001      	movs	r0, #1
 8000b74:	4698      	mov	r8, r3
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	d0e0      	beq.n	8000b3c <__udivmoddi4+0xa0>
 8000b7a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b7e:	e7dd      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000b80:	b902      	cbnz	r2, 8000b84 <__udivmoddi4+0xe8>
 8000b82:	deff      	udf	#255	; 0xff
 8000b84:	fab2 f282 	clz	r2, r2
 8000b88:	2a00      	cmp	r2, #0
 8000b8a:	f040 808f 	bne.w	8000cac <__udivmoddi4+0x210>
 8000b8e:	1b49      	subs	r1, r1, r5
 8000b90:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b94:	fa1f f885 	uxth.w	r8, r5
 8000b98:	2701      	movs	r7, #1
 8000b9a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b9e:	0c23      	lsrs	r3, r4, #16
 8000ba0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ba4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bac:	4299      	cmp	r1, r3
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0x124>
 8000bb0:	18eb      	adds	r3, r5, r3
 8000bb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0x122>
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	f200 80cd 	bhi.w	8000d58 <__udivmoddi4+0x2bc>
 8000bbe:	4684      	mov	ip, r0
 8000bc0:	1a59      	subs	r1, r3, r1
 8000bc2:	b2a3      	uxth	r3, r4
 8000bc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bc8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bcc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bd0:	fb08 f800 	mul.w	r8, r8, r0
 8000bd4:	45a0      	cmp	r8, r4
 8000bd6:	d907      	bls.n	8000be8 <__udivmoddi4+0x14c>
 8000bd8:	192c      	adds	r4, r5, r4
 8000bda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x14a>
 8000be0:	45a0      	cmp	r8, r4
 8000be2:	f200 80b6 	bhi.w	8000d52 <__udivmoddi4+0x2b6>
 8000be6:	4618      	mov	r0, r3
 8000be8:	eba4 0408 	sub.w	r4, r4, r8
 8000bec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bf0:	e79f      	b.n	8000b32 <__udivmoddi4+0x96>
 8000bf2:	f1c7 0c20 	rsb	ip, r7, #32
 8000bf6:	40bb      	lsls	r3, r7
 8000bf8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bfc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c00:	fa01 f407 	lsl.w	r4, r1, r7
 8000c04:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c08:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c0c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c10:	4325      	orrs	r5, r4
 8000c12:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c16:	0c2c      	lsrs	r4, r5, #16
 8000c18:	fb08 3319 	mls	r3, r8, r9, r3
 8000c1c:	fa1f fa8e 	uxth.w	sl, lr
 8000c20:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c24:	fb09 f40a 	mul.w	r4, r9, sl
 8000c28:	429c      	cmp	r4, r3
 8000c2a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c2e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c32:	d90b      	bls.n	8000c4c <__udivmoddi4+0x1b0>
 8000c34:	eb1e 0303 	adds.w	r3, lr, r3
 8000c38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c3c:	f080 8087 	bcs.w	8000d4e <__udivmoddi4+0x2b2>
 8000c40:	429c      	cmp	r4, r3
 8000c42:	f240 8084 	bls.w	8000d4e <__udivmoddi4+0x2b2>
 8000c46:	f1a9 0902 	sub.w	r9, r9, #2
 8000c4a:	4473      	add	r3, lr
 8000c4c:	1b1b      	subs	r3, r3, r4
 8000c4e:	b2ad      	uxth	r5, r5
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c5c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c60:	45a2      	cmp	sl, r4
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x1da>
 8000c64:	eb1e 0404 	adds.w	r4, lr, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	d26b      	bcs.n	8000d46 <__udivmoddi4+0x2aa>
 8000c6e:	45a2      	cmp	sl, r4
 8000c70:	d969      	bls.n	8000d46 <__udivmoddi4+0x2aa>
 8000c72:	3802      	subs	r0, #2
 8000c74:	4474      	add	r4, lr
 8000c76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c7e:	eba4 040a 	sub.w	r4, r4, sl
 8000c82:	454c      	cmp	r4, r9
 8000c84:	46c2      	mov	sl, r8
 8000c86:	464b      	mov	r3, r9
 8000c88:	d354      	bcc.n	8000d34 <__udivmoddi4+0x298>
 8000c8a:	d051      	beq.n	8000d30 <__udivmoddi4+0x294>
 8000c8c:	2e00      	cmp	r6, #0
 8000c8e:	d069      	beq.n	8000d64 <__udivmoddi4+0x2c8>
 8000c90:	ebb1 050a 	subs.w	r5, r1, sl
 8000c94:	eb64 0403 	sbc.w	r4, r4, r3
 8000c98:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c9c:	40fd      	lsrs	r5, r7
 8000c9e:	40fc      	lsrs	r4, r7
 8000ca0:	ea4c 0505 	orr.w	r5, ip, r5
 8000ca4:	e9c6 5400 	strd	r5, r4, [r6]
 8000ca8:	2700      	movs	r7, #0
 8000caa:	e747      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000cac:	f1c2 0320 	rsb	r3, r2, #32
 8000cb0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cb4:	4095      	lsls	r5, r2
 8000cb6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cba:	fa21 f303 	lsr.w	r3, r1, r3
 8000cbe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cc2:	4338      	orrs	r0, r7
 8000cc4:	0c01      	lsrs	r1, r0, #16
 8000cc6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cca:	fa1f f885 	uxth.w	r8, r5
 8000cce:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd6:	fb07 f308 	mul.w	r3, r7, r8
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce0:	d907      	bls.n	8000cf2 <__udivmoddi4+0x256>
 8000ce2:	1869      	adds	r1, r5, r1
 8000ce4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ce8:	d22f      	bcs.n	8000d4a <__udivmoddi4+0x2ae>
 8000cea:	428b      	cmp	r3, r1
 8000cec:	d92d      	bls.n	8000d4a <__udivmoddi4+0x2ae>
 8000cee:	3f02      	subs	r7, #2
 8000cf0:	4429      	add	r1, r5
 8000cf2:	1acb      	subs	r3, r1, r3
 8000cf4:	b281      	uxth	r1, r0
 8000cf6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cfa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cfe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d02:	fb00 f308 	mul.w	r3, r0, r8
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d907      	bls.n	8000d1a <__udivmoddi4+0x27e>
 8000d0a:	1869      	adds	r1, r5, r1
 8000d0c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d10:	d217      	bcs.n	8000d42 <__udivmoddi4+0x2a6>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d915      	bls.n	8000d42 <__udivmoddi4+0x2a6>
 8000d16:	3802      	subs	r0, #2
 8000d18:	4429      	add	r1, r5
 8000d1a:	1ac9      	subs	r1, r1, r3
 8000d1c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d20:	e73b      	b.n	8000b9a <__udivmoddi4+0xfe>
 8000d22:	4637      	mov	r7, r6
 8000d24:	4630      	mov	r0, r6
 8000d26:	e709      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000d28:	4607      	mov	r7, r0
 8000d2a:	e6e7      	b.n	8000afc <__udivmoddi4+0x60>
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	e6fb      	b.n	8000b28 <__udivmoddi4+0x8c>
 8000d30:	4541      	cmp	r1, r8
 8000d32:	d2ab      	bcs.n	8000c8c <__udivmoddi4+0x1f0>
 8000d34:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d38:	eb69 020e 	sbc.w	r2, r9, lr
 8000d3c:	3801      	subs	r0, #1
 8000d3e:	4613      	mov	r3, r2
 8000d40:	e7a4      	b.n	8000c8c <__udivmoddi4+0x1f0>
 8000d42:	4660      	mov	r0, ip
 8000d44:	e7e9      	b.n	8000d1a <__udivmoddi4+0x27e>
 8000d46:	4618      	mov	r0, r3
 8000d48:	e795      	b.n	8000c76 <__udivmoddi4+0x1da>
 8000d4a:	4667      	mov	r7, ip
 8000d4c:	e7d1      	b.n	8000cf2 <__udivmoddi4+0x256>
 8000d4e:	4681      	mov	r9, r0
 8000d50:	e77c      	b.n	8000c4c <__udivmoddi4+0x1b0>
 8000d52:	3802      	subs	r0, #2
 8000d54:	442c      	add	r4, r5
 8000d56:	e747      	b.n	8000be8 <__udivmoddi4+0x14c>
 8000d58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d5c:	442b      	add	r3, r5
 8000d5e:	e72f      	b.n	8000bc0 <__udivmoddi4+0x124>
 8000d60:	4638      	mov	r0, r7
 8000d62:	e708      	b.n	8000b76 <__udivmoddi4+0xda>
 8000d64:	4637      	mov	r7, r6
 8000d66:	e6e9      	b.n	8000b3c <__udivmoddi4+0xa0>

08000d68 <__aeabi_idiv0>:
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop

08000d6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d70:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <HAL_Init+0x40>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a0d      	ldr	r2, [pc, #52]	; (8000dac <HAL_Init+0x40>)
 8000d76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d7c:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <HAL_Init+0x40>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <HAL_Init+0x40>)
 8000d82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d88:	4b08      	ldr	r3, [pc, #32]	; (8000dac <HAL_Init+0x40>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a07      	ldr	r2, [pc, #28]	; (8000dac <HAL_Init+0x40>)
 8000d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d94:	2003      	movs	r0, #3
 8000d96:	f000 f94d 	bl	8001034 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d9a:	200f      	movs	r0, #15
 8000d9c:	f000 f808 	bl	8000db0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da0:	f007 fe86 	bl	8008ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40023c00 	.word	0x40023c00

08000db0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000db8:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <HAL_InitTick+0x54>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <HAL_InitTick+0x58>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 f965 	bl	800109e <HAL_SYSTICK_Config>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e00e      	b.n	8000dfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2b0f      	cmp	r3, #15
 8000de2:	d80a      	bhi.n	8000dfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de4:	2200      	movs	r2, #0
 8000de6:	6879      	ldr	r1, [r7, #4]
 8000de8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dec:	f000 f92d 	bl	800104a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df0:	4a06      	ldr	r2, [pc, #24]	; (8000e0c <HAL_InitTick+0x5c>)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000df6:	2300      	movs	r3, #0
 8000df8:	e000      	b.n	8000dfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	2000004c 	.word	0x2000004c
 8000e08:	20000004 	.word	0x20000004
 8000e0c:	20000000 	.word	0x20000000

08000e10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_IncTick+0x20>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_IncTick+0x24>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4413      	add	r3, r2
 8000e20:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <HAL_IncTick+0x24>)
 8000e22:	6013      	str	r3, [r2, #0]
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20000004 	.word	0x20000004
 8000e34:	2000034c 	.word	0x2000034c

08000e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e3c:	4b03      	ldr	r3, [pc, #12]	; (8000e4c <HAL_GetTick+0x14>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	2000034c 	.word	0x2000034c

08000e50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e58:	f7ff ffee 	bl	8000e38 <HAL_GetTick>
 8000e5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e68:	d005      	beq.n	8000e76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e6a:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <HAL_Delay+0x40>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	461a      	mov	r2, r3
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	4413      	add	r3, r2
 8000e74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e76:	bf00      	nop
 8000e78:	f7ff ffde 	bl	8000e38 <HAL_GetTick>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d8f7      	bhi.n	8000e78 <HAL_Delay+0x28>
  {
  }
}
 8000e88:	bf00      	nop
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000004 	.word	0x20000004

08000e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eaa:	68ba      	ldr	r2, [r7, #8]
 8000eac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ebc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ec6:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	60d3      	str	r3, [r2, #12]
}
 8000ecc:	bf00      	nop
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee0:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	0a1b      	lsrs	r3, r3, #8
 8000ee6:	f003 0307 	and.w	r3, r3, #7
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	db0b      	blt.n	8000f22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	f003 021f 	and.w	r2, r3, #31
 8000f10:	4907      	ldr	r1, [pc, #28]	; (8000f30 <__NVIC_EnableIRQ+0x38>)
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	095b      	lsrs	r3, r3, #5
 8000f18:	2001      	movs	r0, #1
 8000f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	e000e100 	.word	0xe000e100

08000f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	6039      	str	r1, [r7, #0]
 8000f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	db0a      	blt.n	8000f5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	490c      	ldr	r1, [pc, #48]	; (8000f80 <__NVIC_SetPriority+0x4c>)
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	0112      	lsls	r2, r2, #4
 8000f54:	b2d2      	uxtb	r2, r2
 8000f56:	440b      	add	r3, r1
 8000f58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f5c:	e00a      	b.n	8000f74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	4908      	ldr	r1, [pc, #32]	; (8000f84 <__NVIC_SetPriority+0x50>)
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	f003 030f 	and.w	r3, r3, #15
 8000f6a:	3b04      	subs	r3, #4
 8000f6c:	0112      	lsls	r2, r2, #4
 8000f6e:	b2d2      	uxtb	r2, r2
 8000f70:	440b      	add	r3, r1
 8000f72:	761a      	strb	r2, [r3, #24]
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000e100 	.word	0xe000e100
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b089      	sub	sp, #36	; 0x24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	f1c3 0307 	rsb	r3, r3, #7
 8000fa2:	2b04      	cmp	r3, #4
 8000fa4:	bf28      	it	cs
 8000fa6:	2304      	movcs	r3, #4
 8000fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3304      	adds	r3, #4
 8000fae:	2b06      	cmp	r3, #6
 8000fb0:	d902      	bls.n	8000fb8 <NVIC_EncodePriority+0x30>
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3b03      	subs	r3, #3
 8000fb6:	e000      	b.n	8000fba <NVIC_EncodePriority+0x32>
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43da      	mvns	r2, r3
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	401a      	ands	r2, r3
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fda:	43d9      	mvns	r1, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe0:	4313      	orrs	r3, r2
         );
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3724      	adds	r7, #36	; 0x24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
	...

08000ff0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001000:	d301      	bcc.n	8001006 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001002:	2301      	movs	r3, #1
 8001004:	e00f      	b.n	8001026 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001006:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <SysTick_Config+0x40>)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3b01      	subs	r3, #1
 800100c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800100e:	210f      	movs	r1, #15
 8001010:	f04f 30ff 	mov.w	r0, #4294967295
 8001014:	f7ff ff8e 	bl	8000f34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <SysTick_Config+0x40>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800101e:	4b04      	ldr	r3, [pc, #16]	; (8001030 <SysTick_Config+0x40>)
 8001020:	2207      	movs	r2, #7
 8001022:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	e000e010 	.word	0xe000e010

08001034 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f7ff ff29 	bl	8000e94 <__NVIC_SetPriorityGrouping>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800104a:	b580      	push	{r7, lr}
 800104c:	b086      	sub	sp, #24
 800104e:	af00      	add	r7, sp, #0
 8001050:	4603      	mov	r3, r0
 8001052:	60b9      	str	r1, [r7, #8]
 8001054:	607a      	str	r2, [r7, #4]
 8001056:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800105c:	f7ff ff3e 	bl	8000edc <__NVIC_GetPriorityGrouping>
 8001060:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	68b9      	ldr	r1, [r7, #8]
 8001066:	6978      	ldr	r0, [r7, #20]
 8001068:	f7ff ff8e 	bl	8000f88 <NVIC_EncodePriority>
 800106c:	4602      	mov	r2, r0
 800106e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001072:	4611      	mov	r1, r2
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ff5d 	bl	8000f34 <__NVIC_SetPriority>
}
 800107a:	bf00      	nop
 800107c:	3718      	adds	r7, #24
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
 8001088:	4603      	mov	r3, r0
 800108a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800108c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff31 	bl	8000ef8 <__NVIC_EnableIRQ>
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff ffa2 	bl	8000ff0 <SysTick_Config>
 80010ac:	4603      	mov	r3, r0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80010ba:	f000 f802 	bl	80010c2 <HAL_SYSTICK_Callback>
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80010c6:	bf00      	nop
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80010dc:	f7ff feac 	bl	8000e38 <HAL_GetTick>
 80010e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d101      	bne.n	80010ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e099      	b.n	8001220 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2202      	movs	r2, #2
 80010f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f022 0201 	bic.w	r2, r2, #1
 800110a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800110c:	e00f      	b.n	800112e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800110e:	f7ff fe93 	bl	8000e38 <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	2b05      	cmp	r3, #5
 800111a:	d908      	bls.n	800112e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2220      	movs	r2, #32
 8001120:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2203      	movs	r2, #3
 8001126:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e078      	b.n	8001220 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1e8      	bne.n	800110e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001144:	697a      	ldr	r2, [r7, #20]
 8001146:	4b38      	ldr	r3, [pc, #224]	; (8001228 <HAL_DMA_Init+0x158>)
 8001148:	4013      	ands	r3, r2
 800114a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685a      	ldr	r2, [r3, #4]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800115a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	691b      	ldr	r3, [r3, #16]
 8001160:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001166:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001172:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6a1b      	ldr	r3, [r3, #32]
 8001178:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800117a:	697a      	ldr	r2, [r7, #20]
 800117c:	4313      	orrs	r3, r2
 800117e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001184:	2b04      	cmp	r3, #4
 8001186:	d107      	bne.n	8001198 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001190:	4313      	orrs	r3, r2
 8001192:	697a      	ldr	r2, [r7, #20]
 8001194:	4313      	orrs	r3, r2
 8001196:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	697a      	ldr	r2, [r7, #20]
 800119e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	f023 0307 	bic.w	r3, r3, #7
 80011ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b4:	697a      	ldr	r2, [r7, #20]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011be:	2b04      	cmp	r3, #4
 80011c0:	d117      	bne.n	80011f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d00e      	beq.n	80011f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 f907 	bl	80013e8 <DMA_CheckFifoParam>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d008      	beq.n	80011f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2240      	movs	r2, #64	; 0x40
 80011e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2201      	movs	r2, #1
 80011ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80011ee:	2301      	movs	r3, #1
 80011f0:	e016      	b.n	8001220 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	697a      	ldr	r2, [r7, #20]
 80011f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f000 f8be 	bl	800137c <DMA_CalcBaseAndBitshift>
 8001200:	4603      	mov	r3, r0
 8001202:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001208:	223f      	movs	r2, #63	; 0x3f
 800120a:	409a      	lsls	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2201      	movs	r2, #1
 800121a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800121e:	2300      	movs	r3, #0
}
 8001220:	4618      	mov	r0, r3
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	f010803f 	.word	0xf010803f

0800122c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
 8001238:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800123a:	2300      	movs	r3, #0
 800123c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001242:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800124a:	2b01      	cmp	r3, #1
 800124c:	d101      	bne.n	8001252 <HAL_DMA_Start_IT+0x26>
 800124e:	2302      	movs	r3, #2
 8001250:	e040      	b.n	80012d4 <HAL_DMA_Start_IT+0xa8>
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2201      	movs	r2, #1
 8001256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2b01      	cmp	r3, #1
 8001264:	d12f      	bne.n	80012c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2202      	movs	r2, #2
 800126a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	2200      	movs	r2, #0
 8001272:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	68b9      	ldr	r1, [r7, #8]
 800127a:	68f8      	ldr	r0, [r7, #12]
 800127c:	f000 f850 	bl	8001320 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001284:	223f      	movs	r2, #63	; 0x3f
 8001286:	409a      	lsls	r2, r3
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f042 0216 	orr.w	r2, r2, #22
 800129a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d007      	beq.n	80012b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f042 0208 	orr.w	r2, r2, #8
 80012b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f042 0201 	orr.w	r2, r2, #1
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	e005      	b.n	80012d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80012ce:	2302      	movs	r3, #2
 80012d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80012d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d004      	beq.n	80012fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2280      	movs	r2, #128	; 0x80
 80012f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e00c      	b.n	8001314 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2205      	movs	r2, #5
 80012fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 0201 	bic.w	r2, r2, #1
 8001310:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001312:	2300      	movs	r3, #0
}
 8001314:	4618      	mov	r0, r3
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
 800132c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800133c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	2b40      	cmp	r3, #64	; 0x40
 800134c:	d108      	bne.n	8001360 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800135e:	e007      	b.n	8001370 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	68ba      	ldr	r2, [r7, #8]
 8001366:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	60da      	str	r2, [r3, #12]
}
 8001370:	bf00      	nop
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	b2db      	uxtb	r3, r3
 800138a:	3b10      	subs	r3, #16
 800138c:	4a14      	ldr	r2, [pc, #80]	; (80013e0 <DMA_CalcBaseAndBitshift+0x64>)
 800138e:	fba2 2303 	umull	r2, r3, r2, r3
 8001392:	091b      	lsrs	r3, r3, #4
 8001394:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001396:	4a13      	ldr	r2, [pc, #76]	; (80013e4 <DMA_CalcBaseAndBitshift+0x68>)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	4413      	add	r3, r2
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	461a      	mov	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2b03      	cmp	r3, #3
 80013a8:	d909      	bls.n	80013be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80013b2:	f023 0303 	bic.w	r3, r3, #3
 80013b6:	1d1a      	adds	r2, r3, #4
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	659a      	str	r2, [r3, #88]	; 0x58
 80013bc:	e007      	b.n	80013ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80013c6:	f023 0303 	bic.w	r3, r3, #3
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3714      	adds	r7, #20
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	aaaaaaab 	.word	0xaaaaaaab
 80013e4:	0800a9e8 	.word	0x0800a9e8

080013e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013f0:	2300      	movs	r3, #0
 80013f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d11f      	bne.n	8001442 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	2b03      	cmp	r3, #3
 8001406:	d855      	bhi.n	80014b4 <DMA_CheckFifoParam+0xcc>
 8001408:	a201      	add	r2, pc, #4	; (adr r2, 8001410 <DMA_CheckFifoParam+0x28>)
 800140a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800140e:	bf00      	nop
 8001410:	08001421 	.word	0x08001421
 8001414:	08001433 	.word	0x08001433
 8001418:	08001421 	.word	0x08001421
 800141c:	080014b5 	.word	0x080014b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001424:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d045      	beq.n	80014b8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001430:	e042      	b.n	80014b8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001436:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800143a:	d13f      	bne.n	80014bc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001440:	e03c      	b.n	80014bc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800144a:	d121      	bne.n	8001490 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	2b03      	cmp	r3, #3
 8001450:	d836      	bhi.n	80014c0 <DMA_CheckFifoParam+0xd8>
 8001452:	a201      	add	r2, pc, #4	; (adr r2, 8001458 <DMA_CheckFifoParam+0x70>)
 8001454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001458:	08001469 	.word	0x08001469
 800145c:	0800146f 	.word	0x0800146f
 8001460:	08001469 	.word	0x08001469
 8001464:	08001481 	.word	0x08001481
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	73fb      	strb	r3, [r7, #15]
      break;
 800146c:	e02f      	b.n	80014ce <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001472:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d024      	beq.n	80014c4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800147e:	e021      	b.n	80014c4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001484:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001488:	d11e      	bne.n	80014c8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800148e:	e01b      	b.n	80014c8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	2b02      	cmp	r3, #2
 8001494:	d902      	bls.n	800149c <DMA_CheckFifoParam+0xb4>
 8001496:	2b03      	cmp	r3, #3
 8001498:	d003      	beq.n	80014a2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800149a:	e018      	b.n	80014ce <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	73fb      	strb	r3, [r7, #15]
      break;
 80014a0:	e015      	b.n	80014ce <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d00e      	beq.n	80014cc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	73fb      	strb	r3, [r7, #15]
      break;
 80014b2:	e00b      	b.n	80014cc <DMA_CheckFifoParam+0xe4>
      break;
 80014b4:	bf00      	nop
 80014b6:	e00a      	b.n	80014ce <DMA_CheckFifoParam+0xe6>
      break;
 80014b8:	bf00      	nop
 80014ba:	e008      	b.n	80014ce <DMA_CheckFifoParam+0xe6>
      break;
 80014bc:	bf00      	nop
 80014be:	e006      	b.n	80014ce <DMA_CheckFifoParam+0xe6>
      break;
 80014c0:	bf00      	nop
 80014c2:	e004      	b.n	80014ce <DMA_CheckFifoParam+0xe6>
      break;
 80014c4:	bf00      	nop
 80014c6:	e002      	b.n	80014ce <DMA_CheckFifoParam+0xe6>
      break;   
 80014c8:	bf00      	nop
 80014ca:	e000      	b.n	80014ce <DMA_CheckFifoParam+0xe6>
      break;
 80014cc:	bf00      	nop
    }
  } 
  
  return status; 
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014dc:	b480      	push	{r7}
 80014de:	b089      	sub	sp, #36	; 0x24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
 80014f6:	e159      	b.n	80017ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014f8:	2201      	movs	r2, #1
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	697a      	ldr	r2, [r7, #20]
 8001508:	4013      	ands	r3, r2
 800150a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	429a      	cmp	r2, r3
 8001512:	f040 8148 	bne.w	80017a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d00b      	beq.n	8001536 <HAL_GPIO_Init+0x5a>
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2b02      	cmp	r3, #2
 8001524:	d007      	beq.n	8001536 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800152a:	2b11      	cmp	r3, #17
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2b12      	cmp	r3, #18
 8001534:	d130      	bne.n	8001598 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	2203      	movs	r2, #3
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43db      	mvns	r3, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4013      	ands	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	68da      	ldr	r2, [r3, #12]
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4313      	orrs	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800156c:	2201      	movs	r2, #1
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	43db      	mvns	r3, r3
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4013      	ands	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	091b      	lsrs	r3, r3, #4
 8001582:	f003 0201 	and.w	r2, r3, #1
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4313      	orrs	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	2203      	movs	r2, #3
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d003      	beq.n	80015d8 <HAL_GPIO_Init+0xfc>
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b12      	cmp	r3, #18
 80015d6:	d123      	bne.n	8001620 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	08da      	lsrs	r2, r3, #3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3208      	adds	r2, #8
 80015e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	f003 0307 	and.w	r3, r3, #7
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	220f      	movs	r2, #15
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	691a      	ldr	r2, [r3, #16]
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4313      	orrs	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	08da      	lsrs	r2, r3, #3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	3208      	adds	r2, #8
 800161a:	69b9      	ldr	r1, [r7, #24]
 800161c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	2203      	movs	r2, #3
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	43db      	mvns	r3, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4013      	ands	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 0203 	and.w	r2, r3, #3
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4313      	orrs	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165c:	2b00      	cmp	r3, #0
 800165e:	f000 80a2 	beq.w	80017a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	4b56      	ldr	r3, [pc, #344]	; (80017c0 <HAL_GPIO_Init+0x2e4>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	4a55      	ldr	r2, [pc, #340]	; (80017c0 <HAL_GPIO_Init+0x2e4>)
 800166c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001670:	6453      	str	r3, [r2, #68]	; 0x44
 8001672:	4b53      	ldr	r3, [pc, #332]	; (80017c0 <HAL_GPIO_Init+0x2e4>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800167e:	4a51      	ldr	r2, [pc, #324]	; (80017c4 <HAL_GPIO_Init+0x2e8>)
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	089b      	lsrs	r3, r3, #2
 8001684:	3302      	adds	r3, #2
 8001686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800168a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	f003 0303 	and.w	r3, r3, #3
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	220f      	movs	r2, #15
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43db      	mvns	r3, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4013      	ands	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a48      	ldr	r2, [pc, #288]	; (80017c8 <HAL_GPIO_Init+0x2ec>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d019      	beq.n	80016de <HAL_GPIO_Init+0x202>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a47      	ldr	r2, [pc, #284]	; (80017cc <HAL_GPIO_Init+0x2f0>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d013      	beq.n	80016da <HAL_GPIO_Init+0x1fe>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a46      	ldr	r2, [pc, #280]	; (80017d0 <HAL_GPIO_Init+0x2f4>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d00d      	beq.n	80016d6 <HAL_GPIO_Init+0x1fa>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a45      	ldr	r2, [pc, #276]	; (80017d4 <HAL_GPIO_Init+0x2f8>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d007      	beq.n	80016d2 <HAL_GPIO_Init+0x1f6>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a44      	ldr	r2, [pc, #272]	; (80017d8 <HAL_GPIO_Init+0x2fc>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d101      	bne.n	80016ce <HAL_GPIO_Init+0x1f2>
 80016ca:	2304      	movs	r3, #4
 80016cc:	e008      	b.n	80016e0 <HAL_GPIO_Init+0x204>
 80016ce:	2307      	movs	r3, #7
 80016d0:	e006      	b.n	80016e0 <HAL_GPIO_Init+0x204>
 80016d2:	2303      	movs	r3, #3
 80016d4:	e004      	b.n	80016e0 <HAL_GPIO_Init+0x204>
 80016d6:	2302      	movs	r3, #2
 80016d8:	e002      	b.n	80016e0 <HAL_GPIO_Init+0x204>
 80016da:	2301      	movs	r3, #1
 80016dc:	e000      	b.n	80016e0 <HAL_GPIO_Init+0x204>
 80016de:	2300      	movs	r3, #0
 80016e0:	69fa      	ldr	r2, [r7, #28]
 80016e2:	f002 0203 	and.w	r2, r2, #3
 80016e6:	0092      	lsls	r2, r2, #2
 80016e8:	4093      	lsls	r3, r2
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016f0:	4934      	ldr	r1, [pc, #208]	; (80017c4 <HAL_GPIO_Init+0x2e8>)
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	089b      	lsrs	r3, r3, #2
 80016f6:	3302      	adds	r3, #2
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016fe:	4b37      	ldr	r3, [pc, #220]	; (80017dc <HAL_GPIO_Init+0x300>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	43db      	mvns	r3, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4013      	ands	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d003      	beq.n	8001722 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	4313      	orrs	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001722:	4a2e      	ldr	r2, [pc, #184]	; (80017dc <HAL_GPIO_Init+0x300>)
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001728:	4b2c      	ldr	r3, [pc, #176]	; (80017dc <HAL_GPIO_Init+0x300>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	43db      	mvns	r3, r3
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	4013      	ands	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d003      	beq.n	800174c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	4313      	orrs	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800174c:	4a23      	ldr	r2, [pc, #140]	; (80017dc <HAL_GPIO_Init+0x300>)
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001752:	4b22      	ldr	r3, [pc, #136]	; (80017dc <HAL_GPIO_Init+0x300>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	43db      	mvns	r3, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4013      	ands	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	4313      	orrs	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001776:	4a19      	ldr	r2, [pc, #100]	; (80017dc <HAL_GPIO_Init+0x300>)
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800177c:	4b17      	ldr	r3, [pc, #92]	; (80017dc <HAL_GPIO_Init+0x300>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	43db      	mvns	r3, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4013      	ands	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	4313      	orrs	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017a0:	4a0e      	ldr	r2, [pc, #56]	; (80017dc <HAL_GPIO_Init+0x300>)
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	3301      	adds	r3, #1
 80017aa:	61fb      	str	r3, [r7, #28]
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	2b0f      	cmp	r3, #15
 80017b0:	f67f aea2 	bls.w	80014f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017b4:	bf00      	nop
 80017b6:	3724      	adds	r7, #36	; 0x24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	40023800 	.word	0x40023800
 80017c4:	40013800 	.word	0x40013800
 80017c8:	40020000 	.word	0x40020000
 80017cc:	40020400 	.word	0x40020400
 80017d0:	40020800 	.word	0x40020800
 80017d4:	40020c00 	.word	0x40020c00
 80017d8:	40021000 	.word	0x40021000
 80017dc:	40013c00 	.word	0x40013c00

080017e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	460b      	mov	r3, r1
 80017ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	691a      	ldr	r2, [r3, #16]
 80017f0:	887b      	ldrh	r3, [r7, #2]
 80017f2:	4013      	ands	r3, r2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d002      	beq.n	80017fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017f8:	2301      	movs	r3, #1
 80017fa:	73fb      	strb	r3, [r7, #15]
 80017fc:	e001      	b.n	8001802 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017fe:	2300      	movs	r3, #0
 8001800:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001802:	7bfb      	ldrb	r3, [r7, #15]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3714      	adds	r7, #20
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	460b      	mov	r3, r1
 800181a:	807b      	strh	r3, [r7, #2]
 800181c:	4613      	mov	r3, r2
 800181e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001820:	787b      	ldrb	r3, [r7, #1]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d003      	beq.n	800182e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001826:	887a      	ldrh	r2, [r7, #2]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800182c:	e003      	b.n	8001836 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800182e:	887b      	ldrh	r3, [r7, #2]
 8001830:	041a      	lsls	r2, r3, #16
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	619a      	str	r2, [r3, #24]
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
	...

08001844 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e25b      	b.n	8001d0e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	2b00      	cmp	r3, #0
 8001860:	d075      	beq.n	800194e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001862:	4ba3      	ldr	r3, [pc, #652]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f003 030c 	and.w	r3, r3, #12
 800186a:	2b04      	cmp	r3, #4
 800186c:	d00c      	beq.n	8001888 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800186e:	4ba0      	ldr	r3, [pc, #640]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001876:	2b08      	cmp	r3, #8
 8001878:	d112      	bne.n	80018a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800187a:	4b9d      	ldr	r3, [pc, #628]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001882:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001886:	d10b      	bne.n	80018a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001888:	4b99      	ldr	r3, [pc, #612]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d05b      	beq.n	800194c <HAL_RCC_OscConfig+0x108>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d157      	bne.n	800194c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e236      	b.n	8001d0e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018a8:	d106      	bne.n	80018b8 <HAL_RCC_OscConfig+0x74>
 80018aa:	4b91      	ldr	r3, [pc, #580]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a90      	ldr	r2, [pc, #576]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 80018b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	e01d      	b.n	80018f4 <HAL_RCC_OscConfig+0xb0>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018c0:	d10c      	bne.n	80018dc <HAL_RCC_OscConfig+0x98>
 80018c2:	4b8b      	ldr	r3, [pc, #556]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a8a      	ldr	r2, [pc, #552]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 80018c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018cc:	6013      	str	r3, [r2, #0]
 80018ce:	4b88      	ldr	r3, [pc, #544]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a87      	ldr	r2, [pc, #540]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 80018d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	e00b      	b.n	80018f4 <HAL_RCC_OscConfig+0xb0>
 80018dc:	4b84      	ldr	r3, [pc, #528]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a83      	ldr	r2, [pc, #524]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 80018e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	4b81      	ldr	r3, [pc, #516]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a80      	ldr	r2, [pc, #512]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 80018ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d013      	beq.n	8001924 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fc:	f7ff fa9c 	bl	8000e38 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001904:	f7ff fa98 	bl	8000e38 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b64      	cmp	r3, #100	; 0x64
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e1fb      	b.n	8001d0e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001916:	4b76      	ldr	r3, [pc, #472]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0f0      	beq.n	8001904 <HAL_RCC_OscConfig+0xc0>
 8001922:	e014      	b.n	800194e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001924:	f7ff fa88 	bl	8000e38 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800192c:	f7ff fa84 	bl	8000e38 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b64      	cmp	r3, #100	; 0x64
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e1e7      	b.n	8001d0e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800193e:	4b6c      	ldr	r3, [pc, #432]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f0      	bne.n	800192c <HAL_RCC_OscConfig+0xe8>
 800194a:	e000      	b.n	800194e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800194c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d063      	beq.n	8001a22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800195a:	4b65      	ldr	r3, [pc, #404]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f003 030c 	and.w	r3, r3, #12
 8001962:	2b00      	cmp	r3, #0
 8001964:	d00b      	beq.n	800197e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001966:	4b62      	ldr	r3, [pc, #392]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800196e:	2b08      	cmp	r3, #8
 8001970:	d11c      	bne.n	80019ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001972:	4b5f      	ldr	r3, [pc, #380]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d116      	bne.n	80019ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800197e:	4b5c      	ldr	r3, [pc, #368]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d005      	beq.n	8001996 <HAL_RCC_OscConfig+0x152>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d001      	beq.n	8001996 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e1bb      	b.n	8001d0e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001996:	4b56      	ldr	r3, [pc, #344]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	4952      	ldr	r1, [pc, #328]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019aa:	e03a      	b.n	8001a22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d020      	beq.n	80019f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019b4:	4b4f      	ldr	r3, [pc, #316]	; (8001af4 <HAL_RCC_OscConfig+0x2b0>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ba:	f7ff fa3d 	bl	8000e38 <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019c2:	f7ff fa39 	bl	8000e38 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e19c      	b.n	8001d0e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d4:	4b46      	ldr	r3, [pc, #280]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0f0      	beq.n	80019c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e0:	4b43      	ldr	r3, [pc, #268]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	00db      	lsls	r3, r3, #3
 80019ee:	4940      	ldr	r1, [pc, #256]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	600b      	str	r3, [r1, #0]
 80019f4:	e015      	b.n	8001a22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019f6:	4b3f      	ldr	r3, [pc, #252]	; (8001af4 <HAL_RCC_OscConfig+0x2b0>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fc:	f7ff fa1c 	bl	8000e38 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a04:	f7ff fa18 	bl	8000e38 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e17b      	b.n	8001d0e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a16:	4b36      	ldr	r3, [pc, #216]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f0      	bne.n	8001a04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0308 	and.w	r3, r3, #8
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d030      	beq.n	8001a90 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d016      	beq.n	8001a64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a36:	4b30      	ldr	r3, [pc, #192]	; (8001af8 <HAL_RCC_OscConfig+0x2b4>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a3c:	f7ff f9fc 	bl	8000e38 <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a44:	f7ff f9f8 	bl	8000e38 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e15b      	b.n	8001d0e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a56:	4b26      	ldr	r3, [pc, #152]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 8001a58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0f0      	beq.n	8001a44 <HAL_RCC_OscConfig+0x200>
 8001a62:	e015      	b.n	8001a90 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a64:	4b24      	ldr	r3, [pc, #144]	; (8001af8 <HAL_RCC_OscConfig+0x2b4>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a6a:	f7ff f9e5 	bl	8000e38 <HAL_GetTick>
 8001a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a72:	f7ff f9e1 	bl	8000e38 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e144      	b.n	8001d0e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a84:	4b1a      	ldr	r3, [pc, #104]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 8001a86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1f0      	bne.n	8001a72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f000 80a0 	beq.w	8001bde <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aa2:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d10f      	bne.n	8001ace <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	4a0e      	ldr	r2, [pc, #56]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 8001ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001abc:	6413      	str	r3, [r2, #64]	; 0x40
 8001abe:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac6:	60bb      	str	r3, [r7, #8]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aca:	2301      	movs	r3, #1
 8001acc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ace:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <HAL_RCC_OscConfig+0x2b8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d121      	bne.n	8001b1e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ada:	4b08      	ldr	r3, [pc, #32]	; (8001afc <HAL_RCC_OscConfig+0x2b8>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a07      	ldr	r2, [pc, #28]	; (8001afc <HAL_RCC_OscConfig+0x2b8>)
 8001ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ae6:	f7ff f9a7 	bl	8000e38 <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aec:	e011      	b.n	8001b12 <HAL_RCC_OscConfig+0x2ce>
 8001aee:	bf00      	nop
 8001af0:	40023800 	.word	0x40023800
 8001af4:	42470000 	.word	0x42470000
 8001af8:	42470e80 	.word	0x42470e80
 8001afc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b00:	f7ff f99a 	bl	8000e38 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e0fd      	b.n	8001d0e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b12:	4b81      	ldr	r3, [pc, #516]	; (8001d18 <HAL_RCC_OscConfig+0x4d4>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0f0      	beq.n	8001b00 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d106      	bne.n	8001b34 <HAL_RCC_OscConfig+0x2f0>
 8001b26:	4b7d      	ldr	r3, [pc, #500]	; (8001d1c <HAL_RCC_OscConfig+0x4d8>)
 8001b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2a:	4a7c      	ldr	r2, [pc, #496]	; (8001d1c <HAL_RCC_OscConfig+0x4d8>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	6713      	str	r3, [r2, #112]	; 0x70
 8001b32:	e01c      	b.n	8001b6e <HAL_RCC_OscConfig+0x32a>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	2b05      	cmp	r3, #5
 8001b3a:	d10c      	bne.n	8001b56 <HAL_RCC_OscConfig+0x312>
 8001b3c:	4b77      	ldr	r3, [pc, #476]	; (8001d1c <HAL_RCC_OscConfig+0x4d8>)
 8001b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b40:	4a76      	ldr	r2, [pc, #472]	; (8001d1c <HAL_RCC_OscConfig+0x4d8>)
 8001b42:	f043 0304 	orr.w	r3, r3, #4
 8001b46:	6713      	str	r3, [r2, #112]	; 0x70
 8001b48:	4b74      	ldr	r3, [pc, #464]	; (8001d1c <HAL_RCC_OscConfig+0x4d8>)
 8001b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b4c:	4a73      	ldr	r2, [pc, #460]	; (8001d1c <HAL_RCC_OscConfig+0x4d8>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	6713      	str	r3, [r2, #112]	; 0x70
 8001b54:	e00b      	b.n	8001b6e <HAL_RCC_OscConfig+0x32a>
 8001b56:	4b71      	ldr	r3, [pc, #452]	; (8001d1c <HAL_RCC_OscConfig+0x4d8>)
 8001b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5a:	4a70      	ldr	r2, [pc, #448]	; (8001d1c <HAL_RCC_OscConfig+0x4d8>)
 8001b5c:	f023 0301 	bic.w	r3, r3, #1
 8001b60:	6713      	str	r3, [r2, #112]	; 0x70
 8001b62:	4b6e      	ldr	r3, [pc, #440]	; (8001d1c <HAL_RCC_OscConfig+0x4d8>)
 8001b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b66:	4a6d      	ldr	r2, [pc, #436]	; (8001d1c <HAL_RCC_OscConfig+0x4d8>)
 8001b68:	f023 0304 	bic.w	r3, r3, #4
 8001b6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d015      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b76:	f7ff f95f 	bl	8000e38 <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b7c:	e00a      	b.n	8001b94 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b7e:	f7ff f95b 	bl	8000e38 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e0bc      	b.n	8001d0e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b94:	4b61      	ldr	r3, [pc, #388]	; (8001d1c <HAL_RCC_OscConfig+0x4d8>)
 8001b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0ee      	beq.n	8001b7e <HAL_RCC_OscConfig+0x33a>
 8001ba0:	e014      	b.n	8001bcc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba2:	f7ff f949 	bl	8000e38 <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba8:	e00a      	b.n	8001bc0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001baa:	f7ff f945 	bl	8000e38 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e0a6      	b.n	8001d0e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc0:	4b56      	ldr	r3, [pc, #344]	; (8001d1c <HAL_RCC_OscConfig+0x4d8>)
 8001bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1ee      	bne.n	8001baa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bcc:	7dfb      	ldrb	r3, [r7, #23]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d105      	bne.n	8001bde <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bd2:	4b52      	ldr	r3, [pc, #328]	; (8001d1c <HAL_RCC_OscConfig+0x4d8>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	4a51      	ldr	r2, [pc, #324]	; (8001d1c <HAL_RCC_OscConfig+0x4d8>)
 8001bd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bdc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 8092 	beq.w	8001d0c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001be8:	4b4c      	ldr	r3, [pc, #304]	; (8001d1c <HAL_RCC_OscConfig+0x4d8>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 030c 	and.w	r3, r3, #12
 8001bf0:	2b08      	cmp	r3, #8
 8001bf2:	d05c      	beq.n	8001cae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d141      	bne.n	8001c80 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bfc:	4b48      	ldr	r3, [pc, #288]	; (8001d20 <HAL_RCC_OscConfig+0x4dc>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c02:	f7ff f919 	bl	8000e38 <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c0a:	f7ff f915 	bl	8000e38 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e078      	b.n	8001d0e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c1c:	4b3f      	ldr	r3, [pc, #252]	; (8001d1c <HAL_RCC_OscConfig+0x4d8>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1f0      	bne.n	8001c0a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	69da      	ldr	r2, [r3, #28]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	431a      	orrs	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c36:	019b      	lsls	r3, r3, #6
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c3e:	085b      	lsrs	r3, r3, #1
 8001c40:	3b01      	subs	r3, #1
 8001c42:	041b      	lsls	r3, r3, #16
 8001c44:	431a      	orrs	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4a:	061b      	lsls	r3, r3, #24
 8001c4c:	4933      	ldr	r1, [pc, #204]	; (8001d1c <HAL_RCC_OscConfig+0x4d8>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c52:	4b33      	ldr	r3, [pc, #204]	; (8001d20 <HAL_RCC_OscConfig+0x4dc>)
 8001c54:	2201      	movs	r2, #1
 8001c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c58:	f7ff f8ee 	bl	8000e38 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c60:	f7ff f8ea 	bl	8000e38 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e04d      	b.n	8001d0e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c72:	4b2a      	ldr	r3, [pc, #168]	; (8001d1c <HAL_RCC_OscConfig+0x4d8>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d0f0      	beq.n	8001c60 <HAL_RCC_OscConfig+0x41c>
 8001c7e:	e045      	b.n	8001d0c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c80:	4b27      	ldr	r3, [pc, #156]	; (8001d20 <HAL_RCC_OscConfig+0x4dc>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c86:	f7ff f8d7 	bl	8000e38 <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c8e:	f7ff f8d3 	bl	8000e38 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e036      	b.n	8001d0e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ca0:	4b1e      	ldr	r3, [pc, #120]	; (8001d1c <HAL_RCC_OscConfig+0x4d8>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1f0      	bne.n	8001c8e <HAL_RCC_OscConfig+0x44a>
 8001cac:	e02e      	b.n	8001d0c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d101      	bne.n	8001cba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e029      	b.n	8001d0e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cba:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <HAL_RCC_OscConfig+0x4d8>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d11c      	bne.n	8001d08 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d115      	bne.n	8001d08 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d10d      	bne.n	8001d08 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d106      	bne.n	8001d08 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d001      	beq.n	8001d0c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e000      	b.n	8001d0e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40007000 	.word	0x40007000
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	42470060 	.word	0x42470060

08001d24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e0cc      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d38:	4b68      	ldr	r3, [pc, #416]	; (8001edc <HAL_RCC_ClockConfig+0x1b8>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 030f 	and.w	r3, r3, #15
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d90c      	bls.n	8001d60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d46:	4b65      	ldr	r3, [pc, #404]	; (8001edc <HAL_RCC_ClockConfig+0x1b8>)
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d4e:	4b63      	ldr	r3, [pc, #396]	; (8001edc <HAL_RCC_ClockConfig+0x1b8>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d001      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e0b8      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d020      	beq.n	8001dae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d005      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d78:	4b59      	ldr	r3, [pc, #356]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	4a58      	ldr	r2, [pc, #352]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0308 	and.w	r3, r3, #8
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d005      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d90:	4b53      	ldr	r3, [pc, #332]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	4a52      	ldr	r2, [pc, #328]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d9c:	4b50      	ldr	r3, [pc, #320]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	494d      	ldr	r1, [pc, #308]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d044      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d107      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc2:	4b47      	ldr	r3, [pc, #284]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d119      	bne.n	8001e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e07f      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d003      	beq.n	8001de2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dde:	2b03      	cmp	r3, #3
 8001de0:	d107      	bne.n	8001df2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de2:	4b3f      	ldr	r3, [pc, #252]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d109      	bne.n	8001e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e06f      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df2:	4b3b      	ldr	r3, [pc, #236]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e067      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e02:	4b37      	ldr	r3, [pc, #220]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f023 0203 	bic.w	r2, r3, #3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	4934      	ldr	r1, [pc, #208]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e14:	f7ff f810 	bl	8000e38 <HAL_GetTick>
 8001e18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e1a:	e00a      	b.n	8001e32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e1c:	f7ff f80c 	bl	8000e38 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e04f      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e32:	4b2b      	ldr	r3, [pc, #172]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 020c 	and.w	r2, r3, #12
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d1eb      	bne.n	8001e1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e44:	4b25      	ldr	r3, [pc, #148]	; (8001edc <HAL_RCC_ClockConfig+0x1b8>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 030f 	and.w	r3, r3, #15
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d20c      	bcs.n	8001e6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e52:	4b22      	ldr	r3, [pc, #136]	; (8001edc <HAL_RCC_ClockConfig+0x1b8>)
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e5a:	4b20      	ldr	r3, [pc, #128]	; (8001edc <HAL_RCC_ClockConfig+0x1b8>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d001      	beq.n	8001e6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e032      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d008      	beq.n	8001e8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e78:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	4916      	ldr	r1, [pc, #88]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0308 	and.w	r3, r3, #8
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d009      	beq.n	8001eaa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e96:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	490e      	ldr	r1, [pc, #56]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001eaa:	f000 f821 	bl	8001ef0 <HAL_RCC_GetSysClockFreq>
 8001eae:	4601      	mov	r1, r0
 8001eb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	091b      	lsrs	r3, r3, #4
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	4a0a      	ldr	r2, [pc, #40]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8001ebc:	5cd3      	ldrb	r3, [r2, r3]
 8001ebe:	fa21 f303 	lsr.w	r3, r1, r3
 8001ec2:	4a09      	ldr	r2, [pc, #36]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ec6:	4b09      	ldr	r3, [pc, #36]	; (8001eec <HAL_RCC_ClockConfig+0x1c8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7fe ff70 	bl	8000db0 <HAL_InitTick>

  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40023c00 	.word	0x40023c00
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	0802c178 	.word	0x0802c178
 8001ee8:	2000004c 	.word	0x2000004c
 8001eec:	20000000 	.word	0x20000000

08001ef0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	607b      	str	r3, [r7, #4]
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	2300      	movs	r3, #0
 8001f00:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f06:	4b63      	ldr	r3, [pc, #396]	; (8002094 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 030c 	and.w	r3, r3, #12
 8001f0e:	2b04      	cmp	r3, #4
 8001f10:	d007      	beq.n	8001f22 <HAL_RCC_GetSysClockFreq+0x32>
 8001f12:	2b08      	cmp	r3, #8
 8001f14:	d008      	beq.n	8001f28 <HAL_RCC_GetSysClockFreq+0x38>
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f040 80b4 	bne.w	8002084 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f1c:	4b5e      	ldr	r3, [pc, #376]	; (8002098 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001f1e:	60bb      	str	r3, [r7, #8]
       break;
 8001f20:	e0b3      	b.n	800208a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f22:	4b5e      	ldr	r3, [pc, #376]	; (800209c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001f24:	60bb      	str	r3, [r7, #8]
      break;
 8001f26:	e0b0      	b.n	800208a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f28:	4b5a      	ldr	r3, [pc, #360]	; (8002094 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f30:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f32:	4b58      	ldr	r3, [pc, #352]	; (8002094 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d04a      	beq.n	8001fd4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f3e:	4b55      	ldr	r3, [pc, #340]	; (8002094 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	099b      	lsrs	r3, r3, #6
 8001f44:	f04f 0400 	mov.w	r4, #0
 8001f48:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f4c:	f04f 0200 	mov.w	r2, #0
 8001f50:	ea03 0501 	and.w	r5, r3, r1
 8001f54:	ea04 0602 	and.w	r6, r4, r2
 8001f58:	4629      	mov	r1, r5
 8001f5a:	4632      	mov	r2, r6
 8001f5c:	f04f 0300 	mov.w	r3, #0
 8001f60:	f04f 0400 	mov.w	r4, #0
 8001f64:	0154      	lsls	r4, r2, #5
 8001f66:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f6a:	014b      	lsls	r3, r1, #5
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4622      	mov	r2, r4
 8001f70:	1b49      	subs	r1, r1, r5
 8001f72:	eb62 0206 	sbc.w	r2, r2, r6
 8001f76:	f04f 0300 	mov.w	r3, #0
 8001f7a:	f04f 0400 	mov.w	r4, #0
 8001f7e:	0194      	lsls	r4, r2, #6
 8001f80:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001f84:	018b      	lsls	r3, r1, #6
 8001f86:	1a5b      	subs	r3, r3, r1
 8001f88:	eb64 0402 	sbc.w	r4, r4, r2
 8001f8c:	f04f 0100 	mov.w	r1, #0
 8001f90:	f04f 0200 	mov.w	r2, #0
 8001f94:	00e2      	lsls	r2, r4, #3
 8001f96:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001f9a:	00d9      	lsls	r1, r3, #3
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	4614      	mov	r4, r2
 8001fa0:	195b      	adds	r3, r3, r5
 8001fa2:	eb44 0406 	adc.w	r4, r4, r6
 8001fa6:	f04f 0100 	mov.w	r1, #0
 8001faa:	f04f 0200 	mov.w	r2, #0
 8001fae:	0262      	lsls	r2, r4, #9
 8001fb0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001fb4:	0259      	lsls	r1, r3, #9
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	4614      	mov	r4, r2
 8001fba:	4618      	mov	r0, r3
 8001fbc:	4621      	mov	r1, r4
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f04f 0400 	mov.w	r4, #0
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4623      	mov	r3, r4
 8001fc8:	f7fe fd50 	bl	8000a6c <__aeabi_uldivmod>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	460c      	mov	r4, r1
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	e049      	b.n	8002068 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fd4:	4b2f      	ldr	r3, [pc, #188]	; (8002094 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	099b      	lsrs	r3, r3, #6
 8001fda:	f04f 0400 	mov.w	r4, #0
 8001fde:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	ea03 0501 	and.w	r5, r3, r1
 8001fea:	ea04 0602 	and.w	r6, r4, r2
 8001fee:	4629      	mov	r1, r5
 8001ff0:	4632      	mov	r2, r6
 8001ff2:	f04f 0300 	mov.w	r3, #0
 8001ff6:	f04f 0400 	mov.w	r4, #0
 8001ffa:	0154      	lsls	r4, r2, #5
 8001ffc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002000:	014b      	lsls	r3, r1, #5
 8002002:	4619      	mov	r1, r3
 8002004:	4622      	mov	r2, r4
 8002006:	1b49      	subs	r1, r1, r5
 8002008:	eb62 0206 	sbc.w	r2, r2, r6
 800200c:	f04f 0300 	mov.w	r3, #0
 8002010:	f04f 0400 	mov.w	r4, #0
 8002014:	0194      	lsls	r4, r2, #6
 8002016:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800201a:	018b      	lsls	r3, r1, #6
 800201c:	1a5b      	subs	r3, r3, r1
 800201e:	eb64 0402 	sbc.w	r4, r4, r2
 8002022:	f04f 0100 	mov.w	r1, #0
 8002026:	f04f 0200 	mov.w	r2, #0
 800202a:	00e2      	lsls	r2, r4, #3
 800202c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002030:	00d9      	lsls	r1, r3, #3
 8002032:	460b      	mov	r3, r1
 8002034:	4614      	mov	r4, r2
 8002036:	195b      	adds	r3, r3, r5
 8002038:	eb44 0406 	adc.w	r4, r4, r6
 800203c:	f04f 0100 	mov.w	r1, #0
 8002040:	f04f 0200 	mov.w	r2, #0
 8002044:	02a2      	lsls	r2, r4, #10
 8002046:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800204a:	0299      	lsls	r1, r3, #10
 800204c:	460b      	mov	r3, r1
 800204e:	4614      	mov	r4, r2
 8002050:	4618      	mov	r0, r3
 8002052:	4621      	mov	r1, r4
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f04f 0400 	mov.w	r4, #0
 800205a:	461a      	mov	r2, r3
 800205c:	4623      	mov	r3, r4
 800205e:	f7fe fd05 	bl	8000a6c <__aeabi_uldivmod>
 8002062:	4603      	mov	r3, r0
 8002064:	460c      	mov	r4, r1
 8002066:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002068:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	0c1b      	lsrs	r3, r3, #16
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	3301      	adds	r3, #1
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002080:	60bb      	str	r3, [r7, #8]
      break;
 8002082:	e002      	b.n	800208a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002084:	4b04      	ldr	r3, [pc, #16]	; (8002098 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002086:	60bb      	str	r3, [r7, #8]
      break;
 8002088:	bf00      	nop
    }
  }
  return sysclockfreq;
 800208a:	68bb      	ldr	r3, [r7, #8]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3714      	adds	r7, #20
 8002090:	46bd      	mov	sp, r7
 8002092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002094:	40023800 	.word	0x40023800
 8002098:	00f42400 	.word	0x00f42400
 800209c:	007a1200 	.word	0x007a1200

080020a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020a4:	4b03      	ldr	r3, [pc, #12]	; (80020b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80020a6:	681b      	ldr	r3, [r3, #0]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	2000004c 	.word	0x2000004c

080020b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020bc:	f7ff fff0 	bl	80020a0 <HAL_RCC_GetHCLKFreq>
 80020c0:	4601      	mov	r1, r0
 80020c2:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	0a9b      	lsrs	r3, r3, #10
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	4a03      	ldr	r2, [pc, #12]	; (80020dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80020ce:	5cd3      	ldrb	r3, [r2, r3]
 80020d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40023800 	.word	0x40023800
 80020dc:	0802c188 	.word	0x0802c188

080020e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020e4:	f7ff ffdc 	bl	80020a0 <HAL_RCC_GetHCLKFreq>
 80020e8:	4601      	mov	r1, r0
 80020ea:	4b05      	ldr	r3, [pc, #20]	; (8002100 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	0b5b      	lsrs	r3, r3, #13
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	4a03      	ldr	r2, [pc, #12]	; (8002104 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020f6:	5cd3      	ldrb	r3, [r2, r3]
 80020f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40023800 	.word	0x40023800
 8002104:	0802c188 	.word	0x0802c188

08002108 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e05d      	b.n	80021d6 <HAL_SPI_Init+0xce>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d106      	bne.n	8002134 <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f006 fd96 	bl	8008c60 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2202      	movs	r2, #2
 8002138:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800214a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	431a      	orrs	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	431a      	orrs	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	431a      	orrs	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	431a      	orrs	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002170:	431a      	orrs	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	431a      	orrs	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	ea42 0103 	orr.w	r1, r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	430a      	orrs	r2, r1
 800218a:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	0c1b      	lsrs	r3, r3, #16
 8002192:	f003 0104 	and.w	r1, r3, #4
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	430a      	orrs	r2, r1
 80021a0:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021aa:	d104      	bne.n	80021b6 <HAL_SPI_Init+0xae>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80021b4:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	69da      	ldr	r2, [r3, #28]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021c4:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b08a      	sub	sp, #40	; 0x28
 80021e2:	af02      	add	r7, sp, #8
 80021e4:	60f8      	str	r0, [r7, #12]
 80021e6:	60b9      	str	r1, [r7, #8]
 80021e8:	603b      	str	r3, [r7, #0]
 80021ea:	4613      	mov	r3, r2
 80021ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80021f2:	2300      	movs	r3, #0
 80021f4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d101      	bne.n	8002204 <HAL_SPI_Transmit+0x26>
 8002200:	2302      	movs	r3, #2
 8002202:	e147      	b.n	8002494 <HAL_SPI_Transmit+0x2b6>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800220c:	f7fe fe14 	bl	8000e38 <HAL_GetTick>
 8002210:	61b8      	str	r0, [r7, #24]

  if(hspi->State != HAL_SPI_STATE_READY)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b01      	cmp	r3, #1
 800221c:	d002      	beq.n	8002224 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800221e:	2302      	movs	r3, #2
 8002220:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002222:	e12e      	b.n	8002482 <HAL_SPI_Transmit+0x2a4>
  }

  if((pData == NULL ) || (Size == 0))
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d002      	beq.n	8002230 <HAL_SPI_Transmit+0x52>
 800222a:	88fb      	ldrh	r3, [r7, #6]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d102      	bne.n	8002236 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002234:	e125      	b.n	8002482 <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2203      	movs	r2, #3
 800223a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	88fa      	ldrh	r2, [r7, #6]
 800224e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	88fa      	ldrh	r2, [r7, #6]
 8002254:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2200      	movs	r2, #0
 8002266:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800227c:	d107      	bne.n	800228e <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800228c:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002292:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002296:	d10f      	bne.n	80022b8 <HAL_SPI_Transmit+0xda>
  {
    SPI_RESET_CRC(hspi);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022b6:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c2:	2b40      	cmp	r3, #64	; 0x40
 80022c4:	d007      	beq.n	80022d6 <HAL_SPI_Transmit+0xf8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022de:	d147      	bne.n	8002370 <HAL_SPI_Transmit+0x192>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d004      	beq.n	80022f2 <HAL_SPI_Transmit+0x114>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d138      	bne.n	8002364 <HAL_SPI_Transmit+0x186>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	881a      	ldrh	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	3302      	adds	r3, #2
 8002300:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002306:	b29b      	uxth	r3, r3
 8002308:	3b01      	subs	r3, #1
 800230a:	b29a      	uxth	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002310:	e028      	b.n	8002364 <HAL_SPI_Transmit+0x186>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b02      	cmp	r3, #2
 800231e:	d10f      	bne.n	8002340 <HAL_SPI_Transmit+0x162>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	881a      	ldrh	r2, [r3, #0]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	3302      	adds	r3, #2
 800232e:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount--;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002334:	b29b      	uxth	r3, r3
 8002336:	3b01      	subs	r3, #1
 8002338:	b29a      	uxth	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	86da      	strh	r2, [r3, #54]	; 0x36
 800233e:	e011      	b.n	8002364 <HAL_SPI_Transmit+0x186>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00b      	beq.n	800235e <HAL_SPI_Transmit+0x180>
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800234c:	d00a      	beq.n	8002364 <HAL_SPI_Transmit+0x186>
 800234e:	f7fe fd73 	bl	8000e38 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	d802      	bhi.n	8002364 <HAL_SPI_Transmit+0x186>
        {
          errorcode = HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002362:	e08e      	b.n	8002482 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002368:	b29b      	uxth	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1d1      	bne.n	8002312 <HAL_SPI_Transmit+0x134>
 800236e:	e048      	b.n	8002402 <HAL_SPI_Transmit+0x224>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d004      	beq.n	8002382 <HAL_SPI_Transmit+0x1a4>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800237c:	b29b      	uxth	r3, r3
 800237e:	2b01      	cmp	r3, #1
 8002380:	d13a      	bne.n	80023f8 <HAL_SPI_Transmit+0x21a>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	330c      	adds	r3, #12
 8002388:	68ba      	ldr	r2, [r7, #8]
 800238a:	7812      	ldrb	r2, [r2, #0]
 800238c:	701a      	strb	r2, [r3, #0]
      pData += sizeof(uint8_t);
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	3301      	adds	r3, #1
 8002392:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002398:	b29b      	uxth	r3, r3
 800239a:	3b01      	subs	r3, #1
 800239c:	b29a      	uxth	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80023a2:	e029      	b.n	80023f8 <HAL_SPI_Transmit+0x21a>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d110      	bne.n	80023d4 <HAL_SPI_Transmit+0x1f6>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	330c      	adds	r3, #12
 80023b8:	68ba      	ldr	r2, [r7, #8]
 80023ba:	7812      	ldrb	r2, [r2, #0]
 80023bc:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	3301      	adds	r3, #1
 80023c2:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	3b01      	subs	r3, #1
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	86da      	strh	r2, [r3, #54]	; 0x36
 80023d2:	e011      	b.n	80023f8 <HAL_SPI_Transmit+0x21a>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00b      	beq.n	80023f2 <HAL_SPI_Transmit+0x214>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e0:	d00a      	beq.n	80023f8 <HAL_SPI_Transmit+0x21a>
 80023e2:	f7fe fd29 	bl	8000e38 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d802      	bhi.n	80023f8 <HAL_SPI_Transmit+0x21a>
        {
          errorcode = HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80023f6:	e044      	b.n	8002482 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1d0      	bne.n	80023a4 <HAL_SPI_Transmit+0x1c6>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	2201      	movs	r2, #1
 800240a:	2102      	movs	r1, #2
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f000 fa56 	bl	80028be <SPI_WaitFlagStateUntilTimeout>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d002      	beq.n	800241e <HAL_SPI_Transmit+0x240>
  {
    errorcode = HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800241c:	e031      	b.n	8002482 <HAL_SPI_Transmit+0x2a4>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	6839      	ldr	r1, [r7, #0]
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f000 fab3 	bl	800298e <SPI_CheckFlag_BSY>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d005      	beq.n	800243a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	77fb      	strb	r3, [r7, #31]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2220      	movs	r2, #32
 8002436:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002438:	e023      	b.n	8002482 <HAL_SPI_Transmit+0x2a4>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10a      	bne.n	8002458 <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002442:	2300      	movs	r3, #0
 8002444:	617b      	str	r3, [r7, #20]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	617b      	str	r3, [r7, #20]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	617b      	str	r3, [r7, #20]
 8002456:	697b      	ldr	r3, [r7, #20]
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002460:	d107      	bne.n	8002472 <HAL_SPI_Transmit+0x294>
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002470:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002476:	2b00      	cmp	r3, #0
 8002478:	d002      	beq.n	8002480 <HAL_SPI_Transmit+0x2a2>
  {
    errorcode = HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	77fb      	strb	r3, [r7, #31]
 800247e:	e000      	b.n	8002482 <HAL_SPI_Transmit+0x2a4>
  }

error:
 8002480:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002492:	7ffb      	ldrb	r3, [r7, #31]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3720      	adds	r7, #32
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_SPI_TransmitReceive>:
  * @param  Size amount of data to be sent and received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08e      	sub	sp, #56	; 0x38
 80024a0:	af02      	add	r7, sp, #8
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
 80024a8:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24
 80024ae:	2300      	movs	r3, #0
 80024b0:	623b      	str	r3, [r7, #32]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg1 = 0U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	837b      	strh	r3, [r7, #26]
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61fb      	str	r3, [r7, #28]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 80024ba:	2301      	movs	r3, #1
 80024bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef errorcode = HAL_OK;
 80024be:	2300      	movs	r3, #0
 80024c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d101      	bne.n	80024d2 <HAL_SPI_TransmitReceive+0x36>
 80024ce:	2302      	movs	r3, #2
 80024d0:	e1f1      	b.n	80028b6 <HAL_SPI_TransmitReceive+0x41a>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024da:	f7fe fcad 	bl	8000e38 <HAL_GetTick>
 80024de:	61f8      	str	r0, [r7, #28]
  
  tmp  = hspi->State;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp1 = hspi->Init.Mode;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	623b      	str	r3, [r7, #32]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d00e      	beq.n	8002514 <HAL_SPI_TransmitReceive+0x78>
 80024f6:	6a3b      	ldr	r3, [r7, #32]
 80024f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024fc:	d106      	bne.n	800250c <HAL_SPI_TransmitReceive+0x70>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d102      	bne.n	800250c <HAL_SPI_TransmitReceive+0x70>
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	2b04      	cmp	r3, #4
 800250a:	d003      	beq.n	8002514 <HAL_SPI_TransmitReceive+0x78>
  {
    errorcode = HAL_BUSY;
 800250c:	2302      	movs	r3, #2
 800250e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002512:	e1c6      	b.n	80028a2 <HAL_SPI_TransmitReceive+0x406>
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d005      	beq.n	8002526 <HAL_SPI_TransmitReceive+0x8a>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d002      	beq.n	8002526 <HAL_SPI_TransmitReceive+0x8a>
 8002520:	887b      	ldrh	r3, [r7, #2]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d103      	bne.n	800252e <HAL_SPI_TransmitReceive+0x92>
  {
    errorcode = HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800252c:	e1b9      	b.n	80028a2 <HAL_SPI_TransmitReceive+0x406>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b01      	cmp	r3, #1
 8002538:	d103      	bne.n	8002542 <HAL_SPI_TransmitReceive+0xa6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2205      	movs	r2, #5
 800253e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	887a      	ldrh	r2, [r7, #2]
 8002552:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	887a      	ldrh	r2, [r7, #2]
 8002558:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	68ba      	ldr	r2, [r7, #8]
 800255e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	887a      	ldrh	r2, [r7, #2]
 8002564:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	887a      	ldrh	r2, [r7, #2]
 800256a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2200      	movs	r2, #0
 8002570:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002580:	d10f      	bne.n	80025a2 <HAL_SPI_TransmitReceive+0x106>
  {
    SPI_RESET_CRC(hspi);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025a0:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ac:	2b40      	cmp	r3, #64	; 0x40
 80025ae:	d007      	beq.n	80025c0 <HAL_SPI_TransmitReceive+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025c8:	f040 8084 	bne.w	80026d4 <HAL_SPI_TransmitReceive+0x238>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d004      	beq.n	80025de <HAL_SPI_TransmitReceive+0x142>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025d8:	b29b      	uxth	r3, r3
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d16f      	bne.n	80026be <HAL_SPI_TransmitReceive+0x222>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	881a      	ldrh	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	3302      	adds	r3, #2
 80025ec:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	3b01      	subs	r3, #1
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025fc:	e05f      	b.n	80026be <HAL_SPI_TransmitReceive+0x222>
    {
      /* Check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80025fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002600:	2b00      	cmp	r3, #0
 8002602:	d02e      	beq.n	8002662 <HAL_SPI_TransmitReceive+0x1c6>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002608:	b29b      	uxth	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d029      	beq.n	8002662 <HAL_SPI_TransmitReceive+0x1c6>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b02      	cmp	r3, #2
 800261a:	d122      	bne.n	8002662 <HAL_SPI_TransmitReceive+0x1c6>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	881a      	ldrh	r2, [r3, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	3302      	adds	r3, #2
 800262a:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002630:	b29b      	uxth	r3, r3
 8002632:	3b01      	subs	r3, #1
 8002634:	b29a      	uxth	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 800263a:	2300      	movs	r3, #0
 800263c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002642:	b29b      	uxth	r3, r3
 8002644:	2b00      	cmp	r3, #0
 8002646:	d10c      	bne.n	8002662 <HAL_SPI_TransmitReceive+0x1c6>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002650:	d107      	bne.n	8002662 <HAL_SPI_TransmitReceive+0x1c6>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002660:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002666:	b29b      	uxth	r3, r3
 8002668:	2b00      	cmp	r3, #0
 800266a:	d018      	beq.n	800269e <HAL_SPI_TransmitReceive+0x202>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b01      	cmp	r3, #1
 8002678:	d111      	bne.n	800269e <HAL_SPI_TransmitReceive+0x202>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	b29a      	uxth	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	3302      	adds	r3, #2
 800268a:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002690:	b29b      	uxth	r3, r3
 8002692:	3b01      	subs	r3, #1
 8002694:	b29a      	uxth	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 800269a:	2301      	movs	r3, #1
 800269c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 800269e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a4:	d00b      	beq.n	80026be <HAL_SPI_TransmitReceive+0x222>
 80026a6:	f7fe fbc7 	bl	8000e38 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d803      	bhi.n	80026be <HAL_SPI_TransmitReceive+0x222>
      {
        errorcode = HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80026bc:	e0f1      	b.n	80028a2 <HAL_SPI_TransmitReceive+0x406>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d19a      	bne.n	80025fe <HAL_SPI_TransmitReceive+0x162>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d195      	bne.n	80025fe <HAL_SPI_TransmitReceive+0x162>
 80026d2:	e082      	b.n	80027da <HAL_SPI_TransmitReceive+0x33e>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d004      	beq.n	80026e6 <HAL_SPI_TransmitReceive+0x24a>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d16f      	bne.n	80027c6 <HAL_SPI_TransmitReceive+0x32a>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	330c      	adds	r3, #12
 80026ec:	68ba      	ldr	r2, [r7, #8]
 80026ee:	7812      	ldrb	r2, [r2, #0]
 80026f0:	701a      	strb	r2, [r3, #0]
      pTxData += sizeof(uint8_t);
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	3301      	adds	r3, #1
 80026f6:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	3b01      	subs	r3, #1
 8002700:	b29a      	uxth	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002706:	e05e      	b.n	80027c6 <HAL_SPI_TransmitReceive+0x32a>
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270a:	2b00      	cmp	r3, #0
 800270c:	d02e      	beq.n	800276c <HAL_SPI_TransmitReceive+0x2d0>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002712:	b29b      	uxth	r3, r3
 8002714:	2b00      	cmp	r3, #0
 8002716:	d029      	beq.n	800276c <HAL_SPI_TransmitReceive+0x2d0>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b02      	cmp	r3, #2
 8002724:	d122      	bne.n	800276c <HAL_SPI_TransmitReceive+0x2d0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	1c5a      	adds	r2, r3, #1
 800272a:	60ba      	str	r2, [r7, #8]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	6812      	ldr	r2, [r2, #0]
 8002730:	320c      	adds	r2, #12
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800273a:	b29b      	uxth	r3, r3
 800273c:	3b01      	subs	r3, #1
 800273e:	b29a      	uxth	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8002744:	2300      	movs	r3, #0
 8002746:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800274c:	b29b      	uxth	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10c      	bne.n	800276c <HAL_SPI_TransmitReceive+0x2d0>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800275a:	d107      	bne.n	800276c <HAL_SPI_TransmitReceive+0x2d0>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800276a:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002770:	b29b      	uxth	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d017      	beq.n	80027a6 <HAL_SPI_TransmitReceive+0x30a>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	2b01      	cmp	r3, #1
 8002782:	d110      	bne.n	80027a6 <HAL_SPI_TransmitReceive+0x30a>
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68d9      	ldr	r1, [r3, #12]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	1c5a      	adds	r2, r3, #1
 800278e:	607a      	str	r2, [r7, #4]
 8002790:	b2ca      	uxtb	r2, r1
 8002792:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002798:	b29b      	uxth	r3, r3
 800279a:	3b01      	subs	r3, #1
 800279c:	b29a      	uxth	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 80027a2:	2301      	movs	r3, #1
 80027a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 80027a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ac:	d00b      	beq.n	80027c6 <HAL_SPI_TransmitReceive+0x32a>
 80027ae:	f7fe fb43 	bl	8000e38 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d803      	bhi.n	80027c6 <HAL_SPI_TransmitReceive+0x32a>
      {
        errorcode = HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80027c4:	e06d      	b.n	80028a2 <HAL_SPI_TransmitReceive+0x406>
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d19b      	bne.n	8002708 <HAL_SPI_TransmitReceive+0x26c>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d196      	bne.n	8002708 <HAL_SPI_TransmitReceive+0x26c>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027e2:	d11a      	bne.n	800281a <HAL_SPI_TransmitReceive+0x37e>
  {
    /* Wait until TXE flag */
    if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ea:	2201      	movs	r2, #1
 80027ec:	2101      	movs	r1, #1
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f000 f865 	bl	80028be <SPI_WaitFlagStateUntilTimeout>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d009      	beq.n	800280e <HAL_SPI_TransmitReceive+0x372>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fe:	f043 0202 	orr.w	r2, r3, #2
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 800280c:	e049      	b.n	80028a2 <HAL_SPI_TransmitReceive+0x406>
    }
    /* Read CRC */
    tmpreg1 = hspi->Instance->DR;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	b29b      	uxth	r3, r3
 8002816:	837b      	strh	r3, [r7, #26]
    /* To avoid GCC warning */
    UNUSED(tmpreg1);
 8002818:	8b7b      	ldrh	r3, [r7, #26]
  }

  /* Check if CRC error occurred */
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f003 0310 	and.w	r3, r3, #16
 8002824:	2b10      	cmp	r3, #16
 8002826:	d10d      	bne.n	8002844 <HAL_SPI_TransmitReceive+0x3a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282c:	f043 0202 	orr.w	r2, r3, #2
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800283c:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800284a:	2201      	movs	r2, #1
 800284c:	2102      	movs	r1, #2
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 f835 	bl	80028be <SPI_WaitFlagStateUntilTimeout>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_SPI_TransmitReceive+0x3c6>
  {
    errorcode = HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002860:	e01f      	b.n	80028a2 <HAL_SPI_TransmitReceive+0x406>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8002862:	69fa      	ldr	r2, [r7, #28]
 8002864:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 f891 	bl	800298e <SPI_CheckFlag_BSY>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d006      	beq.n	8002880 <HAL_SPI_TransmitReceive+0x3e4>
  {
    errorcode = HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2220      	movs	r2, #32
 800287c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800287e:	e010      	b.n	80028a2 <HAL_SPI_TransmitReceive+0x406>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10b      	bne.n	80028a0 <HAL_SPI_TransmitReceive+0x404>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002888:	2300      	movs	r3, #0
 800288a:	617b      	str	r3, [r7, #20]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	617b      	str	r3, [r7, #20]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	617b      	str	r3, [r7, #20]
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	e000      	b.n	80028a2 <HAL_SPI_TransmitReceive+0x406>
  }
  
error :
 80028a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80028b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3730      	adds	r7, #48	; 0x30
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b084      	sub	sp, #16
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	60f8      	str	r0, [r7, #12]
 80028c6:	60b9      	str	r1, [r7, #8]
 80028c8:	607a      	str	r2, [r7, #4]
 80028ca:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80028cc:	e04c      	b.n	8002968 <SPI_WaitFlagStateUntilTimeout+0xaa>
  {
    if(Timeout != HAL_MAX_DELAY)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d4:	d048      	beq.n	8002968 <SPI_WaitFlagStateUntilTimeout+0xaa>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d007      	beq.n	80028ec <SPI_WaitFlagStateUntilTimeout+0x2e>
 80028dc:	f7fe faac 	bl	8000e38 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d83d      	bhi.n	8002968 <SPI_WaitFlagStateUntilTimeout+0xaa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80028fa:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002904:	d111      	bne.n	800292a <SPI_WaitFlagStateUntilTimeout+0x6c>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800290e:	d004      	beq.n	800291a <SPI_WaitFlagStateUntilTimeout+0x5c>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002918:	d107      	bne.n	800292a <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002928:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002932:	d10f      	bne.n	8002954 <SPI_WaitFlagStateUntilTimeout+0x96>
        {
          SPI_RESET_CRC(hspi);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002952:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e00e      	b.n	8002986 <SPI_WaitFlagStateUntilTimeout+0xc8>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689a      	ldr	r2, [r3, #8]
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	4013      	ands	r3, r2
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	429a      	cmp	r2, r3
 8002976:	d101      	bne.n	800297c <SPI_WaitFlagStateUntilTimeout+0xbe>
 8002978:	2201      	movs	r2, #1
 800297a:	e000      	b.n	800297e <SPI_WaitFlagStateUntilTimeout+0xc0>
 800297c:	2200      	movs	r2, #0
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	429a      	cmp	r2, r3
 8002982:	d1a4      	bne.n	80028ce <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b086      	sub	sp, #24
 8002992:	af02      	add	r7, sp, #8
 8002994:	60f8      	str	r0, [r7, #12]
 8002996:	60b9      	str	r1, [r7, #8]
 8002998:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	2200      	movs	r2, #0
 80029a2:	2180      	movs	r1, #128	; 0x80
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f7ff ff8a 	bl	80028be <SPI_WaitFlagStateUntilTimeout>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d007      	beq.n	80029c0 <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b4:	f043 0220 	orr.w	r2, r3, #32
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e000      	b.n	80029c2 <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b082      	sub	sp, #8
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e01d      	b.n	8002a18 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d106      	bne.n	80029f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f006 f885 	bl	8008b00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2202      	movs	r2, #2
 80029fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	3304      	adds	r3, #4
 8002a06:	4619      	mov	r1, r3
 8002a08:	4610      	mov	r0, r2
 8002a0a:	f000 fd49 	bl	80034a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68da      	ldr	r2, [r3, #12]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 0201 	orr.w	r2, r2, #1
 8002a36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2b06      	cmp	r3, #6
 8002a48:	d007      	beq.n	8002a5a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f042 0201 	orr.w	r2, r2, #1
 8002a58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3714      	adds	r7, #20
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e01d      	b.n	8002ab6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d106      	bne.n	8002a94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f006 f85e 	bl	8008b50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2202      	movs	r2, #2
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3304      	adds	r3, #4
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4610      	mov	r0, r2
 8002aa8:	f000 fcfa 	bl	80034a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
	...

08002ac0 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
 8002acc:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d101      	bne.n	8002ade <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8002ada:	2302      	movs	r3, #2
 8002adc:	e0e9      	b.n	8002cb2 <HAL_TIM_PWM_Start_DMA+0x1f2>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d10b      	bne.n	8002b02 <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d104      	bne.n	8002afa <HAL_TIM_PWM_Start_DMA+0x3a>
 8002af0:	887b      	ldrh	r3, [r7, #2]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e0db      	b.n	8002cb2 <HAL_TIM_PWM_Start_DMA+0x1f2>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2202      	movs	r2, #2
 8002afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	2b0c      	cmp	r3, #12
 8002b06:	f200 80ad 	bhi.w	8002c64 <HAL_TIM_PWM_Start_DMA+0x1a4>
 8002b0a:	a201      	add	r2, pc, #4	; (adr r2, 8002b10 <HAL_TIM_PWM_Start_DMA+0x50>)
 8002b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b10:	08002b45 	.word	0x08002b45
 8002b14:	08002c65 	.word	0x08002c65
 8002b18:	08002c65 	.word	0x08002c65
 8002b1c:	08002c65 	.word	0x08002c65
 8002b20:	08002b8d 	.word	0x08002b8d
 8002b24:	08002c65 	.word	0x08002c65
 8002b28:	08002c65 	.word	0x08002c65
 8002b2c:	08002c65 	.word	0x08002c65
 8002b30:	08002bd5 	.word	0x08002bd5
 8002b34:	08002c65 	.word	0x08002c65
 8002b38:	08002c65 	.word	0x08002c65
 8002b3c:	08002c65 	.word	0x08002c65
 8002b40:	08002c1d 	.word	0x08002c1d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	4a5c      	ldr	r2, [pc, #368]	; (8002cbc <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8002b4a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	4a5b      	ldr	r2, [pc, #364]	; (8002cc0 <HAL_TIM_PWM_Start_DMA+0x200>)
 8002b52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b58:	4a5a      	ldr	r2, [pc, #360]	; (8002cc4 <HAL_TIM_PWM_Start_DMA+0x204>)
 8002b5a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	3334      	adds	r3, #52	; 0x34
 8002b68:	461a      	mov	r2, r3
 8002b6a:	887b      	ldrh	r3, [r7, #2]
 8002b6c:	f7fe fb5e 	bl	800122c <HAL_DMA_Start_IT>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e09b      	b.n	8002cb2 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68da      	ldr	r2, [r3, #12]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b88:	60da      	str	r2, [r3, #12]
      break;
 8002b8a:	e06c      	b.n	8002c66 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b90:	4a4a      	ldr	r2, [pc, #296]	; (8002cbc <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8002b92:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b98:	4a49      	ldr	r2, [pc, #292]	; (8002cc0 <HAL_TIM_PWM_Start_DMA+0x200>)
 8002b9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba0:	4a48      	ldr	r2, [pc, #288]	; (8002cc4 <HAL_TIM_PWM_Start_DMA+0x204>)
 8002ba2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002ba8:	6879      	ldr	r1, [r7, #4]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	3338      	adds	r3, #56	; 0x38
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	887b      	ldrh	r3, [r7, #2]
 8002bb4:	f7fe fb3a 	bl	800122c <HAL_DMA_Start_IT>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e077      	b.n	8002cb2 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bd0:	60da      	str	r2, [r3, #12]
      break;
 8002bd2:	e048      	b.n	8002c66 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd8:	4a38      	ldr	r2, [pc, #224]	; (8002cbc <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8002bda:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be0:	4a37      	ldr	r2, [pc, #220]	; (8002cc0 <HAL_TIM_PWM_Start_DMA+0x200>)
 8002be2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be8:	4a36      	ldr	r2, [pc, #216]	; (8002cc4 <HAL_TIM_PWM_Start_DMA+0x204>)
 8002bea:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002bf0:	6879      	ldr	r1, [r7, #4]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	333c      	adds	r3, #60	; 0x3c
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	887b      	ldrh	r3, [r7, #2]
 8002bfc:	f7fe fb16 	bl	800122c <HAL_DMA_Start_IT>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e053      	b.n	8002cb2 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68da      	ldr	r2, [r3, #12]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c18:	60da      	str	r2, [r3, #12]
      break;
 8002c1a:	e024      	b.n	8002c66 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c20:	4a26      	ldr	r2, [pc, #152]	; (8002cbc <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8002c22:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c28:	4a25      	ldr	r2, [pc, #148]	; (8002cc0 <HAL_TIM_PWM_Start_DMA+0x200>)
 8002c2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c30:	4a24      	ldr	r2, [pc, #144]	; (8002cc4 <HAL_TIM_PWM_Start_DMA+0x204>)
 8002c32:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	3340      	adds	r3, #64	; 0x40
 8002c40:	461a      	mov	r2, r3
 8002c42:	887b      	ldrh	r3, [r7, #2]
 8002c44:	f7fe faf2 	bl	800122c <HAL_DMA_Start_IT>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e02f      	b.n	8002cb2 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68da      	ldr	r2, [r3, #12]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c60:	60da      	str	r2, [r3, #12]
      break;
 8002c62:	e000      	b.n	8002c66 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 8002c64:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	68b9      	ldr	r1, [r7, #8]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 febc 	bl	80039ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a13      	ldr	r2, [pc, #76]	; (8002cc8 <HAL_TIM_PWM_Start_DMA+0x208>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d107      	bne.n	8002c8e <HAL_TIM_PWM_Start_DMA+0x1ce>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	2b06      	cmp	r3, #6
 8002c9e:	d007      	beq.n	8002cb0 <HAL_TIM_PWM_Start_DMA+0x1f0>
  {
    __HAL_TIM_ENABLE(htim);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f042 0201 	orr.w	r2, r2, #1
 8002cae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3718      	adds	r7, #24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	080033bf 	.word	0x080033bf
 8002cc0:	0800342f 	.word	0x0800342f
 8002cc4:	0800339b 	.word	0x0800339b
 8002cc8:	40010000 	.word	0x40010000

08002ccc <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2b0c      	cmp	r3, #12
 8002cda:	d855      	bhi.n	8002d88 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8002cdc:	a201      	add	r2, pc, #4	; (adr r2, 8002ce4 <HAL_TIM_PWM_Stop_DMA+0x18>)
 8002cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce2:	bf00      	nop
 8002ce4:	08002d19 	.word	0x08002d19
 8002ce8:	08002d89 	.word	0x08002d89
 8002cec:	08002d89 	.word	0x08002d89
 8002cf0:	08002d89 	.word	0x08002d89
 8002cf4:	08002d35 	.word	0x08002d35
 8002cf8:	08002d89 	.word	0x08002d89
 8002cfc:	08002d89 	.word	0x08002d89
 8002d00:	08002d89 	.word	0x08002d89
 8002d04:	08002d51 	.word	0x08002d51
 8002d08:	08002d89 	.word	0x08002d89
 8002d0c:	08002d89 	.word	0x08002d89
 8002d10:	08002d89 	.word	0x08002d89
 8002d14:	08002d6d 	.word	0x08002d6d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68da      	ldr	r2, [r3, #12]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d26:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7fe fad5 	bl	80012dc <HAL_DMA_Abort_IT>
      break;
 8002d32:	e02a      	b.n	8002d8a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68da      	ldr	r2, [r3, #12]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d42:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7fe fac7 	bl	80012dc <HAL_DMA_Abort_IT>
      break;
 8002d4e:	e01c      	b.n	8002d8a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68da      	ldr	r2, [r3, #12]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d5e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7fe fab9 	bl	80012dc <HAL_DMA_Abort_IT>
      break;
 8002d6a:	e00e      	b.n	8002d8a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68da      	ldr	r2, [r3, #12]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d7a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7fe faab 	bl	80012dc <HAL_DMA_Abort_IT>
      break;
 8002d86:	e000      	b.n	8002d8a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8002d88:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	6839      	ldr	r1, [r7, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 fe2a 	bl	80039ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a1d      	ldr	r2, [pc, #116]	; (8002e14 <HAL_TIM_PWM_Stop_DMA+0x148>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d117      	bne.n	8002dd2 <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6a1a      	ldr	r2, [r3, #32]
 8002da8:	f241 1311 	movw	r3, #4369	; 0x1111
 8002dac:	4013      	ands	r3, r2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10f      	bne.n	8002dd2 <HAL_TIM_PWM_Stop_DMA+0x106>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6a1a      	ldr	r2, [r3, #32]
 8002db8:	f240 4344 	movw	r3, #1092	; 0x444
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d107      	bne.n	8002dd2 <HAL_TIM_PWM_Stop_DMA+0x106>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dd0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6a1a      	ldr	r2, [r3, #32]
 8002dd8:	f241 1311 	movw	r3, #4369	; 0x1111
 8002ddc:	4013      	ands	r3, r2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10f      	bne.n	8002e02 <HAL_TIM_PWM_Stop_DMA+0x136>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6a1a      	ldr	r2, [r3, #32]
 8002de8:	f240 4344 	movw	r3, #1092	; 0x444
 8002dec:	4013      	ands	r3, r2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d107      	bne.n	8002e02 <HAL_TIM_PWM_Stop_DMA+0x136>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 0201 	bic.w	r2, r2, #1
 8002e00:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40010000 	.word	0x40010000

08002e18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d122      	bne.n	8002e74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d11b      	bne.n	8002e74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f06f 0202 	mvn.w	r2, #2
 8002e44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	f003 0303 	and.w	r3, r3, #3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 fa6b 	bl	8003336 <HAL_TIM_IC_CaptureCallback>
 8002e60:	e005      	b.n	8002e6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 fa5d 	bl	8003322 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 fa6e 	bl	800334a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	f003 0304 	and.w	r3, r3, #4
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	d122      	bne.n	8002ec8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b04      	cmp	r3, #4
 8002e8e:	d11b      	bne.n	8002ec8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f06f 0204 	mvn.w	r2, #4
 8002e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 fa41 	bl	8003336 <HAL_TIM_IC_CaptureCallback>
 8002eb4:	e005      	b.n	8002ec2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 fa33 	bl	8003322 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 fa44 	bl	800334a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b08      	cmp	r3, #8
 8002ed4:	d122      	bne.n	8002f1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	f003 0308 	and.w	r3, r3, #8
 8002ee0:	2b08      	cmp	r3, #8
 8002ee2:	d11b      	bne.n	8002f1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f06f 0208 	mvn.w	r2, #8
 8002eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2204      	movs	r2, #4
 8002ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	f003 0303 	and.w	r3, r3, #3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 fa17 	bl	8003336 <HAL_TIM_IC_CaptureCallback>
 8002f08:	e005      	b.n	8002f16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 fa09 	bl	8003322 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 fa1a 	bl	800334a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	f003 0310 	and.w	r3, r3, #16
 8002f26:	2b10      	cmp	r3, #16
 8002f28:	d122      	bne.n	8002f70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	f003 0310 	and.w	r3, r3, #16
 8002f34:	2b10      	cmp	r3, #16
 8002f36:	d11b      	bne.n	8002f70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f06f 0210 	mvn.w	r2, #16
 8002f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2208      	movs	r2, #8
 8002f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f9ed 	bl	8003336 <HAL_TIM_IC_CaptureCallback>
 8002f5c:	e005      	b.n	8002f6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f9df 	bl	8003322 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 f9f0 	bl	800334a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d10e      	bne.n	8002f9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d107      	bne.n	8002f9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f06f 0201 	mvn.w	r2, #1
 8002f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f005 fa64 	bl	8008464 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa6:	2b80      	cmp	r3, #128	; 0x80
 8002fa8:	d10e      	bne.n	8002fc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fb4:	2b80      	cmp	r3, #128	; 0x80
 8002fb6:	d107      	bne.n	8002fc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 fdb0 	bl	8003b28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd2:	2b40      	cmp	r3, #64	; 0x40
 8002fd4:	d10e      	bne.n	8002ff4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe0:	2b40      	cmp	r3, #64	; 0x40
 8002fe2:	d107      	bne.n	8002ff4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f9bf 	bl	8003372 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	f003 0320 	and.w	r3, r3, #32
 8002ffe:	2b20      	cmp	r3, #32
 8003000:	d10e      	bne.n	8003020 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	f003 0320 	and.w	r3, r3, #32
 800300c:	2b20      	cmp	r3, #32
 800300e:	d107      	bne.n	8003020 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f06f 0220 	mvn.w	r2, #32
 8003018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 fd7a 	bl	8003b14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003020:	bf00      	nop
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800303a:	2b01      	cmp	r3, #1
 800303c:	d101      	bne.n	8003042 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800303e:	2302      	movs	r3, #2
 8003040:	e0b4      	b.n	80031ac <HAL_TIM_PWM_ConfigChannel+0x184>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2202      	movs	r2, #2
 800304e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b0c      	cmp	r3, #12
 8003056:	f200 809f 	bhi.w	8003198 <HAL_TIM_PWM_ConfigChannel+0x170>
 800305a:	a201      	add	r2, pc, #4	; (adr r2, 8003060 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800305c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003060:	08003095 	.word	0x08003095
 8003064:	08003199 	.word	0x08003199
 8003068:	08003199 	.word	0x08003199
 800306c:	08003199 	.word	0x08003199
 8003070:	080030d5 	.word	0x080030d5
 8003074:	08003199 	.word	0x08003199
 8003078:	08003199 	.word	0x08003199
 800307c:	08003199 	.word	0x08003199
 8003080:	08003117 	.word	0x08003117
 8003084:	08003199 	.word	0x08003199
 8003088:	08003199 	.word	0x08003199
 800308c:	08003199 	.word	0x08003199
 8003090:	08003157 	.word	0x08003157
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68b9      	ldr	r1, [r7, #8]
 800309a:	4618      	mov	r0, r3
 800309c:	f000 fa80 	bl	80035a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	699a      	ldr	r2, [r3, #24]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 0208 	orr.w	r2, r2, #8
 80030ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	699a      	ldr	r2, [r3, #24]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 0204 	bic.w	r2, r2, #4
 80030be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6999      	ldr	r1, [r3, #24]
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	691a      	ldr	r2, [r3, #16]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	619a      	str	r2, [r3, #24]
      break;
 80030d2:	e062      	b.n	800319a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68b9      	ldr	r1, [r7, #8]
 80030da:	4618      	mov	r0, r3
 80030dc:	f000 fac6 	bl	800366c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	699a      	ldr	r2, [r3, #24]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	699a      	ldr	r2, [r3, #24]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6999      	ldr	r1, [r3, #24]
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	021a      	lsls	r2, r3, #8
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	619a      	str	r2, [r3, #24]
      break;
 8003114:	e041      	b.n	800319a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68b9      	ldr	r1, [r7, #8]
 800311c:	4618      	mov	r0, r3
 800311e:	f000 fb11 	bl	8003744 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	69da      	ldr	r2, [r3, #28]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f042 0208 	orr.w	r2, r2, #8
 8003130:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	69da      	ldr	r2, [r3, #28]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 0204 	bic.w	r2, r2, #4
 8003140:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	69d9      	ldr	r1, [r3, #28]
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	691a      	ldr	r2, [r3, #16]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	430a      	orrs	r2, r1
 8003152:	61da      	str	r2, [r3, #28]
      break;
 8003154:	e021      	b.n	800319a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68b9      	ldr	r1, [r7, #8]
 800315c:	4618      	mov	r0, r3
 800315e:	f000 fb5b 	bl	8003818 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	69da      	ldr	r2, [r3, #28]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003170:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	69da      	ldr	r2, [r3, #28]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003180:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	69d9      	ldr	r1, [r3, #28]
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	021a      	lsls	r2, r3, #8
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	61da      	str	r2, [r3, #28]
      break;
 8003196:	e000      	b.n	800319a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003198:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d101      	bne.n	80031cc <HAL_TIM_ConfigClockSource+0x18>
 80031c8:	2302      	movs	r3, #2
 80031ca:	e0a6      	b.n	800331a <HAL_TIM_ConfigClockSource+0x166>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2b40      	cmp	r3, #64	; 0x40
 8003202:	d067      	beq.n	80032d4 <HAL_TIM_ConfigClockSource+0x120>
 8003204:	2b40      	cmp	r3, #64	; 0x40
 8003206:	d80b      	bhi.n	8003220 <HAL_TIM_ConfigClockSource+0x6c>
 8003208:	2b10      	cmp	r3, #16
 800320a:	d073      	beq.n	80032f4 <HAL_TIM_ConfigClockSource+0x140>
 800320c:	2b10      	cmp	r3, #16
 800320e:	d802      	bhi.n	8003216 <HAL_TIM_ConfigClockSource+0x62>
 8003210:	2b00      	cmp	r3, #0
 8003212:	d06f      	beq.n	80032f4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003214:	e078      	b.n	8003308 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003216:	2b20      	cmp	r3, #32
 8003218:	d06c      	beq.n	80032f4 <HAL_TIM_ConfigClockSource+0x140>
 800321a:	2b30      	cmp	r3, #48	; 0x30
 800321c:	d06a      	beq.n	80032f4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800321e:	e073      	b.n	8003308 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003220:	2b70      	cmp	r3, #112	; 0x70
 8003222:	d00d      	beq.n	8003240 <HAL_TIM_ConfigClockSource+0x8c>
 8003224:	2b70      	cmp	r3, #112	; 0x70
 8003226:	d804      	bhi.n	8003232 <HAL_TIM_ConfigClockSource+0x7e>
 8003228:	2b50      	cmp	r3, #80	; 0x50
 800322a:	d033      	beq.n	8003294 <HAL_TIM_ConfigClockSource+0xe0>
 800322c:	2b60      	cmp	r3, #96	; 0x60
 800322e:	d041      	beq.n	80032b4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003230:	e06a      	b.n	8003308 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003236:	d066      	beq.n	8003306 <HAL_TIM_ConfigClockSource+0x152>
 8003238:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800323c:	d017      	beq.n	800326e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800323e:	e063      	b.n	8003308 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6818      	ldr	r0, [r3, #0]
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	6899      	ldr	r1, [r3, #8]
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f000 fbac 	bl	80039ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003262:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	609a      	str	r2, [r3, #8]
      break;
 800326c:	e04c      	b.n	8003308 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6818      	ldr	r0, [r3, #0]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	6899      	ldr	r1, [r3, #8]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	f000 fb95 	bl	80039ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003290:	609a      	str	r2, [r3, #8]
      break;
 8003292:	e039      	b.n	8003308 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6818      	ldr	r0, [r3, #0]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	6859      	ldr	r1, [r3, #4]
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	461a      	mov	r2, r3
 80032a2:	f000 fb09 	bl	80038b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2150      	movs	r1, #80	; 0x50
 80032ac:	4618      	mov	r0, r3
 80032ae:	f000 fb62 	bl	8003976 <TIM_ITRx_SetConfig>
      break;
 80032b2:	e029      	b.n	8003308 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6818      	ldr	r0, [r3, #0]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	6859      	ldr	r1, [r3, #4]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	461a      	mov	r2, r3
 80032c2:	f000 fb28 	bl	8003916 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2160      	movs	r1, #96	; 0x60
 80032cc:	4618      	mov	r0, r3
 80032ce:	f000 fb52 	bl	8003976 <TIM_ITRx_SetConfig>
      break;
 80032d2:	e019      	b.n	8003308 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6818      	ldr	r0, [r3, #0]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	6859      	ldr	r1, [r3, #4]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	461a      	mov	r2, r3
 80032e2:	f000 fae9 	bl	80038b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2140      	movs	r1, #64	; 0x40
 80032ec:	4618      	mov	r0, r3
 80032ee:	f000 fb42 	bl	8003976 <TIM_ITRx_SetConfig>
      break;
 80032f2:	e009      	b.n	8003308 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4619      	mov	r1, r3
 80032fe:	4610      	mov	r0, r2
 8003300:	f000 fb39 	bl	8003976 <TIM_ITRx_SetConfig>
      break;
 8003304:	e000      	b.n	8003308 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003306:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr

08003336 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr

0800334a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800335e:	b480      	push	{r7}
 8003360:	b083      	sub	sp, #12
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003372:	b480      	push	{r7}
 8003374:	b083      	sub	sp, #12
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr

08003386 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003386:	b480      	push	{r7}
 8003388:	b083      	sub	sp, #12
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b084      	sub	sp, #16
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a6:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f7ff ffe8 	bl	8003386 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 80033b6:	bf00      	nop
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b084      	sub	sp, #16
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ca:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d103      	bne.n	80033e6 <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2201      	movs	r2, #1
 80033e2:	771a      	strb	r2, [r3, #28]
 80033e4:	e019      	b.n	800341a <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d103      	bne.n	80033f8 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2202      	movs	r2, #2
 80033f4:	771a      	strb	r2, [r3, #28]
 80033f6:	e010      	b.n	800341a <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d103      	bne.n	800340a <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2204      	movs	r2, #4
 8003406:	771a      	strb	r2, [r3, #28]
 8003408:	e007      	b.n	800341a <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	429a      	cmp	r2, r3
 8003412:	d102      	bne.n	800341a <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2208      	movs	r2, #8
 8003418:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f7ff ff95 	bl	800334a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	771a      	strb	r2, [r3, #28]
}
 8003426:	bf00      	nop
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b084      	sub	sp, #16
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343a:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	429a      	cmp	r2, r3
 800344c:	d103      	bne.n	8003456 <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2201      	movs	r2, #1
 8003452:	771a      	strb	r2, [r3, #28]
 8003454:	e019      	b.n	800348a <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	429a      	cmp	r2, r3
 800345e:	d103      	bne.n	8003468 <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2202      	movs	r2, #2
 8003464:	771a      	strb	r2, [r3, #28]
 8003466:	e010      	b.n	800348a <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	429a      	cmp	r2, r3
 8003470:	d103      	bne.n	800347a <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2204      	movs	r2, #4
 8003476:	771a      	strb	r2, [r3, #28]
 8003478:	e007      	b.n	800348a <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	429a      	cmp	r2, r3
 8003482:	d102      	bne.n	800348a <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2208      	movs	r2, #8
 8003488:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f7ff ff67 	bl	800335e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	771a      	strb	r2, [r3, #28]
}
 8003496:	bf00      	nop
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
	...

080034a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a34      	ldr	r2, [pc, #208]	; (8003584 <TIM_Base_SetConfig+0xe4>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d00f      	beq.n	80034d8 <TIM_Base_SetConfig+0x38>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034be:	d00b      	beq.n	80034d8 <TIM_Base_SetConfig+0x38>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a31      	ldr	r2, [pc, #196]	; (8003588 <TIM_Base_SetConfig+0xe8>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d007      	beq.n	80034d8 <TIM_Base_SetConfig+0x38>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a30      	ldr	r2, [pc, #192]	; (800358c <TIM_Base_SetConfig+0xec>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d003      	beq.n	80034d8 <TIM_Base_SetConfig+0x38>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a2f      	ldr	r2, [pc, #188]	; (8003590 <TIM_Base_SetConfig+0xf0>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d108      	bne.n	80034ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a25      	ldr	r2, [pc, #148]	; (8003584 <TIM_Base_SetConfig+0xe4>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d01b      	beq.n	800352a <TIM_Base_SetConfig+0x8a>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f8:	d017      	beq.n	800352a <TIM_Base_SetConfig+0x8a>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a22      	ldr	r2, [pc, #136]	; (8003588 <TIM_Base_SetConfig+0xe8>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d013      	beq.n	800352a <TIM_Base_SetConfig+0x8a>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a21      	ldr	r2, [pc, #132]	; (800358c <TIM_Base_SetConfig+0xec>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d00f      	beq.n	800352a <TIM_Base_SetConfig+0x8a>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a20      	ldr	r2, [pc, #128]	; (8003590 <TIM_Base_SetConfig+0xf0>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d00b      	beq.n	800352a <TIM_Base_SetConfig+0x8a>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a1f      	ldr	r2, [pc, #124]	; (8003594 <TIM_Base_SetConfig+0xf4>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d007      	beq.n	800352a <TIM_Base_SetConfig+0x8a>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a1e      	ldr	r2, [pc, #120]	; (8003598 <TIM_Base_SetConfig+0xf8>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d003      	beq.n	800352a <TIM_Base_SetConfig+0x8a>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a1d      	ldr	r2, [pc, #116]	; (800359c <TIM_Base_SetConfig+0xfc>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d108      	bne.n	800353c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003530:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	4313      	orrs	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	4313      	orrs	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a08      	ldr	r2, [pc, #32]	; (8003584 <TIM_Base_SetConfig+0xe4>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d103      	bne.n	8003570 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	691a      	ldr	r2, [r3, #16]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	615a      	str	r2, [r3, #20]
}
 8003576:	bf00      	nop
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	40010000 	.word	0x40010000
 8003588:	40000400 	.word	0x40000400
 800358c:	40000800 	.word	0x40000800
 8003590:	40000c00 	.word	0x40000c00
 8003594:	40014000 	.word	0x40014000
 8003598:	40014400 	.word	0x40014400
 800359c:	40014800 	.word	0x40014800

080035a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b087      	sub	sp, #28
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	f023 0201 	bic.w	r2, r3, #1
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f023 0303 	bic.w	r3, r3, #3
 80035d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	4313      	orrs	r3, r2
 80035e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f023 0302 	bic.w	r3, r3, #2
 80035e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a1c      	ldr	r2, [pc, #112]	; (8003668 <TIM_OC1_SetConfig+0xc8>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d10c      	bne.n	8003616 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f023 0308 	bic.w	r3, r3, #8
 8003602:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	4313      	orrs	r3, r2
 800360c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f023 0304 	bic.w	r3, r3, #4
 8003614:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a13      	ldr	r2, [pc, #76]	; (8003668 <TIM_OC1_SetConfig+0xc8>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d111      	bne.n	8003642 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003624:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800362c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	4313      	orrs	r3, r2
 8003636:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	4313      	orrs	r3, r2
 8003640:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	621a      	str	r2, [r3, #32]
}
 800365c:	bf00      	nop
 800365e:	371c      	adds	r7, #28
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	40010000 	.word	0x40010000

0800366c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800366c:	b480      	push	{r7}
 800366e:	b087      	sub	sp, #28
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	f023 0210 	bic.w	r2, r3, #16
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800369a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	021b      	lsls	r3, r3, #8
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f023 0320 	bic.w	r3, r3, #32
 80036b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	011b      	lsls	r3, r3, #4
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a1e      	ldr	r2, [pc, #120]	; (8003740 <TIM_OC2_SetConfig+0xd4>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d10d      	bne.n	80036e8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	4313      	orrs	r3, r2
 80036de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4a15      	ldr	r2, [pc, #84]	; (8003740 <TIM_OC2_SetConfig+0xd4>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d113      	bne.n	8003718 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	4313      	orrs	r3, r2
 800370a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	4313      	orrs	r3, r2
 8003716:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	621a      	str	r2, [r3, #32]
}
 8003732:	bf00      	nop
 8003734:	371c      	adds	r7, #28
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	40010000 	.word	0x40010000

08003744 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003744:	b480      	push	{r7}
 8003746:	b087      	sub	sp, #28
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f023 0303 	bic.w	r3, r3, #3
 800377a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	4313      	orrs	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800378c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	021b      	lsls	r3, r3, #8
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	4313      	orrs	r3, r2
 8003798:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a1d      	ldr	r2, [pc, #116]	; (8003814 <TIM_OC3_SetConfig+0xd0>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d10d      	bne.n	80037be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	021b      	lsls	r3, r3, #8
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a14      	ldr	r2, [pc, #80]	; (8003814 <TIM_OC3_SetConfig+0xd0>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d113      	bne.n	80037ee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	011b      	lsls	r3, r3, #4
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	4313      	orrs	r3, r2
 80037e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	621a      	str	r2, [r3, #32]
}
 8003808:	bf00      	nop
 800380a:	371c      	adds	r7, #28
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	40010000 	.word	0x40010000

08003818 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003818:	b480      	push	{r7}
 800381a:	b087      	sub	sp, #28
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800384e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	021b      	lsls	r3, r3, #8
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	4313      	orrs	r3, r2
 800385a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003862:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	031b      	lsls	r3, r3, #12
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	4313      	orrs	r3, r2
 800386e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a10      	ldr	r2, [pc, #64]	; (80038b4 <TIM_OC4_SetConfig+0x9c>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d109      	bne.n	800388c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800387e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	019b      	lsls	r3, r3, #6
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	4313      	orrs	r3, r2
 800388a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685a      	ldr	r2, [r3, #4]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	621a      	str	r2, [r3, #32]
}
 80038a6:	bf00      	nop
 80038a8:	371c      	adds	r7, #28
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	40010000 	.word	0x40010000

080038b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b087      	sub	sp, #28
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	f023 0201 	bic.w	r2, r3, #1
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	011b      	lsls	r3, r3, #4
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f023 030a 	bic.w	r3, r3, #10
 80038f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	621a      	str	r2, [r3, #32]
}
 800390a:	bf00      	nop
 800390c:	371c      	adds	r7, #28
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr

08003916 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003916:	b480      	push	{r7}
 8003918:	b087      	sub	sp, #28
 800391a:	af00      	add	r7, sp, #0
 800391c:	60f8      	str	r0, [r7, #12]
 800391e:	60b9      	str	r1, [r7, #8]
 8003920:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	f023 0210 	bic.w	r2, r3, #16
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6a1b      	ldr	r3, [r3, #32]
 8003938:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003940:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	031b      	lsls	r3, r3, #12
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	4313      	orrs	r3, r2
 800394a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003952:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	011b      	lsls	r3, r3, #4
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	4313      	orrs	r3, r2
 800395c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	697a      	ldr	r2, [r7, #20]
 8003962:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	621a      	str	r2, [r3, #32]
}
 800396a:	bf00      	nop
 800396c:	371c      	adds	r7, #28
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003976:	b480      	push	{r7}
 8003978:	b085      	sub	sp, #20
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
 800397e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800398c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	4313      	orrs	r3, r2
 8003994:	f043 0307 	orr.w	r3, r3, #7
 8003998:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	609a      	str	r2, [r3, #8]
}
 80039a0:	bf00      	nop
 80039a2:	3714      	adds	r7, #20
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b087      	sub	sp, #28
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
 80039b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	021a      	lsls	r2, r3, #8
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	431a      	orrs	r2, r3
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	609a      	str	r2, [r3, #8]
}
 80039e0:	bf00      	nop
 80039e2:	371c      	adds	r7, #28
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b087      	sub	sp, #28
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	f003 031f 	and.w	r3, r3, #31
 80039fe:	2201      	movs	r2, #1
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6a1a      	ldr	r2, [r3, #32]
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	401a      	ands	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6a1a      	ldr	r2, [r3, #32]
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	f003 031f 	and.w	r3, r3, #31
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	fa01 f303 	lsl.w	r3, r1, r3
 8003a24:	431a      	orrs	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	621a      	str	r2, [r3, #32]
}
 8003a2a:	bf00      	nop
 8003a2c:	371c      	adds	r7, #28
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
	...

08003a38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d101      	bne.n	8003a50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	e050      	b.n	8003af2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a1c      	ldr	r2, [pc, #112]	; (8003b00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d018      	beq.n	8003ac6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a9c:	d013      	beq.n	8003ac6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a18      	ldr	r2, [pc, #96]	; (8003b04 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d00e      	beq.n	8003ac6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a16      	ldr	r2, [pc, #88]	; (8003b08 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d009      	beq.n	8003ac6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a15      	ldr	r2, [pc, #84]	; (8003b0c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d004      	beq.n	8003ac6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a13      	ldr	r2, [pc, #76]	; (8003b10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d10c      	bne.n	8003ae0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003acc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	40010000 	.word	0x40010000
 8003b04:	40000400 	.word	0x40000400
 8003b08:	40000800 	.word	0x40000800
 8003b0c:	40000c00 	.word	0x40000c00
 8003b10:	40014000 	.word	0x40014000

08003b14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e03f      	b.n	8003bce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d106      	bne.n	8003b68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f004 fffe 	bl	8008b64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2224      	movs	r2, #36	; 0x24
 8003b6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68da      	ldr	r2, [r3, #12]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 fb97 	bl	80042b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	691a      	ldr	r2, [r3, #16]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	695a      	ldr	r2, [r3, #20]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ba4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68da      	ldr	r2, [r3, #12]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2220      	movs	r2, #32
 8003bc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b088      	sub	sp, #32
 8003bda:	af02      	add	r7, sp, #8
 8003bdc:	60f8      	str	r0, [r7, #12]
 8003bde:	60b9      	str	r1, [r7, #8]
 8003be0:	603b      	str	r3, [r7, #0]
 8003be2:	4613      	mov	r3, r2
 8003be4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003be6:	2300      	movs	r3, #0
 8003be8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b20      	cmp	r3, #32
 8003bf4:	f040 8083 	bne.w	8003cfe <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d002      	beq.n	8003c04 <HAL_UART_Transmit+0x2e>
 8003bfe:	88fb      	ldrh	r3, [r7, #6]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e07b      	b.n	8003d00 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d101      	bne.n	8003c16 <HAL_UART_Transmit+0x40>
 8003c12:	2302      	movs	r3, #2
 8003c14:	e074      	b.n	8003d00 <HAL_UART_Transmit+0x12a>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2221      	movs	r2, #33	; 0x21
 8003c28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003c2c:	f7fd f904 	bl	8000e38 <HAL_GetTick>
 8003c30:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	88fa      	ldrh	r2, [r7, #6]
 8003c36:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	88fa      	ldrh	r2, [r7, #6]
 8003c3c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003c46:	e042      	b.n	8003cce <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c5e:	d122      	bne.n	8003ca6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	2200      	movs	r2, #0
 8003c68:	2180      	movs	r1, #128	; 0x80
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 f9b6 	bl	8003fdc <UART_WaitOnFlagUntilTimeout>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e042      	b.n	8003d00 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	881b      	ldrh	r3, [r3, #0]
 8003c82:	461a      	mov	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c8c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d103      	bne.n	8003c9e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	3302      	adds	r3, #2
 8003c9a:	60bb      	str	r3, [r7, #8]
 8003c9c:	e017      	b.n	8003cce <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	60bb      	str	r3, [r7, #8]
 8003ca4:	e013      	b.n	8003cce <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	2200      	movs	r2, #0
 8003cae:	2180      	movs	r1, #128	; 0x80
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f000 f993 	bl	8003fdc <UART_WaitOnFlagUntilTimeout>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e01f      	b.n	8003d00 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	1c5a      	adds	r2, r3, #1
 8003cc4:	60ba      	str	r2, [r7, #8]
 8003cc6:	781a      	ldrb	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1b7      	bne.n	8003c48 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	9300      	str	r3, [sp, #0]
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	2140      	movs	r1, #64	; 0x40
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f000 f97a 	bl	8003fdc <UART_WaitOnFlagUntilTimeout>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e006      	b.n	8003d00 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	e000      	b.n	8003d00 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003cfe:	2302      	movs	r3, #2
  }
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3718      	adds	r7, #24
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	4613      	mov	r3, r2
 8003d14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b20      	cmp	r3, #32
 8003d20:	d140      	bne.n	8003da4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d002      	beq.n	8003d2e <HAL_UART_Receive_IT+0x26>
 8003d28:	88fb      	ldrh	r3, [r7, #6]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e039      	b.n	8003da6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d101      	bne.n	8003d40 <HAL_UART_Receive_IT+0x38>
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	e032      	b.n	8003da6 <HAL_UART_Receive_IT+0x9e>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	88fa      	ldrh	r2, [r7, #6]
 8003d52:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	88fa      	ldrh	r2, [r7, #6]
 8003d58:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2222      	movs	r2, #34	; 0x22
 8003d64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68da      	ldr	r2, [r3, #12]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d7e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	695a      	ldr	r2, [r3, #20]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f042 0201 	orr.w	r2, r2, #1
 8003d8e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68da      	ldr	r2, [r3, #12]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f042 0220 	orr.w	r2, r2, #32
 8003d9e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003da0:	2300      	movs	r3, #0
 8003da2:	e000      	b.n	8003da6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003da4:	2302      	movs	r3, #2
  }
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3714      	adds	r7, #20
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
	...

08003db4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b088      	sub	sp, #32
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10d      	bne.n	8003e06 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	f003 0320 	and.w	r3, r3, #32
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d008      	beq.n	8003e06 <HAL_UART_IRQHandler+0x52>
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	f003 0320 	and.w	r3, r3, #32
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f9d6 	bl	80041b0 <UART_Receive_IT>
      return;
 8003e04:	e0d1      	b.n	8003faa <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f000 80b0 	beq.w	8003f6e <HAL_UART_IRQHandler+0x1ba>
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d105      	bne.n	8003e24 <HAL_UART_IRQHandler+0x70>
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	f000 80a5 	beq.w	8003f6e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00a      	beq.n	8003e44 <HAL_UART_IRQHandler+0x90>
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d005      	beq.n	8003e44 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e3c:	f043 0201 	orr.w	r2, r3, #1
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	f003 0304 	and.w	r3, r3, #4
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00a      	beq.n	8003e64 <HAL_UART_IRQHandler+0xb0>
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d005      	beq.n	8003e64 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e5c:	f043 0202 	orr.w	r2, r3, #2
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00a      	beq.n	8003e84 <HAL_UART_IRQHandler+0xd0>
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d005      	beq.n	8003e84 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e7c:	f043 0204 	orr.w	r2, r3, #4
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	f003 0308 	and.w	r3, r3, #8
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00f      	beq.n	8003eae <HAL_UART_IRQHandler+0xfa>
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	f003 0320 	and.w	r3, r3, #32
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d104      	bne.n	8003ea2 <HAL_UART_IRQHandler+0xee>
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d005      	beq.n	8003eae <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea6:	f043 0208 	orr.w	r2, r3, #8
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d078      	beq.n	8003fa8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	f003 0320 	and.w	r3, r3, #32
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d007      	beq.n	8003ed0 <HAL_UART_IRQHandler+0x11c>
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	f003 0320 	and.w	r3, r3, #32
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d002      	beq.n	8003ed0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f970 	bl	80041b0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eda:	2b40      	cmp	r3, #64	; 0x40
 8003edc:	bf0c      	ite	eq
 8003ede:	2301      	moveq	r3, #1
 8003ee0:	2300      	movne	r3, #0
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eea:	f003 0308 	and.w	r3, r3, #8
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d102      	bne.n	8003ef8 <HAL_UART_IRQHandler+0x144>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d031      	beq.n	8003f5c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 f8b9 	bl	8004070 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f08:	2b40      	cmp	r3, #64	; 0x40
 8003f0a:	d123      	bne.n	8003f54 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	695a      	ldr	r2, [r3, #20]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f1a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d013      	beq.n	8003f4c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f28:	4a21      	ldr	r2, [pc, #132]	; (8003fb0 <HAL_UART_IRQHandler+0x1fc>)
 8003f2a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7fd f9d3 	bl	80012dc <HAL_DMA_Abort_IT>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d016      	beq.n	8003f6a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f46:	4610      	mov	r0, r2
 8003f48:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f4a:	e00e      	b.n	8003f6a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 f83b 	bl	8003fc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f52:	e00a      	b.n	8003f6a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 f837 	bl	8003fc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f5a:	e006      	b.n	8003f6a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 f833 	bl	8003fc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003f68:	e01e      	b.n	8003fa8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f6a:	bf00      	nop
    return;
 8003f6c:	e01c      	b.n	8003fa8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d008      	beq.n	8003f8a <HAL_UART_IRQHandler+0x1d6>
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f8a6 	bl	80040d4 <UART_Transmit_IT>
    return;
 8003f88:	e00f      	b.n	8003faa <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00a      	beq.n	8003faa <HAL_UART_IRQHandler+0x1f6>
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d005      	beq.n	8003faa <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f8ee 	bl	8004180 <UART_EndTransmit_IT>
    return;
 8003fa4:	bf00      	nop
 8003fa6:	e000      	b.n	8003faa <HAL_UART_IRQHandler+0x1f6>
    return;
 8003fa8:	bf00      	nop
  }
}
 8003faa:	3720      	adds	r7, #32
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	080040ad 	.word	0x080040ad

08003fb4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	603b      	str	r3, [r7, #0]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fec:	e02c      	b.n	8004048 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff4:	d028      	beq.n	8004048 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d007      	beq.n	800400c <UART_WaitOnFlagUntilTimeout+0x30>
 8003ffc:	f7fc ff1c 	bl	8000e38 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	429a      	cmp	r2, r3
 800400a:	d21d      	bcs.n	8004048 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68da      	ldr	r2, [r3, #12]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800401a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	695a      	ldr	r2, [r3, #20]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 0201 	bic.w	r2, r2, #1
 800402a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2220      	movs	r2, #32
 8004030:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2220      	movs	r2, #32
 8004038:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e00f      	b.n	8004068 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	4013      	ands	r3, r2
 8004052:	68ba      	ldr	r2, [r7, #8]
 8004054:	429a      	cmp	r2, r3
 8004056:	bf0c      	ite	eq
 8004058:	2301      	moveq	r3, #1
 800405a:	2300      	movne	r3, #0
 800405c:	b2db      	uxtb	r3, r3
 800405e:	461a      	mov	r2, r3
 8004060:	79fb      	ldrb	r3, [r7, #7]
 8004062:	429a      	cmp	r2, r3
 8004064:	d0c3      	beq.n	8003fee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68da      	ldr	r2, [r3, #12]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004086:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	695a      	ldr	r2, [r3, #20]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 0201 	bic.w	r2, r2, #1
 8004096:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2220      	movs	r2, #32
 800409c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f7ff ff7e 	bl	8003fc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040cc:	bf00      	nop
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b21      	cmp	r3, #33	; 0x21
 80040e6:	d144      	bne.n	8004172 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040f0:	d11a      	bne.n	8004128 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	881b      	ldrh	r3, [r3, #0]
 80040fc:	461a      	mov	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004106:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d105      	bne.n	800411c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	1c9a      	adds	r2, r3, #2
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	621a      	str	r2, [r3, #32]
 800411a:	e00e      	b.n	800413a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	1c5a      	adds	r2, r3, #1
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	621a      	str	r2, [r3, #32]
 8004126:	e008      	b.n	800413a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	1c59      	adds	r1, r3, #1
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	6211      	str	r1, [r2, #32]
 8004132:	781a      	ldrb	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800413e:	b29b      	uxth	r3, r3
 8004140:	3b01      	subs	r3, #1
 8004142:	b29b      	uxth	r3, r3
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	4619      	mov	r1, r3
 8004148:	84d1      	strh	r1, [r2, #38]	; 0x26
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10f      	bne.n	800416e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68da      	ldr	r2, [r3, #12]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800415c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68da      	ldr	r2, [r3, #12]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800416c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800416e:	2300      	movs	r3, #0
 8004170:	e000      	b.n	8004174 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004172:	2302      	movs	r3, #2
  }
}
 8004174:	4618      	mov	r0, r3
 8004176:	3714      	adds	r7, #20
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68da      	ldr	r2, [r3, #12]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004196:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2220      	movs	r2, #32
 800419c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7ff ff07 	bl	8003fb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3708      	adds	r7, #8
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b22      	cmp	r3, #34	; 0x22
 80041c2:	d171      	bne.n	80042a8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041cc:	d123      	bne.n	8004216 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d10e      	bne.n	80041fa <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f2:	1c9a      	adds	r2, r3, #2
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	629a      	str	r2, [r3, #40]	; 0x28
 80041f8:	e029      	b.n	800424e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	b29b      	uxth	r3, r3
 8004202:	b2db      	uxtb	r3, r3
 8004204:	b29a      	uxth	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420e:	1c5a      	adds	r2, r3, #1
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	629a      	str	r2, [r3, #40]	; 0x28
 8004214:	e01b      	b.n	800424e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10a      	bne.n	8004234 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	6858      	ldr	r0, [r3, #4]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004228:	1c59      	adds	r1, r3, #1
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6291      	str	r1, [r2, #40]	; 0x28
 800422e:	b2c2      	uxtb	r2, r0
 8004230:	701a      	strb	r2, [r3, #0]
 8004232:	e00c      	b.n	800424e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	b2da      	uxtb	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004240:	1c58      	adds	r0, r3, #1
 8004242:	6879      	ldr	r1, [r7, #4]
 8004244:	6288      	str	r0, [r1, #40]	; 0x28
 8004246:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800424a:	b2d2      	uxtb	r2, r2
 800424c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004252:	b29b      	uxth	r3, r3
 8004254:	3b01      	subs	r3, #1
 8004256:	b29b      	uxth	r3, r3
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	4619      	mov	r1, r3
 800425c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800425e:	2b00      	cmp	r3, #0
 8004260:	d120      	bne.n	80042a4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68da      	ldr	r2, [r3, #12]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 0220 	bic.w	r2, r2, #32
 8004270:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68da      	ldr	r2, [r3, #12]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004280:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	695a      	ldr	r2, [r3, #20]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 0201 	bic.w	r2, r2, #1
 8004290:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2220      	movs	r2, #32
 8004296:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f003 fcb0 	bl	8007c00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80042a0:	2300      	movs	r3, #0
 80042a2:	e002      	b.n	80042aa <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80042a4:	2300      	movs	r3, #0
 80042a6:	e000      	b.n	80042aa <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80042a8:	2302      	movs	r3, #2
  }
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3710      	adds	r7, #16
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
	...

080042b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042b8:	b085      	sub	sp, #20
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68da      	ldr	r2, [r3, #12]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	431a      	orrs	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	431a      	orrs	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	69db      	ldr	r3, [r3, #28]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80042f6:	f023 030c 	bic.w	r3, r3, #12
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	6812      	ldr	r2, [r2, #0]
 80042fe:	68f9      	ldr	r1, [r7, #12]
 8004300:	430b      	orrs	r3, r1
 8004302:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	699a      	ldr	r2, [r3, #24]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	430a      	orrs	r2, r1
 8004318:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004322:	f040 818b 	bne.w	800463c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4ac1      	ldr	r2, [pc, #772]	; (8004630 <UART_SetConfig+0x37c>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d005      	beq.n	800433c <UART_SetConfig+0x88>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4abf      	ldr	r2, [pc, #764]	; (8004634 <UART_SetConfig+0x380>)
 8004336:	4293      	cmp	r3, r2
 8004338:	f040 80bd 	bne.w	80044b6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800433c:	f7fd fed0 	bl	80020e0 <HAL_RCC_GetPCLK2Freq>
 8004340:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	461d      	mov	r5, r3
 8004346:	f04f 0600 	mov.w	r6, #0
 800434a:	46a8      	mov	r8, r5
 800434c:	46b1      	mov	r9, r6
 800434e:	eb18 0308 	adds.w	r3, r8, r8
 8004352:	eb49 0409 	adc.w	r4, r9, r9
 8004356:	4698      	mov	r8, r3
 8004358:	46a1      	mov	r9, r4
 800435a:	eb18 0805 	adds.w	r8, r8, r5
 800435e:	eb49 0906 	adc.w	r9, r9, r6
 8004362:	f04f 0100 	mov.w	r1, #0
 8004366:	f04f 0200 	mov.w	r2, #0
 800436a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800436e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004372:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004376:	4688      	mov	r8, r1
 8004378:	4691      	mov	r9, r2
 800437a:	eb18 0005 	adds.w	r0, r8, r5
 800437e:	eb49 0106 	adc.w	r1, r9, r6
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	461d      	mov	r5, r3
 8004388:	f04f 0600 	mov.w	r6, #0
 800438c:	196b      	adds	r3, r5, r5
 800438e:	eb46 0406 	adc.w	r4, r6, r6
 8004392:	461a      	mov	r2, r3
 8004394:	4623      	mov	r3, r4
 8004396:	f7fc fb69 	bl	8000a6c <__aeabi_uldivmod>
 800439a:	4603      	mov	r3, r0
 800439c:	460c      	mov	r4, r1
 800439e:	461a      	mov	r2, r3
 80043a0:	4ba5      	ldr	r3, [pc, #660]	; (8004638 <UART_SetConfig+0x384>)
 80043a2:	fba3 2302 	umull	r2, r3, r3, r2
 80043a6:	095b      	lsrs	r3, r3, #5
 80043a8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	461d      	mov	r5, r3
 80043b0:	f04f 0600 	mov.w	r6, #0
 80043b4:	46a9      	mov	r9, r5
 80043b6:	46b2      	mov	sl, r6
 80043b8:	eb19 0309 	adds.w	r3, r9, r9
 80043bc:	eb4a 040a 	adc.w	r4, sl, sl
 80043c0:	4699      	mov	r9, r3
 80043c2:	46a2      	mov	sl, r4
 80043c4:	eb19 0905 	adds.w	r9, r9, r5
 80043c8:	eb4a 0a06 	adc.w	sl, sl, r6
 80043cc:	f04f 0100 	mov.w	r1, #0
 80043d0:	f04f 0200 	mov.w	r2, #0
 80043d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043e0:	4689      	mov	r9, r1
 80043e2:	4692      	mov	sl, r2
 80043e4:	eb19 0005 	adds.w	r0, r9, r5
 80043e8:	eb4a 0106 	adc.w	r1, sl, r6
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	461d      	mov	r5, r3
 80043f2:	f04f 0600 	mov.w	r6, #0
 80043f6:	196b      	adds	r3, r5, r5
 80043f8:	eb46 0406 	adc.w	r4, r6, r6
 80043fc:	461a      	mov	r2, r3
 80043fe:	4623      	mov	r3, r4
 8004400:	f7fc fb34 	bl	8000a6c <__aeabi_uldivmod>
 8004404:	4603      	mov	r3, r0
 8004406:	460c      	mov	r4, r1
 8004408:	461a      	mov	r2, r3
 800440a:	4b8b      	ldr	r3, [pc, #556]	; (8004638 <UART_SetConfig+0x384>)
 800440c:	fba3 1302 	umull	r1, r3, r3, r2
 8004410:	095b      	lsrs	r3, r3, #5
 8004412:	2164      	movs	r1, #100	; 0x64
 8004414:	fb01 f303 	mul.w	r3, r1, r3
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	3332      	adds	r3, #50	; 0x32
 800441e:	4a86      	ldr	r2, [pc, #536]	; (8004638 <UART_SetConfig+0x384>)
 8004420:	fba2 2303 	umull	r2, r3, r2, r3
 8004424:	095b      	lsrs	r3, r3, #5
 8004426:	005b      	lsls	r3, r3, #1
 8004428:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800442c:	4498      	add	r8, r3
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	461d      	mov	r5, r3
 8004432:	f04f 0600 	mov.w	r6, #0
 8004436:	46a9      	mov	r9, r5
 8004438:	46b2      	mov	sl, r6
 800443a:	eb19 0309 	adds.w	r3, r9, r9
 800443e:	eb4a 040a 	adc.w	r4, sl, sl
 8004442:	4699      	mov	r9, r3
 8004444:	46a2      	mov	sl, r4
 8004446:	eb19 0905 	adds.w	r9, r9, r5
 800444a:	eb4a 0a06 	adc.w	sl, sl, r6
 800444e:	f04f 0100 	mov.w	r1, #0
 8004452:	f04f 0200 	mov.w	r2, #0
 8004456:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800445a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800445e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004462:	4689      	mov	r9, r1
 8004464:	4692      	mov	sl, r2
 8004466:	eb19 0005 	adds.w	r0, r9, r5
 800446a:	eb4a 0106 	adc.w	r1, sl, r6
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	461d      	mov	r5, r3
 8004474:	f04f 0600 	mov.w	r6, #0
 8004478:	196b      	adds	r3, r5, r5
 800447a:	eb46 0406 	adc.w	r4, r6, r6
 800447e:	461a      	mov	r2, r3
 8004480:	4623      	mov	r3, r4
 8004482:	f7fc faf3 	bl	8000a6c <__aeabi_uldivmod>
 8004486:	4603      	mov	r3, r0
 8004488:	460c      	mov	r4, r1
 800448a:	461a      	mov	r2, r3
 800448c:	4b6a      	ldr	r3, [pc, #424]	; (8004638 <UART_SetConfig+0x384>)
 800448e:	fba3 1302 	umull	r1, r3, r3, r2
 8004492:	095b      	lsrs	r3, r3, #5
 8004494:	2164      	movs	r1, #100	; 0x64
 8004496:	fb01 f303 	mul.w	r3, r1, r3
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	00db      	lsls	r3, r3, #3
 800449e:	3332      	adds	r3, #50	; 0x32
 80044a0:	4a65      	ldr	r2, [pc, #404]	; (8004638 <UART_SetConfig+0x384>)
 80044a2:	fba2 2303 	umull	r2, r3, r2, r3
 80044a6:	095b      	lsrs	r3, r3, #5
 80044a8:	f003 0207 	and.w	r2, r3, #7
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4442      	add	r2, r8
 80044b2:	609a      	str	r2, [r3, #8]
 80044b4:	e26f      	b.n	8004996 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044b6:	f7fd fdff 	bl	80020b8 <HAL_RCC_GetPCLK1Freq>
 80044ba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	461d      	mov	r5, r3
 80044c0:	f04f 0600 	mov.w	r6, #0
 80044c4:	46a8      	mov	r8, r5
 80044c6:	46b1      	mov	r9, r6
 80044c8:	eb18 0308 	adds.w	r3, r8, r8
 80044cc:	eb49 0409 	adc.w	r4, r9, r9
 80044d0:	4698      	mov	r8, r3
 80044d2:	46a1      	mov	r9, r4
 80044d4:	eb18 0805 	adds.w	r8, r8, r5
 80044d8:	eb49 0906 	adc.w	r9, r9, r6
 80044dc:	f04f 0100 	mov.w	r1, #0
 80044e0:	f04f 0200 	mov.w	r2, #0
 80044e4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80044e8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80044ec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80044f0:	4688      	mov	r8, r1
 80044f2:	4691      	mov	r9, r2
 80044f4:	eb18 0005 	adds.w	r0, r8, r5
 80044f8:	eb49 0106 	adc.w	r1, r9, r6
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	461d      	mov	r5, r3
 8004502:	f04f 0600 	mov.w	r6, #0
 8004506:	196b      	adds	r3, r5, r5
 8004508:	eb46 0406 	adc.w	r4, r6, r6
 800450c:	461a      	mov	r2, r3
 800450e:	4623      	mov	r3, r4
 8004510:	f7fc faac 	bl	8000a6c <__aeabi_uldivmod>
 8004514:	4603      	mov	r3, r0
 8004516:	460c      	mov	r4, r1
 8004518:	461a      	mov	r2, r3
 800451a:	4b47      	ldr	r3, [pc, #284]	; (8004638 <UART_SetConfig+0x384>)
 800451c:	fba3 2302 	umull	r2, r3, r3, r2
 8004520:	095b      	lsrs	r3, r3, #5
 8004522:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	461d      	mov	r5, r3
 800452a:	f04f 0600 	mov.w	r6, #0
 800452e:	46a9      	mov	r9, r5
 8004530:	46b2      	mov	sl, r6
 8004532:	eb19 0309 	adds.w	r3, r9, r9
 8004536:	eb4a 040a 	adc.w	r4, sl, sl
 800453a:	4699      	mov	r9, r3
 800453c:	46a2      	mov	sl, r4
 800453e:	eb19 0905 	adds.w	r9, r9, r5
 8004542:	eb4a 0a06 	adc.w	sl, sl, r6
 8004546:	f04f 0100 	mov.w	r1, #0
 800454a:	f04f 0200 	mov.w	r2, #0
 800454e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004552:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004556:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800455a:	4689      	mov	r9, r1
 800455c:	4692      	mov	sl, r2
 800455e:	eb19 0005 	adds.w	r0, r9, r5
 8004562:	eb4a 0106 	adc.w	r1, sl, r6
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	461d      	mov	r5, r3
 800456c:	f04f 0600 	mov.w	r6, #0
 8004570:	196b      	adds	r3, r5, r5
 8004572:	eb46 0406 	adc.w	r4, r6, r6
 8004576:	461a      	mov	r2, r3
 8004578:	4623      	mov	r3, r4
 800457a:	f7fc fa77 	bl	8000a6c <__aeabi_uldivmod>
 800457e:	4603      	mov	r3, r0
 8004580:	460c      	mov	r4, r1
 8004582:	461a      	mov	r2, r3
 8004584:	4b2c      	ldr	r3, [pc, #176]	; (8004638 <UART_SetConfig+0x384>)
 8004586:	fba3 1302 	umull	r1, r3, r3, r2
 800458a:	095b      	lsrs	r3, r3, #5
 800458c:	2164      	movs	r1, #100	; 0x64
 800458e:	fb01 f303 	mul.w	r3, r1, r3
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	00db      	lsls	r3, r3, #3
 8004596:	3332      	adds	r3, #50	; 0x32
 8004598:	4a27      	ldr	r2, [pc, #156]	; (8004638 <UART_SetConfig+0x384>)
 800459a:	fba2 2303 	umull	r2, r3, r2, r3
 800459e:	095b      	lsrs	r3, r3, #5
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045a6:	4498      	add	r8, r3
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	461d      	mov	r5, r3
 80045ac:	f04f 0600 	mov.w	r6, #0
 80045b0:	46a9      	mov	r9, r5
 80045b2:	46b2      	mov	sl, r6
 80045b4:	eb19 0309 	adds.w	r3, r9, r9
 80045b8:	eb4a 040a 	adc.w	r4, sl, sl
 80045bc:	4699      	mov	r9, r3
 80045be:	46a2      	mov	sl, r4
 80045c0:	eb19 0905 	adds.w	r9, r9, r5
 80045c4:	eb4a 0a06 	adc.w	sl, sl, r6
 80045c8:	f04f 0100 	mov.w	r1, #0
 80045cc:	f04f 0200 	mov.w	r2, #0
 80045d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80045d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80045dc:	4689      	mov	r9, r1
 80045de:	4692      	mov	sl, r2
 80045e0:	eb19 0005 	adds.w	r0, r9, r5
 80045e4:	eb4a 0106 	adc.w	r1, sl, r6
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	461d      	mov	r5, r3
 80045ee:	f04f 0600 	mov.w	r6, #0
 80045f2:	196b      	adds	r3, r5, r5
 80045f4:	eb46 0406 	adc.w	r4, r6, r6
 80045f8:	461a      	mov	r2, r3
 80045fa:	4623      	mov	r3, r4
 80045fc:	f7fc fa36 	bl	8000a6c <__aeabi_uldivmod>
 8004600:	4603      	mov	r3, r0
 8004602:	460c      	mov	r4, r1
 8004604:	461a      	mov	r2, r3
 8004606:	4b0c      	ldr	r3, [pc, #48]	; (8004638 <UART_SetConfig+0x384>)
 8004608:	fba3 1302 	umull	r1, r3, r3, r2
 800460c:	095b      	lsrs	r3, r3, #5
 800460e:	2164      	movs	r1, #100	; 0x64
 8004610:	fb01 f303 	mul.w	r3, r1, r3
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	3332      	adds	r3, #50	; 0x32
 800461a:	4a07      	ldr	r2, [pc, #28]	; (8004638 <UART_SetConfig+0x384>)
 800461c:	fba2 2303 	umull	r2, r3, r2, r3
 8004620:	095b      	lsrs	r3, r3, #5
 8004622:	f003 0207 	and.w	r2, r3, #7
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4442      	add	r2, r8
 800462c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800462e:	e1b2      	b.n	8004996 <UART_SetConfig+0x6e2>
 8004630:	40011000 	.word	0x40011000
 8004634:	40011400 	.word	0x40011400
 8004638:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4ad7      	ldr	r2, [pc, #860]	; (80049a0 <UART_SetConfig+0x6ec>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d005      	beq.n	8004652 <UART_SetConfig+0x39e>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4ad6      	ldr	r2, [pc, #856]	; (80049a4 <UART_SetConfig+0x6f0>)
 800464c:	4293      	cmp	r3, r2
 800464e:	f040 80d1 	bne.w	80047f4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004652:	f7fd fd45 	bl	80020e0 <HAL_RCC_GetPCLK2Freq>
 8004656:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	469a      	mov	sl, r3
 800465c:	f04f 0b00 	mov.w	fp, #0
 8004660:	46d0      	mov	r8, sl
 8004662:	46d9      	mov	r9, fp
 8004664:	eb18 0308 	adds.w	r3, r8, r8
 8004668:	eb49 0409 	adc.w	r4, r9, r9
 800466c:	4698      	mov	r8, r3
 800466e:	46a1      	mov	r9, r4
 8004670:	eb18 080a 	adds.w	r8, r8, sl
 8004674:	eb49 090b 	adc.w	r9, r9, fp
 8004678:	f04f 0100 	mov.w	r1, #0
 800467c:	f04f 0200 	mov.w	r2, #0
 8004680:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004684:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004688:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800468c:	4688      	mov	r8, r1
 800468e:	4691      	mov	r9, r2
 8004690:	eb1a 0508 	adds.w	r5, sl, r8
 8004694:	eb4b 0609 	adc.w	r6, fp, r9
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	4619      	mov	r1, r3
 800469e:	f04f 0200 	mov.w	r2, #0
 80046a2:	f04f 0300 	mov.w	r3, #0
 80046a6:	f04f 0400 	mov.w	r4, #0
 80046aa:	0094      	lsls	r4, r2, #2
 80046ac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80046b0:	008b      	lsls	r3, r1, #2
 80046b2:	461a      	mov	r2, r3
 80046b4:	4623      	mov	r3, r4
 80046b6:	4628      	mov	r0, r5
 80046b8:	4631      	mov	r1, r6
 80046ba:	f7fc f9d7 	bl	8000a6c <__aeabi_uldivmod>
 80046be:	4603      	mov	r3, r0
 80046c0:	460c      	mov	r4, r1
 80046c2:	461a      	mov	r2, r3
 80046c4:	4bb8      	ldr	r3, [pc, #736]	; (80049a8 <UART_SetConfig+0x6f4>)
 80046c6:	fba3 2302 	umull	r2, r3, r3, r2
 80046ca:	095b      	lsrs	r3, r3, #5
 80046cc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	469b      	mov	fp, r3
 80046d4:	f04f 0c00 	mov.w	ip, #0
 80046d8:	46d9      	mov	r9, fp
 80046da:	46e2      	mov	sl, ip
 80046dc:	eb19 0309 	adds.w	r3, r9, r9
 80046e0:	eb4a 040a 	adc.w	r4, sl, sl
 80046e4:	4699      	mov	r9, r3
 80046e6:	46a2      	mov	sl, r4
 80046e8:	eb19 090b 	adds.w	r9, r9, fp
 80046ec:	eb4a 0a0c 	adc.w	sl, sl, ip
 80046f0:	f04f 0100 	mov.w	r1, #0
 80046f4:	f04f 0200 	mov.w	r2, #0
 80046f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004700:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004704:	4689      	mov	r9, r1
 8004706:	4692      	mov	sl, r2
 8004708:	eb1b 0509 	adds.w	r5, fp, r9
 800470c:	eb4c 060a 	adc.w	r6, ip, sl
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	4619      	mov	r1, r3
 8004716:	f04f 0200 	mov.w	r2, #0
 800471a:	f04f 0300 	mov.w	r3, #0
 800471e:	f04f 0400 	mov.w	r4, #0
 8004722:	0094      	lsls	r4, r2, #2
 8004724:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004728:	008b      	lsls	r3, r1, #2
 800472a:	461a      	mov	r2, r3
 800472c:	4623      	mov	r3, r4
 800472e:	4628      	mov	r0, r5
 8004730:	4631      	mov	r1, r6
 8004732:	f7fc f99b 	bl	8000a6c <__aeabi_uldivmod>
 8004736:	4603      	mov	r3, r0
 8004738:	460c      	mov	r4, r1
 800473a:	461a      	mov	r2, r3
 800473c:	4b9a      	ldr	r3, [pc, #616]	; (80049a8 <UART_SetConfig+0x6f4>)
 800473e:	fba3 1302 	umull	r1, r3, r3, r2
 8004742:	095b      	lsrs	r3, r3, #5
 8004744:	2164      	movs	r1, #100	; 0x64
 8004746:	fb01 f303 	mul.w	r3, r1, r3
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	011b      	lsls	r3, r3, #4
 800474e:	3332      	adds	r3, #50	; 0x32
 8004750:	4a95      	ldr	r2, [pc, #596]	; (80049a8 <UART_SetConfig+0x6f4>)
 8004752:	fba2 2303 	umull	r2, r3, r2, r3
 8004756:	095b      	lsrs	r3, r3, #5
 8004758:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800475c:	4498      	add	r8, r3
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	469b      	mov	fp, r3
 8004762:	f04f 0c00 	mov.w	ip, #0
 8004766:	46d9      	mov	r9, fp
 8004768:	46e2      	mov	sl, ip
 800476a:	eb19 0309 	adds.w	r3, r9, r9
 800476e:	eb4a 040a 	adc.w	r4, sl, sl
 8004772:	4699      	mov	r9, r3
 8004774:	46a2      	mov	sl, r4
 8004776:	eb19 090b 	adds.w	r9, r9, fp
 800477a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800477e:	f04f 0100 	mov.w	r1, #0
 8004782:	f04f 0200 	mov.w	r2, #0
 8004786:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800478a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800478e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004792:	4689      	mov	r9, r1
 8004794:	4692      	mov	sl, r2
 8004796:	eb1b 0509 	adds.w	r5, fp, r9
 800479a:	eb4c 060a 	adc.w	r6, ip, sl
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	4619      	mov	r1, r3
 80047a4:	f04f 0200 	mov.w	r2, #0
 80047a8:	f04f 0300 	mov.w	r3, #0
 80047ac:	f04f 0400 	mov.w	r4, #0
 80047b0:	0094      	lsls	r4, r2, #2
 80047b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80047b6:	008b      	lsls	r3, r1, #2
 80047b8:	461a      	mov	r2, r3
 80047ba:	4623      	mov	r3, r4
 80047bc:	4628      	mov	r0, r5
 80047be:	4631      	mov	r1, r6
 80047c0:	f7fc f954 	bl	8000a6c <__aeabi_uldivmod>
 80047c4:	4603      	mov	r3, r0
 80047c6:	460c      	mov	r4, r1
 80047c8:	461a      	mov	r2, r3
 80047ca:	4b77      	ldr	r3, [pc, #476]	; (80049a8 <UART_SetConfig+0x6f4>)
 80047cc:	fba3 1302 	umull	r1, r3, r3, r2
 80047d0:	095b      	lsrs	r3, r3, #5
 80047d2:	2164      	movs	r1, #100	; 0x64
 80047d4:	fb01 f303 	mul.w	r3, r1, r3
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	011b      	lsls	r3, r3, #4
 80047dc:	3332      	adds	r3, #50	; 0x32
 80047de:	4a72      	ldr	r2, [pc, #456]	; (80049a8 <UART_SetConfig+0x6f4>)
 80047e0:	fba2 2303 	umull	r2, r3, r2, r3
 80047e4:	095b      	lsrs	r3, r3, #5
 80047e6:	f003 020f 	and.w	r2, r3, #15
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4442      	add	r2, r8
 80047f0:	609a      	str	r2, [r3, #8]
 80047f2:	e0d0      	b.n	8004996 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80047f4:	f7fd fc60 	bl	80020b8 <HAL_RCC_GetPCLK1Freq>
 80047f8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	469a      	mov	sl, r3
 80047fe:	f04f 0b00 	mov.w	fp, #0
 8004802:	46d0      	mov	r8, sl
 8004804:	46d9      	mov	r9, fp
 8004806:	eb18 0308 	adds.w	r3, r8, r8
 800480a:	eb49 0409 	adc.w	r4, r9, r9
 800480e:	4698      	mov	r8, r3
 8004810:	46a1      	mov	r9, r4
 8004812:	eb18 080a 	adds.w	r8, r8, sl
 8004816:	eb49 090b 	adc.w	r9, r9, fp
 800481a:	f04f 0100 	mov.w	r1, #0
 800481e:	f04f 0200 	mov.w	r2, #0
 8004822:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004826:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800482a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800482e:	4688      	mov	r8, r1
 8004830:	4691      	mov	r9, r2
 8004832:	eb1a 0508 	adds.w	r5, sl, r8
 8004836:	eb4b 0609 	adc.w	r6, fp, r9
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	4619      	mov	r1, r3
 8004840:	f04f 0200 	mov.w	r2, #0
 8004844:	f04f 0300 	mov.w	r3, #0
 8004848:	f04f 0400 	mov.w	r4, #0
 800484c:	0094      	lsls	r4, r2, #2
 800484e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004852:	008b      	lsls	r3, r1, #2
 8004854:	461a      	mov	r2, r3
 8004856:	4623      	mov	r3, r4
 8004858:	4628      	mov	r0, r5
 800485a:	4631      	mov	r1, r6
 800485c:	f7fc f906 	bl	8000a6c <__aeabi_uldivmod>
 8004860:	4603      	mov	r3, r0
 8004862:	460c      	mov	r4, r1
 8004864:	461a      	mov	r2, r3
 8004866:	4b50      	ldr	r3, [pc, #320]	; (80049a8 <UART_SetConfig+0x6f4>)
 8004868:	fba3 2302 	umull	r2, r3, r3, r2
 800486c:	095b      	lsrs	r3, r3, #5
 800486e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	469b      	mov	fp, r3
 8004876:	f04f 0c00 	mov.w	ip, #0
 800487a:	46d9      	mov	r9, fp
 800487c:	46e2      	mov	sl, ip
 800487e:	eb19 0309 	adds.w	r3, r9, r9
 8004882:	eb4a 040a 	adc.w	r4, sl, sl
 8004886:	4699      	mov	r9, r3
 8004888:	46a2      	mov	sl, r4
 800488a:	eb19 090b 	adds.w	r9, r9, fp
 800488e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004892:	f04f 0100 	mov.w	r1, #0
 8004896:	f04f 0200 	mov.w	r2, #0
 800489a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800489e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80048a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80048a6:	4689      	mov	r9, r1
 80048a8:	4692      	mov	sl, r2
 80048aa:	eb1b 0509 	adds.w	r5, fp, r9
 80048ae:	eb4c 060a 	adc.w	r6, ip, sl
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	4619      	mov	r1, r3
 80048b8:	f04f 0200 	mov.w	r2, #0
 80048bc:	f04f 0300 	mov.w	r3, #0
 80048c0:	f04f 0400 	mov.w	r4, #0
 80048c4:	0094      	lsls	r4, r2, #2
 80048c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80048ca:	008b      	lsls	r3, r1, #2
 80048cc:	461a      	mov	r2, r3
 80048ce:	4623      	mov	r3, r4
 80048d0:	4628      	mov	r0, r5
 80048d2:	4631      	mov	r1, r6
 80048d4:	f7fc f8ca 	bl	8000a6c <__aeabi_uldivmod>
 80048d8:	4603      	mov	r3, r0
 80048da:	460c      	mov	r4, r1
 80048dc:	461a      	mov	r2, r3
 80048de:	4b32      	ldr	r3, [pc, #200]	; (80049a8 <UART_SetConfig+0x6f4>)
 80048e0:	fba3 1302 	umull	r1, r3, r3, r2
 80048e4:	095b      	lsrs	r3, r3, #5
 80048e6:	2164      	movs	r1, #100	; 0x64
 80048e8:	fb01 f303 	mul.w	r3, r1, r3
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	011b      	lsls	r3, r3, #4
 80048f0:	3332      	adds	r3, #50	; 0x32
 80048f2:	4a2d      	ldr	r2, [pc, #180]	; (80049a8 <UART_SetConfig+0x6f4>)
 80048f4:	fba2 2303 	umull	r2, r3, r2, r3
 80048f8:	095b      	lsrs	r3, r3, #5
 80048fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048fe:	4498      	add	r8, r3
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	469b      	mov	fp, r3
 8004904:	f04f 0c00 	mov.w	ip, #0
 8004908:	46d9      	mov	r9, fp
 800490a:	46e2      	mov	sl, ip
 800490c:	eb19 0309 	adds.w	r3, r9, r9
 8004910:	eb4a 040a 	adc.w	r4, sl, sl
 8004914:	4699      	mov	r9, r3
 8004916:	46a2      	mov	sl, r4
 8004918:	eb19 090b 	adds.w	r9, r9, fp
 800491c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004920:	f04f 0100 	mov.w	r1, #0
 8004924:	f04f 0200 	mov.w	r2, #0
 8004928:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800492c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004930:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004934:	4689      	mov	r9, r1
 8004936:	4692      	mov	sl, r2
 8004938:	eb1b 0509 	adds.w	r5, fp, r9
 800493c:	eb4c 060a 	adc.w	r6, ip, sl
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	4619      	mov	r1, r3
 8004946:	f04f 0200 	mov.w	r2, #0
 800494a:	f04f 0300 	mov.w	r3, #0
 800494e:	f04f 0400 	mov.w	r4, #0
 8004952:	0094      	lsls	r4, r2, #2
 8004954:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004958:	008b      	lsls	r3, r1, #2
 800495a:	461a      	mov	r2, r3
 800495c:	4623      	mov	r3, r4
 800495e:	4628      	mov	r0, r5
 8004960:	4631      	mov	r1, r6
 8004962:	f7fc f883 	bl	8000a6c <__aeabi_uldivmod>
 8004966:	4603      	mov	r3, r0
 8004968:	460c      	mov	r4, r1
 800496a:	461a      	mov	r2, r3
 800496c:	4b0e      	ldr	r3, [pc, #56]	; (80049a8 <UART_SetConfig+0x6f4>)
 800496e:	fba3 1302 	umull	r1, r3, r3, r2
 8004972:	095b      	lsrs	r3, r3, #5
 8004974:	2164      	movs	r1, #100	; 0x64
 8004976:	fb01 f303 	mul.w	r3, r1, r3
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	011b      	lsls	r3, r3, #4
 800497e:	3332      	adds	r3, #50	; 0x32
 8004980:	4a09      	ldr	r2, [pc, #36]	; (80049a8 <UART_SetConfig+0x6f4>)
 8004982:	fba2 2303 	umull	r2, r3, r2, r3
 8004986:	095b      	lsrs	r3, r3, #5
 8004988:	f003 020f 	and.w	r2, r3, #15
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4442      	add	r2, r8
 8004992:	609a      	str	r2, [r3, #8]
}
 8004994:	e7ff      	b.n	8004996 <UART_SetConfig+0x6e2>
 8004996:	bf00      	nop
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049a0:	40011000 	.word	0x40011000
 80049a4:	40011400 	.word	0x40011400
 80049a8:	51eb851f 	.word	0x51eb851f

080049ac <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	4603      	mov	r3, r0
 80049b4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80049b6:	79fb      	ldrb	r3, [r7, #7]
 80049b8:	4a08      	ldr	r2, [pc, #32]	; (80049dc <disk_status+0x30>)
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4413      	add	r3, r2
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	79fa      	ldrb	r2, [r7, #7]
 80049c4:	4905      	ldr	r1, [pc, #20]	; (80049dc <disk_status+0x30>)
 80049c6:	440a      	add	r2, r1
 80049c8:	7a12      	ldrb	r2, [r2, #8]
 80049ca:	4610      	mov	r0, r2
 80049cc:	4798      	blx	r3
 80049ce:	4603      	mov	r3, r0
 80049d0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80049d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3710      	adds	r7, #16
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	2000030c 	.word	0x2000030c

080049e0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	4603      	mov	r3, r0
 80049e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80049ea:	2300      	movs	r3, #0
 80049ec:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80049ee:	79fb      	ldrb	r3, [r7, #7]
 80049f0:	4a0d      	ldr	r2, [pc, #52]	; (8004a28 <disk_initialize+0x48>)
 80049f2:	5cd3      	ldrb	r3, [r2, r3]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d111      	bne.n	8004a1c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80049f8:	79fb      	ldrb	r3, [r7, #7]
 80049fa:	4a0b      	ldr	r2, [pc, #44]	; (8004a28 <disk_initialize+0x48>)
 80049fc:	2101      	movs	r1, #1
 80049fe:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004a00:	79fb      	ldrb	r3, [r7, #7]
 8004a02:	4a09      	ldr	r2, [pc, #36]	; (8004a28 <disk_initialize+0x48>)
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4413      	add	r3, r2
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	79fa      	ldrb	r2, [r7, #7]
 8004a0e:	4906      	ldr	r1, [pc, #24]	; (8004a28 <disk_initialize+0x48>)
 8004a10:	440a      	add	r2, r1
 8004a12:	7a12      	ldrb	r2, [r2, #8]
 8004a14:	4610      	mov	r0, r2
 8004a16:	4798      	blx	r3
 8004a18:	4603      	mov	r3, r0
 8004a1a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3710      	adds	r7, #16
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	2000030c 	.word	0x2000030c

08004a2c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004a2c:	b590      	push	{r4, r7, lr}
 8004a2e:	b087      	sub	sp, #28
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60b9      	str	r1, [r7, #8]
 8004a34:	607a      	str	r2, [r7, #4]
 8004a36:	603b      	str	r3, [r7, #0]
 8004a38:	4603      	mov	r3, r0
 8004a3a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004a3c:	7bfb      	ldrb	r3, [r7, #15]
 8004a3e:	4a0a      	ldr	r2, [pc, #40]	; (8004a68 <disk_read+0x3c>)
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4413      	add	r3, r2
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	689c      	ldr	r4, [r3, #8]
 8004a48:	7bfb      	ldrb	r3, [r7, #15]
 8004a4a:	4a07      	ldr	r2, [pc, #28]	; (8004a68 <disk_read+0x3c>)
 8004a4c:	4413      	add	r3, r2
 8004a4e:	7a18      	ldrb	r0, [r3, #8]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	68b9      	ldr	r1, [r7, #8]
 8004a56:	47a0      	blx	r4
 8004a58:	4603      	mov	r3, r0
 8004a5a:	75fb      	strb	r3, [r7, #23]
  return res;
 8004a5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	371c      	adds	r7, #28
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd90      	pop	{r4, r7, pc}
 8004a66:	bf00      	nop
 8004a68:	2000030c 	.word	0x2000030c

08004a6c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004a6c:	b590      	push	{r4, r7, lr}
 8004a6e:	b087      	sub	sp, #28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60b9      	str	r1, [r7, #8]
 8004a74:	607a      	str	r2, [r7, #4]
 8004a76:	603b      	str	r3, [r7, #0]
 8004a78:	4603      	mov	r3, r0
 8004a7a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004a7c:	7bfb      	ldrb	r3, [r7, #15]
 8004a7e:	4a0a      	ldr	r2, [pc, #40]	; (8004aa8 <disk_write+0x3c>)
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4413      	add	r3, r2
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	68dc      	ldr	r4, [r3, #12]
 8004a88:	7bfb      	ldrb	r3, [r7, #15]
 8004a8a:	4a07      	ldr	r2, [pc, #28]	; (8004aa8 <disk_write+0x3c>)
 8004a8c:	4413      	add	r3, r2
 8004a8e:	7a18      	ldrb	r0, [r3, #8]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	68b9      	ldr	r1, [r7, #8]
 8004a96:	47a0      	blx	r4
 8004a98:	4603      	mov	r3, r0
 8004a9a:	75fb      	strb	r3, [r7, #23]
  return res;
 8004a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	371c      	adds	r7, #28
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd90      	pop	{r4, r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	2000030c 	.word	0x2000030c

08004aac <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	603a      	str	r2, [r7, #0]
 8004ab6:	71fb      	strb	r3, [r7, #7]
 8004ab8:	460b      	mov	r3, r1
 8004aba:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004abc:	79fb      	ldrb	r3, [r7, #7]
 8004abe:	4a09      	ldr	r2, [pc, #36]	; (8004ae4 <disk_ioctl+0x38>)
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	79fa      	ldrb	r2, [r7, #7]
 8004aca:	4906      	ldr	r1, [pc, #24]	; (8004ae4 <disk_ioctl+0x38>)
 8004acc:	440a      	add	r2, r1
 8004ace:	7a10      	ldrb	r0, [r2, #8]
 8004ad0:	79b9      	ldrb	r1, [r7, #6]
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	4798      	blx	r3
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	73fb      	strb	r3, [r7, #15]
  return res;
 8004ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	2000030c 	.word	0x2000030c

08004ae8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	3301      	adds	r3, #1
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004af8:	89fb      	ldrh	r3, [r7, #14]
 8004afa:	021b      	lsls	r3, r3, #8
 8004afc:	b21a      	sxth	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	b21b      	sxth	r3, r3
 8004b04:	4313      	orrs	r3, r2
 8004b06:	b21b      	sxth	r3, r3
 8004b08:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004b0a:	89fb      	ldrh	r3, [r7, #14]
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	3303      	adds	r3, #3
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	021b      	lsls	r3, r3, #8
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	3202      	adds	r2, #2
 8004b30:	7812      	ldrb	r2, [r2, #0]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	021b      	lsls	r3, r3, #8
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	3201      	adds	r2, #1
 8004b3e:	7812      	ldrb	r2, [r2, #0]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	021b      	lsls	r3, r3, #8
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	7812      	ldrb	r2, [r2, #0]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	60fb      	str	r3, [r7, #12]
	return rv;
 8004b50:	68fb      	ldr	r3, [r7, #12]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3714      	adds	r7, #20
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b083      	sub	sp, #12
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
 8004b66:	460b      	mov	r3, r1
 8004b68:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	1c5a      	adds	r2, r3, #1
 8004b6e:	607a      	str	r2, [r7, #4]
 8004b70:	887a      	ldrh	r2, [r7, #2]
 8004b72:	b2d2      	uxtb	r2, r2
 8004b74:	701a      	strb	r2, [r3, #0]
 8004b76:	887b      	ldrh	r3, [r7, #2]
 8004b78:	0a1b      	lsrs	r3, r3, #8
 8004b7a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	1c5a      	adds	r2, r3, #1
 8004b80:	607a      	str	r2, [r7, #4]
 8004b82:	887a      	ldrh	r2, [r7, #2]
 8004b84:	b2d2      	uxtb	r2, r2
 8004b86:	701a      	strb	r2, [r3, #0]
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	1c5a      	adds	r2, r3, #1
 8004ba2:	607a      	str	r2, [r7, #4]
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	b2d2      	uxtb	r2, r2
 8004ba8:	701a      	strb	r2, [r3, #0]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	0a1b      	lsrs	r3, r3, #8
 8004bae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	1c5a      	adds	r2, r3, #1
 8004bb4:	607a      	str	r2, [r7, #4]
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	b2d2      	uxtb	r2, r2
 8004bba:	701a      	strb	r2, [r3, #0]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	0a1b      	lsrs	r3, r3, #8
 8004bc0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	1c5a      	adds	r2, r3, #1
 8004bc6:	607a      	str	r2, [r7, #4]
 8004bc8:	683a      	ldr	r2, [r7, #0]
 8004bca:	b2d2      	uxtb	r2, r2
 8004bcc:	701a      	strb	r2, [r3, #0]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	0a1b      	lsrs	r3, r3, #8
 8004bd2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	1c5a      	adds	r2, r3, #1
 8004bd8:	607a      	str	r2, [r7, #4]
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	b2d2      	uxtb	r2, r2
 8004bde:	701a      	strb	r2, [r3, #0]
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004bec:	b480      	push	{r7}
 8004bee:	b087      	sub	sp, #28
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	1c5a      	adds	r2, r3, #1
 8004c00:	617a      	str	r2, [r7, #20]
 8004c02:	68ba      	ldr	r2, [r7, #8]
 8004c04:	b2d2      	uxtb	r2, r2
 8004c06:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	607b      	str	r3, [r7, #4]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1f3      	bne.n	8004bfc <mem_set+0x10>
}
 8004c14:	bf00      	nop
 8004c16:	371c      	adds	r7, #28
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004c20:	b480      	push	{r7}
 8004c22:	b089      	sub	sp, #36	; 0x24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	61fb      	str	r3, [r7, #28]
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004c34:	2300      	movs	r3, #0
 8004c36:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	1c5a      	adds	r2, r3, #1
 8004c3c:	61fa      	str	r2, [r7, #28]
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	4619      	mov	r1, r3
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	1c5a      	adds	r2, r3, #1
 8004c46:	61ba      	str	r2, [r7, #24]
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	1acb      	subs	r3, r1, r3
 8004c4c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	3b01      	subs	r3, #1
 8004c52:	607b      	str	r3, [r7, #4]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d002      	beq.n	8004c60 <mem_cmp+0x40>
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d0eb      	beq.n	8004c38 <mem_cmp+0x18>

	return r;
 8004c60:	697b      	ldr	r3, [r7, #20]
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3724      	adds	r7, #36	; 0x24
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
 8004c76:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004c78:	e002      	b.n	8004c80 <chk_chr+0x12>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	607b      	str	r3, [r7, #4]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d005      	beq.n	8004c94 <chk_chr+0x26>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d1f2      	bne.n	8004c7a <chk_chr+0xc>
	return *str;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	781b      	ldrb	r3, [r3, #0]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004cae:	2300      	movs	r3, #0
 8004cb0:	60fb      	str	r3, [r7, #12]
 8004cb2:	e01f      	b.n	8004cf4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004cb4:	4a41      	ldr	r2, [pc, #260]	; (8004dbc <inc_lock+0x118>)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	011b      	lsls	r3, r3, #4
 8004cba:	4413      	add	r3, r2
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d113      	bne.n	8004cee <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004cc6:	4a3d      	ldr	r2, [pc, #244]	; (8004dbc <inc_lock+0x118>)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	011b      	lsls	r3, r3, #4
 8004ccc:	4413      	add	r3, r2
 8004cce:	3304      	adds	r3, #4
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d109      	bne.n	8004cee <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004cda:	4a38      	ldr	r2, [pc, #224]	; (8004dbc <inc_lock+0x118>)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	011b      	lsls	r3, r3, #4
 8004ce0:	4413      	add	r3, r2
 8004ce2:	3308      	adds	r3, #8
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d006      	beq.n	8004cfc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	60fb      	str	r3, [r7, #12]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d9dc      	bls.n	8004cb4 <inc_lock+0x10>
 8004cfa:	e000      	b.n	8004cfe <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004cfc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d132      	bne.n	8004d6a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004d04:	2300      	movs	r3, #0
 8004d06:	60fb      	str	r3, [r7, #12]
 8004d08:	e002      	b.n	8004d10 <inc_lock+0x6c>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	60fb      	str	r3, [r7, #12]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d806      	bhi.n	8004d24 <inc_lock+0x80>
 8004d16:	4a29      	ldr	r2, [pc, #164]	; (8004dbc <inc_lock+0x118>)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	011b      	lsls	r3, r3, #4
 8004d1c:	4413      	add	r3, r2
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1f2      	bne.n	8004d0a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d101      	bne.n	8004d2e <inc_lock+0x8a>
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	e040      	b.n	8004db0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	4922      	ldr	r1, [pc, #136]	; (8004dbc <inc_lock+0x118>)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	011b      	lsls	r3, r3, #4
 8004d38:	440b      	add	r3, r1
 8004d3a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	689a      	ldr	r2, [r3, #8]
 8004d40:	491e      	ldr	r1, [pc, #120]	; (8004dbc <inc_lock+0x118>)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	011b      	lsls	r3, r3, #4
 8004d46:	440b      	add	r3, r1
 8004d48:	3304      	adds	r3, #4
 8004d4a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	695a      	ldr	r2, [r3, #20]
 8004d50:	491a      	ldr	r1, [pc, #104]	; (8004dbc <inc_lock+0x118>)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	011b      	lsls	r3, r3, #4
 8004d56:	440b      	add	r3, r1
 8004d58:	3308      	adds	r3, #8
 8004d5a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004d5c:	4a17      	ldr	r2, [pc, #92]	; (8004dbc <inc_lock+0x118>)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	011b      	lsls	r3, r3, #4
 8004d62:	4413      	add	r3, r2
 8004d64:	330c      	adds	r3, #12
 8004d66:	2200      	movs	r2, #0
 8004d68:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d009      	beq.n	8004d84 <inc_lock+0xe0>
 8004d70:	4a12      	ldr	r2, [pc, #72]	; (8004dbc <inc_lock+0x118>)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	011b      	lsls	r3, r3, #4
 8004d76:	4413      	add	r3, r2
 8004d78:	330c      	adds	r3, #12
 8004d7a:	881b      	ldrh	r3, [r3, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d001      	beq.n	8004d84 <inc_lock+0xe0>
 8004d80:	2300      	movs	r3, #0
 8004d82:	e015      	b.n	8004db0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d108      	bne.n	8004d9c <inc_lock+0xf8>
 8004d8a:	4a0c      	ldr	r2, [pc, #48]	; (8004dbc <inc_lock+0x118>)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	011b      	lsls	r3, r3, #4
 8004d90:	4413      	add	r3, r2
 8004d92:	330c      	adds	r3, #12
 8004d94:	881b      	ldrh	r3, [r3, #0]
 8004d96:	3301      	adds	r3, #1
 8004d98:	b29a      	uxth	r2, r3
 8004d9a:	e001      	b.n	8004da0 <inc_lock+0xfc>
 8004d9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004da0:	4906      	ldr	r1, [pc, #24]	; (8004dbc <inc_lock+0x118>)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	011b      	lsls	r3, r3, #4
 8004da6:	440b      	add	r3, r1
 8004da8:	330c      	adds	r3, #12
 8004daa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	3301      	adds	r3, #1
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3714      	adds	r7, #20
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr
 8004dbc:	200000ec 	.word	0x200000ec

08004dc0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	607b      	str	r3, [r7, #4]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d825      	bhi.n	8004e20 <dec_lock+0x60>
		n = Files[i].ctr;
 8004dd4:	4a17      	ldr	r2, [pc, #92]	; (8004e34 <dec_lock+0x74>)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	011b      	lsls	r3, r3, #4
 8004dda:	4413      	add	r3, r2
 8004ddc:	330c      	adds	r3, #12
 8004dde:	881b      	ldrh	r3, [r3, #0]
 8004de0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004de2:	89fb      	ldrh	r3, [r7, #14]
 8004de4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004de8:	d101      	bne.n	8004dee <dec_lock+0x2e>
 8004dea:	2300      	movs	r3, #0
 8004dec:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004dee:	89fb      	ldrh	r3, [r7, #14]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d002      	beq.n	8004dfa <dec_lock+0x3a>
 8004df4:	89fb      	ldrh	r3, [r7, #14]
 8004df6:	3b01      	subs	r3, #1
 8004df8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004dfa:	4a0e      	ldr	r2, [pc, #56]	; (8004e34 <dec_lock+0x74>)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	011b      	lsls	r3, r3, #4
 8004e00:	4413      	add	r3, r2
 8004e02:	330c      	adds	r3, #12
 8004e04:	89fa      	ldrh	r2, [r7, #14]
 8004e06:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004e08:	89fb      	ldrh	r3, [r7, #14]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d105      	bne.n	8004e1a <dec_lock+0x5a>
 8004e0e:	4a09      	ldr	r2, [pc, #36]	; (8004e34 <dec_lock+0x74>)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	011b      	lsls	r3, r3, #4
 8004e14:	4413      	add	r3, r2
 8004e16:	2200      	movs	r2, #0
 8004e18:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	737b      	strb	r3, [r7, #13]
 8004e1e:	e001      	b.n	8004e24 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004e20:	2302      	movs	r3, #2
 8004e22:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004e24:	7b7b      	ldrb	r3, [r7, #13]
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3714      	adds	r7, #20
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	200000ec 	.word	0x200000ec

08004e38 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004e40:	2300      	movs	r3, #0
 8004e42:	60fb      	str	r3, [r7, #12]
 8004e44:	e010      	b.n	8004e68 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004e46:	4a0d      	ldr	r2, [pc, #52]	; (8004e7c <clear_lock+0x44>)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	011b      	lsls	r3, r3, #4
 8004e4c:	4413      	add	r3, r2
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d105      	bne.n	8004e62 <clear_lock+0x2a>
 8004e56:	4a09      	ldr	r2, [pc, #36]	; (8004e7c <clear_lock+0x44>)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	011b      	lsls	r3, r3, #4
 8004e5c:	4413      	add	r3, r2
 8004e5e:	2200      	movs	r2, #0
 8004e60:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	3301      	adds	r3, #1
 8004e66:	60fb      	str	r3, [r7, #12]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d9eb      	bls.n	8004e46 <clear_lock+0xe>
	}
}
 8004e6e:	bf00      	nop
 8004e70:	3714      	adds	r7, #20
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	200000ec 	.word	0x200000ec

08004e80 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	78db      	ldrb	r3, [r3, #3]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d034      	beq.n	8004efe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e98:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	7858      	ldrb	r0, [r3, #1]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	f7ff fde0 	bl	8004a6c <disk_write>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d002      	beq.n	8004eb8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	73fb      	strb	r3, [r7, #15]
 8004eb6:	e022      	b.n	8004efe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	1ad2      	subs	r2, r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d217      	bcs.n	8004efe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	789b      	ldrb	r3, [r3, #2]
 8004ed2:	613b      	str	r3, [r7, #16]
 8004ed4:	e010      	b.n	8004ef8 <sync_window+0x78>
					wsect += fs->fsize;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	4413      	add	r3, r2
 8004ede:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	7858      	ldrb	r0, [r3, #1]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004eea:	2301      	movs	r3, #1
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	f7ff fdbd 	bl	8004a6c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	613b      	str	r3, [r7, #16]
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d8eb      	bhi.n	8004ed6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3718      	adds	r7, #24
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004f12:	2300      	movs	r3, #0
 8004f14:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d01b      	beq.n	8004f58 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f7ff ffad 	bl	8004e80 <sync_window>
 8004f26:	4603      	mov	r3, r0
 8004f28:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004f2a:	7bfb      	ldrb	r3, [r7, #15]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d113      	bne.n	8004f58 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	7858      	ldrb	r0, [r3, #1]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	683a      	ldr	r2, [r7, #0]
 8004f3e:	f7ff fd75 	bl	8004a2c <disk_read>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d004      	beq.n	8004f52 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004f48:	f04f 33ff 	mov.w	r3, #4294967295
 8004f4c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8004f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004f62:	b480      	push	{r7}
 8004f64:	b083      	sub	sp, #12
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
 8004f6a:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	3b02      	subs	r3, #2
 8004f70:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	69db      	ldr	r3, [r3, #28]
 8004f76:	3b02      	subs	r3, #2
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d301      	bcc.n	8004f82 <clust2sect+0x20>
 8004f7e:	2300      	movs	r3, #0
 8004f80:	e008      	b.n	8004f94 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	895b      	ldrh	r3, [r3, #10]
 8004f86:	461a      	mov	r2, r3
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	fb03 f202 	mul.w	r2, r3, r2
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f92:	4413      	add	r3, r2
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d904      	bls.n	8004fc0 <get_fat+0x20>
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	69db      	ldr	r3, [r3, #28]
 8004fba:	683a      	ldr	r2, [r7, #0]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d302      	bcc.n	8004fc6 <get_fat+0x26>
		val = 1;	/* Internal error */
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	617b      	str	r3, [r7, #20]
 8004fc4:	e0b7      	b.n	8005136 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8004fca:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d05a      	beq.n	800508a <get_fat+0xea>
 8004fd4:	2b03      	cmp	r3, #3
 8004fd6:	d07d      	beq.n	80050d4 <get_fat+0x134>
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	f040 80a2 	bne.w	8005122 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	60fb      	str	r3, [r7, #12]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	085b      	lsrs	r3, r3, #1
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	4413      	add	r3, r2
 8004fea:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	899b      	ldrh	r3, [r3, #12]
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ffc:	4413      	add	r3, r2
 8004ffe:	4619      	mov	r1, r3
 8005000:	6938      	ldr	r0, [r7, #16]
 8005002:	f7ff ff81 	bl	8004f08 <move_window>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	f040 808d 	bne.w	8005128 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	1c5a      	adds	r2, r3, #1
 8005012:	60fa      	str	r2, [r7, #12]
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	8992      	ldrh	r2, [r2, #12]
 8005018:	fbb3 f1f2 	udiv	r1, r3, r2
 800501c:	fb02 f201 	mul.w	r2, r2, r1
 8005020:	1a9b      	subs	r3, r3, r2
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	4413      	add	r3, r2
 8005026:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800502a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	899b      	ldrh	r3, [r3, #12]
 8005034:	4619      	mov	r1, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	fbb3 f3f1 	udiv	r3, r3, r1
 800503c:	4413      	add	r3, r2
 800503e:	4619      	mov	r1, r3
 8005040:	6938      	ldr	r0, [r7, #16]
 8005042:	f7ff ff61 	bl	8004f08 <move_window>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d16f      	bne.n	800512c <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	899b      	ldrh	r3, [r3, #12]
 8005050:	461a      	mov	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	fbb3 f1f2 	udiv	r1, r3, r2
 8005058:	fb02 f201 	mul.w	r2, r2, r1
 800505c:	1a9b      	subs	r3, r3, r2
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	4413      	add	r3, r2
 8005062:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005066:	021b      	lsls	r3, r3, #8
 8005068:	461a      	mov	r2, r3
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	4313      	orrs	r3, r2
 800506e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	2b00      	cmp	r3, #0
 8005078:	d002      	beq.n	8005080 <get_fat+0xe0>
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	091b      	lsrs	r3, r3, #4
 800507e:	e002      	b.n	8005086 <get_fat+0xe6>
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005086:	617b      	str	r3, [r7, #20]
			break;
 8005088:	e055      	b.n	8005136 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	899b      	ldrh	r3, [r3, #12]
 8005092:	085b      	lsrs	r3, r3, #1
 8005094:	b29b      	uxth	r3, r3
 8005096:	4619      	mov	r1, r3
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	fbb3 f3f1 	udiv	r3, r3, r1
 800509e:	4413      	add	r3, r2
 80050a0:	4619      	mov	r1, r3
 80050a2:	6938      	ldr	r0, [r7, #16]
 80050a4:	f7ff ff30 	bl	8004f08 <move_window>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d140      	bne.n	8005130 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	005b      	lsls	r3, r3, #1
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	8992      	ldrh	r2, [r2, #12]
 80050bc:	fbb3 f0f2 	udiv	r0, r3, r2
 80050c0:	fb02 f200 	mul.w	r2, r2, r0
 80050c4:	1a9b      	subs	r3, r3, r2
 80050c6:	440b      	add	r3, r1
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7ff fd0d 	bl	8004ae8 <ld_word>
 80050ce:	4603      	mov	r3, r0
 80050d0:	617b      	str	r3, [r7, #20]
			break;
 80050d2:	e030      	b.n	8005136 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	899b      	ldrh	r3, [r3, #12]
 80050dc:	089b      	lsrs	r3, r3, #2
 80050de:	b29b      	uxth	r3, r3
 80050e0:	4619      	mov	r1, r3
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80050e8:	4413      	add	r3, r2
 80050ea:	4619      	mov	r1, r3
 80050ec:	6938      	ldr	r0, [r7, #16]
 80050ee:	f7ff ff0b 	bl	8004f08 <move_window>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d11d      	bne.n	8005134 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	8992      	ldrh	r2, [r2, #12]
 8005106:	fbb3 f0f2 	udiv	r0, r3, r2
 800510a:	fb02 f200 	mul.w	r2, r2, r0
 800510e:	1a9b      	subs	r3, r3, r2
 8005110:	440b      	add	r3, r1
 8005112:	4618      	mov	r0, r3
 8005114:	f7ff fd00 	bl	8004b18 <ld_dword>
 8005118:	4603      	mov	r3, r0
 800511a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800511e:	617b      	str	r3, [r7, #20]
			break;
 8005120:	e009      	b.n	8005136 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005122:	2301      	movs	r3, #1
 8005124:	617b      	str	r3, [r7, #20]
 8005126:	e006      	b.n	8005136 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005128:	bf00      	nop
 800512a:	e004      	b.n	8005136 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800512c:	bf00      	nop
 800512e:	e002      	b.n	8005136 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005130:	bf00      	nop
 8005132:	e000      	b.n	8005136 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005134:	bf00      	nop
		}
	}

	return val;
 8005136:	697b      	ldr	r3, [r7, #20]
}
 8005138:	4618      	mov	r0, r3
 800513a:	3718      	adds	r7, #24
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005140:	b590      	push	{r4, r7, lr}
 8005142:	b089      	sub	sp, #36	; 0x24
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800514c:	2302      	movs	r3, #2
 800514e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	2b01      	cmp	r3, #1
 8005154:	f240 8106 	bls.w	8005364 <put_fat+0x224>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	69db      	ldr	r3, [r3, #28]
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	429a      	cmp	r2, r3
 8005160:	f080 8100 	bcs.w	8005364 <put_fat+0x224>
		switch (fs->fs_type) {
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	2b02      	cmp	r3, #2
 800516a:	f000 8088 	beq.w	800527e <put_fat+0x13e>
 800516e:	2b03      	cmp	r3, #3
 8005170:	f000 80b0 	beq.w	80052d4 <put_fat+0x194>
 8005174:	2b01      	cmp	r3, #1
 8005176:	f040 80f5 	bne.w	8005364 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	61bb      	str	r3, [r7, #24]
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	085b      	lsrs	r3, r3, #1
 8005182:	69ba      	ldr	r2, [r7, #24]
 8005184:	4413      	add	r3, r2
 8005186:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	899b      	ldrh	r3, [r3, #12]
 8005190:	4619      	mov	r1, r3
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	fbb3 f3f1 	udiv	r3, r3, r1
 8005198:	4413      	add	r3, r2
 800519a:	4619      	mov	r1, r3
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f7ff feb3 	bl	8004f08 <move_window>
 80051a2:	4603      	mov	r3, r0
 80051a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80051a6:	7ffb      	ldrb	r3, [r7, #31]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	f040 80d4 	bne.w	8005356 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	1c5a      	adds	r2, r3, #1
 80051b8:	61ba      	str	r2, [r7, #24]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	8992      	ldrh	r2, [r2, #12]
 80051be:	fbb3 f0f2 	udiv	r0, r3, r2
 80051c2:	fb02 f200 	mul.w	r2, r2, r0
 80051c6:	1a9b      	subs	r3, r3, r2
 80051c8:	440b      	add	r3, r1
 80051ca:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	f003 0301 	and.w	r3, r3, #1
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00d      	beq.n	80051f2 <put_fat+0xb2>
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	b25b      	sxtb	r3, r3
 80051dc:	f003 030f 	and.w	r3, r3, #15
 80051e0:	b25a      	sxtb	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	011b      	lsls	r3, r3, #4
 80051e8:	b25b      	sxtb	r3, r3
 80051ea:	4313      	orrs	r3, r2
 80051ec:	b25b      	sxtb	r3, r3
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	e001      	b.n	80051f6 <put_fat+0xb6>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2201      	movs	r2, #1
 80051fe:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	899b      	ldrh	r3, [r3, #12]
 8005208:	4619      	mov	r1, r3
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005210:	4413      	add	r3, r2
 8005212:	4619      	mov	r1, r3
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f7ff fe77 	bl	8004f08 <move_window>
 800521a:	4603      	mov	r3, r0
 800521c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800521e:	7ffb      	ldrb	r3, [r7, #31]
 8005220:	2b00      	cmp	r3, #0
 8005222:	f040 809a 	bne.w	800535a <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	899b      	ldrh	r3, [r3, #12]
 8005230:	461a      	mov	r2, r3
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	fbb3 f0f2 	udiv	r0, r3, r2
 8005238:	fb02 f200 	mul.w	r2, r2, r0
 800523c:	1a9b      	subs	r3, r3, r2
 800523e:	440b      	add	r3, r1
 8005240:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	f003 0301 	and.w	r3, r3, #1
 8005248:	2b00      	cmp	r3, #0
 800524a:	d003      	beq.n	8005254 <put_fat+0x114>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	091b      	lsrs	r3, r3, #4
 8005250:	b2db      	uxtb	r3, r3
 8005252:	e00e      	b.n	8005272 <put_fat+0x132>
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	b25b      	sxtb	r3, r3
 800525a:	f023 030f 	bic.w	r3, r3, #15
 800525e:	b25a      	sxtb	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	0a1b      	lsrs	r3, r3, #8
 8005264:	b25b      	sxtb	r3, r3
 8005266:	f003 030f 	and.w	r3, r3, #15
 800526a:	b25b      	sxtb	r3, r3
 800526c:	4313      	orrs	r3, r2
 800526e:	b25b      	sxtb	r3, r3
 8005270:	b2db      	uxtb	r3, r3
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2201      	movs	r2, #1
 800527a:	70da      	strb	r2, [r3, #3]
			break;
 800527c:	e072      	b.n	8005364 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	899b      	ldrh	r3, [r3, #12]
 8005286:	085b      	lsrs	r3, r3, #1
 8005288:	b29b      	uxth	r3, r3
 800528a:	4619      	mov	r1, r3
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005292:	4413      	add	r3, r2
 8005294:	4619      	mov	r1, r3
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f7ff fe36 	bl	8004f08 <move_window>
 800529c:	4603      	mov	r3, r0
 800529e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80052a0:	7ffb      	ldrb	r3, [r7, #31]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d15b      	bne.n	800535e <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	005b      	lsls	r3, r3, #1
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	8992      	ldrh	r2, [r2, #12]
 80052b4:	fbb3 f0f2 	udiv	r0, r3, r2
 80052b8:	fb02 f200 	mul.w	r2, r2, r0
 80052bc:	1a9b      	subs	r3, r3, r2
 80052be:	440b      	add	r3, r1
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	b292      	uxth	r2, r2
 80052c4:	4611      	mov	r1, r2
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7ff fc49 	bl	8004b5e <st_word>
			fs->wflag = 1;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2201      	movs	r2, #1
 80052d0:	70da      	strb	r2, [r3, #3]
			break;
 80052d2:	e047      	b.n	8005364 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	899b      	ldrh	r3, [r3, #12]
 80052dc:	089b      	lsrs	r3, r3, #2
 80052de:	b29b      	uxth	r3, r3
 80052e0:	4619      	mov	r1, r3
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80052e8:	4413      	add	r3, r2
 80052ea:	4619      	mov	r1, r3
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f7ff fe0b 	bl	8004f08 <move_window>
 80052f2:	4603      	mov	r3, r0
 80052f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80052f6:	7ffb      	ldrb	r3, [r7, #31]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d132      	bne.n	8005362 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	8992      	ldrh	r2, [r2, #12]
 8005310:	fbb3 f0f2 	udiv	r0, r3, r2
 8005314:	fb02 f200 	mul.w	r2, r2, r0
 8005318:	1a9b      	subs	r3, r3, r2
 800531a:	440b      	add	r3, r1
 800531c:	4618      	mov	r0, r3
 800531e:	f7ff fbfb 	bl	8004b18 <ld_dword>
 8005322:	4603      	mov	r3, r0
 8005324:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005328:	4323      	orrs	r3, r4
 800532a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	8992      	ldrh	r2, [r2, #12]
 800533a:	fbb3 f0f2 	udiv	r0, r3, r2
 800533e:	fb02 f200 	mul.w	r2, r2, r0
 8005342:	1a9b      	subs	r3, r3, r2
 8005344:	440b      	add	r3, r1
 8005346:	6879      	ldr	r1, [r7, #4]
 8005348:	4618      	mov	r0, r3
 800534a:	f7ff fc23 	bl	8004b94 <st_dword>
			fs->wflag = 1;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2201      	movs	r2, #1
 8005352:	70da      	strb	r2, [r3, #3]
			break;
 8005354:	e006      	b.n	8005364 <put_fat+0x224>
			if (res != FR_OK) break;
 8005356:	bf00      	nop
 8005358:	e004      	b.n	8005364 <put_fat+0x224>
			if (res != FR_OK) break;
 800535a:	bf00      	nop
 800535c:	e002      	b.n	8005364 <put_fat+0x224>
			if (res != FR_OK) break;
 800535e:	bf00      	nop
 8005360:	e000      	b.n	8005364 <put_fat+0x224>
			if (res != FR_OK) break;
 8005362:	bf00      	nop
		}
	}
	return res;
 8005364:	7ffb      	ldrb	r3, [r7, #31]
}
 8005366:	4618      	mov	r0, r3
 8005368:	3724      	adds	r7, #36	; 0x24
 800536a:	46bd      	mov	sp, r7
 800536c:	bd90      	pop	{r4, r7, pc}

0800536e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800536e:	b580      	push	{r7, lr}
 8005370:	b088      	sub	sp, #32
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
 8005376:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d10d      	bne.n	80053a0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d004      	beq.n	800539a <create_chain+0x2c>
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	69db      	ldr	r3, [r3, #28]
 8005394:	69ba      	ldr	r2, [r7, #24]
 8005396:	429a      	cmp	r2, r3
 8005398:	d31b      	bcc.n	80053d2 <create_chain+0x64>
 800539a:	2301      	movs	r3, #1
 800539c:	61bb      	str	r3, [r7, #24]
 800539e:	e018      	b.n	80053d2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80053a0:	6839      	ldr	r1, [r7, #0]
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f7ff fdfc 	bl	8004fa0 <get_fat>
 80053a8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d801      	bhi.n	80053b4 <create_chain+0x46>
 80053b0:	2301      	movs	r3, #1
 80053b2:	e070      	b.n	8005496 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ba:	d101      	bne.n	80053c0 <create_chain+0x52>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	e06a      	b.n	8005496 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	69db      	ldr	r3, [r3, #28]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d201      	bcs.n	80053ce <create_chain+0x60>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	e063      	b.n	8005496 <create_chain+0x128>
		scl = clst;
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	3301      	adds	r3, #1
 80053da:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	69db      	ldr	r3, [r3, #28]
 80053e0:	69fa      	ldr	r2, [r7, #28]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d307      	bcc.n	80053f6 <create_chain+0x88>
				ncl = 2;
 80053e6:	2302      	movs	r3, #2
 80053e8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80053ea:	69fa      	ldr	r2, [r7, #28]
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d901      	bls.n	80053f6 <create_chain+0x88>
 80053f2:	2300      	movs	r3, #0
 80053f4:	e04f      	b.n	8005496 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80053f6:	69f9      	ldr	r1, [r7, #28]
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f7ff fdd1 	bl	8004fa0 <get_fat>
 80053fe:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00e      	beq.n	8005424 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d003      	beq.n	8005414 <create_chain+0xa6>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005412:	d101      	bne.n	8005418 <create_chain+0xaa>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	e03e      	b.n	8005496 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005418:	69fa      	ldr	r2, [r7, #28]
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	429a      	cmp	r2, r3
 800541e:	d1da      	bne.n	80053d6 <create_chain+0x68>
 8005420:	2300      	movs	r3, #0
 8005422:	e038      	b.n	8005496 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005424:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005426:	f04f 32ff 	mov.w	r2, #4294967295
 800542a:	69f9      	ldr	r1, [r7, #28]
 800542c:	6938      	ldr	r0, [r7, #16]
 800542e:	f7ff fe87 	bl	8005140 <put_fat>
 8005432:	4603      	mov	r3, r0
 8005434:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005436:	7dfb      	ldrb	r3, [r7, #23]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d109      	bne.n	8005450 <create_chain+0xe2>
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d006      	beq.n	8005450 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005442:	69fa      	ldr	r2, [r7, #28]
 8005444:	6839      	ldr	r1, [r7, #0]
 8005446:	6938      	ldr	r0, [r7, #16]
 8005448:	f7ff fe7a 	bl	8005140 <put_fat>
 800544c:	4603      	mov	r3, r0
 800544e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005450:	7dfb      	ldrb	r3, [r7, #23]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d116      	bne.n	8005484 <create_chain+0x116>
		fs->last_clst = ncl;
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	69fa      	ldr	r2, [r7, #28]
 800545a:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	699a      	ldr	r2, [r3, #24]
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	69db      	ldr	r3, [r3, #28]
 8005464:	3b02      	subs	r3, #2
 8005466:	429a      	cmp	r2, r3
 8005468:	d804      	bhi.n	8005474 <create_chain+0x106>
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	1e5a      	subs	r2, r3, #1
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	791b      	ldrb	r3, [r3, #4]
 8005478:	f043 0301 	orr.w	r3, r3, #1
 800547c:	b2da      	uxtb	r2, r3
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	711a      	strb	r2, [r3, #4]
 8005482:	e007      	b.n	8005494 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005484:	7dfb      	ldrb	r3, [r7, #23]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d102      	bne.n	8005490 <create_chain+0x122>
 800548a:	f04f 33ff 	mov.w	r3, #4294967295
 800548e:	e000      	b.n	8005492 <create_chain+0x124>
 8005490:	2301      	movs	r3, #1
 8005492:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005494:	69fb      	ldr	r3, [r7, #28]
}
 8005496:	4618      	mov	r0, r3
 8005498:	3720      	adds	r7, #32
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800549e:	b580      	push	{r7, lr}
 80054a0:	b086      	sub	sp, #24
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
 80054a6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054b4:	d204      	bcs.n	80054c0 <dir_sdi+0x22>
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	f003 031f 	and.w	r3, r3, #31
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d001      	beq.n	80054c4 <dir_sdi+0x26>
		return FR_INT_ERR;
 80054c0:	2302      	movs	r3, #2
 80054c2:	e071      	b.n	80055a8 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d106      	bne.n	80054e4 <dir_sdi+0x46>
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d902      	bls.n	80054e4 <dir_sdi+0x46>
		clst = fs->dirbase;
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10c      	bne.n	8005504 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	095b      	lsrs	r3, r3, #5
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	8912      	ldrh	r2, [r2, #8]
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d301      	bcc.n	80054fa <dir_sdi+0x5c>
 80054f6:	2302      	movs	r3, #2
 80054f8:	e056      	b.n	80055a8 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	61da      	str	r2, [r3, #28]
 8005502:	e02d      	b.n	8005560 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	895b      	ldrh	r3, [r3, #10]
 8005508:	461a      	mov	r2, r3
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	899b      	ldrh	r3, [r3, #12]
 800550e:	fb03 f302 	mul.w	r3, r3, r2
 8005512:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005514:	e019      	b.n	800554a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6979      	ldr	r1, [r7, #20]
 800551a:	4618      	mov	r0, r3
 800551c:	f7ff fd40 	bl	8004fa0 <get_fat>
 8005520:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005528:	d101      	bne.n	800552e <dir_sdi+0x90>
 800552a:	2301      	movs	r3, #1
 800552c:	e03c      	b.n	80055a8 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d904      	bls.n	800553e <dir_sdi+0xa0>
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	69db      	ldr	r3, [r3, #28]
 8005538:	697a      	ldr	r2, [r7, #20]
 800553a:	429a      	cmp	r2, r3
 800553c:	d301      	bcc.n	8005542 <dir_sdi+0xa4>
 800553e:	2302      	movs	r3, #2
 8005540:	e032      	b.n	80055a8 <dir_sdi+0x10a>
			ofs -= csz;
 8005542:	683a      	ldr	r2, [r7, #0]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800554a:	683a      	ldr	r2, [r7, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	429a      	cmp	r2, r3
 8005550:	d2e1      	bcs.n	8005516 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005552:	6979      	ldr	r1, [r7, #20]
 8005554:	6938      	ldr	r0, [r7, #16]
 8005556:	f7ff fd04 	bl	8004f62 <clust2sect>
 800555a:	4602      	mov	r2, r0
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	69db      	ldr	r3, [r3, #28]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d101      	bne.n	8005572 <dir_sdi+0xd4>
 800556e:	2302      	movs	r3, #2
 8005570:	e01a      	b.n	80055a8 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	69da      	ldr	r2, [r3, #28]
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	899b      	ldrh	r3, [r3, #12]
 800557a:	4619      	mov	r1, r3
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005582:	441a      	add	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	899b      	ldrh	r3, [r3, #12]
 8005592:	461a      	mov	r2, r3
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	fbb3 f0f2 	udiv	r0, r3, r2
 800559a:	fb02 f200 	mul.w	r2, r2, r0
 800559e:	1a9b      	subs	r3, r3, r2
 80055a0:	18ca      	adds	r2, r1, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3718      	adds	r7, #24
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	695b      	ldr	r3, [r3, #20]
 80055c4:	3320      	adds	r3, #32
 80055c6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	69db      	ldr	r3, [r3, #28]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d003      	beq.n	80055d8 <dir_next+0x28>
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055d6:	d301      	bcc.n	80055dc <dir_next+0x2c>
 80055d8:	2304      	movs	r3, #4
 80055da:	e0bb      	b.n	8005754 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	899b      	ldrh	r3, [r3, #12]
 80055e0:	461a      	mov	r2, r3
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80055e8:	fb02 f201 	mul.w	r2, r2, r1
 80055ec:	1a9b      	subs	r3, r3, r2
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f040 809d 	bne.w	800572e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	69db      	ldr	r3, [r3, #28]
 80055f8:	1c5a      	adds	r2, r3, #1
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10b      	bne.n	800561e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	095b      	lsrs	r3, r3, #5
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	8912      	ldrh	r2, [r2, #8]
 800560e:	4293      	cmp	r3, r2
 8005610:	f0c0 808d 	bcc.w	800572e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	61da      	str	r2, [r3, #28]
 800561a:	2304      	movs	r3, #4
 800561c:	e09a      	b.n	8005754 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	899b      	ldrh	r3, [r3, #12]
 8005622:	461a      	mov	r2, r3
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	fbb3 f3f2 	udiv	r3, r3, r2
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	8952      	ldrh	r2, [r2, #10]
 800562e:	3a01      	subs	r2, #1
 8005630:	4013      	ands	r3, r2
 8005632:	2b00      	cmp	r3, #0
 8005634:	d17b      	bne.n	800572e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	4619      	mov	r1, r3
 800563e:	4610      	mov	r0, r2
 8005640:	f7ff fcae 	bl	8004fa0 <get_fat>
 8005644:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d801      	bhi.n	8005650 <dir_next+0xa0>
 800564c:	2302      	movs	r3, #2
 800564e:	e081      	b.n	8005754 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005656:	d101      	bne.n	800565c <dir_next+0xac>
 8005658:	2301      	movs	r3, #1
 800565a:	e07b      	b.n	8005754 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	69db      	ldr	r3, [r3, #28]
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	429a      	cmp	r2, r3
 8005664:	d359      	bcc.n	800571a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d104      	bne.n	8005676 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	61da      	str	r2, [r3, #28]
 8005672:	2304      	movs	r3, #4
 8005674:	e06e      	b.n	8005754 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	4619      	mov	r1, r3
 800567e:	4610      	mov	r0, r2
 8005680:	f7ff fe75 	bl	800536e <create_chain>
 8005684:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d101      	bne.n	8005690 <dir_next+0xe0>
 800568c:	2307      	movs	r3, #7
 800568e:	e061      	b.n	8005754 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d101      	bne.n	800569a <dir_next+0xea>
 8005696:	2302      	movs	r3, #2
 8005698:	e05c      	b.n	8005754 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a0:	d101      	bne.n	80056a6 <dir_next+0xf6>
 80056a2:	2301      	movs	r3, #1
 80056a4:	e056      	b.n	8005754 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80056a6:	68f8      	ldr	r0, [r7, #12]
 80056a8:	f7ff fbea 	bl	8004e80 <sync_window>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d001      	beq.n	80056b6 <dir_next+0x106>
 80056b2:	2301      	movs	r3, #1
 80056b4:	e04e      	b.n	8005754 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	899b      	ldrh	r3, [r3, #12]
 80056c0:	461a      	mov	r2, r3
 80056c2:	2100      	movs	r1, #0
 80056c4:	f7ff fa92 	bl	8004bec <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80056c8:	2300      	movs	r3, #0
 80056ca:	613b      	str	r3, [r7, #16]
 80056cc:	6979      	ldr	r1, [r7, #20]
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f7ff fc47 	bl	8004f62 <clust2sect>
 80056d4:	4602      	mov	r2, r0
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	635a      	str	r2, [r3, #52]	; 0x34
 80056da:	e012      	b.n	8005702 <dir_next+0x152>
						fs->wflag = 1;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2201      	movs	r2, #1
 80056e0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80056e2:	68f8      	ldr	r0, [r7, #12]
 80056e4:	f7ff fbcc 	bl	8004e80 <sync_window>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d001      	beq.n	80056f2 <dir_next+0x142>
 80056ee:	2301      	movs	r3, #1
 80056f0:	e030      	b.n	8005754 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	3301      	adds	r3, #1
 80056f6:	613b      	str	r3, [r7, #16]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056fc:	1c5a      	adds	r2, r3, #1
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	635a      	str	r2, [r3, #52]	; 0x34
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	895b      	ldrh	r3, [r3, #10]
 8005706:	461a      	mov	r2, r3
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	4293      	cmp	r3, r2
 800570c:	d3e6      	bcc.n	80056dc <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	1ad2      	subs	r2, r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005720:	6979      	ldr	r1, [r7, #20]
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f7ff fc1d 	bl	8004f62 <clust2sect>
 8005728:	4602      	mov	r2, r0
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	899b      	ldrh	r3, [r3, #12]
 800573e:	461a      	mov	r2, r3
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	fbb3 f0f2 	udiv	r0, r3, r2
 8005746:	fb02 f200 	mul.w	r2, r2, r0
 800574a:	1a9b      	subs	r3, r3, r2
 800574c:	18ca      	adds	r2, r1, r3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	3718      	adds	r7, #24
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	331a      	adds	r3, #26
 800576a:	4618      	mov	r0, r3
 800576c:	f7ff f9bc 	bl	8004ae8 <ld_word>
 8005770:	4603      	mov	r3, r0
 8005772:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	2b03      	cmp	r3, #3
 800577a:	d109      	bne.n	8005790 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	3314      	adds	r3, #20
 8005780:	4618      	mov	r0, r3
 8005782:	f7ff f9b1 	bl	8004ae8 <ld_word>
 8005786:	4603      	mov	r3, r0
 8005788:	041b      	lsls	r3, r3, #16
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	4313      	orrs	r3, r2
 800578e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005790:	68fb      	ldr	r3, [r7, #12]
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
	...

0800579c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800579c:	b590      	push	{r4, r7, lr}
 800579e:	b087      	sub	sp, #28
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	331a      	adds	r3, #26
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7ff f99c 	bl	8004ae8 <ld_word>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d001      	beq.n	80057ba <cmp_lfn+0x1e>
 80057b6:	2300      	movs	r3, #0
 80057b8:	e059      	b.n	800586e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057c2:	1e5a      	subs	r2, r3, #1
 80057c4:	4613      	mov	r3, r2
 80057c6:	005b      	lsls	r3, r3, #1
 80057c8:	4413      	add	r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4413      	add	r3, r2
 80057ce:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80057d0:	2301      	movs	r3, #1
 80057d2:	81fb      	strh	r3, [r7, #14]
 80057d4:	2300      	movs	r3, #0
 80057d6:	613b      	str	r3, [r7, #16]
 80057d8:	e033      	b.n	8005842 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80057da:	4a27      	ldr	r2, [pc, #156]	; (8005878 <cmp_lfn+0xdc>)
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	4413      	add	r3, r2
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	461a      	mov	r2, r3
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	4413      	add	r3, r2
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7ff f97d 	bl	8004ae8 <ld_word>
 80057ee:	4603      	mov	r3, r0
 80057f0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80057f2:	89fb      	ldrh	r3, [r7, #14]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d01a      	beq.n	800582e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	2bfe      	cmp	r3, #254	; 0xfe
 80057fc:	d812      	bhi.n	8005824 <cmp_lfn+0x88>
 80057fe:	89bb      	ldrh	r3, [r7, #12]
 8005800:	4618      	mov	r0, r3
 8005802:	f001 fc7f 	bl	8007104 <ff_wtoupper>
 8005806:	4603      	mov	r3, r0
 8005808:	461c      	mov	r4, r3
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	1c5a      	adds	r2, r3, #1
 800580e:	617a      	str	r2, [r7, #20]
 8005810:	005b      	lsls	r3, r3, #1
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	4413      	add	r3, r2
 8005816:	881b      	ldrh	r3, [r3, #0]
 8005818:	4618      	mov	r0, r3
 800581a:	f001 fc73 	bl	8007104 <ff_wtoupper>
 800581e:	4603      	mov	r3, r0
 8005820:	429c      	cmp	r4, r3
 8005822:	d001      	beq.n	8005828 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8005824:	2300      	movs	r3, #0
 8005826:	e022      	b.n	800586e <cmp_lfn+0xd2>
			}
			wc = uc;
 8005828:	89bb      	ldrh	r3, [r7, #12]
 800582a:	81fb      	strh	r3, [r7, #14]
 800582c:	e006      	b.n	800583c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800582e:	89bb      	ldrh	r3, [r7, #12]
 8005830:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005834:	4293      	cmp	r3, r2
 8005836:	d001      	beq.n	800583c <cmp_lfn+0xa0>
 8005838:	2300      	movs	r3, #0
 800583a:	e018      	b.n	800586e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	3301      	adds	r3, #1
 8005840:	613b      	str	r3, [r7, #16]
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	2b0c      	cmp	r3, #12
 8005846:	d9c8      	bls.n	80057da <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00b      	beq.n	800586c <cmp_lfn+0xd0>
 8005854:	89fb      	ldrh	r3, [r7, #14]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d008      	beq.n	800586c <cmp_lfn+0xd0>
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	005b      	lsls	r3, r3, #1
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	4413      	add	r3, r2
 8005862:	881b      	ldrh	r3, [r3, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d001      	beq.n	800586c <cmp_lfn+0xd0>
 8005868:	2300      	movs	r3, #0
 800586a:	e000      	b.n	800586e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800586c:	2301      	movs	r3, #1
}
 800586e:	4618      	mov	r0, r3
 8005870:	371c      	adds	r7, #28
 8005872:	46bd      	mov	sp, r7
 8005874:	bd90      	pop	{r4, r7, pc}
 8005876:	bf00      	nop
 8005878:	0800a9f0 	.word	0x0800a9f0

0800587c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	331a      	adds	r3, #26
 800588a:	4618      	mov	r0, r3
 800588c:	f7ff f92c 	bl	8004ae8 <ld_word>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d001      	beq.n	800589a <pick_lfn+0x1e>
 8005896:	2300      	movs	r3, #0
 8005898:	e04d      	b.n	8005936 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058a2:	1e5a      	subs	r2, r3, #1
 80058a4:	4613      	mov	r3, r2
 80058a6:	005b      	lsls	r3, r3, #1
 80058a8:	4413      	add	r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4413      	add	r3, r2
 80058ae:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80058b0:	2301      	movs	r3, #1
 80058b2:	81fb      	strh	r3, [r7, #14]
 80058b4:	2300      	movs	r3, #0
 80058b6:	613b      	str	r3, [r7, #16]
 80058b8:	e028      	b.n	800590c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80058ba:	4a21      	ldr	r2, [pc, #132]	; (8005940 <pick_lfn+0xc4>)
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	4413      	add	r3, r2
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	461a      	mov	r2, r3
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	4413      	add	r3, r2
 80058c8:	4618      	mov	r0, r3
 80058ca:	f7ff f90d 	bl	8004ae8 <ld_word>
 80058ce:	4603      	mov	r3, r0
 80058d0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80058d2:	89fb      	ldrh	r3, [r7, #14]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00f      	beq.n	80058f8 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	2bfe      	cmp	r3, #254	; 0xfe
 80058dc:	d901      	bls.n	80058e2 <pick_lfn+0x66>
 80058de:	2300      	movs	r3, #0
 80058e0:	e029      	b.n	8005936 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80058e2:	89bb      	ldrh	r3, [r7, #12]
 80058e4:	81fb      	strh	r3, [r7, #14]
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	1c5a      	adds	r2, r3, #1
 80058ea:	617a      	str	r2, [r7, #20]
 80058ec:	005b      	lsls	r3, r3, #1
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	4413      	add	r3, r2
 80058f2:	89fa      	ldrh	r2, [r7, #14]
 80058f4:	801a      	strh	r2, [r3, #0]
 80058f6:	e006      	b.n	8005906 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80058f8:	89bb      	ldrh	r3, [r7, #12]
 80058fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058fe:	4293      	cmp	r3, r2
 8005900:	d001      	beq.n	8005906 <pick_lfn+0x8a>
 8005902:	2300      	movs	r3, #0
 8005904:	e017      	b.n	8005936 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	3301      	adds	r3, #1
 800590a:	613b      	str	r3, [r7, #16]
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	2b0c      	cmp	r3, #12
 8005910:	d9d3      	bls.n	80058ba <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00a      	beq.n	8005934 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	2bfe      	cmp	r3, #254	; 0xfe
 8005922:	d901      	bls.n	8005928 <pick_lfn+0xac>
 8005924:	2300      	movs	r3, #0
 8005926:	e006      	b.n	8005936 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	005b      	lsls	r3, r3, #1
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	4413      	add	r3, r2
 8005930:	2200      	movs	r2, #0
 8005932:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8005934:	2301      	movs	r3, #1
}
 8005936:	4618      	mov	r0, r3
 8005938:	3718      	adds	r7, #24
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	0800a9f0 	.word	0x0800a9f0

08005944 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800594c:	2300      	movs	r3, #0
 800594e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005950:	230b      	movs	r3, #11
 8005952:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8005954:	7bfb      	ldrb	r3, [r7, #15]
 8005956:	b2da      	uxtb	r2, r3
 8005958:	0852      	lsrs	r2, r2, #1
 800595a:	01db      	lsls	r3, r3, #7
 800595c:	4313      	orrs	r3, r2
 800595e:	b2da      	uxtb	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	1c59      	adds	r1, r3, #1
 8005964:	6079      	str	r1, [r7, #4]
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	4413      	add	r3, r2
 800596a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	3b01      	subs	r3, #1
 8005970:	60bb      	str	r3, [r7, #8]
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d1ed      	bne.n	8005954 <sum_sfn+0x10>
	return sum;
 8005978:	7bfb      	ldrb	r3, [r7, #15]
}
 800597a:	4618      	mov	r0, r3
 800597c:	3714      	adds	r7, #20
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8005986:	b580      	push	{r7, lr}
 8005988:	b086      	sub	sp, #24
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
 800598e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8005990:	2304      	movs	r3, #4
 8005992:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800599a:	23ff      	movs	r3, #255	; 0xff
 800599c:	757b      	strb	r3, [r7, #21]
 800599e:	23ff      	movs	r3, #255	; 0xff
 80059a0:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 80059a2:	e081      	b.n	8005aa8 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	69db      	ldr	r3, [r3, #28]
 80059a8:	4619      	mov	r1, r3
 80059aa:	6938      	ldr	r0, [r7, #16]
 80059ac:	f7ff faac 	bl	8004f08 <move_window>
 80059b0:	4603      	mov	r3, r0
 80059b2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80059b4:	7dfb      	ldrb	r3, [r7, #23]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d17c      	bne.n	8005ab4 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 80059c2:	7dbb      	ldrb	r3, [r7, #22]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d102      	bne.n	80059ce <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80059c8:	2304      	movs	r3, #4
 80059ca:	75fb      	strb	r3, [r7, #23]
 80059cc:	e077      	b.n	8005abe <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	330b      	adds	r3, #11
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059da:	73fb      	strb	r3, [r7, #15]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	7bfa      	ldrb	r2, [r7, #15]
 80059e0:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 80059e2:	7dbb      	ldrb	r3, [r7, #22]
 80059e4:	2be5      	cmp	r3, #229	; 0xe5
 80059e6:	d00e      	beq.n	8005a06 <dir_read+0x80>
 80059e8:	7dbb      	ldrb	r3, [r7, #22]
 80059ea:	2b2e      	cmp	r3, #46	; 0x2e
 80059ec:	d00b      	beq.n	8005a06 <dir_read+0x80>
 80059ee:	7bfb      	ldrb	r3, [r7, #15]
 80059f0:	f023 0320 	bic.w	r3, r3, #32
 80059f4:	2b08      	cmp	r3, #8
 80059f6:	bf0c      	ite	eq
 80059f8:	2301      	moveq	r3, #1
 80059fa:	2300      	movne	r3, #0
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	461a      	mov	r2, r3
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d002      	beq.n	8005a0c <dir_read+0x86>
				ord = 0xFF;
 8005a06:	23ff      	movs	r3, #255	; 0xff
 8005a08:	757b      	strb	r3, [r7, #21]
 8005a0a:	e044      	b.n	8005a96 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8005a0c:	7bfb      	ldrb	r3, [r7, #15]
 8005a0e:	2b0f      	cmp	r3, #15
 8005a10:	d12f      	bne.n	8005a72 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8005a12:	7dbb      	ldrb	r3, [r7, #22]
 8005a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00d      	beq.n	8005a38 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a1b      	ldr	r3, [r3, #32]
 8005a20:	7b5b      	ldrb	r3, [r3, #13]
 8005a22:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8005a24:	7dbb      	ldrb	r3, [r7, #22]
 8005a26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a2a:	75bb      	strb	r3, [r7, #22]
 8005a2c:	7dbb      	ldrb	r3, [r7, #22]
 8005a2e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	695a      	ldr	r2, [r3, #20]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005a38:	7dba      	ldrb	r2, [r7, #22]
 8005a3a:	7d7b      	ldrb	r3, [r7, #21]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d115      	bne.n	8005a6c <dir_read+0xe6>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a1b      	ldr	r3, [r3, #32]
 8005a44:	330d      	adds	r3, #13
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	7d3a      	ldrb	r2, [r7, #20]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d10e      	bne.n	8005a6c <dir_read+0xe6>
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	691a      	ldr	r2, [r3, #16]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	4619      	mov	r1, r3
 8005a58:	4610      	mov	r0, r2
 8005a5a:	f7ff ff0f 	bl	800587c <pick_lfn>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d003      	beq.n	8005a6c <dir_read+0xe6>
 8005a64:	7d7b      	ldrb	r3, [r7, #21]
 8005a66:	3b01      	subs	r3, #1
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	e000      	b.n	8005a6e <dir_read+0xe8>
 8005a6c:	23ff      	movs	r3, #255	; 0xff
 8005a6e:	757b      	strb	r3, [r7, #21]
 8005a70:	e011      	b.n	8005a96 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8005a72:	7d7b      	ldrb	r3, [r7, #21]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d109      	bne.n	8005a8c <dir_read+0x106>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a1b      	ldr	r3, [r3, #32]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7ff ff61 	bl	8005944 <sum_sfn>
 8005a82:	4603      	mov	r3, r0
 8005a84:	461a      	mov	r2, r3
 8005a86:	7d3b      	ldrb	r3, [r7, #20]
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d015      	beq.n	8005ab8 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8005a92:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 8005a94:	e010      	b.n	8005ab8 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8005a96:	2100      	movs	r1, #0
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f7ff fd89 	bl	80055b0 <dir_next>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005aa2:	7dfb      	ldrb	r3, [r7, #23]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d109      	bne.n	8005abc <dir_read+0x136>
	while (dp->sect) {
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	69db      	ldr	r3, [r3, #28]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	f47f af79 	bne.w	80059a4 <dir_read+0x1e>
 8005ab2:	e004      	b.n	8005abe <dir_read+0x138>
		if (res != FR_OK) break;
 8005ab4:	bf00      	nop
 8005ab6:	e002      	b.n	8005abe <dir_read+0x138>
					break;
 8005ab8:	bf00      	nop
 8005aba:	e000      	b.n	8005abe <dir_read+0x138>
		if (res != FR_OK) break;
 8005abc:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8005abe:	7dfb      	ldrb	r3, [r7, #23]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d002      	beq.n	8005aca <dir_read+0x144>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	61da      	str	r2, [r3, #28]
	return res;
 8005aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3718      	adds	r7, #24
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b086      	sub	sp, #24
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005ae2:	2100      	movs	r1, #0
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f7ff fcda 	bl	800549e <dir_sdi>
 8005aea:	4603      	mov	r3, r0
 8005aec:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005aee:	7dfb      	ldrb	r3, [r7, #23]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d001      	beq.n	8005af8 <dir_find+0x24>
 8005af4:	7dfb      	ldrb	r3, [r7, #23]
 8005af6:	e0a9      	b.n	8005c4c <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005af8:	23ff      	movs	r3, #255	; 0xff
 8005afa:	753b      	strb	r3, [r7, #20]
 8005afc:	7d3b      	ldrb	r3, [r7, #20]
 8005afe:	757b      	strb	r3, [r7, #21]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f04f 32ff 	mov.w	r2, #4294967295
 8005b06:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	69db      	ldr	r3, [r3, #28]
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	6938      	ldr	r0, [r7, #16]
 8005b10:	f7ff f9fa 	bl	8004f08 <move_window>
 8005b14:	4603      	mov	r3, r0
 8005b16:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005b18:	7dfb      	ldrb	r3, [r7, #23]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	f040 8090 	bne.w	8005c40 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a1b      	ldr	r3, [r3, #32]
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005b28:	7dbb      	ldrb	r3, [r7, #22]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d102      	bne.n	8005b34 <dir_find+0x60>
 8005b2e:	2304      	movs	r3, #4
 8005b30:	75fb      	strb	r3, [r7, #23]
 8005b32:	e08a      	b.n	8005c4a <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a1b      	ldr	r3, [r3, #32]
 8005b38:	330b      	adds	r3, #11
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b40:	73fb      	strb	r3, [r7, #15]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	7bfa      	ldrb	r2, [r7, #15]
 8005b46:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005b48:	7dbb      	ldrb	r3, [r7, #22]
 8005b4a:	2be5      	cmp	r3, #229	; 0xe5
 8005b4c:	d007      	beq.n	8005b5e <dir_find+0x8a>
 8005b4e:	7bfb      	ldrb	r3, [r7, #15]
 8005b50:	f003 0308 	and.w	r3, r3, #8
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d009      	beq.n	8005b6c <dir_find+0x98>
 8005b58:	7bfb      	ldrb	r3, [r7, #15]
 8005b5a:	2b0f      	cmp	r3, #15
 8005b5c:	d006      	beq.n	8005b6c <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005b5e:	23ff      	movs	r3, #255	; 0xff
 8005b60:	757b      	strb	r3, [r7, #21]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f04f 32ff 	mov.w	r2, #4294967295
 8005b68:	631a      	str	r2, [r3, #48]	; 0x30
 8005b6a:	e05e      	b.n	8005c2a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005b6c:	7bfb      	ldrb	r3, [r7, #15]
 8005b6e:	2b0f      	cmp	r3, #15
 8005b70:	d136      	bne.n	8005be0 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d154      	bne.n	8005c2a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005b80:	7dbb      	ldrb	r3, [r7, #22]
 8005b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00d      	beq.n	8005ba6 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	7b5b      	ldrb	r3, [r3, #13]
 8005b90:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8005b92:	7dbb      	ldrb	r3, [r7, #22]
 8005b94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b98:	75bb      	strb	r3, [r7, #22]
 8005b9a:	7dbb      	ldrb	r3, [r7, #22]
 8005b9c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	695a      	ldr	r2, [r3, #20]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005ba6:	7dba      	ldrb	r2, [r7, #22]
 8005ba8:	7d7b      	ldrb	r3, [r7, #21]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d115      	bne.n	8005bda <dir_find+0x106>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	330d      	adds	r3, #13
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	7d3a      	ldrb	r2, [r7, #20]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d10e      	bne.n	8005bda <dir_find+0x106>
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	691a      	ldr	r2, [r3, #16]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6a1b      	ldr	r3, [r3, #32]
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	4610      	mov	r0, r2
 8005bc8:	f7ff fde8 	bl	800579c <cmp_lfn>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d003      	beq.n	8005bda <dir_find+0x106>
 8005bd2:	7d7b      	ldrb	r3, [r7, #21]
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	e000      	b.n	8005bdc <dir_find+0x108>
 8005bda:	23ff      	movs	r3, #255	; 0xff
 8005bdc:	757b      	strb	r3, [r7, #21]
 8005bde:	e024      	b.n	8005c2a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005be0:	7d7b      	ldrb	r3, [r7, #21]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d109      	bne.n	8005bfa <dir_find+0x126>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7ff feaa 	bl	8005944 <sum_sfn>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	7d3b      	ldrb	r3, [r7, #20]
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d024      	beq.n	8005c44 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d10a      	bne.n	8005c1e <dir_find+0x14a>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a18      	ldr	r0, [r3, #32]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	3324      	adds	r3, #36	; 0x24
 8005c10:	220b      	movs	r2, #11
 8005c12:	4619      	mov	r1, r3
 8005c14:	f7ff f804 	bl	8004c20 <mem_cmp>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d014      	beq.n	8005c48 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005c1e:	23ff      	movs	r3, #255	; 0xff
 8005c20:	757b      	strb	r3, [r7, #21]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f04f 32ff 	mov.w	r2, #4294967295
 8005c28:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f7ff fcbf 	bl	80055b0 <dir_next>
 8005c32:	4603      	mov	r3, r0
 8005c34:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005c36:	7dfb      	ldrb	r3, [r7, #23]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f43f af65 	beq.w	8005b08 <dir_find+0x34>
 8005c3e:	e004      	b.n	8005c4a <dir_find+0x176>
		if (res != FR_OK) break;
 8005c40:	bf00      	nop
 8005c42:	e002      	b.n	8005c4a <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005c44:	bf00      	nop
 8005c46:	e000      	b.n	8005c4a <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005c48:	bf00      	nop

	return res;
 8005c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3718      	adds	r7, #24
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b088      	sub	sp, #32
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	2200      	movs	r2, #0
 8005c68:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	69db      	ldr	r3, [r3, #28]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f000 80d7 	beq.w	8005e22 <get_fileinfo+0x1ce>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c7c:	d040      	beq.n	8005d00 <get_fileinfo+0xac>
			i = j = 0;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	61bb      	str	r3, [r7, #24]
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8005c86:	e029      	b.n	8005cdc <get_fileinfo+0x88>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8005c88:	89fb      	ldrh	r3, [r7, #14]
 8005c8a:	2100      	movs	r1, #0
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f001 f9d9 	bl	8007044 <ff_convert>
 8005c92:	4603      	mov	r3, r0
 8005c94:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8005c96:	89fb      	ldrh	r3, [r7, #14]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d102      	bne.n	8005ca2 <get_fileinfo+0x4e>
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	61fb      	str	r3, [r7, #28]
 8005ca0:	e028      	b.n	8005cf4 <get_fileinfo+0xa0>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
 8005ca2:	89fb      	ldrh	r3, [r7, #14]
 8005ca4:	2bff      	cmp	r3, #255	; 0xff
 8005ca6:	d90a      	bls.n	8005cbe <get_fileinfo+0x6a>
					fno->fname[i++] = (char)(w >> 8);
 8005ca8:	89fb      	ldrh	r3, [r7, #14]
 8005caa:	0a1b      	lsrs	r3, r3, #8
 8005cac:	b299      	uxth	r1, r3
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	1c5a      	adds	r2, r3, #1
 8005cb2:	61fa      	str	r2, [r7, #28]
 8005cb4:	b2c9      	uxtb	r1, r1
 8005cb6:	683a      	ldr	r2, [r7, #0]
 8005cb8:	4413      	add	r3, r2
 8005cba:	460a      	mov	r2, r1
 8005cbc:	759a      	strb	r2, [r3, #22]
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	2bfe      	cmp	r3, #254	; 0xfe
 8005cc2:	d902      	bls.n	8005cca <get_fileinfo+0x76>
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	61fb      	str	r3, [r7, #28]
 8005cc8:	e014      	b.n	8005cf4 <get_fileinfo+0xa0>
				fno->fname[i++] = (TCHAR)w;
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	1c5a      	adds	r2, r3, #1
 8005cce:	61fa      	str	r2, [r7, #28]
 8005cd0:	89fa      	ldrh	r2, [r7, #14]
 8005cd2:	b2d1      	uxtb	r1, r2
 8005cd4:	683a      	ldr	r2, [r7, #0]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	460a      	mov	r2, r1
 8005cda:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	691a      	ldr	r2, [r3, #16]
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	1c59      	adds	r1, r3, #1
 8005ce4:	61b9      	str	r1, [r7, #24]
 8005ce6:	005b      	lsls	r3, r3, #1
 8005ce8:	4413      	add	r3, r2
 8005cea:	881b      	ldrh	r3, [r3, #0]
 8005cec:	81fb      	strh	r3, [r7, #14]
 8005cee:	89fb      	ldrh	r3, [r7, #14]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1c9      	bne.n	8005c88 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8005cf4:	683a      	ldr	r2, [r7, #0]
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	3316      	adds	r3, #22
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8005d00:	2300      	movs	r3, #0
 8005d02:	61bb      	str	r3, [r7, #24]
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8005d08:	683a      	ldr	r2, [r7, #0]
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	3316      	adds	r3, #22
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8005d14:	e04c      	b.n	8005db0 <get_fileinfo+0x15c>
		c = (TCHAR)dp->dir[i++];
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a1a      	ldr	r2, [r3, #32]
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	1c59      	adds	r1, r3, #1
 8005d1e:	61f9      	str	r1, [r7, #28]
 8005d20:	4413      	add	r3, r2
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8005d26:	7dfb      	ldrb	r3, [r7, #23]
 8005d28:	2b20      	cmp	r3, #32
 8005d2a:	d100      	bne.n	8005d2e <get_fileinfo+0xda>
 8005d2c:	e040      	b.n	8005db0 <get_fileinfo+0x15c>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8005d2e:	7dfb      	ldrb	r3, [r7, #23]
 8005d30:	2b05      	cmp	r3, #5
 8005d32:	d101      	bne.n	8005d38 <get_fileinfo+0xe4>
 8005d34:	23e5      	movs	r3, #229	; 0xe5
 8005d36:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	2b09      	cmp	r3, #9
 8005d3c:	d10f      	bne.n	8005d5e <get_fileinfo+0x10a>
			if (!lfv) fno->fname[j] = '.';
 8005d3e:	89bb      	ldrh	r3, [r7, #12]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d105      	bne.n	8005d50 <get_fileinfo+0xfc>
 8005d44:	683a      	ldr	r2, [r7, #0]
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	4413      	add	r3, r2
 8005d4a:	3316      	adds	r3, #22
 8005d4c:	222e      	movs	r2, #46	; 0x2e
 8005d4e:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	1c5a      	adds	r2, r3, #1
 8005d54:	61ba      	str	r2, [r7, #24]
 8005d56:	683a      	ldr	r2, [r7, #0]
 8005d58:	4413      	add	r3, r2
 8005d5a:	222e      	movs	r2, #46	; 0x2e
 8005d5c:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8005d5e:	683a      	ldr	r2, [r7, #0]
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	4413      	add	r3, r2
 8005d64:	3309      	adds	r3, #9
 8005d66:	7dfa      	ldrb	r2, [r7, #23]
 8005d68:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8005d6a:	89bb      	ldrh	r3, [r7, #12]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d11c      	bne.n	8005daa <get_fileinfo+0x156>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8005d70:	7dfb      	ldrb	r3, [r7, #23]
 8005d72:	2b40      	cmp	r3, #64	; 0x40
 8005d74:	d913      	bls.n	8005d9e <get_fileinfo+0x14a>
 8005d76:	7dfb      	ldrb	r3, [r7, #23]
 8005d78:	2b5a      	cmp	r3, #90	; 0x5a
 8005d7a:	d810      	bhi.n	8005d9e <get_fileinfo+0x14a>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a1b      	ldr	r3, [r3, #32]
 8005d80:	330c      	adds	r3, #12
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	461a      	mov	r2, r3
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	2b08      	cmp	r3, #8
 8005d8a:	d901      	bls.n	8005d90 <get_fileinfo+0x13c>
 8005d8c:	2310      	movs	r3, #16
 8005d8e:	e000      	b.n	8005d92 <get_fileinfo+0x13e>
 8005d90:	2308      	movs	r3, #8
 8005d92:	4013      	ands	r3, r2
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d002      	beq.n	8005d9e <get_fileinfo+0x14a>
				c += 0x20;			/* To lower */
 8005d98:	7dfb      	ldrb	r3, [r7, #23]
 8005d9a:	3320      	adds	r3, #32
 8005d9c:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8005d9e:	683a      	ldr	r2, [r7, #0]
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	4413      	add	r3, r2
 8005da4:	3316      	adds	r3, #22
 8005da6:	7dfa      	ldrb	r2, [r7, #23]
 8005da8:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	3301      	adds	r3, #1
 8005dae:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	2b0a      	cmp	r3, #10
 8005db4:	d9af      	bls.n	8005d16 <get_fileinfo+0xc2>
	}
	if (!lfv) {
 8005db6:	89bb      	ldrh	r3, [r7, #12]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10d      	bne.n	8005dd8 <get_fileinfo+0x184>
		fno->fname[j] = 0;
 8005dbc:	683a      	ldr	r2, [r7, #0]
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	3316      	adds	r3, #22
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a1b      	ldr	r3, [r3, #32]
 8005dcc:	330c      	adds	r3, #12
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d101      	bne.n	8005dd8 <get_fileinfo+0x184>
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8005dd8:	683a      	ldr	r2, [r7, #0]
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	4413      	add	r3, r2
 8005dde:	3309      	adds	r3, #9
 8005de0:	2200      	movs	r2, #0
 8005de2:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a1b      	ldr	r3, [r3, #32]
 8005de8:	7ada      	ldrb	r2, [r3, #11]
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	331c      	adds	r3, #28
 8005df4:	4618      	mov	r0, r3
 8005df6:	f7fe fe8f 	bl	8004b18 <ld_dword>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a1b      	ldr	r3, [r3, #32]
 8005e04:	3316      	adds	r3, #22
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7fe fe86 	bl	8004b18 <ld_dword>
 8005e0c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	80da      	strh	r2, [r3, #6]
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	0c1b      	lsrs	r3, r3, #16
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	809a      	strh	r2, [r3, #4]
 8005e20:	e000      	b.n	8005e24 <get_fileinfo+0x1d0>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8005e22:	bf00      	nop
}
 8005e24:	3720      	adds	r7, #32
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b085      	sub	sp, #20
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	1c59      	adds	r1, r3, #1
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	6011      	str	r1, [r2, #0]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8005e40:	89fb      	ldrh	r3, [r7, #14]
 8005e42:	2b60      	cmp	r3, #96	; 0x60
 8005e44:	d905      	bls.n	8005e52 <get_achar+0x28>
 8005e46:	89fb      	ldrh	r3, [r7, #14]
 8005e48:	2b7a      	cmp	r3, #122	; 0x7a
 8005e4a:	d802      	bhi.n	8005e52 <get_achar+0x28>
 8005e4c:	89fb      	ldrh	r3, [r7, #14]
 8005e4e:	3b20      	subs	r3, #32
 8005e50:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
 8005e52:	89fb      	ldrh	r3, [r7, #14]
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b80      	cmp	r3, #128	; 0x80
 8005e58:	d92e      	bls.n	8005eb8 <get_achar+0x8e>
 8005e5a:	89fb      	ldrh	r3, [r7, #14]
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2bff      	cmp	r3, #255	; 0xff
 8005e60:	d02a      	beq.n	8005eb8 <get_achar+0x8e>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	2b40      	cmp	r3, #64	; 0x40
 8005e6a:	d904      	bls.n	8005e76 <get_achar+0x4c>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	2b5a      	cmp	r3, #90	; 0x5a
 8005e74:	d913      	bls.n	8005e9e <get_achar+0x74>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	2b60      	cmp	r3, #96	; 0x60
 8005e7e:	d904      	bls.n	8005e8a <get_achar+0x60>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	2b7a      	cmp	r3, #122	; 0x7a
 8005e88:	d909      	bls.n	8005e9e <get_achar+0x74>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	2b80      	cmp	r3, #128	; 0x80
 8005e92:	d911      	bls.n	8005eb8 <get_achar+0x8e>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	2bff      	cmp	r3, #255	; 0xff
 8005e9c:	d00c      	beq.n	8005eb8 <get_achar+0x8e>
		chr = chr << 8 | (BYTE)*(*ptr)++;
 8005e9e:	89fb      	ldrh	r3, [r7, #14]
 8005ea0:	021b      	lsls	r3, r3, #8
 8005ea2:	b21a      	sxth	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	1c58      	adds	r0, r3, #1
 8005eaa:	6879      	ldr	r1, [r7, #4]
 8005eac:	6008      	str	r0, [r1, #0]
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	b21b      	sxth	r3, r3
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	b21b      	sxth	r3, r3
 8005eb6:	81fb      	strh	r3, [r7, #14]
	}
#endif
	return chr;
 8005eb8:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3714      	adds	r7, #20
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b08a      	sub	sp, #40	; 0x28
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	60f8      	str	r0, [r7, #12]
 8005ece:	60b9      	str	r1, [r7, #8]
 8005ed0:	607a      	str	r2, [r7, #4]
 8005ed2:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 8005ed4:	e009      	b.n	8005eea <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 8005ed6:	f107 0308 	add.w	r3, r7, #8
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7ff ffa5 	bl	8005e2a <get_achar>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d101      	bne.n	8005eea <pattern_matching+0x24>
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	e064      	b.n	8005fb4 <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	1e5a      	subs	r2, r3, #1
 8005eee:	607a      	str	r2, [r7, #4]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1f0      	bne.n	8005ed6 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d104      	bne.n	8005f06 <pattern_matching+0x40>
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <pattern_matching+0x40>
 8005f02:	2301      	movs	r3, #1
 8005f04:	e056      	b.n	8005fb4 <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	617b      	str	r3, [r7, #20]
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	2b3f      	cmp	r3, #63	; 0x3f
 8005f14:	d003      	beq.n	8005f1e <pattern_matching+0x58>
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	2b2a      	cmp	r3, #42	; 0x2a
 8005f1c:	d126      	bne.n	8005f6c <pattern_matching+0xa6>
				nm = nx = 0;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	61fb      	str	r3, [r7, #28]
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	1c5a      	adds	r2, r3, #1
 8005f2a:	617a      	str	r2, [r7, #20]
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	2b3f      	cmp	r3, #63	; 0x3f
 8005f30:	d103      	bne.n	8005f3a <pattern_matching+0x74>
 8005f32:	6a3b      	ldr	r3, [r7, #32]
 8005f34:	3301      	adds	r3, #1
 8005f36:	623b      	str	r3, [r7, #32]
 8005f38:	e001      	b.n	8005f3e <pattern_matching+0x78>
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	2b3f      	cmp	r3, #63	; 0x3f
 8005f44:	d0ef      	beq.n	8005f26 <pattern_matching+0x60>
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	2b2a      	cmp	r3, #42	; 0x2a
 8005f4c:	d0eb      	beq.n	8005f26 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 8005f4e:	6978      	ldr	r0, [r7, #20]
 8005f50:	6939      	ldr	r1, [r7, #16]
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	6a3a      	ldr	r2, [r7, #32]
 8005f56:	f7ff ffb6 	bl	8005ec6 <pattern_matching>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d001      	beq.n	8005f64 <pattern_matching+0x9e>
 8005f60:	2301      	movs	r3, #1
 8005f62:	e027      	b.n	8005fb4 <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005f6a:	e017      	b.n	8005f9c <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 8005f6c:	f107 0314 	add.w	r3, r7, #20
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7ff ff5a 	bl	8005e2a <get_achar>
 8005f76:	4603      	mov	r3, r0
 8005f78:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 8005f7a:	f107 0310 	add.w	r3, r7, #16
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7ff ff53 	bl	8005e2a <get_achar>
 8005f84:	4603      	mov	r3, r0
 8005f86:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 8005f88:	8b7a      	ldrh	r2, [r7, #26]
 8005f8a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d104      	bne.n	8005f9a <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 8005f90:	8b7b      	ldrh	r3, [r7, #26]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1bb      	bne.n	8005f0e <pattern_matching+0x48>
 8005f96:	2301      	movs	r3, #1
 8005f98:	e00c      	b.n	8005fb4 <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 8005f9a:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 8005f9c:	f107 0308 	add.w	r3, r7, #8
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f7ff ff42 	bl	8005e2a <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d002      	beq.n	8005fb2 <pattern_matching+0xec>
 8005fac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1a9      	bne.n	8005f06 <pattern_matching+0x40>

	return 0;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3728      	adds	r7, #40	; 0x28
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b08a      	sub	sp, #40	; 0x28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	613b      	str	r3, [r7, #16]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	60fb      	str	r3, [r7, #12]
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	617b      	str	r3, [r7, #20]
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	1c5a      	adds	r2, r3, #1
 8005fe0:	61ba      	str	r2, [r7, #24]
 8005fe2:	693a      	ldr	r2, [r7, #16]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8005fea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005fec:	2b1f      	cmp	r3, #31
 8005fee:	d972      	bls.n	80060d6 <create_name+0x11a>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8005ff0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ff2:	2b2f      	cmp	r3, #47	; 0x2f
 8005ff4:	d006      	beq.n	8006004 <create_name+0x48>
 8005ff6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ff8:	2b5c      	cmp	r3, #92	; 0x5c
 8005ffa:	d110      	bne.n	800601e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005ffc:	e002      	b.n	8006004 <create_name+0x48>
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	3301      	adds	r3, #1
 8006002:	61bb      	str	r3, [r7, #24]
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	4413      	add	r3, r2
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	2b2f      	cmp	r3, #47	; 0x2f
 800600e:	d0f6      	beq.n	8005ffe <create_name+0x42>
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	4413      	add	r3, r2
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	2b5c      	cmp	r3, #92	; 0x5c
 800601a:	d0f0      	beq.n	8005ffe <create_name+0x42>
			break;
 800601c:	e05c      	b.n	80060d8 <create_name+0x11c>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	2bfe      	cmp	r3, #254	; 0xfe
 8006022:	d901      	bls.n	8006028 <create_name+0x6c>
 8006024:	2306      	movs	r3, #6
 8006026:	e1c7      	b.n	80063b8 <create_name+0x3fc>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006028:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800602a:	b2db      	uxtb	r3, r3
 800602c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
 800602e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b80      	cmp	r3, #128	; 0x80
 8006034:	d92d      	bls.n	8006092 <create_name+0xd6>
 8006036:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2bff      	cmp	r3, #255	; 0xff
 800603c:	d029      	beq.n	8006092 <create_name+0xd6>
			b = (BYTE)p[si++];			/* Get 2nd byte */
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	1c5a      	adds	r2, r3, #1
 8006042:	61ba      	str	r2, [r7, #24]
 8006044:	693a      	ldr	r2, [r7, #16]
 8006046:	4413      	add	r3, r2
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			w = (w << 8) + b;			/* Create a DBC */
 800604e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006050:	021b      	lsls	r3, r3, #8
 8006052:	b29a      	uxth	r2, r3
 8006054:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006058:	b29b      	uxth	r3, r3
 800605a:	4413      	add	r3, r2
 800605c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
 800605e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006062:	2b40      	cmp	r3, #64	; 0x40
 8006064:	d903      	bls.n	800606e <create_name+0xb2>
 8006066:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800606a:	2b5a      	cmp	r3, #90	; 0x5a
 800606c:	d911      	bls.n	8006092 <create_name+0xd6>
 800606e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006072:	2b60      	cmp	r3, #96	; 0x60
 8006074:	d903      	bls.n	800607e <create_name+0xc2>
 8006076:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800607a:	2b7a      	cmp	r3, #122	; 0x7a
 800607c:	d909      	bls.n	8006092 <create_name+0xd6>
 800607e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006082:	2b80      	cmp	r3, #128	; 0x80
 8006084:	d903      	bls.n	800608e <create_name+0xd2>
 8006086:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800608a:	2bff      	cmp	r3, #255	; 0xff
 800608c:	d101      	bne.n	8006092 <create_name+0xd6>
 800608e:	2306      	movs	r3, #6
 8006090:	e192      	b.n	80063b8 <create_name+0x3fc>
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006092:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006094:	2101      	movs	r1, #1
 8006096:	4618      	mov	r0, r3
 8006098:	f000 ffd4 	bl	8007044 <ff_convert>
 800609c:	4603      	mov	r3, r0
 800609e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80060a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d101      	bne.n	80060aa <create_name+0xee>
 80060a6:	2306      	movs	r3, #6
 80060a8:	e186      	b.n	80063b8 <create_name+0x3fc>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80060aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060ac:	2b7f      	cmp	r3, #127	; 0x7f
 80060ae:	d809      	bhi.n	80060c4 <create_name+0x108>
 80060b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060b2:	4619      	mov	r1, r3
 80060b4:	489a      	ldr	r0, [pc, #616]	; (8006320 <create_name+0x364>)
 80060b6:	f7fe fdda 	bl	8004c6e <chk_chr>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d001      	beq.n	80060c4 <create_name+0x108>
 80060c0:	2306      	movs	r3, #6
 80060c2:	e179      	b.n	80063b8 <create_name+0x3fc>
		lfn[di++] = w;					/* Store the Unicode character */
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	1c5a      	adds	r2, r3, #1
 80060c8:	617a      	str	r2, [r7, #20]
 80060ca:	005b      	lsls	r3, r3, #1
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	4413      	add	r3, r2
 80060d0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80060d2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80060d4:	e782      	b.n	8005fdc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80060d6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	441a      	add	r2, r3
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80060e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060e4:	2b1f      	cmp	r3, #31
 80060e6:	d801      	bhi.n	80060ec <create_name+0x130>
 80060e8:	2304      	movs	r3, #4
 80060ea:	e000      	b.n	80060ee <create_name+0x132>
 80060ec:	2300      	movs	r3, #0
 80060ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80060f2:	e011      	b.n	8006118 <create_name+0x15c>
		w = lfn[di - 1];
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80060fa:	3b01      	subs	r3, #1
 80060fc:	005b      	lsls	r3, r3, #1
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	4413      	add	r3, r2
 8006102:	881b      	ldrh	r3, [r3, #0]
 8006104:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8006106:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006108:	2b20      	cmp	r3, #32
 800610a:	d002      	beq.n	8006112 <create_name+0x156>
 800610c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800610e:	2b2e      	cmp	r3, #46	; 0x2e
 8006110:	d106      	bne.n	8006120 <create_name+0x164>
		di--;
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	3b01      	subs	r3, #1
 8006116:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1ea      	bne.n	80060f4 <create_name+0x138>
 800611e:	e000      	b.n	8006122 <create_name+0x166>
		if (w != ' ' && w != '.') break;
 8006120:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	005b      	lsls	r3, r3, #1
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	4413      	add	r3, r2
 800612a:	2200      	movs	r2, #0
 800612c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d101      	bne.n	8006138 <create_name+0x17c>
 8006134:	2306      	movs	r3, #6
 8006136:	e13f      	b.n	80063b8 <create_name+0x3fc>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	3324      	adds	r3, #36	; 0x24
 800613c:	220b      	movs	r2, #11
 800613e:	2120      	movs	r1, #32
 8006140:	4618      	mov	r0, r3
 8006142:	f7fe fd53 	bl	8004bec <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006146:	2300      	movs	r3, #0
 8006148:	61bb      	str	r3, [r7, #24]
 800614a:	e002      	b.n	8006152 <create_name+0x196>
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	3301      	adds	r3, #1
 8006150:	61bb      	str	r3, [r7, #24]
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	005b      	lsls	r3, r3, #1
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	4413      	add	r3, r2
 800615a:	881b      	ldrh	r3, [r3, #0]
 800615c:	2b20      	cmp	r3, #32
 800615e:	d0f5      	beq.n	800614c <create_name+0x190>
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	005b      	lsls	r3, r3, #1
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	4413      	add	r3, r2
 8006168:	881b      	ldrh	r3, [r3, #0]
 800616a:	2b2e      	cmp	r3, #46	; 0x2e
 800616c:	d0ee      	beq.n	800614c <create_name+0x190>
	if (si) cf |= NS_LOSS | NS_LFN;
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d009      	beq.n	8006188 <create_name+0x1cc>
 8006174:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006178:	f043 0303 	orr.w	r3, r3, #3
 800617c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006180:	e002      	b.n	8006188 <create_name+0x1cc>
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	3b01      	subs	r3, #1
 8006186:	617b      	str	r3, [r7, #20]
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d009      	beq.n	80061a2 <create_name+0x1e6>
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006194:	3b01      	subs	r3, #1
 8006196:	005b      	lsls	r3, r3, #1
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	4413      	add	r3, r2
 800619c:	881b      	ldrh	r3, [r3, #0]
 800619e:	2b2e      	cmp	r3, #46	; 0x2e
 80061a0:	d1ef      	bne.n	8006182 <create_name+0x1c6>

	i = b = 0; ni = 8;
 80061a2:	2300      	movs	r3, #0
 80061a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80061a8:	2300      	movs	r3, #0
 80061aa:	623b      	str	r3, [r7, #32]
 80061ac:	2308      	movs	r3, #8
 80061ae:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	1c5a      	adds	r2, r3, #1
 80061b4:	61ba      	str	r2, [r7, #24]
 80061b6:	005b      	lsls	r3, r3, #1
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	4413      	add	r3, r2
 80061bc:	881b      	ldrh	r3, [r3, #0]
 80061be:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80061c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f000 80aa 	beq.w	800631c <create_name+0x360>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80061c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061ca:	2b20      	cmp	r3, #32
 80061cc:	d006      	beq.n	80061dc <create_name+0x220>
 80061ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061d0:	2b2e      	cmp	r3, #46	; 0x2e
 80061d2:	d10a      	bne.n	80061ea <create_name+0x22e>
 80061d4:	69ba      	ldr	r2, [r7, #24]
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d006      	beq.n	80061ea <create_name+0x22e>
			cf |= NS_LOSS | NS_LFN; continue;
 80061dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80061e0:	f043 0303 	orr.w	r3, r3, #3
 80061e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80061e8:	e097      	b.n	800631a <create_name+0x35e>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80061ea:	6a3a      	ldr	r2, [r7, #32]
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d203      	bcs.n	80061fa <create_name+0x23e>
 80061f2:	69ba      	ldr	r2, [r7, #24]
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d123      	bne.n	8006242 <create_name+0x286>
			if (ni == 11) {				/* Long extension */
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	2b0b      	cmp	r3, #11
 80061fe:	d106      	bne.n	800620e <create_name+0x252>
				cf |= NS_LOSS | NS_LFN; break;
 8006200:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006204:	f043 0303 	orr.w	r3, r3, #3
 8006208:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800620c:	e08d      	b.n	800632a <create_name+0x36e>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800620e:	69ba      	ldr	r2, [r7, #24]
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	429a      	cmp	r2, r3
 8006214:	d005      	beq.n	8006222 <create_name+0x266>
 8006216:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800621a:	f043 0303 	orr.w	r3, r3, #3
 800621e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
 8006222:	69ba      	ldr	r2, [r7, #24]
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	429a      	cmp	r2, r3
 8006228:	d87e      	bhi.n	8006328 <create_name+0x36c>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	61bb      	str	r3, [r7, #24]
 800622e:	2308      	movs	r3, #8
 8006230:	623b      	str	r3, [r7, #32]
 8006232:	230b      	movs	r3, #11
 8006234:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006236:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006240:	e06b      	b.n	800631a <create_name+0x35e>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8006242:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006244:	2b7f      	cmp	r3, #127	; 0x7f
 8006246:	d910      	bls.n	800626a <create_name+0x2ae>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
 8006248:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800624a:	4618      	mov	r0, r3
 800624c:	f000 ff5a 	bl	8007104 <ff_wtoupper>
 8006250:	4603      	mov	r3, r0
 8006252:	2100      	movs	r1, #0
 8006254:	4618      	mov	r0, r3
 8006256:	f000 fef5 	bl	8007044 <ff_convert>
 800625a:	4603      	mov	r3, r0
 800625c:	84bb      	strh	r3, [r7, #36]	; 0x24
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800625e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006262:	f043 0302 	orr.w	r3, r3, #2
 8006266:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		}

		if (_DF1S && w >= 0x100) {		/* Is this DBC? (always false at SBCS cfg) */
 800626a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800626c:	2bff      	cmp	r3, #255	; 0xff
 800626e:	d91a      	bls.n	80062a6 <create_name+0x2ea>
			if (i >= ni - 1) {
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	3b01      	subs	r3, #1
 8006274:	6a3a      	ldr	r2, [r7, #32]
 8006276:	429a      	cmp	r2, r3
 8006278:	d308      	bcc.n	800628c <create_name+0x2d0>
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
 800627a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800627e:	f043 0303 	orr.w	r3, r3, #3
 8006282:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	623b      	str	r3, [r7, #32]
 800628a:	e046      	b.n	800631a <create_name+0x35e>
			}
			dp->fn[i++] = (BYTE)(w >> 8);
 800628c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800628e:	0a1b      	lsrs	r3, r3, #8
 8006290:	b299      	uxth	r1, r3
 8006292:	6a3b      	ldr	r3, [r7, #32]
 8006294:	1c5a      	adds	r2, r3, #1
 8006296:	623a      	str	r2, [r7, #32]
 8006298:	b2c9      	uxtb	r1, r1
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	4413      	add	r3, r2
 800629e:	460a      	mov	r2, r1
 80062a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80062a4:	e02f      	b.n	8006306 <create_name+0x34a>
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80062a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d007      	beq.n	80062bc <create_name+0x300>
 80062ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062ae:	4619      	mov	r1, r3
 80062b0:	481c      	ldr	r0, [pc, #112]	; (8006324 <create_name+0x368>)
 80062b2:	f7fe fcdc 	bl	8004c6e <chk_chr>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d008      	beq.n	80062ce <create_name+0x312>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80062bc:	235f      	movs	r3, #95	; 0x5f
 80062be:	84bb      	strh	r3, [r7, #36]	; 0x24
 80062c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80062c4:	f043 0303 	orr.w	r3, r3, #3
 80062c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80062cc:	e01b      	b.n	8006306 <create_name+0x34a>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80062ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062d0:	2b40      	cmp	r3, #64	; 0x40
 80062d2:	d909      	bls.n	80062e8 <create_name+0x32c>
 80062d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062d6:	2b5a      	cmp	r3, #90	; 0x5a
 80062d8:	d806      	bhi.n	80062e8 <create_name+0x32c>
					b |= 2;
 80062da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062de:	f043 0302 	orr.w	r3, r3, #2
 80062e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80062e6:	e00e      	b.n	8006306 <create_name+0x34a>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80062e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062ea:	2b60      	cmp	r3, #96	; 0x60
 80062ec:	d90b      	bls.n	8006306 <create_name+0x34a>
 80062ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062f0:	2b7a      	cmp	r3, #122	; 0x7a
 80062f2:	d808      	bhi.n	8006306 <create_name+0x34a>
						b |= 1; w -= 0x20;
 80062f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062f8:	f043 0301 	orr.w	r3, r3, #1
 80062fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006300:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006302:	3b20      	subs	r3, #32
 8006304:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006306:	6a3b      	ldr	r3, [r7, #32]
 8006308:	1c5a      	adds	r2, r3, #1
 800630a:	623a      	str	r2, [r7, #32]
 800630c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800630e:	b2d1      	uxtb	r1, r2
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	4413      	add	r3, r2
 8006314:	460a      	mov	r2, r1
 8006316:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800631a:	e749      	b.n	80061b0 <create_name+0x1f4>
		if (!w) break;					/* Break on end of the LFN */
 800631c:	bf00      	nop
 800631e:	e004      	b.n	800632a <create_name+0x36e>
 8006320:	0800a600 	.word	0x0800a600
 8006324:	0800a60c 	.word	0x0800a60c
			if (si > di) break;			/* No extension */
 8006328:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006330:	2be5      	cmp	r3, #229	; 0xe5
 8006332:	d103      	bne.n	800633c <create_name+0x380>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2205      	movs	r2, #5
 8006338:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	2b08      	cmp	r3, #8
 8006340:	d104      	bne.n	800634c <create_name+0x390>
 8006342:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800634c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006350:	f003 030c 	and.w	r3, r3, #12
 8006354:	2b0c      	cmp	r3, #12
 8006356:	d005      	beq.n	8006364 <create_name+0x3a8>
 8006358:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800635c:	f003 0303 	and.w	r3, r3, #3
 8006360:	2b03      	cmp	r3, #3
 8006362:	d105      	bne.n	8006370 <create_name+0x3b4>
 8006364:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006368:	f043 0302 	orr.w	r3, r3, #2
 800636c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006370:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006374:	f003 0302 	and.w	r3, r3, #2
 8006378:	2b00      	cmp	r3, #0
 800637a:	d117      	bne.n	80063ac <create_name+0x3f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800637c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006380:	f003 0303 	and.w	r3, r3, #3
 8006384:	2b01      	cmp	r3, #1
 8006386:	d105      	bne.n	8006394 <create_name+0x3d8>
 8006388:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800638c:	f043 0310 	orr.w	r3, r3, #16
 8006390:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006394:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006398:	f003 030c 	and.w	r3, r3, #12
 800639c:	2b04      	cmp	r3, #4
 800639e:	d105      	bne.n	80063ac <create_name+0x3f0>
 80063a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80063a4:	f043 0308 	orr.w	r3, r3, #8
 80063a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80063b2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80063b6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3728      	adds	r7, #40	; 0x28
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b086      	sub	sp, #24
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80063d4:	e002      	b.n	80063dc <follow_path+0x1c>
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	3301      	adds	r3, #1
 80063da:	603b      	str	r3, [r7, #0]
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	2b2f      	cmp	r3, #47	; 0x2f
 80063e2:	d0f8      	beq.n	80063d6 <follow_path+0x16>
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	2b5c      	cmp	r3, #92	; 0x5c
 80063ea:	d0f4      	beq.n	80063d6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	2200      	movs	r2, #0
 80063f0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	2b1f      	cmp	r3, #31
 80063f8:	d80a      	bhi.n	8006410 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2280      	movs	r2, #128	; 0x80
 80063fe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006402:	2100      	movs	r1, #0
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f7ff f84a 	bl	800549e <dir_sdi>
 800640a:	4603      	mov	r3, r0
 800640c:	75fb      	strb	r3, [r7, #23]
 800640e:	e048      	b.n	80064a2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006410:	463b      	mov	r3, r7
 8006412:	4619      	mov	r1, r3
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f7ff fdd1 	bl	8005fbc <create_name>
 800641a:	4603      	mov	r3, r0
 800641c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800641e:	7dfb      	ldrb	r3, [r7, #23]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d139      	bne.n	8006498 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f7ff fb55 	bl	8005ad4 <dir_find>
 800642a:	4603      	mov	r3, r0
 800642c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006434:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006436:	7dfb      	ldrb	r3, [r7, #23]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00a      	beq.n	8006452 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800643c:	7dfb      	ldrb	r3, [r7, #23]
 800643e:	2b04      	cmp	r3, #4
 8006440:	d12c      	bne.n	800649c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006442:	7afb      	ldrb	r3, [r7, #11]
 8006444:	f003 0304 	and.w	r3, r3, #4
 8006448:	2b00      	cmp	r3, #0
 800644a:	d127      	bne.n	800649c <follow_path+0xdc>
 800644c:	2305      	movs	r3, #5
 800644e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006450:	e024      	b.n	800649c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006452:	7afb      	ldrb	r3, [r7, #11]
 8006454:	f003 0304 	and.w	r3, r3, #4
 8006458:	2b00      	cmp	r3, #0
 800645a:	d121      	bne.n	80064a0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	799b      	ldrb	r3, [r3, #6]
 8006460:	f003 0310 	and.w	r3, r3, #16
 8006464:	2b00      	cmp	r3, #0
 8006466:	d102      	bne.n	800646e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006468:	2305      	movs	r3, #5
 800646a:	75fb      	strb	r3, [r7, #23]
 800646c:	e019      	b.n	80064a2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	695b      	ldr	r3, [r3, #20]
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	8992      	ldrh	r2, [r2, #12]
 800647c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006480:	fb02 f200 	mul.w	r2, r2, r0
 8006484:	1a9b      	subs	r3, r3, r2
 8006486:	440b      	add	r3, r1
 8006488:	4619      	mov	r1, r3
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f7ff f966 	bl	800575c <ld_clust>
 8006490:	4602      	mov	r2, r0
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006496:	e7bb      	b.n	8006410 <follow_path+0x50>
			if (res != FR_OK) break;
 8006498:	bf00      	nop
 800649a:	e002      	b.n	80064a2 <follow_path+0xe2>
				break;
 800649c:	bf00      	nop
 800649e:	e000      	b.n	80064a2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80064a0:	bf00      	nop
			}
		}
	}

	return res;
 80064a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3718      	adds	r7, #24
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b087      	sub	sp, #28
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80064b4:	f04f 33ff 	mov.w	r3, #4294967295
 80064b8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d031      	beq.n	8006526 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	617b      	str	r3, [r7, #20]
 80064c8:	e002      	b.n	80064d0 <get_ldnumber+0x24>
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	3301      	adds	r3, #1
 80064ce:	617b      	str	r3, [r7, #20]
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	2b1f      	cmp	r3, #31
 80064d6:	d903      	bls.n	80064e0 <get_ldnumber+0x34>
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	2b3a      	cmp	r3, #58	; 0x3a
 80064de:	d1f4      	bne.n	80064ca <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	2b3a      	cmp	r3, #58	; 0x3a
 80064e6:	d11c      	bne.n	8006522 <get_ldnumber+0x76>
			tp = *path;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	1c5a      	adds	r2, r3, #1
 80064f2:	60fa      	str	r2, [r7, #12]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	3b30      	subs	r3, #48	; 0x30
 80064f8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	2b09      	cmp	r3, #9
 80064fe:	d80e      	bhi.n	800651e <get_ldnumber+0x72>
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	429a      	cmp	r2, r3
 8006506:	d10a      	bne.n	800651e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d107      	bne.n	800651e <get_ldnumber+0x72>
					vol = (int)i;
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	3301      	adds	r3, #1
 8006516:	617b      	str	r3, [r7, #20]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	e002      	b.n	8006528 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006522:	2300      	movs	r3, #0
 8006524:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006526:	693b      	ldr	r3, [r7, #16]
}
 8006528:	4618      	mov	r0, r3
 800652a:	371c      	adds	r7, #28
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	70da      	strb	r2, [r3, #3]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f04f 32ff 	mov.w	r2, #4294967295
 800654a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800654c:	6839      	ldr	r1, [r7, #0]
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f7fe fcda 	bl	8004f08 <move_window>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d001      	beq.n	800655e <check_fs+0x2a>
 800655a:	2304      	movs	r3, #4
 800655c:	e038      	b.n	80065d0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	3338      	adds	r3, #56	; 0x38
 8006562:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006566:	4618      	mov	r0, r3
 8006568:	f7fe fabe 	bl	8004ae8 <ld_word>
 800656c:	4603      	mov	r3, r0
 800656e:	461a      	mov	r2, r3
 8006570:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006574:	429a      	cmp	r2, r3
 8006576:	d001      	beq.n	800657c <check_fs+0x48>
 8006578:	2303      	movs	r3, #3
 800657a:	e029      	b.n	80065d0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006582:	2be9      	cmp	r3, #233	; 0xe9
 8006584:	d009      	beq.n	800659a <check_fs+0x66>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800658c:	2beb      	cmp	r3, #235	; 0xeb
 800658e:	d11e      	bne.n	80065ce <check_fs+0x9a>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006596:	2b90      	cmp	r3, #144	; 0x90
 8006598:	d119      	bne.n	80065ce <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	3338      	adds	r3, #56	; 0x38
 800659e:	3336      	adds	r3, #54	; 0x36
 80065a0:	4618      	mov	r0, r3
 80065a2:	f7fe fab9 	bl	8004b18 <ld_dword>
 80065a6:	4603      	mov	r3, r0
 80065a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80065ac:	4a0a      	ldr	r2, [pc, #40]	; (80065d8 <check_fs+0xa4>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d101      	bne.n	80065b6 <check_fs+0x82>
 80065b2:	2300      	movs	r3, #0
 80065b4:	e00c      	b.n	80065d0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	3338      	adds	r3, #56	; 0x38
 80065ba:	3352      	adds	r3, #82	; 0x52
 80065bc:	4618      	mov	r0, r3
 80065be:	f7fe faab 	bl	8004b18 <ld_dword>
 80065c2:	4602      	mov	r2, r0
 80065c4:	4b05      	ldr	r3, [pc, #20]	; (80065dc <check_fs+0xa8>)
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d101      	bne.n	80065ce <check_fs+0x9a>
 80065ca:	2300      	movs	r3, #0
 80065cc:	e000      	b.n	80065d0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80065ce:	2302      	movs	r3, #2
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3708      	adds	r7, #8
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	00544146 	.word	0x00544146
 80065dc:	33544146 	.word	0x33544146

080065e0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b096      	sub	sp, #88	; 0x58
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	4613      	mov	r3, r2
 80065ec:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	2200      	movs	r2, #0
 80065f2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f7ff ff59 	bl	80064ac <get_ldnumber>
 80065fa:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80065fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065fe:	2b00      	cmp	r3, #0
 8006600:	da01      	bge.n	8006606 <find_volume+0x26>
 8006602:	230b      	movs	r3, #11
 8006604:	e268      	b.n	8006ad8 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006606:	4ab0      	ldr	r2, [pc, #704]	; (80068c8 <find_volume+0x2e8>)
 8006608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800660a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800660e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006612:	2b00      	cmp	r3, #0
 8006614:	d101      	bne.n	800661a <find_volume+0x3a>
 8006616:	230c      	movs	r3, #12
 8006618:	e25e      	b.n	8006ad8 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800661e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006620:	79fb      	ldrb	r3, [r7, #7]
 8006622:	f023 0301 	bic.w	r3, r3, #1
 8006626:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d01a      	beq.n	8006666 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006632:	785b      	ldrb	r3, [r3, #1]
 8006634:	4618      	mov	r0, r3
 8006636:	f7fe f9b9 	bl	80049ac <disk_status>
 800663a:	4603      	mov	r3, r0
 800663c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006640:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006644:	f003 0301 	and.w	r3, r3, #1
 8006648:	2b00      	cmp	r3, #0
 800664a:	d10c      	bne.n	8006666 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800664c:	79fb      	ldrb	r3, [r7, #7]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d007      	beq.n	8006662 <find_volume+0x82>
 8006652:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006656:	f003 0304 	and.w	r3, r3, #4
 800665a:	2b00      	cmp	r3, #0
 800665c:	d001      	beq.n	8006662 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800665e:	230a      	movs	r3, #10
 8006660:	e23a      	b.n	8006ad8 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8006662:	2300      	movs	r3, #0
 8006664:	e238      	b.n	8006ad8 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006668:	2200      	movs	r2, #0
 800666a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800666c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800666e:	b2da      	uxtb	r2, r3
 8006670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006672:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006676:	785b      	ldrb	r3, [r3, #1]
 8006678:	4618      	mov	r0, r3
 800667a:	f7fe f9b1 	bl	80049e0 <disk_initialize>
 800667e:	4603      	mov	r3, r0
 8006680:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006684:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006688:	f003 0301 	and.w	r3, r3, #1
 800668c:	2b00      	cmp	r3, #0
 800668e:	d001      	beq.n	8006694 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006690:	2303      	movs	r3, #3
 8006692:	e221      	b.n	8006ad8 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006694:	79fb      	ldrb	r3, [r7, #7]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d007      	beq.n	80066aa <find_volume+0xca>
 800669a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800669e:	f003 0304 	and.w	r3, r3, #4
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d001      	beq.n	80066aa <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80066a6:	230a      	movs	r3, #10
 80066a8:	e216      	b.n	8006ad8 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80066aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ac:	7858      	ldrb	r0, [r3, #1]
 80066ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b0:	330c      	adds	r3, #12
 80066b2:	461a      	mov	r2, r3
 80066b4:	2102      	movs	r1, #2
 80066b6:	f7fe f9f9 	bl	8004aac <disk_ioctl>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d001      	beq.n	80066c4 <find_volume+0xe4>
 80066c0:	2301      	movs	r3, #1
 80066c2:	e209      	b.n	8006ad8 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80066c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c6:	899b      	ldrh	r3, [r3, #12]
 80066c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066cc:	d80d      	bhi.n	80066ea <find_volume+0x10a>
 80066ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d0:	899b      	ldrh	r3, [r3, #12]
 80066d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066d6:	d308      	bcc.n	80066ea <find_volume+0x10a>
 80066d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066da:	899b      	ldrh	r3, [r3, #12]
 80066dc:	461a      	mov	r2, r3
 80066de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e0:	899b      	ldrh	r3, [r3, #12]
 80066e2:	3b01      	subs	r3, #1
 80066e4:	4013      	ands	r3, r2
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d001      	beq.n	80066ee <find_volume+0x10e>
 80066ea:	2301      	movs	r3, #1
 80066ec:	e1f4      	b.n	8006ad8 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80066ee:	2300      	movs	r3, #0
 80066f0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80066f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80066f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80066f6:	f7ff ff1d 	bl	8006534 <check_fs>
 80066fa:	4603      	mov	r3, r0
 80066fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006700:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006704:	2b02      	cmp	r3, #2
 8006706:	d14b      	bne.n	80067a0 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006708:	2300      	movs	r3, #0
 800670a:	643b      	str	r3, [r7, #64]	; 0x40
 800670c:	e01f      	b.n	800674e <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800670e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006710:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006716:	011b      	lsls	r3, r3, #4
 8006718:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800671c:	4413      	add	r3, r2
 800671e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006722:	3304      	adds	r3, #4
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d006      	beq.n	8006738 <find_volume+0x158>
 800672a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672c:	3308      	adds	r3, #8
 800672e:	4618      	mov	r0, r3
 8006730:	f7fe f9f2 	bl	8004b18 <ld_dword>
 8006734:	4602      	mov	r2, r0
 8006736:	e000      	b.n	800673a <find_volume+0x15a>
 8006738:	2200      	movs	r2, #0
 800673a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006742:	440b      	add	r3, r1
 8006744:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800674a:	3301      	adds	r3, #1
 800674c:	643b      	str	r3, [r7, #64]	; 0x40
 800674e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006750:	2b03      	cmp	r3, #3
 8006752:	d9dc      	bls.n	800670e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006754:	2300      	movs	r3, #0
 8006756:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800675a:	2b00      	cmp	r3, #0
 800675c:	d002      	beq.n	8006764 <find_volume+0x184>
 800675e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006760:	3b01      	subs	r3, #1
 8006762:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800676c:	4413      	add	r3, r2
 800676e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006772:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006774:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006776:	2b00      	cmp	r3, #0
 8006778:	d005      	beq.n	8006786 <find_volume+0x1a6>
 800677a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800677c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800677e:	f7ff fed9 	bl	8006534 <check_fs>
 8006782:	4603      	mov	r3, r0
 8006784:	e000      	b.n	8006788 <find_volume+0x1a8>
 8006786:	2303      	movs	r3, #3
 8006788:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800678c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006790:	2b01      	cmp	r3, #1
 8006792:	d905      	bls.n	80067a0 <find_volume+0x1c0>
 8006794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006796:	3301      	adds	r3, #1
 8006798:	643b      	str	r3, [r7, #64]	; 0x40
 800679a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800679c:	2b03      	cmp	r3, #3
 800679e:	d9e1      	bls.n	8006764 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80067a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067a4:	2b04      	cmp	r3, #4
 80067a6:	d101      	bne.n	80067ac <find_volume+0x1cc>
 80067a8:	2301      	movs	r3, #1
 80067aa:	e195      	b.n	8006ad8 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80067ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d901      	bls.n	80067b8 <find_volume+0x1d8>
 80067b4:	230d      	movs	r3, #13
 80067b6:	e18f      	b.n	8006ad8 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80067b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ba:	3338      	adds	r3, #56	; 0x38
 80067bc:	330b      	adds	r3, #11
 80067be:	4618      	mov	r0, r3
 80067c0:	f7fe f992 	bl	8004ae8 <ld_word>
 80067c4:	4603      	mov	r3, r0
 80067c6:	461a      	mov	r2, r3
 80067c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ca:	899b      	ldrh	r3, [r3, #12]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d001      	beq.n	80067d4 <find_volume+0x1f4>
 80067d0:	230d      	movs	r3, #13
 80067d2:	e181      	b.n	8006ad8 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80067d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d6:	3338      	adds	r3, #56	; 0x38
 80067d8:	3316      	adds	r3, #22
 80067da:	4618      	mov	r0, r3
 80067dc:	f7fe f984 	bl	8004ae8 <ld_word>
 80067e0:	4603      	mov	r3, r0
 80067e2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80067e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d106      	bne.n	80067f8 <find_volume+0x218>
 80067ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ec:	3338      	adds	r3, #56	; 0x38
 80067ee:	3324      	adds	r3, #36	; 0x24
 80067f0:	4618      	mov	r0, r3
 80067f2:	f7fe f991 	bl	8004b18 <ld_dword>
 80067f6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80067f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80067fc:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80067fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006800:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8006804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006806:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800680a:	789b      	ldrb	r3, [r3, #2]
 800680c:	2b01      	cmp	r3, #1
 800680e:	d005      	beq.n	800681c <find_volume+0x23c>
 8006810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006812:	789b      	ldrb	r3, [r3, #2]
 8006814:	2b02      	cmp	r3, #2
 8006816:	d001      	beq.n	800681c <find_volume+0x23c>
 8006818:	230d      	movs	r3, #13
 800681a:	e15d      	b.n	8006ad8 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800681c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681e:	789b      	ldrb	r3, [r3, #2]
 8006820:	461a      	mov	r2, r3
 8006822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006824:	fb02 f303 	mul.w	r3, r2, r3
 8006828:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800682a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800682c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006830:	b29a      	uxth	r2, r3
 8006832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006834:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006838:	895b      	ldrh	r3, [r3, #10]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d008      	beq.n	8006850 <find_volume+0x270>
 800683e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006840:	895b      	ldrh	r3, [r3, #10]
 8006842:	461a      	mov	r2, r3
 8006844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006846:	895b      	ldrh	r3, [r3, #10]
 8006848:	3b01      	subs	r3, #1
 800684a:	4013      	ands	r3, r2
 800684c:	2b00      	cmp	r3, #0
 800684e:	d001      	beq.n	8006854 <find_volume+0x274>
 8006850:	230d      	movs	r3, #13
 8006852:	e141      	b.n	8006ad8 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006856:	3338      	adds	r3, #56	; 0x38
 8006858:	3311      	adds	r3, #17
 800685a:	4618      	mov	r0, r3
 800685c:	f7fe f944 	bl	8004ae8 <ld_word>
 8006860:	4603      	mov	r3, r0
 8006862:	461a      	mov	r2, r3
 8006864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006866:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800686a:	891b      	ldrh	r3, [r3, #8]
 800686c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800686e:	8992      	ldrh	r2, [r2, #12]
 8006870:	0952      	lsrs	r2, r2, #5
 8006872:	b292      	uxth	r2, r2
 8006874:	fbb3 f1f2 	udiv	r1, r3, r2
 8006878:	fb02 f201 	mul.w	r2, r2, r1
 800687c:	1a9b      	subs	r3, r3, r2
 800687e:	b29b      	uxth	r3, r3
 8006880:	2b00      	cmp	r3, #0
 8006882:	d001      	beq.n	8006888 <find_volume+0x2a8>
 8006884:	230d      	movs	r3, #13
 8006886:	e127      	b.n	8006ad8 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800688a:	3338      	adds	r3, #56	; 0x38
 800688c:	3313      	adds	r3, #19
 800688e:	4618      	mov	r0, r3
 8006890:	f7fe f92a 	bl	8004ae8 <ld_word>
 8006894:	4603      	mov	r3, r0
 8006896:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006898:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800689a:	2b00      	cmp	r3, #0
 800689c:	d106      	bne.n	80068ac <find_volume+0x2cc>
 800689e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a0:	3338      	adds	r3, #56	; 0x38
 80068a2:	3320      	adds	r3, #32
 80068a4:	4618      	mov	r0, r3
 80068a6:	f7fe f937 	bl	8004b18 <ld_dword>
 80068aa:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80068ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ae:	3338      	adds	r3, #56	; 0x38
 80068b0:	330e      	adds	r3, #14
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7fe f918 	bl	8004ae8 <ld_word>
 80068b8:	4603      	mov	r3, r0
 80068ba:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80068bc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d104      	bne.n	80068cc <find_volume+0x2ec>
 80068c2:	230d      	movs	r3, #13
 80068c4:	e108      	b.n	8006ad8 <find_volume+0x4f8>
 80068c6:	bf00      	nop
 80068c8:	200000e4 	.word	0x200000e4

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80068cc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80068ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068d0:	4413      	add	r3, r2
 80068d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068d4:	8911      	ldrh	r1, [r2, #8]
 80068d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068d8:	8992      	ldrh	r2, [r2, #12]
 80068da:	0952      	lsrs	r2, r2, #5
 80068dc:	b292      	uxth	r2, r2
 80068de:	fbb1 f2f2 	udiv	r2, r1, r2
 80068e2:	b292      	uxth	r2, r2
 80068e4:	4413      	add	r3, r2
 80068e6:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80068e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d201      	bcs.n	80068f4 <find_volume+0x314>
 80068f0:	230d      	movs	r3, #13
 80068f2:	e0f1      	b.n	8006ad8 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80068f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068fc:	8952      	ldrh	r2, [r2, #10]
 80068fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8006902:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006906:	2b00      	cmp	r3, #0
 8006908:	d101      	bne.n	800690e <find_volume+0x32e>
 800690a:	230d      	movs	r3, #13
 800690c:	e0e4      	b.n	8006ad8 <find_volume+0x4f8>
		fmt = FS_FAT32;
 800690e:	2303      	movs	r3, #3
 8006910:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006916:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800691a:	4293      	cmp	r3, r2
 800691c:	d802      	bhi.n	8006924 <find_volume+0x344>
 800691e:	2302      	movs	r3, #2
 8006920:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006926:	f640 72f5 	movw	r2, #4085	; 0xff5
 800692a:	4293      	cmp	r3, r2
 800692c:	d802      	bhi.n	8006934 <find_volume+0x354>
 800692e:	2301      	movs	r3, #1
 8006930:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006936:	1c9a      	adds	r2, r3, #2
 8006938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800693a:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800693c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800693e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006940:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006942:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006944:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006946:	441a      	add	r2, r3
 8006948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694a:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800694c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800694e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006950:	441a      	add	r2, r3
 8006952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006954:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8006956:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800695a:	2b03      	cmp	r3, #3
 800695c:	d11e      	bne.n	800699c <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800695e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006960:	3338      	adds	r3, #56	; 0x38
 8006962:	332a      	adds	r3, #42	; 0x2a
 8006964:	4618      	mov	r0, r3
 8006966:	f7fe f8bf 	bl	8004ae8 <ld_word>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d001      	beq.n	8006974 <find_volume+0x394>
 8006970:	230d      	movs	r3, #13
 8006972:	e0b1      	b.n	8006ad8 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006976:	891b      	ldrh	r3, [r3, #8]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d001      	beq.n	8006980 <find_volume+0x3a0>
 800697c:	230d      	movs	r3, #13
 800697e:	e0ab      	b.n	8006ad8 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006982:	3338      	adds	r3, #56	; 0x38
 8006984:	332c      	adds	r3, #44	; 0x2c
 8006986:	4618      	mov	r0, r3
 8006988:	f7fe f8c6 	bl	8004b18 <ld_dword>
 800698c:	4602      	mov	r2, r0
 800698e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006990:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006994:	69db      	ldr	r3, [r3, #28]
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	647b      	str	r3, [r7, #68]	; 0x44
 800699a:	e01f      	b.n	80069dc <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800699c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800699e:	891b      	ldrh	r3, [r3, #8]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d101      	bne.n	80069a8 <find_volume+0x3c8>
 80069a4:	230d      	movs	r3, #13
 80069a6:	e097      	b.n	8006ad8 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80069a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069ae:	441a      	add	r2, r3
 80069b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b2:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80069b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	d103      	bne.n	80069c4 <find_volume+0x3e4>
 80069bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069be:	69db      	ldr	r3, [r3, #28]
 80069c0:	005b      	lsls	r3, r3, #1
 80069c2:	e00a      	b.n	80069da <find_volume+0x3fa>
 80069c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c6:	69da      	ldr	r2, [r3, #28]
 80069c8:	4613      	mov	r3, r2
 80069ca:	005b      	lsls	r3, r3, #1
 80069cc:	4413      	add	r3, r2
 80069ce:	085a      	lsrs	r2, r3, #1
 80069d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d2:	69db      	ldr	r3, [r3, #28]
 80069d4:	f003 0301 	and.w	r3, r3, #1
 80069d8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80069da:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80069dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069de:	6a1a      	ldr	r2, [r3, #32]
 80069e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e2:	899b      	ldrh	r3, [r3, #12]
 80069e4:	4619      	mov	r1, r3
 80069e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069e8:	440b      	add	r3, r1
 80069ea:	3b01      	subs	r3, #1
 80069ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80069ee:	8989      	ldrh	r1, [r1, #12]
 80069f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d201      	bcs.n	80069fc <find_volume+0x41c>
 80069f8:	230d      	movs	r3, #13
 80069fa:	e06d      	b.n	8006ad8 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80069fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006a02:	619a      	str	r2, [r3, #24]
 8006a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a06:	699a      	ldr	r2, [r3, #24]
 8006a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8006a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0e:	2280      	movs	r2, #128	; 0x80
 8006a10:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006a12:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a16:	2b03      	cmp	r3, #3
 8006a18:	d149      	bne.n	8006aae <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1c:	3338      	adds	r3, #56	; 0x38
 8006a1e:	3330      	adds	r3, #48	; 0x30
 8006a20:	4618      	mov	r0, r3
 8006a22:	f7fe f861 	bl	8004ae8 <ld_word>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d140      	bne.n	8006aae <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006a2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a2e:	3301      	adds	r3, #1
 8006a30:	4619      	mov	r1, r3
 8006a32:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006a34:	f7fe fa68 	bl	8004f08 <move_window>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d137      	bne.n	8006aae <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8006a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a40:	2200      	movs	r2, #0
 8006a42:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a46:	3338      	adds	r3, #56	; 0x38
 8006a48:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f7fe f84b 	bl	8004ae8 <ld_word>
 8006a52:	4603      	mov	r3, r0
 8006a54:	461a      	mov	r2, r3
 8006a56:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d127      	bne.n	8006aae <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a60:	3338      	adds	r3, #56	; 0x38
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7fe f858 	bl	8004b18 <ld_dword>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	4b1d      	ldr	r3, [pc, #116]	; (8006ae0 <find_volume+0x500>)
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d11e      	bne.n	8006aae <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a72:	3338      	adds	r3, #56	; 0x38
 8006a74:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f7fe f84d 	bl	8004b18 <ld_dword>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	4b18      	ldr	r3, [pc, #96]	; (8006ae4 <find_volume+0x504>)
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d113      	bne.n	8006aae <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a88:	3338      	adds	r3, #56	; 0x38
 8006a8a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f7fe f842 	bl	8004b18 <ld_dword>
 8006a94:	4602      	mov	r2, r0
 8006a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a98:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a9c:	3338      	adds	r3, #56	; 0x38
 8006a9e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f7fe f838 	bl	8004b18 <ld_dword>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aac:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006ab4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006ab6:	4b0c      	ldr	r3, [pc, #48]	; (8006ae8 <find_volume+0x508>)
 8006ab8:	881b      	ldrh	r3, [r3, #0]
 8006aba:	3301      	adds	r3, #1
 8006abc:	b29a      	uxth	r2, r3
 8006abe:	4b0a      	ldr	r3, [pc, #40]	; (8006ae8 <find_volume+0x508>)
 8006ac0:	801a      	strh	r2, [r3, #0]
 8006ac2:	4b09      	ldr	r3, [pc, #36]	; (8006ae8 <find_volume+0x508>)
 8006ac4:	881a      	ldrh	r2, [r3, #0]
 8006ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac8:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006acc:	4a07      	ldr	r2, [pc, #28]	; (8006aec <find_volume+0x50c>)
 8006ace:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006ad0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006ad2:	f7fe f9b1 	bl	8004e38 <clear_lock>
#endif
	return FR_OK;
 8006ad6:	2300      	movs	r3, #0
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3758      	adds	r7, #88	; 0x58
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	41615252 	.word	0x41615252
 8006ae4:	61417272 	.word	0x61417272
 8006ae8:	200000e8 	.word	0x200000e8
 8006aec:	2000010c 	.word	0x2000010c

08006af0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006afa:	2309      	movs	r3, #9
 8006afc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d01c      	beq.n	8006b3e <validate+0x4e>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d018      	beq.n	8006b3e <validate+0x4e>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d013      	beq.n	8006b3e <validate+0x4e>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	889a      	ldrh	r2, [r3, #4]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	88db      	ldrh	r3, [r3, #6]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d10c      	bne.n	8006b3e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	785b      	ldrb	r3, [r3, #1]
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7fd ff3e 	bl	80049ac <disk_status>
 8006b30:	4603      	mov	r3, r0
 8006b32:	f003 0301 	and.w	r3, r3, #1
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d101      	bne.n	8006b3e <validate+0x4e>
			res = FR_OK;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006b3e:	7bfb      	ldrb	r3, [r7, #15]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d102      	bne.n	8006b4a <validate+0x5a>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	e000      	b.n	8006b4c <validate+0x5c>
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	683a      	ldr	r2, [r7, #0]
 8006b4e:	6013      	str	r3, [r2, #0]
	return res;
 8006b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
	...

08006b5c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b088      	sub	sp, #32
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	4613      	mov	r3, r2
 8006b68:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006b6e:	f107 0310 	add.w	r3, r7, #16
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7ff fc9a 	bl	80064ac <get_ldnumber>
 8006b78:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	da01      	bge.n	8006b84 <f_mount+0x28>
 8006b80:	230b      	movs	r3, #11
 8006b82:	e02b      	b.n	8006bdc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006b84:	4a17      	ldr	r2, [pc, #92]	; (8006be4 <f_mount+0x88>)
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b8c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d005      	beq.n	8006ba0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006b94:	69b8      	ldr	r0, [r7, #24]
 8006b96:	f7fe f94f 	bl	8004e38 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d002      	beq.n	8006bac <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	490d      	ldr	r1, [pc, #52]	; (8006be4 <f_mount+0x88>)
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d002      	beq.n	8006bc2 <f_mount+0x66>
 8006bbc:	79fb      	ldrb	r3, [r7, #7]
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d001      	beq.n	8006bc6 <f_mount+0x6a>
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	e00a      	b.n	8006bdc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006bc6:	f107 010c 	add.w	r1, r7, #12
 8006bca:	f107 0308 	add.w	r3, r7, #8
 8006bce:	2200      	movs	r2, #0
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f7ff fd05 	bl	80065e0 <find_volume>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3720      	adds	r7, #32
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	200000e4 	.word	0x200000e4

08006be8 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b086      	sub	sp, #24
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d101      	bne.n	8006bfc <f_opendir+0x14>
 8006bf8:	2309      	movs	r3, #9
 8006bfa:	e064      	b.n	8006cc6 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8006c00:	f107 010c 	add.w	r1, r7, #12
 8006c04:	463b      	mov	r3, r7
 8006c06:	2200      	movs	r2, #0
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f7ff fce9 	bl	80065e0 <find_volume>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006c12:	7dfb      	ldrb	r3, [r7, #23]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d14f      	bne.n	8006cb8 <f_opendir+0xd0>
		obj->fs = fs;
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	4619      	mov	r1, r3
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f7ff fbcc 	bl	80063c0 <follow_path>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8006c2c:	7dfb      	ldrb	r3, [r7, #23]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d13d      	bne.n	8006cae <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006c38:	b25b      	sxtb	r3, r3
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	db12      	blt.n	8006c64 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	799b      	ldrb	r3, [r3, #6]
 8006c42:	f003 0310 	and.w	r3, r3, #16
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00a      	beq.n	8006c60 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6a1b      	ldr	r3, [r3, #32]
 8006c50:	4619      	mov	r1, r3
 8006c52:	4610      	mov	r0, r2
 8006c54:	f7fe fd82 	bl	800575c <ld_clust>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	609a      	str	r2, [r3, #8]
 8006c5e:	e001      	b.n	8006c64 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8006c60:	2305      	movs	r3, #5
 8006c62:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8006c64:	7dfb      	ldrb	r3, [r7, #23]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d121      	bne.n	8006cae <f_opendir+0xc6>
				obj->id = fs->id;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	88da      	ldrh	r2, [r3, #6]
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8006c72:	2100      	movs	r1, #0
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f7fe fc12 	bl	800549e <dir_sdi>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8006c7e:	7dfb      	ldrb	r3, [r7, #23]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d114      	bne.n	8006cae <f_opendir+0xc6>
					if (obj->sclust) {
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00d      	beq.n	8006ca8 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f7fe f808 	bl	8004ca4 <inc_lock>
 8006c94:	4602      	mov	r2, r0
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d105      	bne.n	8006cae <f_opendir+0xc6>
 8006ca2:	2312      	movs	r3, #18
 8006ca4:	75fb      	strb	r3, [r7, #23]
 8006ca6:	e002      	b.n	8006cae <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	2200      	movs	r2, #0
 8006cac:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8006cae:	7dfb      	ldrb	r3, [r7, #23]
 8006cb0:	2b04      	cmp	r3, #4
 8006cb2:	d101      	bne.n	8006cb8 <f_opendir+0xd0>
 8006cb4:	2305      	movs	r3, #5
 8006cb6:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8006cb8:	7dfb      	ldrb	r3, [r7, #23]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d002      	beq.n	8006cc4 <f_opendir+0xdc>
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3718      	adds	r7, #24
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b084      	sub	sp, #16
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f107 0208 	add.w	r2, r7, #8
 8006cdc:	4611      	mov	r1, r2
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f7ff ff06 	bl	8006af0 <validate>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006ce8:	7bfb      	ldrb	r3, [r7, #15]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d110      	bne.n	8006d10 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d006      	beq.n	8006d04 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7fe f860 	bl	8004dc0 <dec_lock>
 8006d00:	4603      	mov	r3, r0
 8006d02:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8006d04:	7bfb      	ldrb	r3, [r7, #15]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d102      	bne.n	8006d10 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8006d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b084      	sub	sp, #16
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
 8006d22:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f107 0208 	add.w	r2, r7, #8
 8006d2a:	4611      	mov	r1, r2
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7ff fedf 	bl	8006af0 <validate>
 8006d32:	4603      	mov	r3, r0
 8006d34:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006d36:	7bfb      	ldrb	r3, [r7, #15]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d126      	bne.n	8006d8a <f_readdir+0x70>
		if (!fno) {
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d106      	bne.n	8006d50 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8006d42:	2100      	movs	r1, #0
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f7fe fbaa 	bl	800549e <dir_sdi>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	73fb      	strb	r3, [r7, #15]
 8006d4e:	e01c      	b.n	8006d8a <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8006d50:	2100      	movs	r1, #0
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f7fe fe17 	bl	8005986 <dir_read>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8006d5c:	7bfb      	ldrb	r3, [r7, #15]
 8006d5e:	2b04      	cmp	r3, #4
 8006d60:	d101      	bne.n	8006d66 <f_readdir+0x4c>
 8006d62:	2300      	movs	r3, #0
 8006d64:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8006d66:	7bfb      	ldrb	r3, [r7, #15]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d10e      	bne.n	8006d8a <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8006d6c:	6839      	ldr	r1, [r7, #0]
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f7fe ff70 	bl	8005c54 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8006d74:	2100      	movs	r1, #0
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f7fe fc1a 	bl	80055b0 <dir_next>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8006d80:	7bfb      	ldrb	r3, [r7, #15]
 8006d82:	2b04      	cmp	r3, #4
 8006d84:	d101      	bne.n	8006d8a <f_readdir+0x70>
 8006d86:	2300      	movs	r3, #0
 8006d88:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8006d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3710      	adds	r7, #16
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 8006d9e:	6839      	ldr	r1, [r7, #0]
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f7ff ffba 	bl	8006d1a <f_readdir>
 8006da6:	4603      	mov	r3, r0
 8006da8:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 8006daa:	7bfb      	ldrb	r3, [r7, #15]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d114      	bne.n	8006dda <f_findnext+0x46>
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d011      	beq.n	8006dda <f_findnext+0x46>
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	7d9b      	ldrb	r3, [r3, #22]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00d      	beq.n	8006dda <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	f103 0116 	add.w	r1, r3, #22
 8006dc8:	2300      	movs	r3, #0
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f7ff f87b 	bl	8005ec6 <pattern_matching>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d100      	bne.n	8006dd8 <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 8006dd6:	e7e2      	b.n	8006d9e <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8006dd8:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 8006dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3710      	adds	r7, #16
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b086      	sub	sp, #24
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	607a      	str	r2, [r7, #4]
 8006df0:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	683a      	ldr	r2, [r7, #0]
 8006df6:	635a      	str	r2, [r3, #52]	; 0x34
	res = f_opendir(dp, path);		/* Open the target directory */
 8006df8:	6879      	ldr	r1, [r7, #4]
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f7ff fef4 	bl	8006be8 <f_opendir>
 8006e00:	4603      	mov	r3, r0
 8006e02:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006e04:	7dfb      	ldrb	r3, [r7, #23]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d105      	bne.n	8006e16 <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 8006e0a:	68b9      	ldr	r1, [r7, #8]
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f7ff ffc1 	bl	8006d94 <f_findnext>
 8006e12:	4603      	mov	r3, r0
 8006e14:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 8006e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3718      	adds	r7, #24
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b092      	sub	sp, #72	; 0x48
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8006e2c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006e30:	f107 030c 	add.w	r3, r7, #12
 8006e34:	2200      	movs	r2, #0
 8006e36:	4618      	mov	r0, r3
 8006e38:	f7ff fbd2 	bl	80065e0 <find_volume>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8006e42:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	f040 8099 	bne.w	8006f7e <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8006e4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8006e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e54:	699a      	ldr	r2, [r3, #24]
 8006e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e58:	69db      	ldr	r3, [r3, #28]
 8006e5a:	3b02      	subs	r3, #2
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d804      	bhi.n	8006e6a <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8006e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e62:	699a      	ldr	r2, [r3, #24]
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	601a      	str	r2, [r3, #0]
 8006e68:	e089      	b.n	8006f7e <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8006e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d128      	bne.n	8006ec8 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8006e76:	2302      	movs	r3, #2
 8006e78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7c:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8006e7e:	f107 0314 	add.w	r3, r7, #20
 8006e82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e84:	4618      	mov	r0, r3
 8006e86:	f7fe f88b 	bl	8004fa0 <get_fat>
 8006e8a:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8006e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e92:	d103      	bne.n	8006e9c <f_getfree+0x7c>
 8006e94:	2301      	movs	r3, #1
 8006e96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006e9a:	e063      	b.n	8006f64 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8006e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d103      	bne.n	8006eaa <f_getfree+0x8a>
 8006ea2:	2302      	movs	r3, #2
 8006ea4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006ea8:	e05c      	b.n	8006f64 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8006eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d102      	bne.n	8006eb6 <f_getfree+0x96>
 8006eb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8006eb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eb8:	3301      	adds	r3, #1
 8006eba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ebe:	69db      	ldr	r3, [r3, #28]
 8006ec0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d3db      	bcc.n	8006e7e <f_getfree+0x5e>
 8006ec6:	e04d      	b.n	8006f64 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8006ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eca:	69db      	ldr	r3, [r3, #28]
 8006ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed2:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	637b      	str	r3, [r7, #52]	; 0x34
 8006ed8:	2300      	movs	r3, #0
 8006eda:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8006edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d113      	bne.n	8006f0a <f_getfree+0xea>
							res = move_window(fs, sect++);
 8006ee2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee6:	1c5a      	adds	r2, r3, #1
 8006ee8:	63ba      	str	r2, [r7, #56]	; 0x38
 8006eea:	4619      	mov	r1, r3
 8006eec:	f7fe f80c 	bl	8004f08 <move_window>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8006ef6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d131      	bne.n	8006f62 <f_getfree+0x142>
							p = fs->win;
 8006efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f00:	3338      	adds	r3, #56	; 0x38
 8006f02:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8006f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f06:	899b      	ldrh	r3, [r3, #12]
 8006f08:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8006f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d10f      	bne.n	8006f32 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8006f12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f14:	f7fd fde8 	bl	8004ae8 <ld_word>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d102      	bne.n	8006f24 <f_getfree+0x104>
 8006f1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f20:	3301      	adds	r3, #1
 8006f22:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8006f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f26:	3302      	adds	r3, #2
 8006f28:	633b      	str	r3, [r7, #48]	; 0x30
 8006f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f2c:	3b02      	subs	r3, #2
 8006f2e:	637b      	str	r3, [r7, #52]	; 0x34
 8006f30:	e010      	b.n	8006f54 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8006f32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f34:	f7fd fdf0 	bl	8004b18 <ld_dword>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d102      	bne.n	8006f48 <f_getfree+0x128>
 8006f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f44:	3301      	adds	r3, #1
 8006f46:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8006f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4a:	3304      	adds	r3, #4
 8006f4c:	633b      	str	r3, [r7, #48]	; 0x30
 8006f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f50:	3b04      	subs	r3, #4
 8006f52:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8006f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f56:	3b01      	subs	r3, #1
 8006f58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d1bd      	bne.n	8006edc <f_getfree+0xbc>
 8006f60:	e000      	b.n	8006f64 <f_getfree+0x144>
							if (res != FR_OK) break;
 8006f62:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f68:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8006f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f6e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8006f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f72:	791a      	ldrb	r2, [r3, #4]
 8006f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f76:	f042 0201 	orr.w	r2, r2, #1
 8006f7a:	b2d2      	uxtb	r2, r2
 8006f7c:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8006f7e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3748      	adds	r7, #72	; 0x48
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
	...

08006f8c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b087      	sub	sp, #28
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	4613      	mov	r3, r2
 8006f98:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006fa2:	4b1f      	ldr	r3, [pc, #124]	; (8007020 <FATFS_LinkDriverEx+0x94>)
 8006fa4:	7a5b      	ldrb	r3, [r3, #9]
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d131      	bne.n	8007010 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006fac:	4b1c      	ldr	r3, [pc, #112]	; (8007020 <FATFS_LinkDriverEx+0x94>)
 8006fae:	7a5b      	ldrb	r3, [r3, #9]
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	4b1a      	ldr	r3, [pc, #104]	; (8007020 <FATFS_LinkDriverEx+0x94>)
 8006fb6:	2100      	movs	r1, #0
 8006fb8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006fba:	4b19      	ldr	r3, [pc, #100]	; (8007020 <FATFS_LinkDriverEx+0x94>)
 8006fbc:	7a5b      	ldrb	r3, [r3, #9]
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	4a17      	ldr	r2, [pc, #92]	; (8007020 <FATFS_LinkDriverEx+0x94>)
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	4413      	add	r3, r2
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006fca:	4b15      	ldr	r3, [pc, #84]	; (8007020 <FATFS_LinkDriverEx+0x94>)
 8006fcc:	7a5b      	ldrb	r3, [r3, #9]
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	4b13      	ldr	r3, [pc, #76]	; (8007020 <FATFS_LinkDriverEx+0x94>)
 8006fd4:	4413      	add	r3, r2
 8006fd6:	79fa      	ldrb	r2, [r7, #7]
 8006fd8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006fda:	4b11      	ldr	r3, [pc, #68]	; (8007020 <FATFS_LinkDriverEx+0x94>)
 8006fdc:	7a5b      	ldrb	r3, [r3, #9]
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	1c5a      	adds	r2, r3, #1
 8006fe2:	b2d1      	uxtb	r1, r2
 8006fe4:	4a0e      	ldr	r2, [pc, #56]	; (8007020 <FATFS_LinkDriverEx+0x94>)
 8006fe6:	7251      	strb	r1, [r2, #9]
 8006fe8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006fea:	7dbb      	ldrb	r3, [r7, #22]
 8006fec:	3330      	adds	r3, #48	; 0x30
 8006fee:	b2da      	uxtb	r2, r3
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	223a      	movs	r2, #58	; 0x3a
 8006ffa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	3302      	adds	r3, #2
 8007000:	222f      	movs	r2, #47	; 0x2f
 8007002:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	3303      	adds	r3, #3
 8007008:	2200      	movs	r2, #0
 800700a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800700c:	2300      	movs	r3, #0
 800700e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007010:	7dfb      	ldrb	r3, [r7, #23]
}
 8007012:	4618      	mov	r0, r3
 8007014:	371c      	adds	r7, #28
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	2000030c 	.word	0x2000030c

08007024 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800702e:	2200      	movs	r2, #0
 8007030:	6839      	ldr	r1, [r7, #0]
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f7ff ffaa 	bl	8006f8c <FATFS_LinkDriverEx>
 8007038:	4603      	mov	r3, r0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3708      	adds	r7, #8
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
	...

08007044 <ff_convert>:

WCHAR ff_convert (	/* Converted code, 0 means conversion error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007044:	b480      	push	{r7}
 8007046:	b089      	sub	sp, #36	; 0x24
 8007048:	af00      	add	r7, sp, #0
 800704a:	4603      	mov	r3, r0
 800704c:	6039      	str	r1, [r7, #0]
 800704e:	80fb      	strh	r3, [r7, #6]
	const WCHAR *p;
	WCHAR c;
	int i, n, li, hi;


	if (chr < 0x80) {	/* ASCII */
 8007050:	88fb      	ldrh	r3, [r7, #6]
 8007052:	2b7f      	cmp	r3, #127	; 0x7f
 8007054:	d802      	bhi.n	800705c <ff_convert+0x18>
		c = chr;
 8007056:	88fb      	ldrh	r3, [r7, #6]
 8007058:	837b      	strh	r3, [r7, #26]
 800705a:	e047      	b.n	80070ec <ff_convert+0xa8>
	} else {
		if (dir) {		/* OEM code to unicode */
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d005      	beq.n	800706e <ff_convert+0x2a>
			p = oem2uni;
 8007062:	4b26      	ldr	r3, [pc, #152]	; (80070fc <ff_convert+0xb8>)
 8007064:	61fb      	str	r3, [r7, #28]
			hi = sizeof oem2uni / 4 - 1;
 8007066:	f244 2398 	movw	r3, #17048	; 0x4298
 800706a:	60bb      	str	r3, [r7, #8]
 800706c:	e004      	b.n	8007078 <ff_convert+0x34>
		} else {		/* Unicode to OEM code */
			p = uni2oem;
 800706e:	4b24      	ldr	r3, [pc, #144]	; (8007100 <ff_convert+0xbc>)
 8007070:	61fb      	str	r3, [r7, #28]
			hi = sizeof uni2oem / 4 - 1;
 8007072:	f244 2398 	movw	r3, #17048	; 0x4298
 8007076:	60bb      	str	r3, [r7, #8]
		}
		li = 0;
 8007078:	2300      	movs	r3, #0
 800707a:	60fb      	str	r3, [r7, #12]
		for (n = 16; n; n--) {
 800707c:	2310      	movs	r3, #16
 800707e:	613b      	str	r3, [r7, #16]
 8007080:	e023      	b.n	80070ca <ff_convert+0x86>
			i = li + (hi - li) / 2;
 8007082:	68ba      	ldr	r2, [r7, #8]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	0fda      	lsrs	r2, r3, #31
 800708a:	4413      	add	r3, r2
 800708c:	105b      	asrs	r3, r3, #1
 800708e:	461a      	mov	r2, r3
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	4413      	add	r3, r2
 8007094:	617b      	str	r3, [r7, #20]
			if (chr == p[i * 2]) break;
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	461a      	mov	r2, r3
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	4413      	add	r3, r2
 80070a0:	881b      	ldrh	r3, [r3, #0]
 80070a2:	88fa      	ldrh	r2, [r7, #6]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d014      	beq.n	80070d2 <ff_convert+0x8e>
			if (chr > p[i * 2])
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	461a      	mov	r2, r3
 80070ae:	69fb      	ldr	r3, [r7, #28]
 80070b0:	4413      	add	r3, r2
 80070b2:	881b      	ldrh	r3, [r3, #0]
 80070b4:	88fa      	ldrh	r2, [r7, #6]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d902      	bls.n	80070c0 <ff_convert+0x7c>
				li = i;
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	60fb      	str	r3, [r7, #12]
 80070be:	e001      	b.n	80070c4 <ff_convert+0x80>
			else
				hi = i;
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	60bb      	str	r3, [r7, #8]
		for (n = 16; n; n--) {
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	3b01      	subs	r3, #1
 80070c8:	613b      	str	r3, [r7, #16]
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d1d8      	bne.n	8007082 <ff_convert+0x3e>
 80070d0:	e000      	b.n	80070d4 <ff_convert+0x90>
			if (chr == p[i * 2]) break;
 80070d2:	bf00      	nop
		}
		c = n ? p[i * 2 + 1] : 0;
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d006      	beq.n	80070e8 <ff_convert+0xa4>
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	3302      	adds	r3, #2
 80070e0:	69fa      	ldr	r2, [r7, #28]
 80070e2:	4413      	add	r3, r2
 80070e4:	881b      	ldrh	r3, [r3, #0]
 80070e6:	e000      	b.n	80070ea <ff_convert+0xa6>
 80070e8:	2300      	movs	r3, #0
 80070ea:	837b      	strh	r3, [r7, #26]
	}

	return c;
 80070ec:	8b7b      	ldrh	r3, [r7, #26]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3724      	adds	r7, #36	; 0x24
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	0801b464 	.word	0x0801b464
 8007100:	0800aa00 	.word	0x0800aa00

08007104 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007104:	b480      	push	{r7}
 8007106:	b087      	sub	sp, #28
 8007108:	af00      	add	r7, sp, #0
 800710a:	4603      	mov	r3, r0
 800710c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800710e:	88fb      	ldrh	r3, [r7, #6]
 8007110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007114:	d201      	bcs.n	800711a <ff_wtoupper+0x16>
 8007116:	4b3e      	ldr	r3, [pc, #248]	; (8007210 <ff_wtoupper+0x10c>)
 8007118:	e000      	b.n	800711c <ff_wtoupper+0x18>
 800711a:	4b3e      	ldr	r3, [pc, #248]	; (8007214 <ff_wtoupper+0x110>)
 800711c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	1c9a      	adds	r2, r3, #2
 8007122:	617a      	str	r2, [r7, #20]
 8007124:	881b      	ldrh	r3, [r3, #0]
 8007126:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8007128:	8a7b      	ldrh	r3, [r7, #18]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d068      	beq.n	8007200 <ff_wtoupper+0xfc>
 800712e:	88fa      	ldrh	r2, [r7, #6]
 8007130:	8a7b      	ldrh	r3, [r7, #18]
 8007132:	429a      	cmp	r2, r3
 8007134:	d364      	bcc.n	8007200 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	1c9a      	adds	r2, r3, #2
 800713a:	617a      	str	r2, [r7, #20]
 800713c:	881b      	ldrh	r3, [r3, #0]
 800713e:	823b      	strh	r3, [r7, #16]
 8007140:	8a3b      	ldrh	r3, [r7, #16]
 8007142:	0a1b      	lsrs	r3, r3, #8
 8007144:	81fb      	strh	r3, [r7, #14]
 8007146:	8a3b      	ldrh	r3, [r7, #16]
 8007148:	b2db      	uxtb	r3, r3
 800714a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800714c:	88fa      	ldrh	r2, [r7, #6]
 800714e:	8a79      	ldrh	r1, [r7, #18]
 8007150:	8a3b      	ldrh	r3, [r7, #16]
 8007152:	440b      	add	r3, r1
 8007154:	429a      	cmp	r2, r3
 8007156:	da49      	bge.n	80071ec <ff_wtoupper+0xe8>
			switch (cmd) {
 8007158:	89fb      	ldrh	r3, [r7, #14]
 800715a:	2b08      	cmp	r3, #8
 800715c:	d84f      	bhi.n	80071fe <ff_wtoupper+0xfa>
 800715e:	a201      	add	r2, pc, #4	; (adr r2, 8007164 <ff_wtoupper+0x60>)
 8007160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007164:	08007189 	.word	0x08007189
 8007168:	0800719b 	.word	0x0800719b
 800716c:	080071b1 	.word	0x080071b1
 8007170:	080071b9 	.word	0x080071b9
 8007174:	080071c1 	.word	0x080071c1
 8007178:	080071c9 	.word	0x080071c9
 800717c:	080071d1 	.word	0x080071d1
 8007180:	080071d9 	.word	0x080071d9
 8007184:	080071e1 	.word	0x080071e1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007188:	88fa      	ldrh	r2, [r7, #6]
 800718a:	8a7b      	ldrh	r3, [r7, #18]
 800718c:	1ad3      	subs	r3, r2, r3
 800718e:	005b      	lsls	r3, r3, #1
 8007190:	697a      	ldr	r2, [r7, #20]
 8007192:	4413      	add	r3, r2
 8007194:	881b      	ldrh	r3, [r3, #0]
 8007196:	80fb      	strh	r3, [r7, #6]
 8007198:	e027      	b.n	80071ea <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800719a:	88fa      	ldrh	r2, [r7, #6]
 800719c:	8a7b      	ldrh	r3, [r7, #18]
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	f003 0301 	and.w	r3, r3, #1
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	88fa      	ldrh	r2, [r7, #6]
 80071aa:	1ad3      	subs	r3, r2, r3
 80071ac:	80fb      	strh	r3, [r7, #6]
 80071ae:	e01c      	b.n	80071ea <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80071b0:	88fb      	ldrh	r3, [r7, #6]
 80071b2:	3b10      	subs	r3, #16
 80071b4:	80fb      	strh	r3, [r7, #6]
 80071b6:	e018      	b.n	80071ea <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80071b8:	88fb      	ldrh	r3, [r7, #6]
 80071ba:	3b20      	subs	r3, #32
 80071bc:	80fb      	strh	r3, [r7, #6]
 80071be:	e014      	b.n	80071ea <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80071c0:	88fb      	ldrh	r3, [r7, #6]
 80071c2:	3b30      	subs	r3, #48	; 0x30
 80071c4:	80fb      	strh	r3, [r7, #6]
 80071c6:	e010      	b.n	80071ea <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80071c8:	88fb      	ldrh	r3, [r7, #6]
 80071ca:	3b1a      	subs	r3, #26
 80071cc:	80fb      	strh	r3, [r7, #6]
 80071ce:	e00c      	b.n	80071ea <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80071d0:	88fb      	ldrh	r3, [r7, #6]
 80071d2:	3308      	adds	r3, #8
 80071d4:	80fb      	strh	r3, [r7, #6]
 80071d6:	e008      	b.n	80071ea <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80071d8:	88fb      	ldrh	r3, [r7, #6]
 80071da:	3b50      	subs	r3, #80	; 0x50
 80071dc:	80fb      	strh	r3, [r7, #6]
 80071de:	e004      	b.n	80071ea <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80071e0:	88fb      	ldrh	r3, [r7, #6]
 80071e2:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80071e6:	80fb      	strh	r3, [r7, #6]
 80071e8:	bf00      	nop
			}
			break;
 80071ea:	e008      	b.n	80071fe <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80071ec:	89fb      	ldrh	r3, [r7, #14]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d195      	bne.n	800711e <ff_wtoupper+0x1a>
 80071f2:	8a3b      	ldrh	r3, [r7, #16]
 80071f4:	005b      	lsls	r3, r3, #1
 80071f6:	697a      	ldr	r2, [r7, #20]
 80071f8:	4413      	add	r3, r2
 80071fa:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80071fc:	e78f      	b.n	800711e <ff_wtoupper+0x1a>
			break;
 80071fe:	bf00      	nop
	}

	return chr;
 8007200:	88fb      	ldrh	r3, [r7, #6]
}
 8007202:	4618      	mov	r0, r3
 8007204:	371c      	adds	r7, #28
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr
 800720e:	bf00      	nop
 8007210:	0802bec8 	.word	0x0802bec8
 8007214:	0802c0bc 	.word	0x0802c0bc

08007218 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8007218:	b580      	push	{r7, lr}
 800721a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800721c:	4904      	ldr	r1, [pc, #16]	; (8007230 <MX_FATFS_Init+0x18>)
 800721e:	4805      	ldr	r0, [pc, #20]	; (8007234 <MX_FATFS_Init+0x1c>)
 8007220:	f7ff ff00 	bl	8007024 <FATFS_LinkDriver>
 8007224:	4603      	mov	r3, r0
 8007226:	461a      	mov	r2, r3
 8007228:	4b03      	ldr	r3, [pc, #12]	; (8007238 <MX_FATFS_Init+0x20>)
 800722a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800722c:	bf00      	nop
 800722e:	bd80      	pop	{r7, pc}
 8007230:	20000350 	.word	0x20000350
 8007234:	20000050 	.word	0x20000050
 8007238:	20000354 	.word	0x20000354

0800723c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8007240:	2200      	movs	r2, #0
 8007242:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007246:	4804      	ldr	r0, [pc, #16]	; (8007258 <SELECT+0x1c>)
 8007248:	f7fa fae2 	bl	8001810 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800724c:	2001      	movs	r0, #1
 800724e:	f7f9 fdff 	bl	8000e50 <HAL_Delay>
}
 8007252:	bf00      	nop
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	40020400 	.word	0x40020400

0800725c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8007260:	2201      	movs	r2, #1
 8007262:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007266:	4804      	ldr	r0, [pc, #16]	; (8007278 <DESELECT+0x1c>)
 8007268:	f7fa fad2 	bl	8001810 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800726c:	2001      	movs	r0, #1
 800726e:	f7f9 fdef 	bl	8000e50 <HAL_Delay>
}
 8007272:	bf00      	nop
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	40020400 	.word	0x40020400

0800727c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	4603      	mov	r3, r0
 8007284:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8007286:	bf00      	nop
 8007288:	4b08      	ldr	r3, [pc, #32]	; (80072ac <SPI_TxByte+0x30>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	f003 0302 	and.w	r3, r3, #2
 8007292:	2b02      	cmp	r3, #2
 8007294:	d1f8      	bne.n	8007288 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8007296:	1df9      	adds	r1, r7, #7
 8007298:	2364      	movs	r3, #100	; 0x64
 800729a:	2201      	movs	r2, #1
 800729c:	4803      	ldr	r0, [pc, #12]	; (80072ac <SPI_TxByte+0x30>)
 800729e:	f7fa ff9e 	bl	80021de <HAL_SPI_Transmit>
}
 80072a2:	bf00      	nop
 80072a4:	3708      	adds	r7, #8
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	2000242c 	.word	0x2000242c

080072b0 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	460b      	mov	r3, r1
 80072ba:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80072bc:	bf00      	nop
 80072be:	4b08      	ldr	r3, [pc, #32]	; (80072e0 <SPI_TxBuffer+0x30>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	f003 0302 	and.w	r3, r3, #2
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d1f8      	bne.n	80072be <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80072cc:	887a      	ldrh	r2, [r7, #2]
 80072ce:	2364      	movs	r3, #100	; 0x64
 80072d0:	6879      	ldr	r1, [r7, #4]
 80072d2:	4803      	ldr	r0, [pc, #12]	; (80072e0 <SPI_TxBuffer+0x30>)
 80072d4:	f7fa ff83 	bl	80021de <HAL_SPI_Transmit>
}
 80072d8:	bf00      	nop
 80072da:	3708      	adds	r7, #8
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	2000242c 	.word	0x2000242c

080072e4 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80072ea:	23ff      	movs	r3, #255	; 0xff
 80072ec:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80072ee:	bf00      	nop
 80072f0:	4b09      	ldr	r3, [pc, #36]	; (8007318 <SPI_RxByte+0x34>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	f003 0302 	and.w	r3, r3, #2
 80072fa:	2b02      	cmp	r3, #2
 80072fc:	d1f8      	bne.n	80072f0 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80072fe:	1dba      	adds	r2, r7, #6
 8007300:	1df9      	adds	r1, r7, #7
 8007302:	2364      	movs	r3, #100	; 0x64
 8007304:	9300      	str	r3, [sp, #0]
 8007306:	2301      	movs	r3, #1
 8007308:	4803      	ldr	r0, [pc, #12]	; (8007318 <SPI_RxByte+0x34>)
 800730a:	f7fb f8c7 	bl	800249c <HAL_SPI_TransmitReceive>

	return data;
 800730e:	79bb      	ldrb	r3, [r7, #6]
}
 8007310:	4618      	mov	r0, r3
 8007312:	3708      	adds	r7, #8
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}
 8007318:	2000242c 	.word	0x2000242c

0800731c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8007324:	f7ff ffde 	bl	80072e4 <SPI_RxByte>
 8007328:	4603      	mov	r3, r0
 800732a:	461a      	mov	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	701a      	strb	r2, [r3, #0]
}
 8007330:	bf00      	nop
 8007332:	3708      	adds	r7, #8
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800733e:	4b0a      	ldr	r3, [pc, #40]	; (8007368 <SD_ReadyWait+0x30>)
 8007340:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007344:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8007346:	f7ff ffcd 	bl	80072e4 <SPI_RxByte>
 800734a:	4603      	mov	r3, r0
 800734c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800734e:	79fb      	ldrb	r3, [r7, #7]
 8007350:	2bff      	cmp	r3, #255	; 0xff
 8007352:	d003      	beq.n	800735c <SD_ReadyWait+0x24>
 8007354:	4b04      	ldr	r3, [pc, #16]	; (8007368 <SD_ReadyWait+0x30>)
 8007356:	881b      	ldrh	r3, [r3, #0]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d1f4      	bne.n	8007346 <SD_ReadyWait+0xe>

	return res;
 800735c:	79fb      	ldrb	r3, [r7, #7]
}
 800735e:	4618      	mov	r0, r3
 8007360:	3708      	adds	r7, #8
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	200023c0 	.word	0x200023c0

0800736c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8007372:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8007376:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8007378:	f7ff ff70 	bl	800725c <DESELECT>
	for(int i = 0; i < 10; i++)
 800737c:	2300      	movs	r3, #0
 800737e:	60bb      	str	r3, [r7, #8]
 8007380:	e005      	b.n	800738e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8007382:	20ff      	movs	r0, #255	; 0xff
 8007384:	f7ff ff7a 	bl	800727c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	3301      	adds	r3, #1
 800738c:	60bb      	str	r3, [r7, #8]
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	2b09      	cmp	r3, #9
 8007392:	ddf6      	ble.n	8007382 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8007394:	f7ff ff52 	bl	800723c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8007398:	2340      	movs	r3, #64	; 0x40
 800739a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 800739c:	2300      	movs	r3, #0
 800739e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80073a0:	2300      	movs	r3, #0
 80073a2:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80073a4:	2300      	movs	r3, #0
 80073a6:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80073a8:	2300      	movs	r3, #0
 80073aa:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80073ac:	2395      	movs	r3, #149	; 0x95
 80073ae:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80073b0:	463b      	mov	r3, r7
 80073b2:	2106      	movs	r1, #6
 80073b4:	4618      	mov	r0, r3
 80073b6:	f7ff ff7b 	bl	80072b0 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80073ba:	e002      	b.n	80073c2 <SD_PowerOn+0x56>
	{
		cnt--;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	3b01      	subs	r3, #1
 80073c0:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80073c2:	f7ff ff8f 	bl	80072e4 <SPI_RxByte>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d002      	beq.n	80073d2 <SD_PowerOn+0x66>
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d1f4      	bne.n	80073bc <SD_PowerOn+0x50>
	}

	DESELECT();
 80073d2:	f7ff ff43 	bl	800725c <DESELECT>
	SPI_TxByte(0XFF);
 80073d6:	20ff      	movs	r0, #255	; 0xff
 80073d8:	f7ff ff50 	bl	800727c <SPI_TxByte>

	PowerFlag = 1;
 80073dc:	4b03      	ldr	r3, [pc, #12]	; (80073ec <SD_PowerOn+0x80>)
 80073de:	2201      	movs	r2, #1
 80073e0:	701a      	strb	r2, [r3, #0]
}
 80073e2:	bf00      	nop
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	20000319 	.word	0x20000319

080073f0 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80073f0:	b480      	push	{r7}
 80073f2:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80073f4:	4b03      	ldr	r3, [pc, #12]	; (8007404 <SD_PowerOff+0x14>)
 80073f6:	2200      	movs	r2, #0
 80073f8:	701a      	strb	r2, [r3, #0]
}
 80073fa:	bf00      	nop
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr
 8007404:	20000319 	.word	0x20000319

08007408 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8007408:	b480      	push	{r7}
 800740a:	af00      	add	r7, sp, #0
	return PowerFlag;
 800740c:	4b03      	ldr	r3, [pc, #12]	; (800741c <SD_CheckPower+0x14>)
 800740e:	781b      	ldrb	r3, [r3, #0]
}
 8007410:	4618      	mov	r0, r3
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop
 800741c:	20000319 	.word	0x20000319

08007420 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800742a:	4b13      	ldr	r3, [pc, #76]	; (8007478 <SD_RxDataBlock+0x58>)
 800742c:	22c8      	movs	r2, #200	; 0xc8
 800742e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8007430:	f7ff ff58 	bl	80072e4 <SPI_RxByte>
 8007434:	4603      	mov	r3, r0
 8007436:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8007438:	7bfb      	ldrb	r3, [r7, #15]
 800743a:	2bff      	cmp	r3, #255	; 0xff
 800743c:	d103      	bne.n	8007446 <SD_RxDataBlock+0x26>
 800743e:	4b0e      	ldr	r3, [pc, #56]	; (8007478 <SD_RxDataBlock+0x58>)
 8007440:	881b      	ldrh	r3, [r3, #0]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d1f4      	bne.n	8007430 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8007446:	7bfb      	ldrb	r3, [r7, #15]
 8007448:	2bfe      	cmp	r3, #254	; 0xfe
 800744a:	d001      	beq.n	8007450 <SD_RxDataBlock+0x30>
 800744c:	2300      	movs	r3, #0
 800744e:	e00f      	b.n	8007470 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	1c5a      	adds	r2, r3, #1
 8007454:	607a      	str	r2, [r7, #4]
 8007456:	4618      	mov	r0, r3
 8007458:	f7ff ff60 	bl	800731c <SPI_RxBytePtr>
	} while(len--);
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	1e5a      	subs	r2, r3, #1
 8007460:	603a      	str	r2, [r7, #0]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d1f4      	bne.n	8007450 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8007466:	f7ff ff3d 	bl	80072e4 <SPI_RxByte>
	SPI_RxByte();
 800746a:	f7ff ff3b 	bl	80072e4 <SPI_RxByte>

	return TRUE;
 800746e:	2301      	movs	r3, #1
}
 8007470:	4618      	mov	r0, r3
 8007472:	3710      	adds	r7, #16
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}
 8007478:	200023c2 	.word	0x200023c2

0800747c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	460b      	mov	r3, r1
 8007486:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8007488:	2300      	movs	r3, #0
 800748a:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800748c:	f7ff ff54 	bl	8007338 <SD_ReadyWait>
 8007490:	4603      	mov	r3, r0
 8007492:	2bff      	cmp	r3, #255	; 0xff
 8007494:	d001      	beq.n	800749a <SD_TxDataBlock+0x1e>
 8007496:	2300      	movs	r3, #0
 8007498:	e02f      	b.n	80074fa <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800749a:	78fb      	ldrb	r3, [r7, #3]
 800749c:	4618      	mov	r0, r3
 800749e:	f7ff feed 	bl	800727c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80074a2:	78fb      	ldrb	r3, [r7, #3]
 80074a4:	2bfd      	cmp	r3, #253	; 0xfd
 80074a6:	d020      	beq.n	80074ea <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80074a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f7ff feff 	bl	80072b0 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80074b2:	f7ff ff17 	bl	80072e4 <SPI_RxByte>
		SPI_RxByte();
 80074b6:	f7ff ff15 	bl	80072e4 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80074ba:	e00b      	b.n	80074d4 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80074bc:	f7ff ff12 	bl	80072e4 <SPI_RxByte>
 80074c0:	4603      	mov	r3, r0
 80074c2:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80074c4:	7bfb      	ldrb	r3, [r7, #15]
 80074c6:	f003 031f 	and.w	r3, r3, #31
 80074ca:	2b05      	cmp	r3, #5
 80074cc:	d006      	beq.n	80074dc <SD_TxDataBlock+0x60>
			i++;
 80074ce:	7bbb      	ldrb	r3, [r7, #14]
 80074d0:	3301      	adds	r3, #1
 80074d2:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80074d4:	7bbb      	ldrb	r3, [r7, #14]
 80074d6:	2b40      	cmp	r3, #64	; 0x40
 80074d8:	d9f0      	bls.n	80074bc <SD_TxDataBlock+0x40>
 80074da:	e000      	b.n	80074de <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80074dc:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80074de:	bf00      	nop
 80074e0:	f7ff ff00 	bl	80072e4 <SPI_RxByte>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d0fa      	beq.n	80074e0 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80074ea:	7bfb      	ldrb	r3, [r7, #15]
 80074ec:	f003 031f 	and.w	r3, r3, #31
 80074f0:	2b05      	cmp	r3, #5
 80074f2:	d101      	bne.n	80074f8 <SD_TxDataBlock+0x7c>
 80074f4:	2301      	movs	r3, #1
 80074f6:	e000      	b.n	80074fa <SD_TxDataBlock+0x7e>

	return FALSE;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3710      	adds	r7, #16
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}

08007502 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8007502:	b580      	push	{r7, lr}
 8007504:	b084      	sub	sp, #16
 8007506:	af00      	add	r7, sp, #0
 8007508:	4603      	mov	r3, r0
 800750a:	6039      	str	r1, [r7, #0]
 800750c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800750e:	f7ff ff13 	bl	8007338 <SD_ReadyWait>
 8007512:	4603      	mov	r3, r0
 8007514:	2bff      	cmp	r3, #255	; 0xff
 8007516:	d001      	beq.n	800751c <SD_SendCmd+0x1a>
 8007518:	23ff      	movs	r3, #255	; 0xff
 800751a:	e042      	b.n	80075a2 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 800751c:	79fb      	ldrb	r3, [r7, #7]
 800751e:	4618      	mov	r0, r3
 8007520:	f7ff feac 	bl	800727c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	0e1b      	lsrs	r3, r3, #24
 8007528:	b2db      	uxtb	r3, r3
 800752a:	4618      	mov	r0, r3
 800752c:	f7ff fea6 	bl	800727c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	0c1b      	lsrs	r3, r3, #16
 8007534:	b2db      	uxtb	r3, r3
 8007536:	4618      	mov	r0, r3
 8007538:	f7ff fea0 	bl	800727c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	0a1b      	lsrs	r3, r3, #8
 8007540:	b2db      	uxtb	r3, r3
 8007542:	4618      	mov	r0, r3
 8007544:	f7ff fe9a 	bl	800727c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	b2db      	uxtb	r3, r3
 800754c:	4618      	mov	r0, r3
 800754e:	f7ff fe95 	bl	800727c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8007552:	79fb      	ldrb	r3, [r7, #7]
 8007554:	2b40      	cmp	r3, #64	; 0x40
 8007556:	d102      	bne.n	800755e <SD_SendCmd+0x5c>
 8007558:	2395      	movs	r3, #149	; 0x95
 800755a:	73fb      	strb	r3, [r7, #15]
 800755c:	e007      	b.n	800756e <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800755e:	79fb      	ldrb	r3, [r7, #7]
 8007560:	2b48      	cmp	r3, #72	; 0x48
 8007562:	d102      	bne.n	800756a <SD_SendCmd+0x68>
 8007564:	2387      	movs	r3, #135	; 0x87
 8007566:	73fb      	strb	r3, [r7, #15]
 8007568:	e001      	b.n	800756e <SD_SendCmd+0x6c>
	else crc = 1;
 800756a:	2301      	movs	r3, #1
 800756c:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800756e:	7bfb      	ldrb	r3, [r7, #15]
 8007570:	4618      	mov	r0, r3
 8007572:	f7ff fe83 	bl	800727c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8007576:	79fb      	ldrb	r3, [r7, #7]
 8007578:	2b4c      	cmp	r3, #76	; 0x4c
 800757a:	d101      	bne.n	8007580 <SD_SendCmd+0x7e>
 800757c:	f7ff feb2 	bl	80072e4 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8007580:	230a      	movs	r3, #10
 8007582:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8007584:	f7ff feae 	bl	80072e4 <SPI_RxByte>
 8007588:	4603      	mov	r3, r0
 800758a:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 800758c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8007590:	2b00      	cmp	r3, #0
 8007592:	da05      	bge.n	80075a0 <SD_SendCmd+0x9e>
 8007594:	7bbb      	ldrb	r3, [r7, #14]
 8007596:	3b01      	subs	r3, #1
 8007598:	73bb      	strb	r3, [r7, #14]
 800759a:	7bbb      	ldrb	r3, [r7, #14]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d1f1      	bne.n	8007584 <SD_SendCmd+0x82>

	return res;
 80075a0:	7b7b      	ldrb	r3, [r7, #13]
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
	...

080075ac <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80075ac:	b590      	push	{r4, r7, lr}
 80075ae:	b085      	sub	sp, #20
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	4603      	mov	r3, r0
 80075b4:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80075b6:	79fb      	ldrb	r3, [r7, #7]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d001      	beq.n	80075c0 <SD_disk_initialize+0x14>
 80075bc:	2301      	movs	r3, #1
 80075be:	e0d1      	b.n	8007764 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80075c0:	4b6a      	ldr	r3, [pc, #424]	; (800776c <SD_disk_initialize+0x1c0>)
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	f003 0302 	and.w	r3, r3, #2
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d003      	beq.n	80075d6 <SD_disk_initialize+0x2a>
 80075ce:	4b67      	ldr	r3, [pc, #412]	; (800776c <SD_disk_initialize+0x1c0>)
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	e0c6      	b.n	8007764 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80075d6:	f7ff fec9 	bl	800736c <SD_PowerOn>

	/* slave select */
	SELECT();
 80075da:	f7ff fe2f 	bl	800723c <SELECT>

	/* check disk type */
	type = 0;
 80075de:	2300      	movs	r3, #0
 80075e0:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80075e2:	2100      	movs	r1, #0
 80075e4:	2040      	movs	r0, #64	; 0x40
 80075e6:	f7ff ff8c 	bl	8007502 <SD_SendCmd>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	f040 80a1 	bne.w	8007734 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80075f2:	4b5f      	ldr	r3, [pc, #380]	; (8007770 <SD_disk_initialize+0x1c4>)
 80075f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80075f8:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80075fa:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80075fe:	2048      	movs	r0, #72	; 0x48
 8007600:	f7ff ff7f 	bl	8007502 <SD_SendCmd>
 8007604:	4603      	mov	r3, r0
 8007606:	2b01      	cmp	r3, #1
 8007608:	d155      	bne.n	80076b6 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800760a:	2300      	movs	r3, #0
 800760c:	73fb      	strb	r3, [r7, #15]
 800760e:	e00c      	b.n	800762a <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8007610:	7bfc      	ldrb	r4, [r7, #15]
 8007612:	f7ff fe67 	bl	80072e4 <SPI_RxByte>
 8007616:	4603      	mov	r3, r0
 8007618:	461a      	mov	r2, r3
 800761a:	f107 0310 	add.w	r3, r7, #16
 800761e:	4423      	add	r3, r4
 8007620:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8007624:	7bfb      	ldrb	r3, [r7, #15]
 8007626:	3301      	adds	r3, #1
 8007628:	73fb      	strb	r3, [r7, #15]
 800762a:	7bfb      	ldrb	r3, [r7, #15]
 800762c:	2b03      	cmp	r3, #3
 800762e:	d9ef      	bls.n	8007610 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8007630:	7abb      	ldrb	r3, [r7, #10]
 8007632:	2b01      	cmp	r3, #1
 8007634:	d17e      	bne.n	8007734 <SD_disk_initialize+0x188>
 8007636:	7afb      	ldrb	r3, [r7, #11]
 8007638:	2baa      	cmp	r3, #170	; 0xaa
 800763a:	d17b      	bne.n	8007734 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800763c:	2100      	movs	r1, #0
 800763e:	2077      	movs	r0, #119	; 0x77
 8007640:	f7ff ff5f 	bl	8007502 <SD_SendCmd>
 8007644:	4603      	mov	r3, r0
 8007646:	2b01      	cmp	r3, #1
 8007648:	d807      	bhi.n	800765a <SD_disk_initialize+0xae>
 800764a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800764e:	2069      	movs	r0, #105	; 0x69
 8007650:	f7ff ff57 	bl	8007502 <SD_SendCmd>
 8007654:	4603      	mov	r3, r0
 8007656:	2b00      	cmp	r3, #0
 8007658:	d004      	beq.n	8007664 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800765a:	4b45      	ldr	r3, [pc, #276]	; (8007770 <SD_disk_initialize+0x1c4>)
 800765c:	881b      	ldrh	r3, [r3, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d1ec      	bne.n	800763c <SD_disk_initialize+0x90>
 8007662:	e000      	b.n	8007666 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8007664:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8007666:	4b42      	ldr	r3, [pc, #264]	; (8007770 <SD_disk_initialize+0x1c4>)
 8007668:	881b      	ldrh	r3, [r3, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d062      	beq.n	8007734 <SD_disk_initialize+0x188>
 800766e:	2100      	movs	r1, #0
 8007670:	207a      	movs	r0, #122	; 0x7a
 8007672:	f7ff ff46 	bl	8007502 <SD_SendCmd>
 8007676:	4603      	mov	r3, r0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d15b      	bne.n	8007734 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800767c:	2300      	movs	r3, #0
 800767e:	73fb      	strb	r3, [r7, #15]
 8007680:	e00c      	b.n	800769c <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8007682:	7bfc      	ldrb	r4, [r7, #15]
 8007684:	f7ff fe2e 	bl	80072e4 <SPI_RxByte>
 8007688:	4603      	mov	r3, r0
 800768a:	461a      	mov	r2, r3
 800768c:	f107 0310 	add.w	r3, r7, #16
 8007690:	4423      	add	r3, r4
 8007692:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8007696:	7bfb      	ldrb	r3, [r7, #15]
 8007698:	3301      	adds	r3, #1
 800769a:	73fb      	strb	r3, [r7, #15]
 800769c:	7bfb      	ldrb	r3, [r7, #15]
 800769e:	2b03      	cmp	r3, #3
 80076a0:	d9ef      	bls.n	8007682 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80076a2:	7a3b      	ldrb	r3, [r7, #8]
 80076a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d001      	beq.n	80076b0 <SD_disk_initialize+0x104>
 80076ac:	230c      	movs	r3, #12
 80076ae:	e000      	b.n	80076b2 <SD_disk_initialize+0x106>
 80076b0:	2304      	movs	r3, #4
 80076b2:	73bb      	strb	r3, [r7, #14]
 80076b4:	e03e      	b.n	8007734 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80076b6:	2100      	movs	r1, #0
 80076b8:	2077      	movs	r0, #119	; 0x77
 80076ba:	f7ff ff22 	bl	8007502 <SD_SendCmd>
 80076be:	4603      	mov	r3, r0
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d808      	bhi.n	80076d6 <SD_disk_initialize+0x12a>
 80076c4:	2100      	movs	r1, #0
 80076c6:	2069      	movs	r0, #105	; 0x69
 80076c8:	f7ff ff1b 	bl	8007502 <SD_SendCmd>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d801      	bhi.n	80076d6 <SD_disk_initialize+0x12a>
 80076d2:	2302      	movs	r3, #2
 80076d4:	e000      	b.n	80076d8 <SD_disk_initialize+0x12c>
 80076d6:	2301      	movs	r3, #1
 80076d8:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80076da:	7bbb      	ldrb	r3, [r7, #14]
 80076dc:	2b02      	cmp	r3, #2
 80076de:	d10e      	bne.n	80076fe <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80076e0:	2100      	movs	r1, #0
 80076e2:	2077      	movs	r0, #119	; 0x77
 80076e4:	f7ff ff0d 	bl	8007502 <SD_SendCmd>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d80e      	bhi.n	800770c <SD_disk_initialize+0x160>
 80076ee:	2100      	movs	r1, #0
 80076f0:	2069      	movs	r0, #105	; 0x69
 80076f2:	f7ff ff06 	bl	8007502 <SD_SendCmd>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d107      	bne.n	800770c <SD_disk_initialize+0x160>
 80076fc:	e00c      	b.n	8007718 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80076fe:	2100      	movs	r1, #0
 8007700:	2041      	movs	r0, #65	; 0x41
 8007702:	f7ff fefe 	bl	8007502 <SD_SendCmd>
 8007706:	4603      	mov	r3, r0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d004      	beq.n	8007716 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 800770c:	4b18      	ldr	r3, [pc, #96]	; (8007770 <SD_disk_initialize+0x1c4>)
 800770e:	881b      	ldrh	r3, [r3, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d1e2      	bne.n	80076da <SD_disk_initialize+0x12e>
 8007714:	e000      	b.n	8007718 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8007716:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8007718:	4b15      	ldr	r3, [pc, #84]	; (8007770 <SD_disk_initialize+0x1c4>)
 800771a:	881b      	ldrh	r3, [r3, #0]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d007      	beq.n	8007730 <SD_disk_initialize+0x184>
 8007720:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007724:	2050      	movs	r0, #80	; 0x50
 8007726:	f7ff feec 	bl	8007502 <SD_SendCmd>
 800772a:	4603      	mov	r3, r0
 800772c:	2b00      	cmp	r3, #0
 800772e:	d001      	beq.n	8007734 <SD_disk_initialize+0x188>
 8007730:	2300      	movs	r3, #0
 8007732:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8007734:	4a0f      	ldr	r2, [pc, #60]	; (8007774 <SD_disk_initialize+0x1c8>)
 8007736:	7bbb      	ldrb	r3, [r7, #14]
 8007738:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800773a:	f7ff fd8f 	bl	800725c <DESELECT>
	SPI_RxByte();
 800773e:	f7ff fdd1 	bl	80072e4 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8007742:	7bbb      	ldrb	r3, [r7, #14]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d008      	beq.n	800775a <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8007748:	4b08      	ldr	r3, [pc, #32]	; (800776c <SD_disk_initialize+0x1c0>)
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	b2db      	uxtb	r3, r3
 800774e:	f023 0301 	bic.w	r3, r3, #1
 8007752:	b2da      	uxtb	r2, r3
 8007754:	4b05      	ldr	r3, [pc, #20]	; (800776c <SD_disk_initialize+0x1c0>)
 8007756:	701a      	strb	r2, [r3, #0]
 8007758:	e001      	b.n	800775e <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800775a:	f7ff fe49 	bl	80073f0 <SD_PowerOff>
	}

	return Stat;
 800775e:	4b03      	ldr	r3, [pc, #12]	; (800776c <SD_disk_initialize+0x1c0>)
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	b2db      	uxtb	r3, r3
}
 8007764:	4618      	mov	r0, r3
 8007766:	3714      	adds	r7, #20
 8007768:	46bd      	mov	sp, r7
 800776a:	bd90      	pop	{r4, r7, pc}
 800776c:	20000005 	.word	0x20000005
 8007770:	200023c2 	.word	0x200023c2
 8007774:	20000318 	.word	0x20000318

08007778 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	4603      	mov	r3, r0
 8007780:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8007782:	79fb      	ldrb	r3, [r7, #7]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d001      	beq.n	800778c <SD_disk_status+0x14>
 8007788:	2301      	movs	r3, #1
 800778a:	e002      	b.n	8007792 <SD_disk_status+0x1a>
	return Stat;
 800778c:	4b04      	ldr	r3, [pc, #16]	; (80077a0 <SD_disk_status+0x28>)
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	b2db      	uxtb	r3, r3
}
 8007792:	4618      	mov	r0, r3
 8007794:	370c      	adds	r7, #12
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	20000005 	.word	0x20000005

080077a4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60b9      	str	r1, [r7, #8]
 80077ac:	607a      	str	r2, [r7, #4]
 80077ae:	603b      	str	r3, [r7, #0]
 80077b0:	4603      	mov	r3, r0
 80077b2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80077b4:	7bfb      	ldrb	r3, [r7, #15]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d102      	bne.n	80077c0 <SD_disk_read+0x1c>
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d101      	bne.n	80077c4 <SD_disk_read+0x20>
 80077c0:	2304      	movs	r3, #4
 80077c2:	e051      	b.n	8007868 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80077c4:	4b2a      	ldr	r3, [pc, #168]	; (8007870 <SD_disk_read+0xcc>)
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	f003 0301 	and.w	r3, r3, #1
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d001      	beq.n	80077d6 <SD_disk_read+0x32>
 80077d2:	2303      	movs	r3, #3
 80077d4:	e048      	b.n	8007868 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80077d6:	4b27      	ldr	r3, [pc, #156]	; (8007874 <SD_disk_read+0xd0>)
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	f003 0304 	and.w	r3, r3, #4
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d102      	bne.n	80077e8 <SD_disk_read+0x44>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	025b      	lsls	r3, r3, #9
 80077e6:	607b      	str	r3, [r7, #4]

	SELECT();
 80077e8:	f7ff fd28 	bl	800723c <SELECT>

	if (count == 1)
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d111      	bne.n	8007816 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80077f2:	6879      	ldr	r1, [r7, #4]
 80077f4:	2051      	movs	r0, #81	; 0x51
 80077f6:	f7ff fe84 	bl	8007502 <SD_SendCmd>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d129      	bne.n	8007854 <SD_disk_read+0xb0>
 8007800:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007804:	68b8      	ldr	r0, [r7, #8]
 8007806:	f7ff fe0b 	bl	8007420 <SD_RxDataBlock>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d021      	beq.n	8007854 <SD_disk_read+0xb0>
 8007810:	2300      	movs	r3, #0
 8007812:	603b      	str	r3, [r7, #0]
 8007814:	e01e      	b.n	8007854 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8007816:	6879      	ldr	r1, [r7, #4]
 8007818:	2052      	movs	r0, #82	; 0x52
 800781a:	f7ff fe72 	bl	8007502 <SD_SendCmd>
 800781e:	4603      	mov	r3, r0
 8007820:	2b00      	cmp	r3, #0
 8007822:	d117      	bne.n	8007854 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8007824:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007828:	68b8      	ldr	r0, [r7, #8]
 800782a:	f7ff fdf9 	bl	8007420 <SD_RxDataBlock>
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d00a      	beq.n	800784a <SD_disk_read+0xa6>
				buff += 512;
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800783a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	3b01      	subs	r3, #1
 8007840:	603b      	str	r3, [r7, #0]
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d1ed      	bne.n	8007824 <SD_disk_read+0x80>
 8007848:	e000      	b.n	800784c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800784a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800784c:	2100      	movs	r1, #0
 800784e:	204c      	movs	r0, #76	; 0x4c
 8007850:	f7ff fe57 	bl	8007502 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8007854:	f7ff fd02 	bl	800725c <DESELECT>
	SPI_RxByte();
 8007858:	f7ff fd44 	bl	80072e4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	bf14      	ite	ne
 8007862:	2301      	movne	r3, #1
 8007864:	2300      	moveq	r3, #0
 8007866:	b2db      	uxtb	r3, r3
}
 8007868:	4618      	mov	r0, r3
 800786a:	3710      	adds	r7, #16
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}
 8007870:	20000005 	.word	0x20000005
 8007874:	20000318 	.word	0x20000318

08007878 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	60b9      	str	r1, [r7, #8]
 8007880:	607a      	str	r2, [r7, #4]
 8007882:	603b      	str	r3, [r7, #0]
 8007884:	4603      	mov	r3, r0
 8007886:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8007888:	7bfb      	ldrb	r3, [r7, #15]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d102      	bne.n	8007894 <SD_disk_write+0x1c>
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d101      	bne.n	8007898 <SD_disk_write+0x20>
 8007894:	2304      	movs	r3, #4
 8007896:	e06b      	b.n	8007970 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007898:	4b37      	ldr	r3, [pc, #220]	; (8007978 <SD_disk_write+0x100>)
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	b2db      	uxtb	r3, r3
 800789e:	f003 0301 	and.w	r3, r3, #1
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d001      	beq.n	80078aa <SD_disk_write+0x32>
 80078a6:	2303      	movs	r3, #3
 80078a8:	e062      	b.n	8007970 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80078aa:	4b33      	ldr	r3, [pc, #204]	; (8007978 <SD_disk_write+0x100>)
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	f003 0304 	and.w	r3, r3, #4
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d001      	beq.n	80078bc <SD_disk_write+0x44>
 80078b8:	2302      	movs	r3, #2
 80078ba:	e059      	b.n	8007970 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80078bc:	4b2f      	ldr	r3, [pc, #188]	; (800797c <SD_disk_write+0x104>)
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	f003 0304 	and.w	r3, r3, #4
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d102      	bne.n	80078ce <SD_disk_write+0x56>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	025b      	lsls	r3, r3, #9
 80078cc:	607b      	str	r3, [r7, #4]

	SELECT();
 80078ce:	f7ff fcb5 	bl	800723c <SELECT>

	if (count == 1)
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d110      	bne.n	80078fa <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80078d8:	6879      	ldr	r1, [r7, #4]
 80078da:	2058      	movs	r0, #88	; 0x58
 80078dc:	f7ff fe11 	bl	8007502 <SD_SendCmd>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d13a      	bne.n	800795c <SD_disk_write+0xe4>
 80078e6:	21fe      	movs	r1, #254	; 0xfe
 80078e8:	68b8      	ldr	r0, [r7, #8]
 80078ea:	f7ff fdc7 	bl	800747c <SD_TxDataBlock>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d033      	beq.n	800795c <SD_disk_write+0xe4>
			count = 0;
 80078f4:	2300      	movs	r3, #0
 80078f6:	603b      	str	r3, [r7, #0]
 80078f8:	e030      	b.n	800795c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80078fa:	4b20      	ldr	r3, [pc, #128]	; (800797c <SD_disk_write+0x104>)
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	f003 0302 	and.w	r3, r3, #2
 8007902:	2b00      	cmp	r3, #0
 8007904:	d007      	beq.n	8007916 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8007906:	2100      	movs	r1, #0
 8007908:	2077      	movs	r0, #119	; 0x77
 800790a:	f7ff fdfa 	bl	8007502 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800790e:	6839      	ldr	r1, [r7, #0]
 8007910:	2057      	movs	r0, #87	; 0x57
 8007912:	f7ff fdf6 	bl	8007502 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8007916:	6879      	ldr	r1, [r7, #4]
 8007918:	2059      	movs	r0, #89	; 0x59
 800791a:	f7ff fdf2 	bl	8007502 <SD_SendCmd>
 800791e:	4603      	mov	r3, r0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d11b      	bne.n	800795c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8007924:	21fc      	movs	r1, #252	; 0xfc
 8007926:	68b8      	ldr	r0, [r7, #8]
 8007928:	f7ff fda8 	bl	800747c <SD_TxDataBlock>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00a      	beq.n	8007948 <SD_disk_write+0xd0>
				buff += 512;
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007938:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	3b01      	subs	r3, #1
 800793e:	603b      	str	r3, [r7, #0]
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1ee      	bne.n	8007924 <SD_disk_write+0xac>
 8007946:	e000      	b.n	800794a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8007948:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800794a:	21fd      	movs	r1, #253	; 0xfd
 800794c:	2000      	movs	r0, #0
 800794e:	f7ff fd95 	bl	800747c <SD_TxDataBlock>
 8007952:	4603      	mov	r3, r0
 8007954:	2b00      	cmp	r3, #0
 8007956:	d101      	bne.n	800795c <SD_disk_write+0xe4>
			{
				count = 1;
 8007958:	2301      	movs	r3, #1
 800795a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800795c:	f7ff fc7e 	bl	800725c <DESELECT>
	SPI_RxByte();
 8007960:	f7ff fcc0 	bl	80072e4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	bf14      	ite	ne
 800796a:	2301      	movne	r3, #1
 800796c:	2300      	moveq	r3, #0
 800796e:	b2db      	uxtb	r3, r3
}
 8007970:	4618      	mov	r0, r3
 8007972:	3710      	adds	r7, #16
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}
 8007978:	20000005 	.word	0x20000005
 800797c:	20000318 	.word	0x20000318

08007980 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8007980:	b590      	push	{r4, r7, lr}
 8007982:	b08b      	sub	sp, #44	; 0x2c
 8007984:	af00      	add	r7, sp, #0
 8007986:	4603      	mov	r3, r0
 8007988:	603a      	str	r2, [r7, #0]
 800798a:	71fb      	strb	r3, [r7, #7]
 800798c:	460b      	mov	r3, r1
 800798e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8007994:	79fb      	ldrb	r3, [r7, #7]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d001      	beq.n	800799e <SD_disk_ioctl+0x1e>
 800799a:	2304      	movs	r3, #4
 800799c:	e113      	b.n	8007bc6 <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80079a4:	79bb      	ldrb	r3, [r7, #6]
 80079a6:	2b05      	cmp	r3, #5
 80079a8:	d121      	bne.n	80079ee <SD_disk_ioctl+0x6e>
	{
		switch (*ptr)
 80079aa:	6a3b      	ldr	r3, [r7, #32]
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d009      	beq.n	80079c6 <SD_disk_ioctl+0x46>
 80079b2:	2b02      	cmp	r3, #2
 80079b4:	d00d      	beq.n	80079d2 <SD_disk_ioctl+0x52>
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d115      	bne.n	80079e6 <SD_disk_ioctl+0x66>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80079ba:	f7ff fd19 	bl	80073f0 <SD_PowerOff>
			res = RES_OK;
 80079be:	2300      	movs	r3, #0
 80079c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80079c4:	e0fd      	b.n	8007bc2 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 80079c6:	f7ff fcd1 	bl	800736c <SD_PowerOn>
			res = RES_OK;
 80079ca:	2300      	movs	r3, #0
 80079cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80079d0:	e0f7      	b.n	8007bc2 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80079d2:	6a3b      	ldr	r3, [r7, #32]
 80079d4:	1c5c      	adds	r4, r3, #1
 80079d6:	f7ff fd17 	bl	8007408 <SD_CheckPower>
 80079da:	4603      	mov	r3, r0
 80079dc:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80079de:	2300      	movs	r3, #0
 80079e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80079e4:	e0ed      	b.n	8007bc2 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 80079e6:	2304      	movs	r3, #4
 80079e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80079ec:	e0e9      	b.n	8007bc2 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80079ee:	4b78      	ldr	r3, [pc, #480]	; (8007bd0 <SD_disk_ioctl+0x250>)
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	f003 0301 	and.w	r3, r3, #1
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d001      	beq.n	8007a00 <SD_disk_ioctl+0x80>
 80079fc:	2303      	movs	r3, #3
 80079fe:	e0e2      	b.n	8007bc6 <SD_disk_ioctl+0x246>

		SELECT();
 8007a00:	f7ff fc1c 	bl	800723c <SELECT>

		switch (ctrl)
 8007a04:	79bb      	ldrb	r3, [r7, #6]
 8007a06:	2b0d      	cmp	r3, #13
 8007a08:	f200 80cc 	bhi.w	8007ba4 <SD_disk_ioctl+0x224>
 8007a0c:	a201      	add	r2, pc, #4	; (adr r2, 8007a14 <SD_disk_ioctl+0x94>)
 8007a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a12:	bf00      	nop
 8007a14:	08007b0f 	.word	0x08007b0f
 8007a18:	08007a4d 	.word	0x08007a4d
 8007a1c:	08007aff 	.word	0x08007aff
 8007a20:	08007ba5 	.word	0x08007ba5
 8007a24:	08007ba5 	.word	0x08007ba5
 8007a28:	08007ba5 	.word	0x08007ba5
 8007a2c:	08007ba5 	.word	0x08007ba5
 8007a30:	08007ba5 	.word	0x08007ba5
 8007a34:	08007ba5 	.word	0x08007ba5
 8007a38:	08007ba5 	.word	0x08007ba5
 8007a3c:	08007ba5 	.word	0x08007ba5
 8007a40:	08007b21 	.word	0x08007b21
 8007a44:	08007b45 	.word	0x08007b45
 8007a48:	08007b69 	.word	0x08007b69
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8007a4c:	2100      	movs	r1, #0
 8007a4e:	2049      	movs	r0, #73	; 0x49
 8007a50:	f7ff fd57 	bl	8007502 <SD_SendCmd>
 8007a54:	4603      	mov	r3, r0
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	f040 80a8 	bne.w	8007bac <SD_disk_ioctl+0x22c>
 8007a5c:	f107 030c 	add.w	r3, r7, #12
 8007a60:	2110      	movs	r1, #16
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7ff fcdc 	bl	8007420 <SD_RxDataBlock>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f000 809e 	beq.w	8007bac <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8007a70:	7b3b      	ldrb	r3, [r7, #12]
 8007a72:	099b      	lsrs	r3, r3, #6
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d10e      	bne.n	8007a98 <SD_disk_ioctl+0x118>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8007a7a:	7d7b      	ldrb	r3, [r7, #21]
 8007a7c:	b29a      	uxth	r2, r3
 8007a7e:	7d3b      	ldrb	r3, [r7, #20]
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	021b      	lsls	r3, r3, #8
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	4413      	add	r3, r2
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8007a8e:	8bfb      	ldrh	r3, [r7, #30]
 8007a90:	029a      	lsls	r2, r3, #10
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	601a      	str	r2, [r3, #0]
 8007a96:	e02e      	b.n	8007af6 <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8007a98:	7c7b      	ldrb	r3, [r7, #17]
 8007a9a:	f003 030f 	and.w	r3, r3, #15
 8007a9e:	b2da      	uxtb	r2, r3
 8007aa0:	7dbb      	ldrb	r3, [r7, #22]
 8007aa2:	09db      	lsrs	r3, r3, #7
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	4413      	add	r3, r2
 8007aa8:	b2da      	uxtb	r2, r3
 8007aaa:	7d7b      	ldrb	r3, [r7, #21]
 8007aac:	005b      	lsls	r3, r3, #1
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	f003 0306 	and.w	r3, r3, #6
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	4413      	add	r3, r2
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	3302      	adds	r3, #2
 8007abc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8007ac0:	7d3b      	ldrb	r3, [r7, #20]
 8007ac2:	099b      	lsrs	r3, r3, #6
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	b29a      	uxth	r2, r3
 8007ac8:	7cfb      	ldrb	r3, [r7, #19]
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	4413      	add	r3, r2
 8007ad2:	b29a      	uxth	r2, r3
 8007ad4:	7cbb      	ldrb	r3, [r7, #18]
 8007ad6:	029b      	lsls	r3, r3, #10
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	4413      	add	r3, r2
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8007ae8:	8bfa      	ldrh	r2, [r7, #30]
 8007aea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007aee:	3b09      	subs	r3, #9
 8007af0:	409a      	lsls	r2, r3
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8007af6:	2300      	movs	r3, #0
 8007af8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8007afc:	e056      	b.n	8007bac <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b04:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8007b06:	2300      	movs	r3, #0
 8007b08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8007b0c:	e055      	b.n	8007bba <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8007b0e:	f7ff fc13 	bl	8007338 <SD_ReadyWait>
 8007b12:	4603      	mov	r3, r0
 8007b14:	2bff      	cmp	r3, #255	; 0xff
 8007b16:	d14b      	bne.n	8007bb0 <SD_disk_ioctl+0x230>
 8007b18:	2300      	movs	r3, #0
 8007b1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8007b1e:	e047      	b.n	8007bb0 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8007b20:	2100      	movs	r1, #0
 8007b22:	2049      	movs	r0, #73	; 0x49
 8007b24:	f7ff fced 	bl	8007502 <SD_SendCmd>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d142      	bne.n	8007bb4 <SD_disk_ioctl+0x234>
 8007b2e:	2110      	movs	r1, #16
 8007b30:	6a38      	ldr	r0, [r7, #32]
 8007b32:	f7ff fc75 	bl	8007420 <SD_RxDataBlock>
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d03b      	beq.n	8007bb4 <SD_disk_ioctl+0x234>
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8007b42:	e037      	b.n	8007bb4 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8007b44:	2100      	movs	r1, #0
 8007b46:	204a      	movs	r0, #74	; 0x4a
 8007b48:	f7ff fcdb 	bl	8007502 <SD_SendCmd>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d132      	bne.n	8007bb8 <SD_disk_ioctl+0x238>
 8007b52:	2110      	movs	r1, #16
 8007b54:	6a38      	ldr	r0, [r7, #32]
 8007b56:	f7ff fc63 	bl	8007420 <SD_RxDataBlock>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d02b      	beq.n	8007bb8 <SD_disk_ioctl+0x238>
 8007b60:	2300      	movs	r3, #0
 8007b62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8007b66:	e027      	b.n	8007bb8 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8007b68:	2100      	movs	r1, #0
 8007b6a:	207a      	movs	r0, #122	; 0x7a
 8007b6c:	f7ff fcc9 	bl	8007502 <SD_SendCmd>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d116      	bne.n	8007ba4 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8007b76:	2300      	movs	r3, #0
 8007b78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007b7c:	e00b      	b.n	8007b96 <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8007b7e:	6a3c      	ldr	r4, [r7, #32]
 8007b80:	1c63      	adds	r3, r4, #1
 8007b82:	623b      	str	r3, [r7, #32]
 8007b84:	f7ff fbae 	bl	80072e4 <SPI_RxByte>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8007b8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007b90:	3301      	adds	r3, #1
 8007b92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007b96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007b9a:	2b03      	cmp	r3, #3
 8007b9c:	d9ef      	bls.n	8007b7e <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8007ba4:	2304      	movs	r3, #4
 8007ba6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007baa:	e006      	b.n	8007bba <SD_disk_ioctl+0x23a>
			break;
 8007bac:	bf00      	nop
 8007bae:	e004      	b.n	8007bba <SD_disk_ioctl+0x23a>
			break;
 8007bb0:	bf00      	nop
 8007bb2:	e002      	b.n	8007bba <SD_disk_ioctl+0x23a>
			break;
 8007bb4:	bf00      	nop
 8007bb6:	e000      	b.n	8007bba <SD_disk_ioctl+0x23a>
			break;
 8007bb8:	bf00      	nop
		}

		DESELECT();
 8007bba:	f7ff fb4f 	bl	800725c <DESELECT>
		SPI_RxByte();
 8007bbe:	f7ff fb91 	bl	80072e4 <SPI_RxByte>
	}

	return res;
 8007bc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	372c      	adds	r7, #44	; 0x2c
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd90      	pop	{r4, r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	20000005 	.word	0x20000005

08007bd4 <transmit_uart>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_USART6_UART_Init(void);
static void MX_TIM3_Init(void);

void transmit_uart(char *string){
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f7f8 faff 	bl	80001e0 <strlen>
 8007be2:	4603      	mov	r3, r0
 8007be4:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t*) string, len, 200);
 8007be6:	7bfb      	ldrb	r3, [r7, #15]
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	23c8      	movs	r3, #200	; 0xc8
 8007bec:	6879      	ldr	r1, [r7, #4]
 8007bee:	4803      	ldr	r0, [pc, #12]	; (8007bfc <transmit_uart+0x28>)
 8007bf0:	f7fb fff1 	bl	8003bd6 <HAL_UART_Transmit>
}
 8007bf4:	bf00      	nop
 8007bf6:	3710      	adds	r7, #16
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}
 8007bfc:	20003680 	.word	0x20003680

08007c00 <HAL_UART_RxCpltCallback>:
	transmit_uart(p);
	transmit_uart("\r\n");
}

/* Callback called by HAL_UART_IRQHandler when given number of bytes is received */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART6){
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a72      	ldr	r2, [pc, #456]	; (8007dd8 <HAL_UART_RxCpltCallback+0x1d8>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	f040 80db 	bne.w	8007dca <HAL_UART_RxCpltCallback+0x1ca>
		/* Receive data in interrupt mode */
		HAL_UART_Receive_IT(&huart6, UART6_rxBuffer, 1);
 8007c14:	2201      	movs	r2, #1
 8007c16:	4971      	ldr	r1, [pc, #452]	; (8007ddc <HAL_UART_RxCpltCallback+0x1dc>)
 8007c18:	4871      	ldr	r0, [pc, #452]	; (8007de0 <HAL_UART_RxCpltCallback+0x1e0>)
 8007c1a:	f7fc f875 	bl	8003d08 <HAL_UART_Receive_IT>
		transmit_uart((char*) UART6_rxBuffer);
 8007c1e:	486f      	ldr	r0, [pc, #444]	; (8007ddc <HAL_UART_RxCpltCallback+0x1dc>)
 8007c20:	f7ff ffd8 	bl	8007bd4 <transmit_uart>
		transmit_uart("\r\n");
 8007c24:	486f      	ldr	r0, [pc, #444]	; (8007de4 <HAL_UART_RxCpltCallback+0x1e4>)
 8007c26:	f7ff ffd5 	bl	8007bd4 <transmit_uart>

		switch(UART6_rxBuffer[0]){
 8007c2a:	4b6c      	ldr	r3, [pc, #432]	; (8007ddc <HAL_UART_RxCpltCallback+0x1dc>)
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	3b42      	subs	r3, #66	; 0x42
 8007c30:	2b18      	cmp	r3, #24
 8007c32:	f200 80cc 	bhi.w	8007dce <HAL_UART_RxCpltCallback+0x1ce>
 8007c36:	a201      	add	r2, pc, #4	; (adr r2, 8007c3c <HAL_UART_RxCpltCallback+0x3c>)
 8007c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c3c:	08007cc9 	.word	0x08007cc9
 8007c40:	08007dcf 	.word	0x08007dcf
 8007c44:	08007dcf 	.word	0x08007dcf
 8007c48:	08007dcf 	.word	0x08007dcf
 8007c4c:	08007dcf 	.word	0x08007dcf
 8007c50:	08007cb5 	.word	0x08007cb5
 8007c54:	08007dcf 	.word	0x08007dcf
 8007c58:	08007dcf 	.word	0x08007dcf
 8007c5c:	08007dcf 	.word	0x08007dcf
 8007c60:	08007dcf 	.word	0x08007dcf
 8007c64:	08007dcf 	.word	0x08007dcf
 8007c68:	08007dcf 	.word	0x08007dcf
 8007c6c:	08007dcf 	.word	0x08007dcf
 8007c70:	08007cf1 	.word	0x08007cf1
 8007c74:	08007cdd 	.word	0x08007cdd
 8007c78:	08007dcf 	.word	0x08007dcf
 8007c7c:	08007ca1 	.word	0x08007ca1
 8007c80:	08007dcf 	.word	0x08007dcf
 8007c84:	08007dcf 	.word	0x08007dcf
 8007c88:	08007dcf 	.word	0x08007dcf
 8007c8c:	08007d05 	.word	0x08007d05
 8007c90:	08007d37 	.word	0x08007d37
 8007c94:	08007d9d 	.word	0x08007d9d
 8007c98:	08007dbb 	.word	0x08007dbb
 8007c9c:	08007dc3 	.word	0x08007dc3
		case (uint8_t)'R':
			LED_color = RED;
 8007ca0:	4b51      	ldr	r3, [pc, #324]	; (8007de8 <HAL_UART_RxCpltCallback+0x1e8>)
 8007ca2:	2204      	movs	r2, #4
 8007ca4:	701a      	strb	r2, [r3, #0]
			transmit_uart("Received 'Red'\r\n");
 8007ca6:	4851      	ldr	r0, [pc, #324]	; (8007dec <HAL_UART_RxCpltCallback+0x1ec>)
 8007ca8:	f7ff ff94 	bl	8007bd4 <transmit_uart>
			lock_flag_arr[RED] = 1;
 8007cac:	4b50      	ldr	r3, [pc, #320]	; (8007df0 <HAL_UART_RxCpltCallback+0x1f0>)
 8007cae:	2201      	movs	r2, #1
 8007cb0:	711a      	strb	r2, [r3, #4]
			break;
 8007cb2:	e08d      	b.n	8007dd0 <HAL_UART_RxCpltCallback+0x1d0>
		case (uint8_t)'G':
			LED_color = GREEN;
 8007cb4:	4b4c      	ldr	r3, [pc, #304]	; (8007de8 <HAL_UART_RxCpltCallback+0x1e8>)
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	701a      	strb	r2, [r3, #0]
			transmit_uart("Received 'Green'\r\n");
 8007cba:	484e      	ldr	r0, [pc, #312]	; (8007df4 <HAL_UART_RxCpltCallback+0x1f4>)
 8007cbc:	f7ff ff8a 	bl	8007bd4 <transmit_uart>
			lock_flag_arr[GREEN] = 1;
 8007cc0:	4b4b      	ldr	r3, [pc, #300]	; (8007df0 <HAL_UART_RxCpltCallback+0x1f0>)
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	701a      	strb	r2, [r3, #0]
			break;
 8007cc6:	e083      	b.n	8007dd0 <HAL_UART_RxCpltCallback+0x1d0>
		case (uint8_t)'B':
			LED_color = BLUE;
 8007cc8:	4b47      	ldr	r3, [pc, #284]	; (8007de8 <HAL_UART_RxCpltCallback+0x1e8>)
 8007cca:	2203      	movs	r2, #3
 8007ccc:	701a      	strb	r2, [r3, #0]
			transmit_uart("Received 'Blue'\r\n");
 8007cce:	484a      	ldr	r0, [pc, #296]	; (8007df8 <HAL_UART_RxCpltCallback+0x1f8>)
 8007cd0:	f7ff ff80 	bl	8007bd4 <transmit_uart>
			lock_flag_arr[BLUE] = 1;
 8007cd4:	4b46      	ldr	r3, [pc, #280]	; (8007df0 <HAL_UART_RxCpltCallback+0x1f0>)
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	70da      	strb	r2, [r3, #3]
			break;
 8007cda:	e079      	b.n	8007dd0 <HAL_UART_RxCpltCallback+0x1d0>
		case (uint8_t)'P':
			LED_color = PURPLE;
 8007cdc:	4b42      	ldr	r3, [pc, #264]	; (8007de8 <HAL_UART_RxCpltCallback+0x1e8>)
 8007cde:	2202      	movs	r2, #2
 8007ce0:	701a      	strb	r2, [r3, #0]
			transmit_uart("Received 'Purple'\r\n");
 8007ce2:	4846      	ldr	r0, [pc, #280]	; (8007dfc <HAL_UART_RxCpltCallback+0x1fc>)
 8007ce4:	f7ff ff76 	bl	8007bd4 <transmit_uart>
			lock_flag_arr[PURPLE] = 1;
 8007ce8:	4b41      	ldr	r3, [pc, #260]	; (8007df0 <HAL_UART_RxCpltCallback+0x1f0>)
 8007cea:	2201      	movs	r2, #1
 8007cec:	709a      	strb	r2, [r3, #2]
			break;
 8007cee:	e06f      	b.n	8007dd0 <HAL_UART_RxCpltCallback+0x1d0>
		case (uint8_t)'O':
			LED_color = ORANGE;
 8007cf0:	4b3d      	ldr	r3, [pc, #244]	; (8007de8 <HAL_UART_RxCpltCallback+0x1e8>)
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	701a      	strb	r2, [r3, #0]
			transmit_uart("Received 'Orange'\r\n");
 8007cf6:	4842      	ldr	r0, [pc, #264]	; (8007e00 <HAL_UART_RxCpltCallback+0x200>)
 8007cf8:	f7ff ff6c 	bl	8007bd4 <transmit_uart>
			lock_flag_arr[ORANGE] = 1;
 8007cfc:	4b3c      	ldr	r3, [pc, #240]	; (8007df0 <HAL_UART_RxCpltCallback+0x1f0>)
 8007cfe:	2201      	movs	r2, #1
 8007d00:	705a      	strb	r2, [r3, #1]
		  break;
 8007d02:	e065      	b.n	8007dd0 <HAL_UART_RxCpltCallback+0x1d0>
		case (uint8_t)'V':
			if (min_time < 59) {
 8007d04:	4b3f      	ldr	r3, [pc, #252]	; (8007e04 <HAL_UART_RxCpltCallback+0x204>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2b3a      	cmp	r3, #58	; 0x3a
 8007d0a:	dc05      	bgt.n	8007d18 <HAL_UART_RxCpltCallback+0x118>
				min_time += 1;
 8007d0c:	4b3d      	ldr	r3, [pc, #244]	; (8007e04 <HAL_UART_RxCpltCallback+0x204>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	3301      	adds	r3, #1
 8007d12:	4a3c      	ldr	r2, [pc, #240]	; (8007e04 <HAL_UART_RxCpltCallback+0x204>)
 8007d14:	6013      	str	r3, [r2, #0]
 8007d16:	e005      	b.n	8007d24 <HAL_UART_RxCpltCallback+0x124>
			} else {
				min_time = 60;
 8007d18:	4b3a      	ldr	r3, [pc, #232]	; (8007e04 <HAL_UART_RxCpltCallback+0x204>)
 8007d1a:	223c      	movs	r2, #60	; 0x3c
 8007d1c:	601a      	str	r2, [r3, #0]
				sec_time = 00;
 8007d1e:	4b3a      	ldr	r3, [pc, #232]	; (8007e08 <HAL_UART_RxCpltCallback+0x208>)
 8007d20:	2200      	movs	r2, #0
 8007d22:	601a      	str	r2, [r3, #0]
			}
			tm1637DisplayTime(min_time, sec_time, 1);
 8007d24:	4b37      	ldr	r3, [pc, #220]	; (8007e04 <HAL_UART_RxCpltCallback+0x204>)
 8007d26:	6818      	ldr	r0, [r3, #0]
 8007d28:	4b37      	ldr	r3, [pc, #220]	; (8007e08 <HAL_UART_RxCpltCallback+0x208>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	4619      	mov	r1, r3
 8007d30:	f001 f906 	bl	8008f40 <tm1637DisplayTime>
			break;
 8007d34:	e04c      	b.n	8007dd0 <HAL_UART_RxCpltCallback+0x1d0>
		case (uint8_t)'W':
			if (min_time >= 59 && sec_time >= 50){
 8007d36:	4b33      	ldr	r3, [pc, #204]	; (8007e04 <HAL_UART_RxCpltCallback+0x204>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2b3a      	cmp	r3, #58	; 0x3a
 8007d3c:	dd0a      	ble.n	8007d54 <HAL_UART_RxCpltCallback+0x154>
 8007d3e:	4b32      	ldr	r3, [pc, #200]	; (8007e08 <HAL_UART_RxCpltCallback+0x208>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	2b31      	cmp	r3, #49	; 0x31
 8007d44:	dd06      	ble.n	8007d54 <HAL_UART_RxCpltCallback+0x154>
				min_time = 60;
 8007d46:	4b2f      	ldr	r3, [pc, #188]	; (8007e04 <HAL_UART_RxCpltCallback+0x204>)
 8007d48:	223c      	movs	r2, #60	; 0x3c
 8007d4a:	601a      	str	r2, [r3, #0]
				sec_time = 00;
 8007d4c:	4b2e      	ldr	r3, [pc, #184]	; (8007e08 <HAL_UART_RxCpltCallback+0x208>)
 8007d4e:	2200      	movs	r2, #0
 8007d50:	601a      	str	r2, [r3, #0]
 8007d52:	e01a      	b.n	8007d8a <HAL_UART_RxCpltCallback+0x18a>
			}	else if (min_time == 60) {
 8007d54:	4b2b      	ldr	r3, [pc, #172]	; (8007e04 <HAL_UART_RxCpltCallback+0x204>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2b3c      	cmp	r3, #60	; 0x3c
 8007d5a:	d103      	bne.n	8007d64 <HAL_UART_RxCpltCallback+0x164>
				sec_time = 00;
 8007d5c:	4b2a      	ldr	r3, [pc, #168]	; (8007e08 <HAL_UART_RxCpltCallback+0x208>)
 8007d5e:	2200      	movs	r2, #0
 8007d60:	601a      	str	r2, [r3, #0]
 8007d62:	e012      	b.n	8007d8a <HAL_UART_RxCpltCallback+0x18a>
			} else {
				if (sec_time > 59){
 8007d64:	4b28      	ldr	r3, [pc, #160]	; (8007e08 <HAL_UART_RxCpltCallback+0x208>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2b3b      	cmp	r3, #59	; 0x3b
 8007d6a:	dd09      	ble.n	8007d80 <HAL_UART_RxCpltCallback+0x180>
					sec_time =- 50;
 8007d6c:	4b26      	ldr	r3, [pc, #152]	; (8007e08 <HAL_UART_RxCpltCallback+0x208>)
 8007d6e:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8007d72:	601a      	str	r2, [r3, #0]
					min_time += 1;
 8007d74:	4b23      	ldr	r3, [pc, #140]	; (8007e04 <HAL_UART_RxCpltCallback+0x204>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	3301      	adds	r3, #1
 8007d7a:	4a22      	ldr	r2, [pc, #136]	; (8007e04 <HAL_UART_RxCpltCallback+0x204>)
 8007d7c:	6013      	str	r3, [r2, #0]
 8007d7e:	e004      	b.n	8007d8a <HAL_UART_RxCpltCallback+0x18a>
				} else {
					sec_time += 10;
 8007d80:	4b21      	ldr	r3, [pc, #132]	; (8007e08 <HAL_UART_RxCpltCallback+0x208>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	330a      	adds	r3, #10
 8007d86:	4a20      	ldr	r2, [pc, #128]	; (8007e08 <HAL_UART_RxCpltCallback+0x208>)
 8007d88:	6013      	str	r3, [r2, #0]
				}
			}
			tm1637DisplayTime(min_time, sec_time, 1);
 8007d8a:	4b1e      	ldr	r3, [pc, #120]	; (8007e04 <HAL_UART_RxCpltCallback+0x204>)
 8007d8c:	6818      	ldr	r0, [r3, #0]
 8007d8e:	4b1e      	ldr	r3, [pc, #120]	; (8007e08 <HAL_UART_RxCpltCallback+0x208>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	2201      	movs	r2, #1
 8007d94:	4619      	mov	r1, r3
 8007d96:	f001 f8d3 	bl	8008f40 <tm1637DisplayTime>
			break;
 8007d9a:	e019      	b.n	8007dd0 <HAL_UART_RxCpltCallback+0x1d0>
		case (uint8_t)'X':
		  min_time = COUNTDOWN_MIN;
 8007d9c:	4b19      	ldr	r3, [pc, #100]	; (8007e04 <HAL_UART_RxCpltCallback+0x204>)
 8007d9e:	2205      	movs	r2, #5
 8007da0:	601a      	str	r2, [r3, #0]
		  sec_time = COUNTDOWN_SEC;
 8007da2:	4b19      	ldr	r3, [pc, #100]	; (8007e08 <HAL_UART_RxCpltCallback+0x208>)
 8007da4:	2200      	movs	r2, #0
 8007da6:	601a      	str	r2, [r3, #0]
			tm1637DisplayTime(min_time, sec_time, 1);
 8007da8:	4b16      	ldr	r3, [pc, #88]	; (8007e04 <HAL_UART_RxCpltCallback+0x204>)
 8007daa:	6818      	ldr	r0, [r3, #0]
 8007dac:	4b16      	ldr	r3, [pc, #88]	; (8007e08 <HAL_UART_RxCpltCallback+0x208>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	2201      	movs	r2, #1
 8007db2:	4619      	mov	r1, r3
 8007db4:	f001 f8c4 	bl	8008f40 <tm1637DisplayTime>
			break;
 8007db8:	e00a      	b.n	8007dd0 <HAL_UART_RxCpltCallback+0x1d0>
		case (uint8_t)'Y':
			time_flag = 1;
 8007dba:	4b14      	ldr	r3, [pc, #80]	; (8007e0c <HAL_UART_RxCpltCallback+0x20c>)
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	601a      	str	r2, [r3, #0]
			break;
 8007dc0:	e006      	b.n	8007dd0 <HAL_UART_RxCpltCallback+0x1d0>
		case (uint8_t)'Z':
			time_flag = 0;
 8007dc2:	4b12      	ldr	r3, [pc, #72]	; (8007e0c <HAL_UART_RxCpltCallback+0x20c>)
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	601a      	str	r2, [r3, #0]
			break;
 8007dc8:	e002      	b.n	8007dd0 <HAL_UART_RxCpltCallback+0x1d0>
		default:
			break;
		}
	}
 8007dca:	bf00      	nop
 8007dcc:	e000      	b.n	8007dd0 <HAL_UART_RxCpltCallback+0x1d0>
			break;
 8007dce:	bf00      	nop
}
 8007dd0:	bf00      	nop
 8007dd2:	3708      	adds	r7, #8
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	40011400 	.word	0x40011400
 8007ddc:	20003504 	.word	0x20003504
 8007de0:	200035e0 	.word	0x200035e0
 8007de4:	0800a654 	.word	0x0800a654
 8007de8:	200023c9 	.word	0x200023c9
 8007dec:	0800a658 	.word	0x0800a658
 8007df0:	20000328 	.word	0x20000328
 8007df4:	0800a66c 	.word	0x0800a66c
 8007df8:	0800a680 	.word	0x0800a680
 8007dfc:	0800a694 	.word	0x0800a694
 8007e00:	0800a6a8 	.word	0x0800a6a8
 8007e04:	20000008 	.word	0x20000008
 8007e08:	2000031c 	.word	0x2000031c
 8007e0c:	20000320 	.word	0x20000320

08007e10 <main>:
  * @brief  Main program.
  * @param  None
  * @retval None
  */
int main(void)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8007e16:	f7f8 ffa9 	bl	8000d6c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();		// Configure system clock to 180MHz
 8007e1a:	f000 f90f 	bl	800803c <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007e1e:	f000 f979 	bl	8008114 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8007e22:	f000 fa71 	bl	8008308 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8007e26:	f000 fa99 	bl	800835c <MX_USART6_UART_Init>

  /* Initialize countdown timer */
  MX_TIM3_Init();
 8007e2a:	f000 fac9 	bl	80083c0 <MX_TIM3_Init>
  HAL_TIM_Base_Start_IT(&htim3);	//Interrupt triggers every second
 8007e2e:	4873      	ldr	r0, [pc, #460]	; (8007ffc <main+0x1ec>)
 8007e30:	f7fa fdf6 	bl	8002a20 <HAL_TIM_Base_Start_IT>
  time_flag = 0;
 8007e34:	4b72      	ldr	r3, [pc, #456]	; (8008000 <main+0x1f0>)
 8007e36:	2200      	movs	r2, #0
 8007e38:	601a      	str	r2, [r3, #0]

  // microSD Setup
  microSD_init();
 8007e3a:	f000 fbd7 	bl	80085ec <microSD_init>
  MX_FATFS_Init();
 8007e3e:	f7ff f9eb 	bl	8007218 <MX_FATFS_Init>

  // WS2812B Setup
  LED_Init();
 8007e42:	f001 fe8b 	bl	8009b5c <LED_Init>
  LED_set_color_all(0x00, 0x00, 0x00);	//Set color order of array. Ex: R0,G0,B0,R1,G1,B1
 8007e46:	2200      	movs	r2, #0
 8007e48:	2100      	movs	r1, #0
 8007e4a:	2000      	movs	r0, #0
 8007e4c:	f001 fb20 	bl	8009490 <LED_set_color_all>
  LED_update(1);
 8007e50:	2001      	movs	r0, #1
 8007e52:	f001 fc95 	bl	8009780 <LED_update>

  // Bluetooth Setup
	HAL_UART_Receive_IT(&huart6, UART6_rxBuffer, 1);
 8007e56:	2201      	movs	r2, #1
 8007e58:	496a      	ldr	r1, [pc, #424]	; (8008004 <main+0x1f4>)
 8007e5a:	486b      	ldr	r0, [pc, #428]	; (8008008 <main+0x1f8>)
 8007e5c:	f7fb ff54 	bl	8003d08 <HAL_UART_Receive_IT>
  // ------------------------------ //
  //       microSD Card Init        //
  // -------------------------------//

  /* Wait for microSD to initialize */
  HAL_Delay(500);
 8007e60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007e64:	f7f8 fff4 	bl	8000e50 <HAL_Delay>

  /* Check if microSD is connected physically */
	transmit_uart("-----------------------\r\n");
 8007e68:	4868      	ldr	r0, [pc, #416]	; (800800c <main+0x1fc>)
 8007e6a:	f7ff feb3 	bl	8007bd4 <transmit_uart>
	while (check_microSD_conn() == FAIL){
 8007e6e:	e004      	b.n	8007e7a <main+0x6a>
  	transmit_uart("MicroSD card not detected!\r\n");
 8007e70:	4867      	ldr	r0, [pc, #412]	; (8008010 <main+0x200>)
 8007e72:	f7ff feaf 	bl	8007bd4 <transmit_uart>
  	pulse_red();
 8007e76:	f001 fa3b 	bl	80092f0 <pulse_red>
	while (check_microSD_conn() == FAIL){
 8007e7a:	f000 fc43 	bl	8008704 <check_microSD_conn>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d0f5      	beq.n	8007e70 <main+0x60>
  	//HAL_Delay(1000);
	}
	transmit_uart("MicroSD card detected!\r\n");
 8007e84:	4863      	ldr	r0, [pc, #396]	; (8008014 <main+0x204>)
 8007e86:	f7ff fea5 	bl	8007bd4 <transmit_uart>
	transmit_uart("-----------------------\r\n");
 8007e8a:	4860      	ldr	r0, [pc, #384]	; (800800c <main+0x1fc>)
 8007e8c:	f7ff fea2 	bl	8007bd4 <transmit_uart>
	//close_file();

	//open_file(file_name);
	//read_file();
	//close_file();
	chk_microSD();
 8007e90:	f000 fdf8 	bl	8008a84 <chk_microSD>

	// Timer Count Down //
	// ---------------- //
  tm1637Init();
 8007e94:	f001 f80a 	bl	8008eac <tm1637Init>
  tm1637SetBrightness(3);	 // Optionally set brightness. 0 is off. By default, initialized to full brightness.
 8007e98:	2003      	movs	r0, #3
 8007e9a:	f001 f8e5 	bl	8009068 <tm1637SetBrightness>
  tm1637DisplayTime(99, 99, 1);   // Display the value "1234" and turn on the `:` that is between digits 2 and 3.
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	2163      	movs	r1, #99	; 0x63
 8007ea2:	2063      	movs	r0, #99	; 0x63
 8007ea4:	f001 f84c 	bl	8008f40 <tm1637DisplayTime>

	// ------------- //
	// Infinite Loop //
	// ------------- //
  int curr_time = 0;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	603b      	str	r3, [r7, #0]

  while (1) {
  	if (check_microSD_conn() == PASS){
 8007eac:	f000 fc2a 	bl	8008704 <check_microSD_conn>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	f040 809b 	bne.w	8007fee <main+0x1de>

  		// Check status of LED strip
  		switch(LED_color){
 8007eb8:	4b57      	ldr	r3, [pc, #348]	; (8008018 <main+0x208>)
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	2b04      	cmp	r3, #4
 8007ebe:	d81c      	bhi.n	8007efa <main+0xea>
 8007ec0:	a201      	add	r2, pc, #4	; (adr r2, 8007ec8 <main+0xb8>)
 8007ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec6:	bf00      	nop
 8007ec8:	08007edd 	.word	0x08007edd
 8007ecc:	08007ee3 	.word	0x08007ee3
 8007ed0:	08007ef5 	.word	0x08007ef5
 8007ed4:	08007ee9 	.word	0x08007ee9
 8007ed8:	08007eef 	.word	0x08007eef
  		case GREEN:
  			pulse();
 8007edc:	f001 f9d4 	bl	8009288 <pulse>
  			break;
 8007ee0:	e00c      	b.n	8007efc <main+0xec>
  		case ORANGE:
  			pulse_orange();
 8007ee2:	f001 fa39 	bl	8009358 <pulse_orange>
  			break;
 8007ee6:	e009      	b.n	8007efc <main+0xec>
  		case BLUE:
  			pulse_blue();
 8007ee8:	f001 fa6a 	bl	80093c0 <pulse_blue>
  			break;
 8007eec:	e006      	b.n	8007efc <main+0xec>
  		case RED:
  			pulse_red();
 8007eee:	f001 f9ff 	bl	80092f0 <pulse_red>
  			break;
 8007ef2:	e003      	b.n	8007efc <main+0xec>
  		case PURPLE:
  			pulse_purple();
 8007ef4:	f001 fa98 	bl	8009428 <pulse_purple>
  			break;
 8007ef8:	e000      	b.n	8007efc <main+0xec>
  		default:
  			break;
 8007efa:	bf00      	nop
  		}

  		// Iterate through each lock
			for (int idx = 0; idx < NUM_OF_LOCKS; idx++) {
 8007efc:	2300      	movs	r3, #0
 8007efe:	607b      	str	r3, [r7, #4]
 8007f00:	e06c      	b.n	8007fdc <main+0x1cc>
				// Check if lock flag is set
				if (lock_flag_arr[idx] == 1){
 8007f02:	4a46      	ldr	r2, [pc, #280]	; (800801c <main+0x20c>)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	4413      	add	r3, r2
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d12c      	bne.n	8007f68 <main+0x158>
					// Clear lock flag
					lock_flag_arr[idx] = 0;
 8007f0e:	4a43      	ldr	r2, [pc, #268]	; (800801c <main+0x20c>)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4413      	add	r3, r2
 8007f14:	2200      	movs	r2, #0
 8007f16:	701a      	strb	r2, [r3, #0]

					// Check if unlocking is already in progress
					if (lock_prog_arr[idx] == 1){
 8007f18:	4a41      	ldr	r2, [pc, #260]	; (8008020 <main+0x210>)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d103      	bne.n	8007f2c <main+0x11c>
						transmit_uart("Unlocking already in progress. Do nothing.\r\n");
 8007f24:	483f      	ldr	r0, [pc, #252]	; (8008024 <main+0x214>)
 8007f26:	f7ff fe55 	bl	8007bd4 <transmit_uart>
 8007f2a:	e01d      	b.n	8007f68 <main+0x158>
					} else {
						// Set in progress flag
						lock_prog_arr[idx] = 1;
 8007f2c:	4a3c      	ldr	r2, [pc, #240]	; (8008020 <main+0x210>)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4413      	add	r3, r2
 8007f32:	2201      	movs	r2, #1
 8007f34:	701a      	strb	r2, [r3, #0]

						// Log start time of unlocking
						if (timer_cnt > MAX_TIMER - UNLOCK_DELAY) {
 8007f36:	4b3c      	ldr	r3, [pc, #240]	; (8008028 <main+0x218>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2b62      	cmp	r3, #98	; 0x62
 8007f3c:	dd0a      	ble.n	8007f54 <main+0x144>
							end_time_arr[idx] = (timer_cnt + UNLOCK_DELAY) - MAX_TIMER;
 8007f3e:	4b3a      	ldr	r3, [pc, #232]	; (8008028 <main+0x218>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	3b62      	subs	r3, #98	; 0x62
 8007f46:	b2d9      	uxtb	r1, r3
 8007f48:	4a38      	ldr	r2, [pc, #224]	; (800802c <main+0x21c>)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	460a      	mov	r2, r1
 8007f50:	701a      	strb	r2, [r3, #0]
 8007f52:	e009      	b.n	8007f68 <main+0x158>
						} else {
							end_time_arr[idx] = timer_cnt + UNLOCK_DELAY;
 8007f54:	4b34      	ldr	r3, [pc, #208]	; (8008028 <main+0x218>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	b2d9      	uxtb	r1, r3
 8007f5e:	4a33      	ldr	r2, [pc, #204]	; (800802c <main+0x21c>)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	4413      	add	r3, r2
 8007f64:	460a      	mov	r2, r1
 8007f66:	701a      	strb	r2, [r3, #0]
						}
					}
				}

				// Check if unlock is already in progress
				if (lock_prog_arr[idx] == 1){
 8007f68:	4a2d      	ldr	r2, [pc, #180]	; (8008020 <main+0x210>)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d130      	bne.n	8007fd6 <main+0x1c6>
					curr_time = timer_cnt;
 8007f74:	4b2c      	ldr	r3, [pc, #176]	; (8008028 <main+0x218>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	603b      	str	r3, [r7, #0]

					if (curr_time == end_time_arr[idx]){
 8007f7a:	4a2c      	ldr	r2, [pc, #176]	; (800802c <main+0x21c>)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	4413      	add	r3, r2
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	461a      	mov	r2, r3
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d119      	bne.n	8007fbe <main+0x1ae>
						HAL_GPIO_WritePin(lock_port_arr[idx], lock_pin_arr[idx], GPIO_PIN_RESET);
 8007f8a:	4a29      	ldr	r2, [pc, #164]	; (8008030 <main+0x220>)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007f92:	4a28      	ldr	r2, [pc, #160]	; (8008034 <main+0x224>)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	f7f9 fc37 	bl	8001810 <HAL_GPIO_WritePin>
						lock_prog_arr[idx] = 0;
 8007fa2:	4a1f      	ldr	r2, [pc, #124]	; (8008020 <main+0x210>)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	4413      	add	r3, r2
 8007fa8:	2200      	movs	r2, #0
 8007faa:	701a      	strb	r2, [r3, #0]
						end_time_arr[idx] = 0;
 8007fac:	4a1f      	ldr	r2, [pc, #124]	; (800802c <main+0x21c>)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	701a      	strb	r2, [r3, #0]
						transmit_uart("Locking\r\n");
 8007fb6:	4820      	ldr	r0, [pc, #128]	; (8008038 <main+0x228>)
 8007fb8:	f7ff fe0c 	bl	8007bd4 <transmit_uart>
 8007fbc:	e00b      	b.n	8007fd6 <main+0x1c6>
					} else {
						HAL_GPIO_WritePin(lock_port_arr[idx], lock_pin_arr[idx], GPIO_PIN_SET);
 8007fbe:	4a1c      	ldr	r2, [pc, #112]	; (8008030 <main+0x220>)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007fc6:	4a1b      	ldr	r2, [pc, #108]	; (8008034 <main+0x224>)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	f7f9 fc1d 	bl	8001810 <HAL_GPIO_WritePin>
			for (int idx = 0; idx < NUM_OF_LOCKS; idx++) {
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	607b      	str	r3, [r7, #4]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2b09      	cmp	r3, #9
 8007fe0:	dd8f      	ble.n	8007f02 <main+0xf2>
 8007fe2:	e763      	b.n	8007eac <main+0x9c>
					}
				}
			}
  	} else {
  		while (check_microSD_conn() == FAIL){
  			transmit_uart("MicroSD card not detected!\r\n");
 8007fe4:	480a      	ldr	r0, [pc, #40]	; (8008010 <main+0x200>)
 8007fe6:	f7ff fdf5 	bl	8007bd4 <transmit_uart>
  			pulse_red();
 8007fea:	f001 f981 	bl	80092f0 <pulse_red>
  		while (check_microSD_conn() == FAIL){
 8007fee:	f000 fb89 	bl	8008704 <check_microSD_conn>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d0f5      	beq.n	8007fe4 <main+0x1d4>
  	if (check_microSD_conn() == PASS){
 8007ff8:	e758      	b.n	8007eac <main+0x9c>
 8007ffa:	bf00      	nop
 8007ffc:	200034c4 	.word	0x200034c4
 8008000:	20000320 	.word	0x20000320
 8008004:	20003504 	.word	0x20003504
 8008008:	200035e0 	.word	0x200035e0
 800800c:	0800a6bc 	.word	0x0800a6bc
 8008010:	0800a6d8 	.word	0x0800a6d8
 8008014:	0800a6f8 	.word	0x0800a6f8
 8008018:	200023c9 	.word	0x200023c9
 800801c:	20000328 	.word	0x20000328
 8008020:	20000334 	.word	0x20000334
 8008024:	0800a714 	.word	0x0800a714
 8008028:	20000324 	.word	0x20000324
 800802c:	20004724 	.word	0x20004724
 8008030:	20000024 	.word	0x20000024
 8008034:	20000010 	.word	0x20000010
 8008038:	0800a744 	.word	0x0800a744

0800803c <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b094      	sub	sp, #80	; 0x50
 8008040:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008042:	f107 0320 	add.w	r3, r7, #32
 8008046:	2230      	movs	r2, #48	; 0x30
 8008048:	2100      	movs	r1, #0
 800804a:	4618      	mov	r0, r3
 800804c:	f001 febe 	bl	8009dcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008050:	f107 030c 	add.w	r3, r7, #12
 8008054:	2200      	movs	r2, #0
 8008056:	601a      	str	r2, [r3, #0]
 8008058:	605a      	str	r2, [r3, #4]
 800805a:	609a      	str	r2, [r3, #8]
 800805c:	60da      	str	r2, [r3, #12]
 800805e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008060:	2300      	movs	r3, #0
 8008062:	60bb      	str	r3, [r7, #8]
 8008064:	4b29      	ldr	r3, [pc, #164]	; (800810c <SystemClock_Config+0xd0>)
 8008066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008068:	4a28      	ldr	r2, [pc, #160]	; (800810c <SystemClock_Config+0xd0>)
 800806a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800806e:	6413      	str	r3, [r2, #64]	; 0x40
 8008070:	4b26      	ldr	r3, [pc, #152]	; (800810c <SystemClock_Config+0xd0>)
 8008072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008078:	60bb      	str	r3, [r7, #8]
 800807a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800807c:	2300      	movs	r3, #0
 800807e:	607b      	str	r3, [r7, #4]
 8008080:	4b23      	ldr	r3, [pc, #140]	; (8008110 <SystemClock_Config+0xd4>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a22      	ldr	r2, [pc, #136]	; (8008110 <SystemClock_Config+0xd4>)
 8008086:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800808a:	6013      	str	r3, [r2, #0]
 800808c:	4b20      	ldr	r3, [pc, #128]	; (8008110 <SystemClock_Config+0xd4>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008094:	607b      	str	r3, [r7, #4]
 8008096:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008098:	2302      	movs	r3, #2
 800809a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800809c:	2301      	movs	r3, #1
 800809e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80080a0:	2310      	movs	r3, #16
 80080a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80080a4:	2302      	movs	r3, #2
 80080a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80080a8:	2300      	movs	r3, #0
 80080aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80080ac:	2310      	movs	r3, #16
 80080ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80080b0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80080b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80080b6:	2304      	movs	r3, #4
 80080b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80080ba:	2304      	movs	r3, #4
 80080bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80080be:	f107 0320 	add.w	r3, r7, #32
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7f9 fbbe 	bl	8001844 <HAL_RCC_OscConfig>
 80080c8:	4603      	mov	r3, r0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d002      	beq.n	80080d4 <SystemClock_Config+0x98>
  {
    Error_Handler(SYSCONF_ERROR1);
 80080ce:	2000      	movs	r0, #0
 80080d0:	f000 fa30 	bl	8008534 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80080d4:	230f      	movs	r3, #15
 80080d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80080d8:	2302      	movs	r3, #2
 80080da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80080dc:	2300      	movs	r3, #0
 80080de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80080e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80080e6:	2300      	movs	r3, #0
 80080e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80080ea:	f107 030c 	add.w	r3, r7, #12
 80080ee:	2102      	movs	r1, #2
 80080f0:	4618      	mov	r0, r3
 80080f2:	f7f9 fe17 	bl	8001d24 <HAL_RCC_ClockConfig>
 80080f6:	4603      	mov	r3, r0
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d002      	beq.n	8008102 <SystemClock_Config+0xc6>
  {
    Error_Handler(SYSCONF_ERROR2);
 80080fc:	2001      	movs	r0, #1
 80080fe:	f000 fa19 	bl	8008534 <Error_Handler>
  }
}
 8008102:	bf00      	nop
 8008104:	3750      	adds	r7, #80	; 0x50
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	40023800 	.word	0x40023800
 8008110:	40007000 	.word	0x40007000

08008114 <MX_GPIO_Init>:
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void){
 8008114:	b580      	push	{r7, lr}
 8008116:	b08a      	sub	sp, #40	; 0x28
 8008118:	af00      	add	r7, sp, #0
  // GPIO Ports Clock Enable
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800811a:	2300      	movs	r3, #0
 800811c:	613b      	str	r3, [r7, #16]
 800811e:	4b75      	ldr	r3, [pc, #468]	; (80082f4 <MX_GPIO_Init+0x1e0>)
 8008120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008122:	4a74      	ldr	r2, [pc, #464]	; (80082f4 <MX_GPIO_Init+0x1e0>)
 8008124:	f043 0304 	orr.w	r3, r3, #4
 8008128:	6313      	str	r3, [r2, #48]	; 0x30
 800812a:	4b72      	ldr	r3, [pc, #456]	; (80082f4 <MX_GPIO_Init+0x1e0>)
 800812c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800812e:	f003 0304 	and.w	r3, r3, #4
 8008132:	613b      	str	r3, [r7, #16]
 8008134:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008136:	2300      	movs	r3, #0
 8008138:	60fb      	str	r3, [r7, #12]
 800813a:	4b6e      	ldr	r3, [pc, #440]	; (80082f4 <MX_GPIO_Init+0x1e0>)
 800813c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800813e:	4a6d      	ldr	r2, [pc, #436]	; (80082f4 <MX_GPIO_Init+0x1e0>)
 8008140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008144:	6313      	str	r3, [r2, #48]	; 0x30
 8008146:	4b6b      	ldr	r3, [pc, #428]	; (80082f4 <MX_GPIO_Init+0x1e0>)
 8008148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800814a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800814e:	60fb      	str	r3, [r7, #12]
 8008150:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008152:	2300      	movs	r3, #0
 8008154:	60bb      	str	r3, [r7, #8]
 8008156:	4b67      	ldr	r3, [pc, #412]	; (80082f4 <MX_GPIO_Init+0x1e0>)
 8008158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800815a:	4a66      	ldr	r2, [pc, #408]	; (80082f4 <MX_GPIO_Init+0x1e0>)
 800815c:	f043 0301 	orr.w	r3, r3, #1
 8008160:	6313      	str	r3, [r2, #48]	; 0x30
 8008162:	4b64      	ldr	r3, [pc, #400]	; (80082f4 <MX_GPIO_Init+0x1e0>)
 8008164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008166:	f003 0301 	and.w	r3, r3, #1
 800816a:	60bb      	str	r3, [r7, #8]
 800816c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800816e:	2300      	movs	r3, #0
 8008170:	607b      	str	r3, [r7, #4]
 8008172:	4b60      	ldr	r3, [pc, #384]	; (80082f4 <MX_GPIO_Init+0x1e0>)
 8008174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008176:	4a5f      	ldr	r2, [pc, #380]	; (80082f4 <MX_GPIO_Init+0x1e0>)
 8008178:	f043 0302 	orr.w	r3, r3, #2
 800817c:	6313      	str	r3, [r2, #48]	; 0x30
 800817e:	4b5d      	ldr	r3, [pc, #372]	; (80082f4 <MX_GPIO_Init+0x1e0>)
 8008180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008182:	f003 0302 	and.w	r3, r3, #2
 8008186:	607b      	str	r3, [r7, #4]
 8008188:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800818a:	f107 0314 	add.w	r3, r7, #20
 800818e:	2200      	movs	r2, #0
 8008190:	601a      	str	r2, [r3, #0]
 8008192:	605a      	str	r2, [r3, #4]
 8008194:	609a      	str	r2, [r3, #8]
 8008196:	60da      	str	r2, [r3, #12]
 8008198:	611a      	str	r2, [r3, #16]

  // Configure GPIO pin Output Level
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800819a:	2200      	movs	r2, #0
 800819c:	2120      	movs	r1, #32
 800819e:	4856      	ldr	r0, [pc, #344]	; (80082f8 <MX_GPIO_Init+0x1e4>)
 80081a0:	f7f9 fb36 	bl	8001810 <HAL_GPIO_WritePin>

  // Configure GPIO pin : B1_Pin
  GPIO_InitStruct.Pin = B1_Pin;
 80081a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80081a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80081aa:	4b54      	ldr	r3, [pc, #336]	; (80082fc <MX_GPIO_Init+0x1e8>)
 80081ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081ae:	2300      	movs	r3, #0
 80081b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80081b2:	f107 0314 	add.w	r3, r7, #20
 80081b6:	4619      	mov	r1, r3
 80081b8:	4851      	ldr	r0, [pc, #324]	; (8008300 <MX_GPIO_Init+0x1ec>)
 80081ba:	f7f9 f98f 	bl	80014dc <HAL_GPIO_Init>

  // Configure GPIO pin : LD2_Pin
  GPIO_InitStruct.Pin = LD2_Pin;
 80081be:	2320      	movs	r3, #32
 80081c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80081c2:	2301      	movs	r3, #1
 80081c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081c6:	2300      	movs	r3, #0
 80081c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081ca:	2300      	movs	r3, #0
 80081cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80081ce:	f107 0314 	add.w	r3, r7, #20
 80081d2:	4619      	mov	r1, r3
 80081d4:	4848      	ldr	r0, [pc, #288]	; (80082f8 <MX_GPIO_Init+0x1e4>)
 80081d6:	f7f9 f981 	bl	80014dc <HAL_GPIO_Init>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80081da:	2200      	movs	r2, #0
 80081dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80081e0:	4848      	ldr	r0, [pc, #288]	; (8008304 <MX_GPIO_Init+0x1f0>)
 80081e2:	f7f9 fb15 	bl	8001810 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : SD_CS_Pin */
	GPIO_InitStruct.Pin = SD_CS_Pin;
 80081e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80081ea:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80081ec:	2301      	movs	r3, #1
 80081ee:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081f0:	2300      	movs	r3, #0
 80081f2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081f4:	2300      	movs	r3, #0
 80081f6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80081f8:	f107 0314 	add.w	r3, r7, #20
 80081fc:	4619      	mov	r1, r3
 80081fe:	4841      	ldr	r0, [pc, #260]	; (8008304 <MX_GPIO_Init+0x1f0>)
 8008200:	f7f9 f96c 	bl	80014dc <HAL_GPIO_Init>
	 * Button 4 PA12
	 * Lock 1	PA9
	 * Lock 2	PA8
	 * Lock 3
	 * Lock 4 */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8008204:	2200      	movs	r2, #0
 8008206:	2102      	movs	r1, #2
 8008208:	483b      	ldr	r0, [pc, #236]	; (80082f8 <MX_GPIO_Init+0x1e4>)
 800820a:	f7f9 fb01 	bl	8001810 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800820e:	f641 4302 	movw	r3, #7170	; 0x1c02
 8008212:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008214:	2300      	movs	r3, #0
 8008216:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008218:	2300      	movs	r3, #0
 800821a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800821c:	2300      	movs	r3, #0
 800821e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008220:	f107 0314 	add.w	r3, r7, #20
 8008224:	4619      	mov	r1, r3
 8008226:	4834      	ldr	r0, [pc, #208]	; (80082f8 <MX_GPIO_Init+0x1e4>)
 8008228:	f7f9 f958 	bl	80014dc <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800822c:	2200      	movs	r2, #0
 800822e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008232:	4833      	ldr	r0, [pc, #204]	; (8008300 <MX_GPIO_Init+0x1ec>)
 8008234:	f7f9 faec 	bl	8001810 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8008238:	2200      	movs	r2, #0
 800823a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800823e:	4830      	ldr	r0, [pc, #192]	; (8008300 <MX_GPIO_Init+0x1ec>)
 8008240:	f7f9 fae6 	bl	8001810 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8008244:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008248:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800824a:	2301      	movs	r3, #1
 800824c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800824e:	2300      	movs	r3, #0
 8008250:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008252:	2300      	movs	r3, #0
 8008254:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008256:	f107 0314 	add.w	r3, r7, #20
 800825a:	4619      	mov	r1, r3
 800825c:	4828      	ldr	r0, [pc, #160]	; (8008300 <MX_GPIO_Init+0x1ec>)
 800825e:	f7f9 f93d 	bl	80014dc <HAL_GPIO_Init>

	/*Configure GPIO pin : PA9 */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8008262:	2200      	movs	r2, #0
 8008264:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008268:	4823      	ldr	r0, [pc, #140]	; (80082f8 <MX_GPIO_Init+0x1e4>)
 800826a:	f7f9 fad1 	bl	8001810 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800826e:	2200      	movs	r2, #0
 8008270:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008274:	4820      	ldr	r0, [pc, #128]	; (80082f8 <MX_GPIO_Init+0x1e4>)
 8008276:	f7f9 facb 	bl	8001810 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800827a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800827e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008280:	2301      	movs	r3, #1
 8008282:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008284:	2300      	movs	r3, #0
 8008286:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008288:	2300      	movs	r3, #0
 800828a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800828c:	f107 0314 	add.w	r3, r7, #20
 8008290:	4619      	mov	r1, r3
 8008292:	4819      	ldr	r0, [pc, #100]	; (80082f8 <MX_GPIO_Init+0x1e4>)
 8008294:	f7f9 f922 	bl	80014dc <HAL_GPIO_Init>

	/* Button4 PB14, Lock PB15 */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8008298:	2200      	movs	r2, #0
 800829a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800829e:	4819      	ldr	r0, [pc, #100]	; (8008304 <MX_GPIO_Init+0x1f0>)
 80082a0:	f7f9 fab6 	bl	8001810 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 80082a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082a8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80082aa:	2301      	movs	r3, #1
 80082ac:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082ae:	2300      	movs	r3, #0
 80082b0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082b2:	2300      	movs	r3, #0
 80082b4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80082b6:	f107 0314 	add.w	r3, r7, #20
 80082ba:	4619      	mov	r1, r3
 80082bc:	4811      	ldr	r0, [pc, #68]	; (8008304 <MX_GPIO_Init+0x1f0>)
 80082be:	f7f9 f90d 	bl	80014dc <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80082c2:	2200      	movs	r2, #0
 80082c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80082c8:	480e      	ldr	r0, [pc, #56]	; (8008304 <MX_GPIO_Init+0x1f0>)
 80082ca:	f7f9 faa1 	bl	8001810 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_14;
 80082ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80082d2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80082d4:	2300      	movs	r3, #0
 80082d6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082d8:	2300      	movs	r3, #0
 80082da:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082dc:	2300      	movs	r3, #0
 80082de:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80082e0:	f107 0314 	add.w	r3, r7, #20
 80082e4:	4619      	mov	r1, r3
 80082e6:	4807      	ldr	r0, [pc, #28]	; (8008304 <MX_GPIO_Init+0x1f0>)
 80082e8:	f7f9 f8f8 	bl	80014dc <HAL_GPIO_Init>
}
 80082ec:	bf00      	nop
 80082ee:	3728      	adds	r7, #40	; 0x28
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	40023800 	.word	0x40023800
 80082f8:	40020000 	.word	0x40020000
 80082fc:	10210000 	.word	0x10210000
 8008300:	40020800 	.word	0x40020800
 8008304:	40020400 	.word	0x40020400

08008308 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800830c:	4b11      	ldr	r3, [pc, #68]	; (8008354 <MX_USART2_UART_Init+0x4c>)
 800830e:	4a12      	ldr	r2, [pc, #72]	; (8008358 <MX_USART2_UART_Init+0x50>)
 8008310:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8008312:	4b10      	ldr	r3, [pc, #64]	; (8008354 <MX_USART2_UART_Init+0x4c>)
 8008314:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008318:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800831a:	4b0e      	ldr	r3, [pc, #56]	; (8008354 <MX_USART2_UART_Init+0x4c>)
 800831c:	2200      	movs	r2, #0
 800831e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008320:	4b0c      	ldr	r3, [pc, #48]	; (8008354 <MX_USART2_UART_Init+0x4c>)
 8008322:	2200      	movs	r2, #0
 8008324:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008326:	4b0b      	ldr	r3, [pc, #44]	; (8008354 <MX_USART2_UART_Init+0x4c>)
 8008328:	2200      	movs	r2, #0
 800832a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800832c:	4b09      	ldr	r3, [pc, #36]	; (8008354 <MX_USART2_UART_Init+0x4c>)
 800832e:	220c      	movs	r2, #12
 8008330:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008332:	4b08      	ldr	r3, [pc, #32]	; (8008354 <MX_USART2_UART_Init+0x4c>)
 8008334:	2200      	movs	r2, #0
 8008336:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008338:	4b06      	ldr	r3, [pc, #24]	; (8008354 <MX_USART2_UART_Init+0x4c>)
 800833a:	2200      	movs	r2, #0
 800833c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800833e:	4805      	ldr	r0, [pc, #20]	; (8008354 <MX_USART2_UART_Init+0x4c>)
 8008340:	f7fb fbfc 	bl	8003b3c <HAL_UART_Init>
 8008344:	4603      	mov	r3, r0
 8008346:	2b00      	cmp	r3, #0
 8008348:	d002      	beq.n	8008350 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler(UART_ERROR);
 800834a:	2007      	movs	r0, #7
 800834c:	f000 f8f2 	bl	8008534 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008350:	bf00      	nop
 8008352:	bd80      	pop	{r7, pc}
 8008354:	20003680 	.word	0x20003680
 8008358:	40004400 	.word	0x40004400

0800835c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8008360:	4b15      	ldr	r3, [pc, #84]	; (80083b8 <MX_USART6_UART_Init+0x5c>)
 8008362:	4a16      	ldr	r2, [pc, #88]	; (80083bc <MX_USART6_UART_Init+0x60>)
 8008364:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8008366:	4b14      	ldr	r3, [pc, #80]	; (80083b8 <MX_USART6_UART_Init+0x5c>)
 8008368:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800836c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800836e:	4b12      	ldr	r3, [pc, #72]	; (80083b8 <MX_USART6_UART_Init+0x5c>)
 8008370:	2200      	movs	r2, #0
 8008372:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8008374:	4b10      	ldr	r3, [pc, #64]	; (80083b8 <MX_USART6_UART_Init+0x5c>)
 8008376:	2200      	movs	r2, #0
 8008378:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800837a:	4b0f      	ldr	r3, [pc, #60]	; (80083b8 <MX_USART6_UART_Init+0x5c>)
 800837c:	2200      	movs	r2, #0
 800837e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8008380:	4b0d      	ldr	r3, [pc, #52]	; (80083b8 <MX_USART6_UART_Init+0x5c>)
 8008382:	220c      	movs	r2, #12
 8008384:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008386:	4b0c      	ldr	r3, [pc, #48]	; (80083b8 <MX_USART6_UART_Init+0x5c>)
 8008388:	2200      	movs	r2, #0
 800838a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800838c:	4b0a      	ldr	r3, [pc, #40]	; (80083b8 <MX_USART6_UART_Init+0x5c>)
 800838e:	2200      	movs	r2, #0
 8008390:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8008392:	4809      	ldr	r0, [pc, #36]	; (80083b8 <MX_USART6_UART_Init+0x5c>)
 8008394:	f7fb fbd2 	bl	8003b3c <HAL_UART_Init>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d002      	beq.n	80083a4 <MX_USART6_UART_Init+0x48>
  {
    Error_Handler(UART_ERROR);
 800839e:	2007      	movs	r0, #7
 80083a0:	f000 f8c8 	bl	8008534 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */
  HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80083a4:	2200      	movs	r2, #0
 80083a6:	2100      	movs	r1, #0
 80083a8:	2047      	movs	r0, #71	; 0x47
 80083aa:	f7f8 fe4e 	bl	800104a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 80083ae:	2047      	movs	r0, #71	; 0x47
 80083b0:	f7f8 fe67 	bl	8001082 <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART6_Init 2 */

}
 80083b4:	bf00      	nop
 80083b6:	bd80      	pop	{r7, pc}
 80083b8:	200035e0 	.word	0x200035e0
 80083bc:	40011400 	.word	0x40011400

080083c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b086      	sub	sp, #24
 80083c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80083c6:	f107 0308 	add.w	r3, r7, #8
 80083ca:	2200      	movs	r2, #0
 80083cc:	601a      	str	r2, [r3, #0]
 80083ce:	605a      	str	r2, [r3, #4]
 80083d0:	609a      	str	r2, [r3, #8]
 80083d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80083d4:	463b      	mov	r3, r7
 80083d6:	2200      	movs	r2, #0
 80083d8:	601a      	str	r2, [r3, #0]
 80083da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80083dc:	4b1f      	ldr	r3, [pc, #124]	; (800845c <MX_TIM3_Init+0x9c>)
 80083de:	4a20      	ldr	r2, [pc, #128]	; (8008460 <MX_TIM3_Init+0xa0>)
 80083e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 41999;	//84MHz/(42000 * 2000); max value of PSC and ARR is 2^16
 80083e2:	4b1e      	ldr	r3, [pc, #120]	; (800845c <MX_TIM3_Init+0x9c>)
 80083e4:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80083e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80083ea:	4b1c      	ldr	r3, [pc, #112]	; (800845c <MX_TIM3_Init+0x9c>)
 80083ec:	2200      	movs	r2, #0
 80083ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 80083f0:	4b1a      	ldr	r3, [pc, #104]	; (800845c <MX_TIM3_Init+0x9c>)
 80083f2:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80083f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80083f8:	4b18      	ldr	r3, [pc, #96]	; (800845c <MX_TIM3_Init+0x9c>)
 80083fa:	2200      	movs	r2, #0
 80083fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80083fe:	4b17      	ldr	r3, [pc, #92]	; (800845c <MX_TIM3_Init+0x9c>)
 8008400:	2200      	movs	r2, #0
 8008402:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8008404:	4815      	ldr	r0, [pc, #84]	; (800845c <MX_TIM3_Init+0x9c>)
 8008406:	f7fa fae0 	bl	80029ca <HAL_TIM_Base_Init>
 800840a:	4603      	mov	r3, r0
 800840c:	2b00      	cmp	r3, #0
 800840e:	d002      	beq.n	8008416 <MX_TIM3_Init+0x56>
  {
    Error_Handler(UART_ERROR);
 8008410:	2007      	movs	r0, #7
 8008412:	f000 f88f 	bl	8008534 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008416:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800841a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800841c:	f107 0308 	add.w	r3, r7, #8
 8008420:	4619      	mov	r1, r3
 8008422:	480e      	ldr	r0, [pc, #56]	; (800845c <MX_TIM3_Init+0x9c>)
 8008424:	f7fa fec6 	bl	80031b4 <HAL_TIM_ConfigClockSource>
 8008428:	4603      	mov	r3, r0
 800842a:	2b00      	cmp	r3, #0
 800842c:	d002      	beq.n	8008434 <MX_TIM3_Init+0x74>
  {
    Error_Handler(UART_ERROR);
 800842e:	2007      	movs	r0, #7
 8008430:	f000 f880 	bl	8008534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008434:	2300      	movs	r3, #0
 8008436:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008438:	2300      	movs	r3, #0
 800843a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800843c:	463b      	mov	r3, r7
 800843e:	4619      	mov	r1, r3
 8008440:	4806      	ldr	r0, [pc, #24]	; (800845c <MX_TIM3_Init+0x9c>)
 8008442:	f7fb faf9 	bl	8003a38 <HAL_TIMEx_MasterConfigSynchronization>
 8008446:	4603      	mov	r3, r0
 8008448:	2b00      	cmp	r3, #0
 800844a:	d002      	beq.n	8008452 <MX_TIM3_Init+0x92>
  {
    Error_Handler(UART_ERROR);
 800844c:	2007      	movs	r0, #7
 800844e:	f000 f871 	bl	8008534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8008452:	bf00      	nop
 8008454:	3718      	adds	r7, #24
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	200034c4 	.word	0x200034c4
 8008460:	40000400 	.word	0x40000400

08008464 <HAL_TIM_PeriodElapsedCallback>:

/* TIM3 interrupt called every second */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim3){
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]

	if (timer_cnt == MAX_TIMER) {
 800846c:	4b2c      	ldr	r3, [pc, #176]	; (8008520 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2b63      	cmp	r3, #99	; 0x63
 8008472:	d103      	bne.n	800847c <HAL_TIM_PeriodElapsedCallback+0x18>
		timer_cnt = 0;
 8008474:	4b2a      	ldr	r3, [pc, #168]	; (8008520 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8008476:	2200      	movs	r2, #0
 8008478:	601a      	str	r2, [r3, #0]
 800847a:	e004      	b.n	8008486 <HAL_TIM_PeriodElapsedCallback+0x22>
	} else {
		timer_cnt++;
 800847c:	4b28      	ldr	r3, [pc, #160]	; (8008520 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	3301      	adds	r3, #1
 8008482:	4a27      	ldr	r2, [pc, #156]	; (8008520 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8008484:	6013      	str	r3, [r2, #0]
	}

	//int2uart(timer_cnt);

	if (time_flag == 1){
 8008486:	4b27      	ldr	r3, [pc, #156]	; (8008524 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2b01      	cmp	r3, #1
 800848c:	d144      	bne.n	8008518 <HAL_TIM_PeriodElapsedCallback+0xb4>
		if (min_time == 0 && sec_time == 0){
 800848e:	4b26      	ldr	r3, [pc, #152]	; (8008528 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d126      	bne.n	80084e4 <HAL_TIM_PeriodElapsedCallback+0x80>
 8008496:	4b25      	ldr	r3, [pc, #148]	; (800852c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d122      	bne.n	80084e4 <HAL_TIM_PeriodElapsedCallback+0x80>

			//Blink every other second
			if (end_dur % 2 == 1){
 800849e:	4b24      	ldr	r3, [pc, #144]	; (8008530 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	f003 0301 	and.w	r3, r3, #1
 80084a8:	bfb8      	it	lt
 80084aa:	425b      	neglt	r3, r3
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d103      	bne.n	80084b8 <HAL_TIM_PeriodElapsedCallback+0x54>
				tm1637SetBrightness(0);
 80084b0:	2000      	movs	r0, #0
 80084b2:	f000 fdd9 	bl	8009068 <tm1637SetBrightness>
 80084b6:	e002      	b.n	80084be <HAL_TIM_PeriodElapsedCallback+0x5a>
			} else {
				tm1637SetBrightness(3);
 80084b8:	2003      	movs	r0, #3
 80084ba:	f000 fdd5 	bl	8009068 <tm1637SetBrightness>
			}

			// After 5 seconds, reset timer
			if (end_dur == 0){
 80084be:	4b1c      	ldr	r3, [pc, #112]	; (8008530 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d108      	bne.n	80084d8 <HAL_TIM_PeriodElapsedCallback+0x74>
				end_dur = sec_time - (sec_time - 5);
 80084c6:	4b1a      	ldr	r3, [pc, #104]	; (8008530 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80084c8:	2205      	movs	r2, #5
 80084ca:	601a      	str	r2, [r3, #0]
				min_time = COUNTDOWN_MIN;
 80084cc:	4b16      	ldr	r3, [pc, #88]	; (8008528 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80084ce:	2205      	movs	r2, #5
 80084d0:	601a      	str	r2, [r3, #0]
				sec_time = COUNTDOWN_SEC;
 80084d2:	4b16      	ldr	r3, [pc, #88]	; (800852c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80084d4:	2200      	movs	r2, #0
 80084d6:	601a      	str	r2, [r3, #0]
			}
			end_dur--;
 80084d8:	4b15      	ldr	r3, [pc, #84]	; (8008530 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	3b01      	subs	r3, #1
 80084de:	4a14      	ldr	r2, [pc, #80]	; (8008530 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80084e0:	6013      	str	r3, [r2, #0]
 80084e2:	e011      	b.n	8008508 <HAL_TIM_PeriodElapsedCallback+0xa4>
		} else {
			if (sec_time == 0){
 80084e4:	4b11      	ldr	r3, [pc, #68]	; (800852c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d108      	bne.n	80084fe <HAL_TIM_PeriodElapsedCallback+0x9a>
				min_time--;
 80084ec:	4b0e      	ldr	r3, [pc, #56]	; (8008528 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	3b01      	subs	r3, #1
 80084f2:	4a0d      	ldr	r2, [pc, #52]	; (8008528 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80084f4:	6013      	str	r3, [r2, #0]
				sec_time = SIXTY_SECONDS - 1;
 80084f6:	4b0d      	ldr	r3, [pc, #52]	; (800852c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80084f8:	223b      	movs	r2, #59	; 0x3b
 80084fa:	601a      	str	r2, [r3, #0]
 80084fc:	e004      	b.n	8008508 <HAL_TIM_PeriodElapsedCallback+0xa4>
			} else {
				sec_time--;
 80084fe:	4b0b      	ldr	r3, [pc, #44]	; (800852c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	3b01      	subs	r3, #1
 8008504:	4a09      	ldr	r2, [pc, #36]	; (800852c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8008506:	6013      	str	r3, [r2, #0]
			}
		}
		tm1637DisplayTime(min_time, sec_time, 1);
 8008508:	4b07      	ldr	r3, [pc, #28]	; (8008528 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800850a:	6818      	ldr	r0, [r3, #0]
 800850c:	4b07      	ldr	r3, [pc, #28]	; (800852c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2201      	movs	r2, #1
 8008512:	4619      	mov	r1, r3
 8008514:	f000 fd14 	bl	8008f40 <tm1637DisplayTime>
	}
}
 8008518:	bf00      	nop
 800851a:	3708      	adds	r7, #8
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}
 8008520:	20000324 	.word	0x20000324
 8008524:	20000320 	.word	0x20000320
 8008528:	20000008 	.word	0x20000008
 800852c:	2000031c 	.word	0x2000031c
 8008530:	2000000c 	.word	0x2000000c

08008534 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(uint8_t ERROR)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b082      	sub	sp, #8
 8008538:	af00      	add	r7, sp, #0
 800853a:	4603      	mov	r3, r0
 800853c:	71fb      	strb	r3, [r7, #7]
  while (1) {
    /* Turn LED2 on */
  	switch(ERROR) {
 800853e:	79fb      	ldrb	r3, [r7, #7]
 8008540:	2b08      	cmp	r3, #8
 8008542:	d84b      	bhi.n	80085dc <Error_Handler+0xa8>
 8008544:	a201      	add	r2, pc, #4	; (adr r2, 800854c <Error_Handler+0x18>)
 8008546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800854a:	bf00      	nop
 800854c:	08008571 	.word	0x08008571
 8008550:	0800857d 	.word	0x0800857d
 8008554:	08008595 	.word	0x08008595
 8008558:	080085a1 	.word	0x080085a1
 800855c:	08008589 	.word	0x08008589
 8008560:	080085b9 	.word	0x080085b9
 8008564:	080085ad 	.word	0x080085ad
 8008568:	080085c5 	.word	0x080085c5
 800856c:	080085d1 	.word	0x080085d1
  	case SYSCONF_ERROR1:
  		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8008570:	2201      	movs	r2, #1
 8008572:	2120      	movs	r1, #32
 8008574:	481c      	ldr	r0, [pc, #112]	; (80085e8 <Error_Handler+0xb4>)
 8008576:	f7f9 f94b 	bl	8001810 <HAL_GPIO_WritePin>
  		break;
 800857a:	e034      	b.n	80085e6 <Error_Handler+0xb2>
  	case SYSCONF_ERROR2:
  		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800857c:	2201      	movs	r2, #1
 800857e:	2120      	movs	r1, #32
 8008580:	4819      	ldr	r0, [pc, #100]	; (80085e8 <Error_Handler+0xb4>)
 8008582:	f7f9 f945 	bl	8001810 <HAL_GPIO_WritePin>
  		break;
 8008586:	e02e      	b.n	80085e6 <Error_Handler+0xb2>
  	case TIM_INIT_ERROR:
  	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8008588:	2201      	movs	r2, #1
 800858a:	2120      	movs	r1, #32
 800858c:	4816      	ldr	r0, [pc, #88]	; (80085e8 <Error_Handler+0xb4>)
 800858e:	f7f9 f93f 	bl	8001810 <HAL_GPIO_WritePin>
  	  break;
 8008592:	e028      	b.n	80085e6 <Error_Handler+0xb2>
  	case EN_PWM_ERROR:
  	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8008594:	2201      	movs	r2, #1
 8008596:	2120      	movs	r1, #32
 8008598:	4813      	ldr	r0, [pc, #76]	; (80085e8 <Error_Handler+0xb4>)
 800859a:	f7f9 f939 	bl	8001810 <HAL_GPIO_WritePin>
  	  break;
 800859e:	e022      	b.n	80085e6 <Error_Handler+0xb2>
  	case TIM_CONFIG_ERROR:
  	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80085a0:	2201      	movs	r2, #1
 80085a2:	2120      	movs	r1, #32
 80085a4:	4810      	ldr	r0, [pc, #64]	; (80085e8 <Error_Handler+0xb4>)
 80085a6:	f7f9 f933 	bl	8001810 <HAL_GPIO_WritePin>
  	  break;
 80085aa:	e01c      	b.n	80085e6 <Error_Handler+0xb2>
  	case DMA_ERROR:
  	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80085ac:	2201      	movs	r2, #1
 80085ae:	2120      	movs	r1, #32
 80085b0:	480d      	ldr	r0, [pc, #52]	; (80085e8 <Error_Handler+0xb4>)
 80085b2:	f7f9 f92d 	bl	8001810 <HAL_GPIO_WritePin>
  	  break;
 80085b6:	e016      	b.n	80085e6 <Error_Handler+0xb2>
  	case GPIO_ERROR:
  	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80085b8:	2201      	movs	r2, #1
 80085ba:	2120      	movs	r1, #32
 80085bc:	480a      	ldr	r0, [pc, #40]	; (80085e8 <Error_Handler+0xb4>)
 80085be:	f7f9 f927 	bl	8001810 <HAL_GPIO_WritePin>
  	  break;
 80085c2:	e010      	b.n	80085e6 <Error_Handler+0xb2>
  	case UART_ERROR:
  		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80085c4:	2201      	movs	r2, #1
 80085c6:	2120      	movs	r1, #32
 80085c8:	4807      	ldr	r0, [pc, #28]	; (80085e8 <Error_Handler+0xb4>)
 80085ca:	f7f9 f921 	bl	8001810 <HAL_GPIO_WritePin>
  		break;
 80085ce:	e00a      	b.n	80085e6 <Error_Handler+0xb2>
  	case OPEN_ERROR:
  		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80085d0:	2201      	movs	r2, #1
 80085d2:	2120      	movs	r1, #32
 80085d4:	4804      	ldr	r0, [pc, #16]	; (80085e8 <Error_Handler+0xb4>)
 80085d6:	f7f9 f91b 	bl	8001810 <HAL_GPIO_WritePin>
  		break;
 80085da:	e004      	b.n	80085e6 <Error_Handler+0xb2>
  	default:
  	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80085dc:	2200      	movs	r2, #0
 80085de:	2120      	movs	r1, #32
 80085e0:	4801      	ldr	r0, [pc, #4]	; (80085e8 <Error_Handler+0xb4>)
 80085e2:	f7f9 f915 	bl	8001810 <HAL_GPIO_WritePin>
  	switch(ERROR) {
 80085e6:	e7aa      	b.n	800853e <Error_Handler+0xa>
 80085e8:	40020000 	.word	0x40020000

080085ec <microSD_init>:

#include "microSD.h"



void microSD_init (void){
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b086      	sub	sp, #24
 80085f0:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80085f2:	2300      	movs	r3, #0
 80085f4:	603b      	str	r3, [r7, #0]
 80085f6:	4b33      	ldr	r3, [pc, #204]	; (80086c4 <microSD_init+0xd8>)
 80085f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085fa:	4a32      	ldr	r2, [pc, #200]	; (80086c4 <microSD_init+0xd8>)
 80085fc:	f043 0302 	orr.w	r3, r3, #2
 8008600:	6313      	str	r3, [r2, #48]	; 0x30
 8008602:	4b30      	ldr	r3, [pc, #192]	; (80086c4 <microSD_init+0xd8>)
 8008604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008606:	f003 0302 	and.w	r3, r3, #2
 800860a:	603b      	str	r3, [r7, #0]
 800860c:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800860e:	1d3b      	adds	r3, r7, #4
 8008610:	2200      	movs	r2, #0
 8008612:	601a      	str	r2, [r3, #0]
 8008614:	605a      	str	r2, [r3, #4]
 8008616:	609a      	str	r2, [r3, #8]
 8008618:	60da      	str	r2, [r3, #12]
 800861a:	611a      	str	r2, [r3, #16]

  // Configure GPIO pin : PH1_Pin
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_1, GPIO_PIN_RESET);
 800861c:	2200      	movs	r2, #0
 800861e:	2102      	movs	r1, #2
 8008620:	4829      	ldr	r0, [pc, #164]	; (80086c8 <microSD_init+0xdc>)
 8008622:	f7f9 f8f5 	bl	8001810 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8008626:	2302      	movs	r3, #2
 8008628:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800862a:	2300      	movs	r3, #0
 800862c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800862e:	2300      	movs	r3, #0
 8008630:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008632:	2300      	movs	r3, #0
 8008634:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8008636:	1d3b      	adds	r3, r7, #4
 8008638:	4619      	mov	r1, r3
 800863a:	4823      	ldr	r0, [pc, #140]	; (80086c8 <microSD_init+0xdc>)
 800863c:	f7f8 ff4e 	bl	80014dc <HAL_GPIO_Init>

  // Configure GPIO pin : SD_CS_Pin
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8008640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008644:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008646:	2301      	movs	r3, #1
 8008648:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800864a:	2300      	movs	r3, #0
 800864c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800864e:	2300      	movs	r3, #0
 8008650:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8008652:	1d3b      	adds	r3, r7, #4
 8008654:	4619      	mov	r1, r3
 8008656:	481d      	ldr	r0, [pc, #116]	; (80086cc <microSD_init+0xe0>)
 8008658:	f7f8 ff40 	bl	80014dc <HAL_GPIO_Init>


  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800865c:	4b1c      	ldr	r3, [pc, #112]	; (80086d0 <microSD_init+0xe4>)
 800865e:	4a1d      	ldr	r2, [pc, #116]	; (80086d4 <microSD_init+0xe8>)
 8008660:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8008662:	4b1b      	ldr	r3, [pc, #108]	; (80086d0 <microSD_init+0xe4>)
 8008664:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008668:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800866a:	4b19      	ldr	r3, [pc, #100]	; (80086d0 <microSD_init+0xe4>)
 800866c:	2200      	movs	r2, #0
 800866e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8008670:	4b17      	ldr	r3, [pc, #92]	; (80086d0 <microSD_init+0xe4>)
 8008672:	2200      	movs	r2, #0
 8008674:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008676:	4b16      	ldr	r3, [pc, #88]	; (80086d0 <microSD_init+0xe4>)
 8008678:	2200      	movs	r2, #0
 800867a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800867c:	4b14      	ldr	r3, [pc, #80]	; (80086d0 <microSD_init+0xe4>)
 800867e:	2200      	movs	r2, #0
 8008680:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8008682:	4b13      	ldr	r3, [pc, #76]	; (80086d0 <microSD_init+0xe4>)
 8008684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008688:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;	//SPI_BAUDRATEPRESCALER_2
 800868a:	4b11      	ldr	r3, [pc, #68]	; (80086d0 <microSD_init+0xe4>)
 800868c:	2200      	movs	r2, #0
 800868e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008690:	4b0f      	ldr	r3, [pc, #60]	; (80086d0 <microSD_init+0xe4>)
 8008692:	2200      	movs	r2, #0
 8008694:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8008696:	4b0e      	ldr	r3, [pc, #56]	; (80086d0 <microSD_init+0xe4>)
 8008698:	2200      	movs	r2, #0
 800869a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800869c:	4b0c      	ldr	r3, [pc, #48]	; (80086d0 <microSD_init+0xe4>)
 800869e:	2200      	movs	r2, #0
 80086a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80086a2:	4b0b      	ldr	r3, [pc, #44]	; (80086d0 <microSD_init+0xe4>)
 80086a4:	220a      	movs	r2, #10
 80086a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80086a8:	4809      	ldr	r0, [pc, #36]	; (80086d0 <microSD_init+0xe4>)
 80086aa:	f7f9 fd2d 	bl	8002108 <HAL_SPI_Init>
 80086ae:	4603      	mov	r3, r0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d002      	beq.n	80086ba <microSD_init+0xce>
  {
    Error_Handler(SPI_ERROR);
 80086b4:	2009      	movs	r0, #9
 80086b6:	f7ff ff3d 	bl	8008534 <Error_Handler>
  }
}
 80086ba:	bf00      	nop
 80086bc:	3718      	adds	r7, #24
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop
 80086c4:	40023800 	.word	0x40023800
 80086c8:	40021c00 	.word	0x40021c00
 80086cc:	40020400 	.word	0x40020400
 80086d0:	2000242c 	.word	0x2000242c
 80086d4:	40003800 	.word	0x40003800

080086d8 <transmit_uart_SD>:

void transmit_uart_SD(char *string){
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f7f7 fd7d 	bl	80001e0 <strlen>
 80086e6:	4603      	mov	r3, r0
 80086e8:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t*) string, len, 200);
 80086ea:	7bfb      	ldrb	r3, [r7, #15]
 80086ec:	b29a      	uxth	r2, r3
 80086ee:	23c8      	movs	r3, #200	; 0xc8
 80086f0:	6879      	ldr	r1, [r7, #4]
 80086f2:	4803      	ldr	r0, [pc, #12]	; (8008700 <transmit_uart_SD+0x28>)
 80086f4:	f7fb fa6f 	bl	8003bd6 <HAL_UART_Transmit>
}
 80086f8:	bf00      	nop
 80086fa:	3710      	adds	r7, #16
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}
 8008700:	20003680 	.word	0x20003680

08008704 <check_microSD_conn>:

sd_ret_val check_microSD_conn (void) {
 8008704:	b580      	push	{r7, lr}
 8008706:	af00      	add	r7, sp, #0
	if(!(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_1))){
 8008708:	2102      	movs	r1, #2
 800870a:	4805      	ldr	r0, [pc, #20]	; (8008720 <check_microSD_conn+0x1c>)
 800870c:	f7f9 f868 	bl	80017e0 <HAL_GPIO_ReadPin>
 8008710:	4603      	mov	r3, r0
 8008712:	2b00      	cmp	r3, #0
 8008714:	d101      	bne.n	800871a <check_microSD_conn+0x16>
		return SD_FAIL;
 8008716:	2300      	movs	r3, #0
 8008718:	e000      	b.n	800871c <check_microSD_conn+0x18>
	}
	return SD_PASS;
 800871a:	2301      	movs	r3, #1
}
 800871c:	4618      	mov	r0, r3
 800871e:	bd80      	pop	{r7, pc}
 8008720:	40021c00 	.word	0x40021c00

08008724 <mount_sd>:

sd_ret_val mount_sd(void){
 8008724:	b580      	push	{r7, lr}
 8008726:	af00      	add	r7, sp, #0
	//fres = f_mount(&fs, "", 0);
	pfs = malloc(sizeof (FATFS));
 8008728:	f241 0038 	movw	r0, #4152	; 0x1038
 800872c:	f001 fb3e 	bl	8009dac <malloc>
 8008730:	4603      	mov	r3, r0
 8008732:	461a      	mov	r2, r3
 8008734:	4b0d      	ldr	r3, [pc, #52]	; (800876c <mount_sd+0x48>)
 8008736:	601a      	str	r2, [r3, #0]
	fres = f_mount(pfs, "", 0);
 8008738:	4b0c      	ldr	r3, [pc, #48]	; (800876c <mount_sd+0x48>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2200      	movs	r2, #0
 800873e:	490c      	ldr	r1, [pc, #48]	; (8008770 <mount_sd+0x4c>)
 8008740:	4618      	mov	r0, r3
 8008742:	f7fe fa0b 	bl	8006b5c <f_mount>
 8008746:	4603      	mov	r3, r0
 8008748:	461a      	mov	r2, r3
 800874a:	4b0a      	ldr	r3, [pc, #40]	; (8008774 <mount_sd+0x50>)
 800874c:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK) {
 800874e:	4b09      	ldr	r3, [pc, #36]	; (8008774 <mount_sd+0x50>)
 8008750:	781b      	ldrb	r3, [r3, #0]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d104      	bne.n	8008760 <mount_sd+0x3c>
		transmit_uart_SD("PASS - MicroSD card mounted successfully!\r\n");
 8008756:	4808      	ldr	r0, [pc, #32]	; (8008778 <mount_sd+0x54>)
 8008758:	f7ff ffbe 	bl	80086d8 <transmit_uart_SD>
		return SD_PASS;
 800875c:	2301      	movs	r3, #1
 800875e:	e003      	b.n	8008768 <mount_sd+0x44>
	} else {
		transmit_uart_SD("FAIL - MicroSD card's mount error!\r\n");
 8008760:	4806      	ldr	r0, [pc, #24]	; (800877c <mount_sd+0x58>)
 8008762:	f7ff ffb9 	bl	80086d8 <transmit_uart_SD>
		return SD_FAIL;
 8008766:	2300      	movs	r3, #0
	}
	return SD_FAIL;
}
 8008768:	4618      	mov	r0, r3
 800876a:	bd80      	pop	{r7, pc}
 800876c:	2000363c 	.word	0x2000363c
 8008770:	0800a750 	.word	0x0800a750
 8008774:	200036c0 	.word	0x200036c0
 8008778:	0800a754 	.word	0x0800a754
 800877c:	0800a780 	.word	0x0800a780

08008780 <unmount_sd>:

sd_ret_val unmount_sd(void){
 8008780:	b580      	push	{r7, lr}
 8008782:	af00      	add	r7, sp, #0
	//f_mount(NULL, "", 1);
	f_mount(0, "", 0);
 8008784:	2200      	movs	r2, #0
 8008786:	4911      	ldr	r1, [pc, #68]	; (80087cc <unmount_sd+0x4c>)
 8008788:	2000      	movs	r0, #0
 800878a:	f7fe f9e7 	bl	8006b5c <f_mount>
	if (fres == FR_OK) {
 800878e:	4b10      	ldr	r3, [pc, #64]	; (80087d0 <unmount_sd+0x50>)
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d109      	bne.n	80087aa <unmount_sd+0x2a>
		transmit_uart_SD("PASS - MicroSD successfully unmounted.\r\n");
 8008796:	480f      	ldr	r0, [pc, #60]	; (80087d4 <unmount_sd+0x54>)
 8008798:	f7ff ff9e 	bl	80086d8 <transmit_uart_SD>
		free(pfs);
 800879c:	4b0e      	ldr	r3, [pc, #56]	; (80087d8 <unmount_sd+0x58>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4618      	mov	r0, r3
 80087a2:	f001 fb0b 	bl	8009dbc <free>
		return SD_PASS;
 80087a6:	2301      	movs	r3, #1
 80087a8:	e00e      	b.n	80087c8 <unmount_sd+0x48>
	} else if (fres != FR_OK) {
 80087aa:	4b09      	ldr	r3, [pc, #36]	; (80087d0 <unmount_sd+0x50>)
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d009      	beq.n	80087c6 <unmount_sd+0x46>
		transmit_uart_SD("FAIL - MicroSD failed to unmount.\r\n");
 80087b2:	480a      	ldr	r0, [pc, #40]	; (80087dc <unmount_sd+0x5c>)
 80087b4:	f7ff ff90 	bl	80086d8 <transmit_uart_SD>
		free(pfs);
 80087b8:	4b07      	ldr	r3, [pc, #28]	; (80087d8 <unmount_sd+0x58>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4618      	mov	r0, r3
 80087be:	f001 fafd 	bl	8009dbc <free>
		return SD_FAIL;
 80087c2:	2300      	movs	r3, #0
 80087c4:	e000      	b.n	80087c8 <unmount_sd+0x48>
	}
	return SD_FAIL;
 80087c6:	2300      	movs	r3, #0
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	bd80      	pop	{r7, pc}
 80087cc:	0800a750 	.word	0x0800a750
 80087d0:	200036c0 	.word	0x200036c0
 80087d4:	0800a7a8 	.word	0x0800a7a8
 80087d8:	2000363c 	.word	0x2000363c
 80087dc:	0800a7d4 	.word	0x0800a7d4

080087e0 <get_freespace>:
		return SD_PASS;
	}
	return SD_FAIL;
}

sd_ret_val get_freespace(void){
 80087e0:	b590      	push	{r4, r7, lr}
 80087e2:	b085      	sub	sp, #20
 80087e4:	af00      	add	r7, sp, #0
	fres = f_getfree("", &fre_clust, &pfs);
 80087e6:	4a30      	ldr	r2, [pc, #192]	; (80088a8 <get_freespace+0xc8>)
 80087e8:	4930      	ldr	r1, [pc, #192]	; (80088ac <get_freespace+0xcc>)
 80087ea:	4831      	ldr	r0, [pc, #196]	; (80088b0 <get_freespace+0xd0>)
 80087ec:	f7fe fb18 	bl	8006e20 <f_getfree>
 80087f0:	4603      	mov	r3, r0
 80087f2:	461a      	mov	r2, r3
 80087f4:	4b2f      	ldr	r3, [pc, #188]	; (80088b4 <get_freespace+0xd4>)
 80087f6:	701a      	strb	r2, [r3, #0]
	totalSpace = (uint32_t) ((pfs->n_fatent - 2) * pfs->csize * 0.5);
 80087f8:	4b2b      	ldr	r3, [pc, #172]	; (80088a8 <get_freespace+0xc8>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	69db      	ldr	r3, [r3, #28]
 80087fe:	3b02      	subs	r3, #2
 8008800:	4a29      	ldr	r2, [pc, #164]	; (80088a8 <get_freespace+0xc8>)
 8008802:	6812      	ldr	r2, [r2, #0]
 8008804:	8952      	ldrh	r2, [r2, #10]
 8008806:	fb02 f303 	mul.w	r3, r2, r3
 800880a:	4618      	mov	r0, r3
 800880c:	f7f7 fe82 	bl	8000514 <__aeabi_ui2d>
 8008810:	f04f 0200 	mov.w	r2, #0
 8008814:	4b28      	ldr	r3, [pc, #160]	; (80088b8 <get_freespace+0xd8>)
 8008816:	f7f7 fef7 	bl	8000608 <__aeabi_dmul>
 800881a:	4603      	mov	r3, r0
 800881c:	460c      	mov	r4, r1
 800881e:	4618      	mov	r0, r3
 8008820:	4621      	mov	r1, r4
 8008822:	f7f8 f903 	bl	8000a2c <__aeabi_d2uiz>
 8008826:	4602      	mov	r2, r0
 8008828:	4b24      	ldr	r3, [pc, #144]	; (80088bc <get_freespace+0xdc>)
 800882a:	601a      	str	r2, [r3, #0]
	freeSpace = (uint32_t) (fre_clust * pfs->csize * 0.5);
 800882c:	4b1e      	ldr	r3, [pc, #120]	; (80088a8 <get_freespace+0xc8>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	895b      	ldrh	r3, [r3, #10]
 8008832:	461a      	mov	r2, r3
 8008834:	4b1d      	ldr	r3, [pc, #116]	; (80088ac <get_freespace+0xcc>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	fb03 f302 	mul.w	r3, r3, r2
 800883c:	4618      	mov	r0, r3
 800883e:	f7f7 fe69 	bl	8000514 <__aeabi_ui2d>
 8008842:	f04f 0200 	mov.w	r2, #0
 8008846:	4b1c      	ldr	r3, [pc, #112]	; (80088b8 <get_freespace+0xd8>)
 8008848:	f7f7 fede 	bl	8000608 <__aeabi_dmul>
 800884c:	4603      	mov	r3, r0
 800884e:	460c      	mov	r4, r1
 8008850:	4618      	mov	r0, r3
 8008852:	4621      	mov	r1, r4
 8008854:	f7f8 f8ea 	bl	8000a2c <__aeabi_d2uiz>
 8008858:	4602      	mov	r2, r0
 800885a:	4b19      	ldr	r3, [pc, #100]	; (80088c0 <get_freespace+0xe0>)
 800885c:	601a      	str	r2, [r3, #0]

	char mSz[12];
	sprintf(mSz, "%lu", freeSpace);
 800885e:	4b18      	ldr	r3, [pc, #96]	; (80088c0 <get_freespace+0xe0>)
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	1d3b      	adds	r3, r7, #4
 8008864:	4917      	ldr	r1, [pc, #92]	; (80088c4 <get_freespace+0xe4>)
 8008866:	4618      	mov	r0, r3
 8008868:	f001 fb70 	bl	8009f4c <siprintf>

	if (fres == FR_OK) {
 800886c:	4b11      	ldr	r3, [pc, #68]	; (80088b4 <get_freespace+0xd4>)
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d10b      	bne.n	800888c <get_freespace+0xac>
		transmit_uart_SD("PASS - Free space (kb): ");
 8008874:	4814      	ldr	r0, [pc, #80]	; (80088c8 <get_freespace+0xe8>)
 8008876:	f7ff ff2f 	bl	80086d8 <transmit_uart_SD>
		transmit_uart_SD(mSz);
 800887a:	1d3b      	adds	r3, r7, #4
 800887c:	4618      	mov	r0, r3
 800887e:	f7ff ff2b 	bl	80086d8 <transmit_uart_SD>
		transmit_uart_SD("\r\n");
 8008882:	4812      	ldr	r0, [pc, #72]	; (80088cc <get_freespace+0xec>)
 8008884:	f7ff ff28 	bl	80086d8 <transmit_uart_SD>
		return SD_PASS;
 8008888:	2301      	movs	r3, #1
 800888a:	e009      	b.n	80088a0 <get_freespace+0xc0>
	} else if (fres != FR_OK) {
 800888c:	4b09      	ldr	r3, [pc, #36]	; (80088b4 <get_freespace+0xd4>)
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d004      	beq.n	800889e <get_freespace+0xbe>
		transmit_uart_SD("FAIL - Free space failed to be determined.\r\n");
 8008894:	480e      	ldr	r0, [pc, #56]	; (80088d0 <get_freespace+0xf0>)
 8008896:	f7ff ff1f 	bl	80086d8 <transmit_uart_SD>
		return SD_FAIL;
 800889a:	2300      	movs	r3, #0
 800889c:	e000      	b.n	80088a0 <get_freespace+0xc0>
	}
	return SD_FAIL;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3714      	adds	r7, #20
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd90      	pop	{r4, r7, pc}
 80088a8:	2000363c 	.word	0x2000363c
 80088ac:	200023c4 	.word	0x200023c4
 80088b0:	0800a750 	.word	0x0800a750
 80088b4:	200036c0 	.word	0x200036c0
 80088b8:	3fe00000 	.word	0x3fe00000
 80088bc:	200034bc 	.word	0x200034bc
 80088c0:	200035dc 	.word	0x200035dc
 80088c4:	0800a838 	.word	0x0800a838
 80088c8:	0800a83c 	.word	0x0800a83c
 80088cc:	0800a858 	.word	0x0800a858
 80088d0:	0800a85c 	.word	0x0800a85c

080088d4 <find_file>:
	return SD_PASS;
}


sd_ret_val find_file (filetype f_type)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b0e2      	sub	sp, #392	; 0x188
 80088d8:	af00      	add	r7, sp, #0
 80088da:	4602      	mov	r2, r0
 80088dc:	1dfb      	adds	r3, r7, #7
 80088de:	701a      	strb	r2, [r3, #0]
    FRESULT fr;     /* Return value */
    DIR dj;         /* Directory object */
    FILINFO fno;    /* File information */

    uint8_t idx = 1;
 80088e0:	2301      	movs	r3, #1
 80088e2:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
    char file_size[10];

    char file_fmt_name[5];
    char file_fmt[10];

    switch(f_type) {
 80088e6:	1dfb      	adds	r3, r7, #7
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d00e      	beq.n	800890c <find_file+0x38>
 80088ee:	2b02      	cmp	r3, #2
 80088f0:	d017      	beq.n	8008922 <find_file+0x4e>
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d120      	bne.n	8008938 <find_file+0x64>
    case MP3:
    	strcpy(file_fmt_name, "MP3");
 80088f6:	f107 0314 	add.w	r3, r7, #20
 80088fa:	4a4f      	ldr	r2, [pc, #316]	; (8008a38 <find_file+0x164>)
 80088fc:	601a      	str	r2, [r3, #0]
    	strcpy(file_fmt, "???*.mp3");
 80088fe:	f107 0308 	add.w	r3, r7, #8
 8008902:	4a4e      	ldr	r2, [pc, #312]	; (8008a3c <find_file+0x168>)
 8008904:	ca07      	ldmia	r2, {r0, r1, r2}
 8008906:	c303      	stmia	r3!, {r0, r1}
 8008908:	701a      	strb	r2, [r3, #0]
    	break;
 800890a:	e01a      	b.n	8008942 <find_file+0x6e>
    case WAV:
    	strcpy(file_fmt_name, "WAV");
 800890c:	f107 0314 	add.w	r3, r7, #20
 8008910:	4a4b      	ldr	r2, [pc, #300]	; (8008a40 <find_file+0x16c>)
 8008912:	601a      	str	r2, [r3, #0]
    	strcpy(file_fmt, "???*.wav");
 8008914:	f107 0308 	add.w	r3, r7, #8
 8008918:	4a4a      	ldr	r2, [pc, #296]	; (8008a44 <find_file+0x170>)
 800891a:	ca07      	ldmia	r2, {r0, r1, r2}
 800891c:	c303      	stmia	r3!, {r0, r1}
 800891e:	701a      	strb	r2, [r3, #0]
    	break;
 8008920:	e00f      	b.n	8008942 <find_file+0x6e>
    case TXT:
    	strcpy(file_fmt_name, "TXT");
 8008922:	f107 0314 	add.w	r3, r7, #20
 8008926:	4a48      	ldr	r2, [pc, #288]	; (8008a48 <find_file+0x174>)
 8008928:	601a      	str	r2, [r3, #0]
    	strcpy(file_fmt, "???*.txt");
 800892a:	f107 0308 	add.w	r3, r7, #8
 800892e:	4a47      	ldr	r2, [pc, #284]	; (8008a4c <find_file+0x178>)
 8008930:	ca07      	ldmia	r2, {r0, r1, r2}
 8008932:	c303      	stmia	r3!, {r0, r1}
 8008934:	701a      	strb	r2, [r3, #0]
    	break;
 8008936:	e004      	b.n	8008942 <find_file+0x6e>
    default:
    	transmit_uart_SD("FAIL - Invalid file type, find_file().");
 8008938:	4845      	ldr	r0, [pc, #276]	; (8008a50 <find_file+0x17c>)
 800893a:	f7ff fecd 	bl	80086d8 <transmit_uart_SD>
    	return SD_FAIL;
 800893e:	2300      	movs	r3, #0
 8008940:	e074      	b.n	8008a2c <find_file+0x158>
    }

    transmit_uart_SD("\r\n");
 8008942:	4844      	ldr	r0, [pc, #272]	; (8008a54 <find_file+0x180>)
 8008944:	f7ff fec8 	bl	80086d8 <transmit_uart_SD>
    transmit_uart_SD(file_fmt_name);
 8008948:	f107 0314 	add.w	r3, r7, #20
 800894c:	4618      	mov	r0, r3
 800894e:	f7ff fec3 	bl	80086d8 <transmit_uart_SD>
    transmit_uart_SD(" Files Found:\n\r");
 8008952:	4841      	ldr	r0, [pc, #260]	; (8008a58 <find_file+0x184>)
 8008954:	f7ff fec0 	bl	80086d8 <transmit_uart_SD>
    transmit_uart_SD("----------------\n\r");
 8008958:	4840      	ldr	r0, [pc, #256]	; (8008a5c <find_file+0x188>)
 800895a:	f7ff febd 	bl	80086d8 <transmit_uart_SD>
    //fr = f_findfirst(&dj, &fno, "", "dsc*.mp3");  /* Start to search for photo files */
    fr = f_findfirst(&dj, &fno, "", file_fmt);
 800895e:	f107 0308 	add.w	r3, r7, #8
 8008962:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8008966:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 800896a:	4a3d      	ldr	r2, [pc, #244]	; (8008a60 <find_file+0x18c>)
 800896c:	f7fe fa3a 	bl	8006de4 <f_findfirst>
 8008970:	4603      	mov	r3, r0
 8008972:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187

    while (fr == FR_OK && fno.fname[0]) {         /* Repeat while an item is found */
 8008976:	e047      	b.n	8008a08 <find_file+0x134>

    	// Determine file number
      sprintf(index, "%u", idx);
 8008978:	f897 2186 	ldrb.w	r2, [r7, #390]	; 0x186
 800897c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008980:	4938      	ldr	r1, [pc, #224]	; (8008a64 <find_file+0x190>)
 8008982:	4618      	mov	r0, r3
 8008984:	f001 fae2 	bl	8009f4c <siprintf>

      // Determine file size in Kilobytes
      file_size_kB = fno.fsize / 1000;
 8008988:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a36      	ldr	r2, [pc, #216]	; (8008a68 <find_file+0x194>)
 8008990:	fba2 2303 	umull	r2, r3, r2, r3
 8008994:	099b      	lsrs	r3, r3, #6
 8008996:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
      sprintf(file_size, "%lu", file_size_kB);
 800899a:	f107 031c 	add.w	r3, r7, #28
 800899e:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80089a2:	4932      	ldr	r1, [pc, #200]	; (8008a6c <find_file+0x198>)
 80089a4:	4618      	mov	r0, r3
 80089a6:	f001 fad1 	bl	8009f4c <siprintf>

      // Print out file index
      transmit_uart_SD("File ");
 80089aa:	4831      	ldr	r0, [pc, #196]	; (8008a70 <find_file+0x19c>)
 80089ac:	f7ff fe94 	bl	80086d8 <transmit_uart_SD>
    	transmit_uart_SD(index);
 80089b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80089b4:	4618      	mov	r0, r3
 80089b6:	f7ff fe8f 	bl	80086d8 <transmit_uart_SD>
    	transmit_uart_SD(" - ");
 80089ba:	482e      	ldr	r0, [pc, #184]	; (8008a74 <find_file+0x1a0>)
 80089bc:	f7ff fe8c 	bl	80086d8 <transmit_uart_SD>

    	// Print out file name
    	transmit_uart_SD("Name: ");
 80089c0:	482d      	ldr	r0, [pc, #180]	; (8008a78 <find_file+0x1a4>)
 80089c2:	f7ff fe89 	bl	80086d8 <transmit_uart_SD>
    	transmit_uart_SD(fno.fname);							/* Print the object name */
 80089c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80089ca:	3316      	adds	r3, #22
 80089cc:	4618      	mov	r0, r3
 80089ce:	f7ff fe83 	bl	80086d8 <transmit_uart_SD>

    	// Print out file size
    	transmit_uart_SD(" | Size: ");
 80089d2:	482a      	ldr	r0, [pc, #168]	; (8008a7c <find_file+0x1a8>)
 80089d4:	f7ff fe80 	bl	80086d8 <transmit_uart_SD>
    	transmit_uart_SD(file_size);
 80089d8:	f107 031c 	add.w	r3, r7, #28
 80089dc:	4618      	mov	r0, r3
 80089de:	f7ff fe7b 	bl	80086d8 <transmit_uart_SD>
    	transmit_uart_SD(" kB\r\n");
 80089e2:	4827      	ldr	r0, [pc, #156]	; (8008a80 <find_file+0x1ac>)
 80089e4:	f7ff fe78 	bl	80086d8 <transmit_uart_SD>

    	fr = f_findnext(&dj, &fno);               /* Search for next item */
 80089e8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80089ec:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80089f0:	4611      	mov	r1, r2
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7fe f9ce 	bl	8006d94 <f_findnext>
 80089f8:	4603      	mov	r3, r0
 80089fa:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187

    	idx++;
 80089fe:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 8008a02:	3301      	adds	r3, #1
 8008a04:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
    while (fr == FR_OK && fno.fname[0]) {         /* Repeat while an item is found */
 8008a08:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d104      	bne.n	8008a1a <find_file+0x146>
 8008a10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008a14:	7d9b      	ldrb	r3, [r3, #22]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d1ae      	bne.n	8008978 <find_file+0xa4>
    }
    transmit_uart_SD("----------------\n\r");
 8008a1a:	4810      	ldr	r0, [pc, #64]	; (8008a5c <find_file+0x188>)
 8008a1c:	f7ff fe5c 	bl	80086d8 <transmit_uart_SD>
    f_closedir(&dj);
 8008a20:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008a24:	4618      	mov	r0, r3
 8008a26:	f7fe f952 	bl	8006cce <f_closedir>
    return SD_PASS;
 8008a2a:	2301      	movs	r3, #1
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	0033504d 	.word	0x0033504d
 8008a3c:	0800a94c 	.word	0x0800a94c
 8008a40:	00564157 	.word	0x00564157
 8008a44:	0800a958 	.word	0x0800a958
 8008a48:	00545854 	.word	0x00545854
 8008a4c:	0800a964 	.word	0x0800a964
 8008a50:	0800a970 	.word	0x0800a970
 8008a54:	0800a858 	.word	0x0800a858
 8008a58:	0800a998 	.word	0x0800a998
 8008a5c:	0800a9a8 	.word	0x0800a9a8
 8008a60:	0800a750 	.word	0x0800a750
 8008a64:	0800a9bc 	.word	0x0800a9bc
 8008a68:	10624dd3 	.word	0x10624dd3
 8008a6c:	0800a838 	.word	0x0800a838
 8008a70:	0800a9c0 	.word	0x0800a9c0
 8008a74:	0800a9c8 	.word	0x0800a9c8
 8008a78:	0800a9cc 	.word	0x0800a9cc
 8008a7c:	0800a9d4 	.word	0x0800a9d4
 8008a80:	0800a9e0 	.word	0x0800a9e0

08008a84 <chk_microSD>:

void chk_microSD(void){
 8008a84:	b580      	push	{r7, lr}
 8008a86:	af00      	add	r7, sp, #0
	if(mount_sd()){
 8008a88:	f7ff fe4c 	bl	8008724 <mount_sd>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d00c      	beq.n	8008aac <chk_microSD+0x28>
		get_freespace();
 8008a92:	f7ff fea5 	bl	80087e0 <get_freespace>
		find_file(TXT);
 8008a96:	2002      	movs	r0, #2
 8008a98:	f7ff ff1c 	bl	80088d4 <find_file>
		find_file(MP3);
 8008a9c:	2000      	movs	r0, #0
 8008a9e:	f7ff ff19 	bl	80088d4 <find_file>
		find_file(WAV);
 8008aa2:	2001      	movs	r0, #1
 8008aa4:	f7ff ff16 	bl	80088d4 <find_file>
		unmount_sd();
 8008aa8:	f7ff fe6a 	bl	8008780 <unmount_sd>
	}
}
 8008aac:	bf00      	nop
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <HAL_MspInit>:
  */

//Msp = MCU Support Package

void HAL_MspInit(void)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	607b      	str	r3, [r7, #4]
 8008aba:	4b10      	ldr	r3, [pc, #64]	; (8008afc <HAL_MspInit+0x4c>)
 8008abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008abe:	4a0f      	ldr	r2, [pc, #60]	; (8008afc <HAL_MspInit+0x4c>)
 8008ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8008ac6:	4b0d      	ldr	r3, [pc, #52]	; (8008afc <HAL_MspInit+0x4c>)
 8008ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ace:	607b      	str	r3, [r7, #4]
 8008ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	603b      	str	r3, [r7, #0]
 8008ad6:	4b09      	ldr	r3, [pc, #36]	; (8008afc <HAL_MspInit+0x4c>)
 8008ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ada:	4a08      	ldr	r2, [pc, #32]	; (8008afc <HAL_MspInit+0x4c>)
 8008adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8008ae2:	4b06      	ldr	r3, [pc, #24]	; (8008afc <HAL_MspInit+0x4c>)
 8008ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008aea:	603b      	str	r3, [r7, #0]
 8008aec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8008aee:	2007      	movs	r0, #7
 8008af0:	f7f8 faa0 	bl	8001034 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008af4:	bf00      	nop
 8008af6:	3708      	adds	r7, #8
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}
 8008afc:	40023800 	.word	0x40023800

08008b00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b084      	sub	sp, #16
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a0e      	ldr	r2, [pc, #56]	; (8008b48 <HAL_TIM_Base_MspInit+0x48>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d115      	bne.n	8008b3e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008b12:	2300      	movs	r3, #0
 8008b14:	60fb      	str	r3, [r7, #12]
 8008b16:	4b0d      	ldr	r3, [pc, #52]	; (8008b4c <HAL_TIM_Base_MspInit+0x4c>)
 8008b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b1a:	4a0c      	ldr	r2, [pc, #48]	; (8008b4c <HAL_TIM_Base_MspInit+0x4c>)
 8008b1c:	f043 0302 	orr.w	r3, r3, #2
 8008b20:	6413      	str	r3, [r2, #64]	; 0x40
 8008b22:	4b0a      	ldr	r3, [pc, #40]	; (8008b4c <HAL_TIM_Base_MspInit+0x4c>)
 8008b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b26:	f003 0302 	and.w	r3, r3, #2
 8008b2a:	60fb      	str	r3, [r7, #12]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8008b2e:	2200      	movs	r2, #0
 8008b30:	2100      	movs	r1, #0
 8008b32:	201d      	movs	r0, #29
 8008b34:	f7f8 fa89 	bl	800104a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8008b38:	201d      	movs	r0, #29
 8008b3a:	f7f8 faa2 	bl	8001082 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8008b3e:	bf00      	nop
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	40000400 	.word	0x40000400
 8008b4c:	40023800 	.word	0x40023800

08008b50 <HAL_TIM_PWM_MspInit>:
  }

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b083      	sub	sp, #12
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  // ##-2- Configure the NVIC for DMA #########################################
  // NVIC configuration for DMA transfer complete interrupt
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
  */
}
 8008b58:	bf00      	nop
 8008b5a:	370c      	adds	r7, #12
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b08c      	sub	sp, #48	; 0x30
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b6c:	f107 031c 	add.w	r3, r7, #28
 8008b70:	2200      	movs	r2, #0
 8008b72:	601a      	str	r2, [r3, #0]
 8008b74:	605a      	str	r2, [r3, #4]
 8008b76:	609a      	str	r2, [r3, #8]
 8008b78:	60da      	str	r2, [r3, #12]
 8008b7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a32      	ldr	r2, [pc, #200]	; (8008c4c <HAL_UART_MspInit+0xe8>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d12c      	bne.n	8008be0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008b86:	2300      	movs	r3, #0
 8008b88:	61bb      	str	r3, [r7, #24]
 8008b8a:	4b31      	ldr	r3, [pc, #196]	; (8008c50 <HAL_UART_MspInit+0xec>)
 8008b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b8e:	4a30      	ldr	r2, [pc, #192]	; (8008c50 <HAL_UART_MspInit+0xec>)
 8008b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b94:	6413      	str	r3, [r2, #64]	; 0x40
 8008b96:	4b2e      	ldr	r3, [pc, #184]	; (8008c50 <HAL_UART_MspInit+0xec>)
 8008b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b9e:	61bb      	str	r3, [r7, #24]
 8008ba0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	617b      	str	r3, [r7, #20]
 8008ba6:	4b2a      	ldr	r3, [pc, #168]	; (8008c50 <HAL_UART_MspInit+0xec>)
 8008ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008baa:	4a29      	ldr	r2, [pc, #164]	; (8008c50 <HAL_UART_MspInit+0xec>)
 8008bac:	f043 0301 	orr.w	r3, r3, #1
 8008bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8008bb2:	4b27      	ldr	r3, [pc, #156]	; (8008c50 <HAL_UART_MspInit+0xec>)
 8008bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bb6:	f003 0301 	and.w	r3, r3, #1
 8008bba:	617b      	str	r3, [r7, #20]
 8008bbc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8008bbe:	230c      	movs	r3, #12
 8008bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008bc2:	2302      	movs	r3, #2
 8008bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008bca:	2303      	movs	r3, #3
 8008bcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008bce:	2307      	movs	r3, #7
 8008bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008bd2:	f107 031c 	add.w	r3, r7, #28
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	481e      	ldr	r0, [pc, #120]	; (8008c54 <HAL_UART_MspInit+0xf0>)
 8008bda:	f7f8 fc7f 	bl	80014dc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8008bde:	e030      	b.n	8008c42 <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a1c      	ldr	r2, [pc, #112]	; (8008c58 <HAL_UART_MspInit+0xf4>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d12b      	bne.n	8008c42 <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 8008bea:	2300      	movs	r3, #0
 8008bec:	613b      	str	r3, [r7, #16]
 8008bee:	4b18      	ldr	r3, [pc, #96]	; (8008c50 <HAL_UART_MspInit+0xec>)
 8008bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bf2:	4a17      	ldr	r2, [pc, #92]	; (8008c50 <HAL_UART_MspInit+0xec>)
 8008bf4:	f043 0320 	orr.w	r3, r3, #32
 8008bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8008bfa:	4b15      	ldr	r3, [pc, #84]	; (8008c50 <HAL_UART_MspInit+0xec>)
 8008bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bfe:	f003 0320 	and.w	r3, r3, #32
 8008c02:	613b      	str	r3, [r7, #16]
 8008c04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008c06:	2300      	movs	r3, #0
 8008c08:	60fb      	str	r3, [r7, #12]
 8008c0a:	4b11      	ldr	r3, [pc, #68]	; (8008c50 <HAL_UART_MspInit+0xec>)
 8008c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c0e:	4a10      	ldr	r2, [pc, #64]	; (8008c50 <HAL_UART_MspInit+0xec>)
 8008c10:	f043 0304 	orr.w	r3, r3, #4
 8008c14:	6313      	str	r3, [r2, #48]	; 0x30
 8008c16:	4b0e      	ldr	r3, [pc, #56]	; (8008c50 <HAL_UART_MspInit+0xec>)
 8008c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c1a:	f003 0304 	and.w	r3, r3, #4
 8008c1e:	60fb      	str	r3, [r7, #12]
 8008c20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_Pin|USART6_RX_Pin;
 8008c22:	23c0      	movs	r3, #192	; 0xc0
 8008c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c26:	2302      	movs	r3, #2
 8008c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c2e:	2303      	movs	r3, #3
 8008c30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8008c32:	2308      	movs	r3, #8
 8008c34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008c36:	f107 031c 	add.w	r3, r7, #28
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	4807      	ldr	r0, [pc, #28]	; (8008c5c <HAL_UART_MspInit+0xf8>)
 8008c3e:	f7f8 fc4d 	bl	80014dc <HAL_GPIO_Init>
}
 8008c42:	bf00      	nop
 8008c44:	3730      	adds	r7, #48	; 0x30
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	40004400 	.word	0x40004400
 8008c50:	40023800 	.word	0x40023800
 8008c54:	40020000 	.word	0x40020000
 8008c58:	40011400 	.word	0x40011400
 8008c5c:	40020800 	.word	0x40020800

08008c60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b08a      	sub	sp, #40	; 0x28
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c68:	f107 0314 	add.w	r3, r7, #20
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	601a      	str	r2, [r3, #0]
 8008c70:	605a      	str	r2, [r3, #4]
 8008c72:	609a      	str	r2, [r3, #8]
 8008c74:	60da      	str	r2, [r3, #12]
 8008c76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a28      	ldr	r2, [pc, #160]	; (8008d20 <HAL_SPI_MspInit+0xc0>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d14a      	bne.n	8008d18 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8008c82:	2300      	movs	r3, #0
 8008c84:	613b      	str	r3, [r7, #16]
 8008c86:	4b27      	ldr	r3, [pc, #156]	; (8008d24 <HAL_SPI_MspInit+0xc4>)
 8008c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c8a:	4a26      	ldr	r2, [pc, #152]	; (8008d24 <HAL_SPI_MspInit+0xc4>)
 8008c8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c90:	6413      	str	r3, [r2, #64]	; 0x40
 8008c92:	4b24      	ldr	r3, [pc, #144]	; (8008d24 <HAL_SPI_MspInit+0xc4>)
 8008c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c9a:	613b      	str	r3, [r7, #16]
 8008c9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	60fb      	str	r3, [r7, #12]
 8008ca2:	4b20      	ldr	r3, [pc, #128]	; (8008d24 <HAL_SPI_MspInit+0xc4>)
 8008ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ca6:	4a1f      	ldr	r2, [pc, #124]	; (8008d24 <HAL_SPI_MspInit+0xc4>)
 8008ca8:	f043 0304 	orr.w	r3, r3, #4
 8008cac:	6313      	str	r3, [r2, #48]	; 0x30
 8008cae:	4b1d      	ldr	r3, [pc, #116]	; (8008d24 <HAL_SPI_MspInit+0xc4>)
 8008cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cb2:	f003 0304 	and.w	r3, r3, #4
 8008cb6:	60fb      	str	r3, [r7, #12]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008cba:	2300      	movs	r3, #0
 8008cbc:	60bb      	str	r3, [r7, #8]
 8008cbe:	4b19      	ldr	r3, [pc, #100]	; (8008d24 <HAL_SPI_MspInit+0xc4>)
 8008cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cc2:	4a18      	ldr	r2, [pc, #96]	; (8008d24 <HAL_SPI_MspInit+0xc4>)
 8008cc4:	f043 0302 	orr.w	r3, r3, #2
 8008cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8008cca:	4b16      	ldr	r3, [pc, #88]	; (8008d24 <HAL_SPI_MspInit+0xc4>)
 8008ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cce:	f003 0302 	and.w	r3, r3, #2
 8008cd2:	60bb      	str	r3, [r7, #8]
 8008cd4:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> SPI2_MISO  --> DO
    PC3     ------> SPI2_MOSI  --> DI
    PB10     ------> SPI2_SCK
    */
    //GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Pin = MICRO_D0_Pin|MICRO_DI_Pin;
 8008cd6:	230c      	movs	r3, #12
 8008cd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008cda:	2302      	movs	r3, #2
 8008cdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ce2:	2303      	movs	r3, #3
 8008ce4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008ce6:	2305      	movs	r3, #5
 8008ce8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MICRO_DATA_GPIO_Port, &GPIO_InitStruct);
 8008cea:	f107 0314 	add.w	r3, r7, #20
 8008cee:	4619      	mov	r1, r3
 8008cf0:	480d      	ldr	r0, [pc, #52]	; (8008d28 <HAL_SPI_MspInit+0xc8>)
 8008cf2:	f7f8 fbf3 	bl	80014dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MICRO_CLK_Pin;
 8008cf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008cfc:	2302      	movs	r3, #2
 8008cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d00:	2300      	movs	r3, #0
 8008d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d04:	2303      	movs	r3, #3
 8008d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008d08:	2305      	movs	r3, #5
 8008d0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MICRO_CLK_GPIO_Port, &GPIO_InitStruct);
 8008d0c:	f107 0314 	add.w	r3, r7, #20
 8008d10:	4619      	mov	r1, r3
 8008d12:	4806      	ldr	r0, [pc, #24]	; (8008d2c <HAL_SPI_MspInit+0xcc>)
 8008d14:	f7f8 fbe2 	bl	80014dc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8008d18:	bf00      	nop
 8008d1a:	3728      	adds	r7, #40	; 0x28
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}
 8008d20:	40003800 	.word	0x40003800
 8008d24:	40023800 	.word	0x40023800
 8008d28:	40020800 	.word	0x40020800
 8008d2c:	40020400 	.word	0x40020400

08008d30 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8008d30:	b480      	push	{r7}
 8008d32:	af00      	add	r7, sp, #0
}
 8008d34:	bf00      	nop
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr

08008d3e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8008d3e:	b480      	push	{r7}
 8008d40:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8008d42:	e7fe      	b.n	8008d42 <HardFault_Handler+0x4>

08008d44 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8008d44:	b480      	push	{r7}
 8008d46:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8008d48:	e7fe      	b.n	8008d48 <MemManage_Handler+0x4>

08008d4a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8008d4a:	b480      	push	{r7}
 8008d4c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8008d4e:	e7fe      	b.n	8008d4e <BusFault_Handler+0x4>

08008d50 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8008d50:	b480      	push	{r7}
 8008d52:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8008d54:	e7fe      	b.n	8008d54 <UsageFault_Handler+0x4>

08008d56 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8008d56:	b480      	push	{r7}
 8008d58:	af00      	add	r7, sp, #0
}
 8008d5a:	bf00      	nop
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8008d64:	b480      	push	{r7}
 8008d66:	af00      	add	r7, sp, #0
}
 8008d68:	bf00      	nop
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr

08008d72 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8008d72:	b480      	push	{r7}
 8008d74:	af00      	add	r7, sp, #0
}
 8008d76:	bf00      	nop
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	af00      	add	r7, sp, #0
	/* USER CODE 1 */
	// For SPI microSD
	if(Timer1 > 0)
 8008d84:	4b0c      	ldr	r3, [pc, #48]	; (8008db8 <SysTick_Handler+0x38>)
 8008d86:	881b      	ldrh	r3, [r3, #0]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d005      	beq.n	8008d98 <SysTick_Handler+0x18>
		Timer1--;
 8008d8c:	4b0a      	ldr	r3, [pc, #40]	; (8008db8 <SysTick_Handler+0x38>)
 8008d8e:	881b      	ldrh	r3, [r3, #0]
 8008d90:	3b01      	subs	r3, #1
 8008d92:	b29a      	uxth	r2, r3
 8008d94:	4b08      	ldr	r3, [pc, #32]	; (8008db8 <SysTick_Handler+0x38>)
 8008d96:	801a      	strh	r2, [r3, #0]

	if(Timer2 > 0)
 8008d98:	4b08      	ldr	r3, [pc, #32]	; (8008dbc <SysTick_Handler+0x3c>)
 8008d9a:	881b      	ldrh	r3, [r3, #0]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d005      	beq.n	8008dac <SysTick_Handler+0x2c>
		Timer2--;
 8008da0:	4b06      	ldr	r3, [pc, #24]	; (8008dbc <SysTick_Handler+0x3c>)
 8008da2:	881b      	ldrh	r3, [r3, #0]
 8008da4:	3b01      	subs	r3, #1
 8008da6:	b29a      	uxth	r2, r3
 8008da8:	4b04      	ldr	r3, [pc, #16]	; (8008dbc <SysTick_Handler+0x3c>)
 8008daa:	801a      	strh	r2, [r3, #0]

	/* USER CODE 1 END */
  HAL_IncTick();
 8008dac:	f7f8 f830 	bl	8000e10 <HAL_IncTick>

  /* USER CODE 2 */
  HAL_SYSTICK_IRQHandler();
 8008db0:	f7f8 f981 	bl	80010b6 <HAL_SYSTICK_IRQHandler>
  /* USER CODE 2 END */
}
 8008db4:	bf00      	nop
 8008db6:	bd80      	pop	{r7, pc}
 8008db8:	200023c2 	.word	0x200023c2
 8008dbc:	200023c0 	.word	0x200023c0

08008dc0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8008dc4:	4802      	ldr	r0, [pc, #8]	; (8008dd0 <TIM3_IRQHandler+0x10>)
 8008dc6:	f7fa f827 	bl	8002e18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8008dca:	bf00      	nop
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	200034c4 	.word	0x200034c4

08008dd4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8008dd8:	4802      	ldr	r0, [pc, #8]	; (8008de4 <USART6_IRQHandler+0x10>)
 8008dda:	f7fa ffeb 	bl	8003db4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8008dde:	bf00      	nop
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop
 8008de4:	200035e0 	.word	0x200035e0

08008de8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008df0:	4b11      	ldr	r3, [pc, #68]	; (8008e38 <_sbrk+0x50>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d102      	bne.n	8008dfe <_sbrk+0x16>
		heap_end = &end;
 8008df8:	4b0f      	ldr	r3, [pc, #60]	; (8008e38 <_sbrk+0x50>)
 8008dfa:	4a10      	ldr	r2, [pc, #64]	; (8008e3c <_sbrk+0x54>)
 8008dfc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008dfe:	4b0e      	ldr	r3, [pc, #56]	; (8008e38 <_sbrk+0x50>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008e04:	4b0c      	ldr	r3, [pc, #48]	; (8008e38 <_sbrk+0x50>)
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	4413      	add	r3, r2
 8008e0c:	466a      	mov	r2, sp
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d907      	bls.n	8008e22 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8008e12:	f000 ffa1 	bl	8009d58 <__errno>
 8008e16:	4602      	mov	r2, r0
 8008e18:	230c      	movs	r3, #12
 8008e1a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8008e20:	e006      	b.n	8008e30 <_sbrk+0x48>
	}

	heap_end += incr;
 8008e22:	4b05      	ldr	r3, [pc, #20]	; (8008e38 <_sbrk+0x50>)
 8008e24:	681a      	ldr	r2, [r3, #0]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	4413      	add	r3, r2
 8008e2a:	4a03      	ldr	r2, [pc, #12]	; (8008e38 <_sbrk+0x50>)
 8008e2c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3710      	adds	r7, #16
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	20000340 	.word	0x20000340
 8008e3c:	20004818 	.word	0x20004818

08008e40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008e40:	b480      	push	{r7}
 8008e42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008e44:	4b16      	ldr	r3, [pc, #88]	; (8008ea0 <SystemInit+0x60>)
 8008e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e4a:	4a15      	ldr	r2, [pc, #84]	; (8008ea0 <SystemInit+0x60>)
 8008e4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008e50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8008e54:	4b13      	ldr	r3, [pc, #76]	; (8008ea4 <SystemInit+0x64>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a12      	ldr	r2, [pc, #72]	; (8008ea4 <SystemInit+0x64>)
 8008e5a:	f043 0301 	orr.w	r3, r3, #1
 8008e5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008e60:	4b10      	ldr	r3, [pc, #64]	; (8008ea4 <SystemInit+0x64>)
 8008e62:	2200      	movs	r2, #0
 8008e64:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8008e66:	4b0f      	ldr	r3, [pc, #60]	; (8008ea4 <SystemInit+0x64>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a0e      	ldr	r2, [pc, #56]	; (8008ea4 <SystemInit+0x64>)
 8008e6c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8008e70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e74:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8008e76:	4b0b      	ldr	r3, [pc, #44]	; (8008ea4 <SystemInit+0x64>)
 8008e78:	4a0b      	ldr	r2, [pc, #44]	; (8008ea8 <SystemInit+0x68>)
 8008e7a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8008e7c:	4b09      	ldr	r3, [pc, #36]	; (8008ea4 <SystemInit+0x64>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a08      	ldr	r2, [pc, #32]	; (8008ea4 <SystemInit+0x64>)
 8008e82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e86:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8008e88:	4b06      	ldr	r3, [pc, #24]	; (8008ea4 <SystemInit+0x64>)
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008e8e:	4b04      	ldr	r3, [pc, #16]	; (8008ea0 <SystemInit+0x60>)
 8008e90:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008e94:	609a      	str	r2, [r3, #8]
#endif
}
 8008e96:	bf00      	nop
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr
 8008ea0:	e000ed00 	.word	0xe000ed00
 8008ea4:	40023800 	.word	0x40023800
 8008ea8:	24003010 	.word	0x24003010

08008eac <tm1637Init>:
    0x7f, 0x6f, 0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71, // 8-9, A-F
    0x00
};

void tm1637Init(void)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b088      	sub	sp, #32
 8008eb0:	af00      	add	r7, sp, #0
    CLK_PORT_CLK_ENABLE();
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	60bb      	str	r3, [r7, #8]
 8008eb6:	4b1f      	ldr	r3, [pc, #124]	; (8008f34 <tm1637Init+0x88>)
 8008eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eba:	4a1e      	ldr	r2, [pc, #120]	; (8008f34 <tm1637Init+0x88>)
 8008ebc:	f043 0302 	orr.w	r3, r3, #2
 8008ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8008ec2:	4b1c      	ldr	r3, [pc, #112]	; (8008f34 <tm1637Init+0x88>)
 8008ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ec6:	f003 0302 	and.w	r3, r3, #2
 8008eca:	60bb      	str	r3, [r7, #8]
 8008ecc:	68bb      	ldr	r3, [r7, #8]
    DIO_PORT_CLK_ENABLE();
 8008ece:	2300      	movs	r3, #0
 8008ed0:	607b      	str	r3, [r7, #4]
 8008ed2:	4b18      	ldr	r3, [pc, #96]	; (8008f34 <tm1637Init+0x88>)
 8008ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ed6:	4a17      	ldr	r2, [pc, #92]	; (8008f34 <tm1637Init+0x88>)
 8008ed8:	f043 0301 	orr.w	r3, r3, #1
 8008edc:	6313      	str	r3, [r2, #48]	; 0x30
 8008ede:	4b15      	ldr	r3, [pc, #84]	; (8008f34 <tm1637Init+0x88>)
 8008ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ee2:	f003 0301 	and.w	r3, r3, #1
 8008ee6:	607b      	str	r3, [r7, #4]
 8008ee8:	687b      	ldr	r3, [r7, #4]
    GPIO_InitTypeDef g = {0};
 8008eea:	f107 030c 	add.w	r3, r7, #12
 8008eee:	2200      	movs	r2, #0
 8008ef0:	601a      	str	r2, [r3, #0]
 8008ef2:	605a      	str	r2, [r3, #4]
 8008ef4:	609a      	str	r2, [r3, #8]
 8008ef6:	60da      	str	r2, [r3, #12]
 8008ef8:	611a      	str	r2, [r3, #16]
    g.Pull = GPIO_NOPULL;
 8008efa:	2300      	movs	r3, #0
 8008efc:	617b      	str	r3, [r7, #20]
    g.Mode = GPIO_MODE_OUTPUT_PP; // OD = open drain
 8008efe:	2301      	movs	r3, #1
 8008f00:	613b      	str	r3, [r7, #16]
    g.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f02:	2303      	movs	r3, #3
 8008f04:	61bb      	str	r3, [r7, #24]
    g.Pin = CLK_PIN;
 8008f06:	2301      	movs	r3, #1
 8008f08:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(CLK_PORT, &g);
 8008f0a:	f107 030c 	add.w	r3, r7, #12
 8008f0e:	4619      	mov	r1, r3
 8008f10:	4809      	ldr	r0, [pc, #36]	; (8008f38 <tm1637Init+0x8c>)
 8008f12:	f7f8 fae3 	bl	80014dc <HAL_GPIO_Init>
    g.Pin = DIO_PIN;
 8008f16:	2310      	movs	r3, #16
 8008f18:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DIO_PORT, &g);
 8008f1a:	f107 030c 	add.w	r3, r7, #12
 8008f1e:	4619      	mov	r1, r3
 8008f20:	4806      	ldr	r0, [pc, #24]	; (8008f3c <tm1637Init+0x90>)
 8008f22:	f7f8 fadb 	bl	80014dc <HAL_GPIO_Init>

    tm1637SetBrightness(8);
 8008f26:	2008      	movs	r0, #8
 8008f28:	f000 f89e 	bl	8009068 <tm1637SetBrightness>
}
 8008f2c:	bf00      	nop
 8008f2e:	3720      	adds	r7, #32
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	40023800 	.word	0x40023800
 8008f38:	40020400 	.word	0x40020400
 8008f3c:	40020000 	.word	0x40020000

08008f40 <tm1637DisplayTime>:

    _tm1637Stop();
}

void tm1637DisplayTime(int min, int sec, int displaySeparator)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b088      	sub	sp, #32
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	607a      	str	r2, [r7, #4]
    unsigned char digitArr[4];

    // Display minutes
    for (int i = 2; i < 4; ++i) {
 8008f4c:	2302      	movs	r3, #2
 8008f4e:	61fb      	str	r3, [r7, #28]
 8008f50:	e032      	b.n	8008fb8 <tm1637DisplayTime+0x78>
        digitArr[i] = segmentMap[min % 10];
 8008f52:	68f9      	ldr	r1, [r7, #12]
 8008f54:	4b42      	ldr	r3, [pc, #264]	; (8009060 <tm1637DisplayTime+0x120>)
 8008f56:	fb83 2301 	smull	r2, r3, r3, r1
 8008f5a:	109a      	asrs	r2, r3, #2
 8008f5c:	17cb      	asrs	r3, r1, #31
 8008f5e:	1ad2      	subs	r2, r2, r3
 8008f60:	4613      	mov	r3, r2
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	4413      	add	r3, r2
 8008f66:	005b      	lsls	r3, r3, #1
 8008f68:	1aca      	subs	r2, r1, r3
 8008f6a:	4b3e      	ldr	r3, [pc, #248]	; (8009064 <tm1637DisplayTime+0x124>)
 8008f6c:	5c99      	ldrb	r1, [r3, r2]
 8008f6e:	f107 0210 	add.w	r2, r7, #16
 8008f72:	69fb      	ldr	r3, [r7, #28]
 8008f74:	4413      	add	r3, r2
 8008f76:	460a      	mov	r2, r1
 8008f78:	701a      	strb	r2, [r3, #0]
        if (i == 2 && displaySeparator) {
 8008f7a:	69fb      	ldr	r3, [r7, #28]
 8008f7c:	2b02      	cmp	r3, #2
 8008f7e:	d110      	bne.n	8008fa2 <tm1637DisplayTime+0x62>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d00d      	beq.n	8008fa2 <tm1637DisplayTime+0x62>
            digitArr[i] |= 1 << 7;
 8008f86:	f107 0210 	add.w	r2, r7, #16
 8008f8a:	69fb      	ldr	r3, [r7, #28]
 8008f8c:	4413      	add	r3, r2
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008f94:	b2d9      	uxtb	r1, r3
 8008f96:	f107 0210 	add.w	r2, r7, #16
 8008f9a:	69fb      	ldr	r3, [r7, #28]
 8008f9c:	4413      	add	r3, r2
 8008f9e:	460a      	mov	r2, r1
 8008fa0:	701a      	strb	r2, [r3, #0]
        }
        min /= 10;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	4a2e      	ldr	r2, [pc, #184]	; (8009060 <tm1637DisplayTime+0x120>)
 8008fa6:	fb82 1203 	smull	r1, r2, r2, r3
 8008faa:	1092      	asrs	r2, r2, #2
 8008fac:	17db      	asrs	r3, r3, #31
 8008fae:	1ad3      	subs	r3, r2, r3
 8008fb0:	60fb      	str	r3, [r7, #12]
    for (int i = 2; i < 4; ++i) {
 8008fb2:	69fb      	ldr	r3, [r7, #28]
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	61fb      	str	r3, [r7, #28]
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	2b03      	cmp	r3, #3
 8008fbc:	ddc9      	ble.n	8008f52 <tm1637DisplayTime+0x12>
    }

    // Display seconds
    for (int i = 0; i < 2; ++i) {
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	61bb      	str	r3, [r7, #24]
 8008fc2:	e01e      	b.n	8009002 <tm1637DisplayTime+0xc2>
        digitArr[i] = segmentMap[sec % 10];
 8008fc4:	68b9      	ldr	r1, [r7, #8]
 8008fc6:	4b26      	ldr	r3, [pc, #152]	; (8009060 <tm1637DisplayTime+0x120>)
 8008fc8:	fb83 2301 	smull	r2, r3, r3, r1
 8008fcc:	109a      	asrs	r2, r3, #2
 8008fce:	17cb      	asrs	r3, r1, #31
 8008fd0:	1ad2      	subs	r2, r2, r3
 8008fd2:	4613      	mov	r3, r2
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	4413      	add	r3, r2
 8008fd8:	005b      	lsls	r3, r3, #1
 8008fda:	1aca      	subs	r2, r1, r3
 8008fdc:	4b21      	ldr	r3, [pc, #132]	; (8009064 <tm1637DisplayTime+0x124>)
 8008fde:	5c99      	ldrb	r1, [r3, r2]
 8008fe0:	f107 0210 	add.w	r2, r7, #16
 8008fe4:	69bb      	ldr	r3, [r7, #24]
 8008fe6:	4413      	add	r3, r2
 8008fe8:	460a      	mov	r2, r1
 8008fea:	701a      	strb	r2, [r3, #0]
        sec /= 10;
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	4a1c      	ldr	r2, [pc, #112]	; (8009060 <tm1637DisplayTime+0x120>)
 8008ff0:	fb82 1203 	smull	r1, r2, r2, r3
 8008ff4:	1092      	asrs	r2, r2, #2
 8008ff6:	17db      	asrs	r3, r3, #31
 8008ff8:	1ad3      	subs	r3, r2, r3
 8008ffa:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < 2; ++i) {
 8008ffc:	69bb      	ldr	r3, [r7, #24]
 8008ffe:	3301      	adds	r3, #1
 8009000:	61bb      	str	r3, [r7, #24]
 8009002:	69bb      	ldr	r3, [r7, #24]
 8009004:	2b01      	cmp	r3, #1
 8009006:	dddd      	ble.n	8008fc4 <tm1637DisplayTime+0x84>
    }

    _tm1637Start();
 8009008:	f000 f843 	bl	8009092 <_tm1637Start>
    _tm1637WriteByte(0x40);
 800900c:	2040      	movs	r0, #64	; 0x40
 800900e:	f000 f872 	bl	80090f6 <_tm1637WriteByte>
    _tm1637ReadResult();
 8009012:	f000 f860 	bl	80090d6 <_tm1637ReadResult>
    _tm1637Stop();
 8009016:	f000 f849 	bl	80090ac <_tm1637Stop>

    _tm1637Start();
 800901a:	f000 f83a 	bl	8009092 <_tm1637Start>
    _tm1637WriteByte(0xc0);
 800901e:	20c0      	movs	r0, #192	; 0xc0
 8009020:	f000 f869 	bl	80090f6 <_tm1637WriteByte>
    _tm1637ReadResult();
 8009024:	f000 f857 	bl	80090d6 <_tm1637ReadResult>

    for (int i = 0; i < 4; ++i) {
 8009028:	2300      	movs	r3, #0
 800902a:	617b      	str	r3, [r7, #20]
 800902c:	e00f      	b.n	800904e <tm1637DisplayTime+0x10e>
        _tm1637WriteByte(digitArr[3 - i]);
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	f1c3 0303 	rsb	r3, r3, #3
 8009034:	f107 0220 	add.w	r2, r7, #32
 8009038:	4413      	add	r3, r2
 800903a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800903e:	4618      	mov	r0, r3
 8009040:	f000 f859 	bl	80090f6 <_tm1637WriteByte>
        _tm1637ReadResult();
 8009044:	f000 f847 	bl	80090d6 <_tm1637ReadResult>
    for (int i = 0; i < 4; ++i) {
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	3301      	adds	r3, #1
 800904c:	617b      	str	r3, [r7, #20]
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	2b03      	cmp	r3, #3
 8009052:	ddec      	ble.n	800902e <tm1637DisplayTime+0xee>
    }

    _tm1637Stop();
 8009054:	f000 f82a 	bl	80090ac <_tm1637Stop>
}
 8009058:	bf00      	nop
 800905a:	3720      	adds	r7, #32
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}
 8009060:	66666667 	.word	0x66666667
 8009064:	0802c190 	.word	0x0802c190

08009068 <tm1637SetBrightness>:

// Valid brightness values: 0 - 8.
// 0 = display off.
void tm1637SetBrightness(char brightness)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b082      	sub	sp, #8
 800906c:	af00      	add	r7, sp, #0
 800906e:	4603      	mov	r3, r0
 8009070:	71fb      	strb	r3, [r7, #7]
    // Brightness command:
    // 1000 0XXX = display off
    // 1000 1BBB = display on, brightness 0-7
    // X = don't care
    // B = brightness
    _tm1637Start();
 8009072:	f000 f80e 	bl	8009092 <_tm1637Start>
    _tm1637WriteByte(0x87 + brightness);
 8009076:	79fb      	ldrb	r3, [r7, #7]
 8009078:	3b79      	subs	r3, #121	; 0x79
 800907a:	b2db      	uxtb	r3, r3
 800907c:	4618      	mov	r0, r3
 800907e:	f000 f83a 	bl	80090f6 <_tm1637WriteByte>
    _tm1637ReadResult();
 8009082:	f000 f828 	bl	80090d6 <_tm1637ReadResult>
    _tm1637Stop();
 8009086:	f000 f811 	bl	80090ac <_tm1637Stop>
}
 800908a:	bf00      	nop
 800908c:	3708      	adds	r7, #8
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}

08009092 <_tm1637Start>:

void _tm1637Start(void)
{
 8009092:	b580      	push	{r7, lr}
 8009094:	af00      	add	r7, sp, #0
    _tm1637ClkHigh();
 8009096:	f000 f871 	bl	800917c <_tm1637ClkHigh>
    _tm1637DioHigh();
 800909a:	f000 f887 	bl	80091ac <_tm1637DioHigh>
    _tm1637DelayUsec(MICROSEC_L);
 800909e:	200a      	movs	r0, #10
 80090a0:	f000 f852 	bl	8009148 <_tm1637DelayUsec>
    _tm1637DioLow();
 80090a4:	f000 f88e 	bl	80091c4 <_tm1637DioLow>
}
 80090a8:	bf00      	nop
 80090aa:	bd80      	pop	{r7, pc}

080090ac <_tm1637Stop>:

void _tm1637Stop(void)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	af00      	add	r7, sp, #0
    _tm1637ClkLow();
 80090b0:	f000 f870 	bl	8009194 <_tm1637ClkLow>
    _tm1637DelayUsec(MICROSEC);
 80090b4:	2002      	movs	r0, #2
 80090b6:	f000 f847 	bl	8009148 <_tm1637DelayUsec>
    _tm1637DioLow();
 80090ba:	f000 f883 	bl	80091c4 <_tm1637DioLow>
    _tm1637DelayUsec(MICROSEC);
 80090be:	2002      	movs	r0, #2
 80090c0:	f000 f842 	bl	8009148 <_tm1637DelayUsec>
    _tm1637ClkHigh();
 80090c4:	f000 f85a 	bl	800917c <_tm1637ClkHigh>
    _tm1637DelayUsec(MICROSEC);
 80090c8:	2002      	movs	r0, #2
 80090ca:	f000 f83d 	bl	8009148 <_tm1637DelayUsec>
    _tm1637DioHigh();
 80090ce:	f000 f86d 	bl	80091ac <_tm1637DioHigh>
}
 80090d2:	bf00      	nop
 80090d4:	bd80      	pop	{r7, pc}

080090d6 <_tm1637ReadResult>:

void _tm1637ReadResult(void)
{
 80090d6:	b580      	push	{r7, lr}
 80090d8:	af00      	add	r7, sp, #0
    _tm1637ClkLow();
 80090da:	f000 f85b 	bl	8009194 <_tm1637ClkLow>
    _tm1637DelayUsec(MICROSEC_L);
 80090de:	200a      	movs	r0, #10
 80090e0:	f000 f832 	bl	8009148 <_tm1637DelayUsec>
    // while (dio); // We're cheating here and not actually reading back the response.
    _tm1637ClkHigh();
 80090e4:	f000 f84a 	bl	800917c <_tm1637ClkHigh>
    _tm1637DelayUsec(MICROSEC);
 80090e8:	2002      	movs	r0, #2
 80090ea:	f000 f82d 	bl	8009148 <_tm1637DelayUsec>
    _tm1637ClkLow();
 80090ee:	f000 f851 	bl	8009194 <_tm1637ClkLow>
}
 80090f2:	bf00      	nop
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <_tm1637WriteByte>:

void _tm1637WriteByte(unsigned char b)
{
 80090f6:	b580      	push	{r7, lr}
 80090f8:	b084      	sub	sp, #16
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	4603      	mov	r3, r0
 80090fe:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; ++i) {
 8009100:	2300      	movs	r3, #0
 8009102:	60fb      	str	r3, [r7, #12]
 8009104:	e019      	b.n	800913a <_tm1637WriteByte+0x44>
        _tm1637ClkLow();
 8009106:	f000 f845 	bl	8009194 <_tm1637ClkLow>
        if (b & 0x01) {
 800910a:	79fb      	ldrb	r3, [r7, #7]
 800910c:	f003 0301 	and.w	r3, r3, #1
 8009110:	2b00      	cmp	r3, #0
 8009112:	d002      	beq.n	800911a <_tm1637WriteByte+0x24>
            _tm1637DioHigh();
 8009114:	f000 f84a 	bl	80091ac <_tm1637DioHigh>
 8009118:	e001      	b.n	800911e <_tm1637WriteByte+0x28>
        }
        else {
            _tm1637DioLow();
 800911a:	f000 f853 	bl	80091c4 <_tm1637DioLow>
        }
        _tm1637DelayUsec(3);
 800911e:	2003      	movs	r0, #3
 8009120:	f000 f812 	bl	8009148 <_tm1637DelayUsec>
        b >>= 1;
 8009124:	79fb      	ldrb	r3, [r7, #7]
 8009126:	085b      	lsrs	r3, r3, #1
 8009128:	71fb      	strb	r3, [r7, #7]
        _tm1637ClkHigh();
 800912a:	f000 f827 	bl	800917c <_tm1637ClkHigh>
        _tm1637DelayUsec(3);
 800912e:	2003      	movs	r0, #3
 8009130:	f000 f80a 	bl	8009148 <_tm1637DelayUsec>
    for (int i = 0; i < 8; ++i) {
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	3301      	adds	r3, #1
 8009138:	60fb      	str	r3, [r7, #12]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2b07      	cmp	r3, #7
 800913e:	dde2      	ble.n	8009106 <_tm1637WriteByte+0x10>
    }
}
 8009140:	bf00      	nop
 8009142:	3710      	adds	r7, #16
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}

08009148 <_tm1637DelayUsec>:
    }
}
*/

void _tm1637DelayUsec(unsigned int i)
{
 8009148:	b480      	push	{r7}
 800914a:	b085      	sub	sp, #20
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  volatile unsigned int j;
  while(i--)
 8009150:	e009      	b.n	8009166 <_tm1637DelayUsec+0x1e>
  {
    for(j=0; j<10; j++)
 8009152:	2300      	movs	r3, #0
 8009154:	60fb      	str	r3, [r7, #12]
 8009156:	e003      	b.n	8009160 <_tm1637DelayUsec+0x18>
    {
      __NOP();
 8009158:	bf00      	nop
    for(j=0; j<10; j++)
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	3301      	adds	r3, #1
 800915e:	60fb      	str	r3, [r7, #12]
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2b09      	cmp	r3, #9
 8009164:	d9f8      	bls.n	8009158 <_tm1637DelayUsec+0x10>
  while(i--)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	1e5a      	subs	r2, r3, #1
 800916a:	607a      	str	r2, [r7, #4]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d1f0      	bne.n	8009152 <_tm1637DelayUsec+0xa>
    }
  }
}
 8009170:	bf00      	nop
 8009172:	3714      	adds	r7, #20
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr

0800917c <_tm1637ClkHigh>:

void _tm1637ClkHigh(void)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CLK_PORT, CLK_PIN, GPIO_PIN_SET);
 8009180:	2201      	movs	r2, #1
 8009182:	2101      	movs	r1, #1
 8009184:	4802      	ldr	r0, [pc, #8]	; (8009190 <_tm1637ClkHigh+0x14>)
 8009186:	f7f8 fb43 	bl	8001810 <HAL_GPIO_WritePin>
}
 800918a:	bf00      	nop
 800918c:	bd80      	pop	{r7, pc}
 800918e:	bf00      	nop
 8009190:	40020400 	.word	0x40020400

08009194 <_tm1637ClkLow>:

void _tm1637ClkLow(void)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CLK_PORT, CLK_PIN, GPIO_PIN_RESET);
 8009198:	2200      	movs	r2, #0
 800919a:	2101      	movs	r1, #1
 800919c:	4802      	ldr	r0, [pc, #8]	; (80091a8 <_tm1637ClkLow+0x14>)
 800919e:	f7f8 fb37 	bl	8001810 <HAL_GPIO_WritePin>
}
 80091a2:	bf00      	nop
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop
 80091a8:	40020400 	.word	0x40020400

080091ac <_tm1637DioHigh>:

void _tm1637DioHigh(void)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DIO_PORT, DIO_PIN, GPIO_PIN_SET);
 80091b0:	2201      	movs	r2, #1
 80091b2:	2110      	movs	r1, #16
 80091b4:	4802      	ldr	r0, [pc, #8]	; (80091c0 <_tm1637DioHigh+0x14>)
 80091b6:	f7f8 fb2b 	bl	8001810 <HAL_GPIO_WritePin>
}
 80091ba:	bf00      	nop
 80091bc:	bd80      	pop	{r7, pc}
 80091be:	bf00      	nop
 80091c0:	40020000 	.word	0x40020000

080091c4 <_tm1637DioLow>:

void _tm1637DioLow(void)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DIO_PORT, DIO_PIN, GPIO_PIN_RESET);
 80091c8:	2200      	movs	r2, #0
 80091ca:	2110      	movs	r1, #16
 80091cc:	4802      	ldr	r0, [pc, #8]	; (80091d8 <_tm1637DioLow+0x14>)
 80091ce:	f7f8 fb1f 	bl	8001810 <HAL_GPIO_WritePin>
}
 80091d2:	bf00      	nop
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	40020000 	.word	0x40020000

080091dc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b082      	sub	sp, #8
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	4603      	mov	r3, r0
 80091e4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 80091e6:	79fb      	ldrb	r3, [r7, #7]
 80091e8:	4618      	mov	r0, r3
 80091ea:	f7fe f9df 	bl	80075ac <SD_disk_initialize>
 80091ee:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3708      	adds	r7, #8
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	4603      	mov	r3, r0
 8009200:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8009202:	79fb      	ldrb	r3, [r7, #7]
 8009204:	4618      	mov	r0, r3
 8009206:	f7fe fab7 	bl	8007778 <SD_disk_status>
 800920a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800920c:	4618      	mov	r0, r3
 800920e:	3708      	adds	r7, #8
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	60b9      	str	r1, [r7, #8]
 800921c:	607a      	str	r2, [r7, #4]
 800921e:	603b      	str	r3, [r7, #0]
 8009220:	4603      	mov	r3, r0
 8009222:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8009224:	7bf8      	ldrb	r0, [r7, #15]
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	68b9      	ldr	r1, [r7, #8]
 800922c:	f7fe faba 	bl	80077a4 <SD_disk_read>
 8009230:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8009232:	4618      	mov	r0, r3
 8009234:	3710      	adds	r7, #16
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}

0800923a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 800923a:	b580      	push	{r7, lr}
 800923c:	b084      	sub	sp, #16
 800923e:	af00      	add	r7, sp, #0
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	607a      	str	r2, [r7, #4]
 8009244:	603b      	str	r3, [r7, #0]
 8009246:	4603      	mov	r3, r0
 8009248:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800924a:	7bf8      	ldrb	r0, [r7, #15]
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	68b9      	ldr	r1, [r7, #8]
 8009252:	f7fe fb11 	bl	8007878 <SD_disk_write>
 8009256:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8009258:	4618      	mov	r0, r3
 800925a:	3710      	adds	r7, #16
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b082      	sub	sp, #8
 8009264:	af00      	add	r7, sp, #0
 8009266:	4603      	mov	r3, r0
 8009268:	603a      	str	r2, [r7, #0]
 800926a:	71fb      	strb	r3, [r7, #7]
 800926c:	460b      	mov	r3, r1
 800926e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8009270:	79b9      	ldrb	r1, [r7, #6]
 8009272:	79fb      	ldrb	r3, [r7, #7]
 8009274:	683a      	ldr	r2, [r7, #0]
 8009276:	4618      	mov	r0, r3
 8009278:	f7fe fb82 	bl	8007980 <SD_disk_ioctl>
 800927c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800927e:	4618      	mov	r0, r3
 8009280:	3708      	adds	r7, #8
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
	...

08009288 <pulse>:
	}
	return;
}

// Pulse
void pulse(void){
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0
	volatile uint32_t timeout;
	for (size_t i = 0; i < LED_CFG_STRIP_CNT; i++) {
 800928e:	2300      	movs	r3, #0
 8009290:	607b      	str	r3, [r7, #4]
 8009292:	e022      	b.n	80092da <pulse+0x52>
		set_LED_colors((i + 0) % LED_CFG_STRIP_CNT, 0x0, 0x1F, 0x0);
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	4b14      	ldr	r3, [pc, #80]	; (80092e8 <pulse+0x60>)
 8009298:	fba3 1302 	umull	r1, r3, r3, r2
 800929c:	08d8      	lsrs	r0, r3, #3
 800929e:	4603      	mov	r3, r0
 80092a0:	009b      	lsls	r3, r3, #2
 80092a2:	4403      	add	r3, r0
 80092a4:	005b      	lsls	r3, r3, #1
 80092a6:	4403      	add	r3, r0
 80092a8:	1ad0      	subs	r0, r2, r3
 80092aa:	2300      	movs	r3, #0
 80092ac:	221f      	movs	r2, #31
 80092ae:	2100      	movs	r1, #0
 80092b0:	f000 f920 	bl	80094f4 <set_LED_colors>
		//set_LED_colors((i + 5) % LED_CFG_STRIP_CNT, 0, 0x1F, 0);
		//set_LED_colors((i + 6) % LED_CFG_STRIP_CNT, 0, 0x1F, 0);
		//set_LED_colors((i + 7) % LED_CFG_STRIP_CNT, 0, 0x7, 0);
		//set_LED_colors((i + 8) % LED_CFG_STRIP_CNT, 0, 0x7, 0);

		LED_update(1);
 80092b4:	2001      	movs	r0, #1
 80092b6:	f000 fa63 	bl	8009780 <LED_update>
		LED_set_color_all(0, 0, 0);
 80092ba:	2200      	movs	r2, #0
 80092bc:	2100      	movs	r1, #0
 80092be:	2000      	movs	r0, #0
 80092c0:	f000 f8e6 	bl	8009490 <LED_set_color_all>
		timeout = 0x7FFFF;
 80092c4:	4b09      	ldr	r3, [pc, #36]	; (80092ec <pulse+0x64>)
 80092c6:	603b      	str	r3, [r7, #0]
		while (--timeout) {}
 80092c8:	bf00      	nop
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	3b01      	subs	r3, #1
 80092ce:	603b      	str	r3, [r7, #0]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d1fa      	bne.n	80092ca <pulse+0x42>
	for (size_t i = 0; i < LED_CFG_STRIP_CNT; i++) {
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	3301      	adds	r3, #1
 80092d8:	607b      	str	r3, [r7, #4]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2b0a      	cmp	r3, #10
 80092de:	d9d9      	bls.n	8009294 <pulse+0xc>
	}
	return;
 80092e0:	bf00      	nop
}
 80092e2:	3708      	adds	r7, #8
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}
 80092e8:	ba2e8ba3 	.word	0xba2e8ba3
 80092ec:	0007ffff 	.word	0x0007ffff

080092f0 <pulse_red>:

void pulse_red(void){
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af00      	add	r7, sp, #0
	volatile uint32_t timeout;
	for (size_t i = 0; i < LED_CFG_STRIP_CNT; i++) {
 80092f6:	2300      	movs	r3, #0
 80092f8:	607b      	str	r3, [r7, #4]
 80092fa:	e022      	b.n	8009342 <pulse_red+0x52>
		set_LED_colors((i + 0) % LED_CFG_STRIP_CNT, 0x1F, 0x0, 0x0);
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	4b14      	ldr	r3, [pc, #80]	; (8009350 <pulse_red+0x60>)
 8009300:	fba3 1302 	umull	r1, r3, r3, r2
 8009304:	08d8      	lsrs	r0, r3, #3
 8009306:	4603      	mov	r3, r0
 8009308:	009b      	lsls	r3, r3, #2
 800930a:	4403      	add	r3, r0
 800930c:	005b      	lsls	r3, r3, #1
 800930e:	4403      	add	r3, r0
 8009310:	1ad0      	subs	r0, r2, r3
 8009312:	2300      	movs	r3, #0
 8009314:	2200      	movs	r2, #0
 8009316:	211f      	movs	r1, #31
 8009318:	f000 f8ec 	bl	80094f4 <set_LED_colors>
		//set_LED_colors((i + 5) % LED_CFG_STRIP_CNT, 0, 0x1F, 0);
		//set_LED_colors((i + 6) % LED_CFG_STRIP_CNT, 0, 0x1F, 0);
		//set_LED_colors((i + 7) % LED_CFG_STRIP_CNT, 0, 0x7, 0);
		//set_LED_colors((i + 8) % LED_CFG_STRIP_CNT, 0, 0x7, 0);

		LED_update(1);
 800931c:	2001      	movs	r0, #1
 800931e:	f000 fa2f 	bl	8009780 <LED_update>
		LED_set_color_all(0, 0, 0);
 8009322:	2200      	movs	r2, #0
 8009324:	2100      	movs	r1, #0
 8009326:	2000      	movs	r0, #0
 8009328:	f000 f8b2 	bl	8009490 <LED_set_color_all>
		timeout = 0x7FFFF;
 800932c:	4b09      	ldr	r3, [pc, #36]	; (8009354 <pulse_red+0x64>)
 800932e:	603b      	str	r3, [r7, #0]
		while (--timeout) {}
 8009330:	bf00      	nop
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	3b01      	subs	r3, #1
 8009336:	603b      	str	r3, [r7, #0]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d1fa      	bne.n	8009332 <pulse_red+0x42>
	for (size_t i = 0; i < LED_CFG_STRIP_CNT; i++) {
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	3301      	adds	r3, #1
 8009340:	607b      	str	r3, [r7, #4]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2b0a      	cmp	r3, #10
 8009346:	d9d9      	bls.n	80092fc <pulse_red+0xc>
	}
	return;
 8009348:	bf00      	nop
}
 800934a:	3708      	adds	r7, #8
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}
 8009350:	ba2e8ba3 	.word	0xba2e8ba3
 8009354:	0007ffff 	.word	0x0007ffff

08009358 <pulse_orange>:

// Pulse orange
void pulse_orange(void){
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
	volatile uint32_t timeout;
	for (size_t i = 0; i < LED_CFG_STRIP_CNT; i++) {
 800935e:	2300      	movs	r3, #0
 8009360:	607b      	str	r3, [r7, #4]
 8009362:	e022      	b.n	80093aa <pulse_orange+0x52>
		set_LED_colors((i + 0) % LED_CFG_STRIP_CNT, 0x53, 0x1F, 0x0);
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	4b14      	ldr	r3, [pc, #80]	; (80093b8 <pulse_orange+0x60>)
 8009368:	fba3 1302 	umull	r1, r3, r3, r2
 800936c:	08d8      	lsrs	r0, r3, #3
 800936e:	4603      	mov	r3, r0
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	4403      	add	r3, r0
 8009374:	005b      	lsls	r3, r3, #1
 8009376:	4403      	add	r3, r0
 8009378:	1ad0      	subs	r0, r2, r3
 800937a:	2300      	movs	r3, #0
 800937c:	221f      	movs	r2, #31
 800937e:	2153      	movs	r1, #83	; 0x53
 8009380:	f000 f8b8 	bl	80094f4 <set_LED_colors>
		//set_LED_colors((i + 5) % LED_CFG_STRIP_CNT, 0, 0x1F, 0);
		//set_LED_colors((i + 6) % LED_CFG_STRIP_CNT, 0, 0x1F, 0);
		//set_LED_colors((i + 7) % LED_CFG_STRIP_CNT, 0, 0x7, 0);
		//set_LED_colors((i + 8) % LED_CFG_STRIP_CNT, 0, 0x7, 0);

		LED_update(1);
 8009384:	2001      	movs	r0, #1
 8009386:	f000 f9fb 	bl	8009780 <LED_update>
		LED_set_color_all(0, 0, 0);
 800938a:	2200      	movs	r2, #0
 800938c:	2100      	movs	r1, #0
 800938e:	2000      	movs	r0, #0
 8009390:	f000 f87e 	bl	8009490 <LED_set_color_all>
		timeout = 0x7FFFF;
 8009394:	4b09      	ldr	r3, [pc, #36]	; (80093bc <pulse_orange+0x64>)
 8009396:	603b      	str	r3, [r7, #0]
		while (--timeout) {}
 8009398:	bf00      	nop
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	3b01      	subs	r3, #1
 800939e:	603b      	str	r3, [r7, #0]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d1fa      	bne.n	800939a <pulse_orange+0x42>
	for (size_t i = 0; i < LED_CFG_STRIP_CNT; i++) {
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	3301      	adds	r3, #1
 80093a8:	607b      	str	r3, [r7, #4]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2b0a      	cmp	r3, #10
 80093ae:	d9d9      	bls.n	8009364 <pulse_orange+0xc>
	}
	return;
 80093b0:	bf00      	nop
}
 80093b2:	3708      	adds	r7, #8
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	ba2e8ba3 	.word	0xba2e8ba3
 80093bc:	0007ffff 	.word	0x0007ffff

080093c0 <pulse_blue>:

// Pulse blue
void pulse_blue(void){
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
	volatile uint32_t timeout;
	for (size_t i = 0; i < LED_CFG_STRIP_CNT; i++) {
 80093c6:	2300      	movs	r3, #0
 80093c8:	607b      	str	r3, [r7, #4]
 80093ca:	e022      	b.n	8009412 <pulse_blue+0x52>
		set_LED_colors((i + 0) % LED_CFG_STRIP_CNT, 0x00, 0x00, 0x1F);
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	4b14      	ldr	r3, [pc, #80]	; (8009420 <pulse_blue+0x60>)
 80093d0:	fba3 1302 	umull	r1, r3, r3, r2
 80093d4:	08d8      	lsrs	r0, r3, #3
 80093d6:	4603      	mov	r3, r0
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	4403      	add	r3, r0
 80093dc:	005b      	lsls	r3, r3, #1
 80093de:	4403      	add	r3, r0
 80093e0:	1ad0      	subs	r0, r2, r3
 80093e2:	231f      	movs	r3, #31
 80093e4:	2200      	movs	r2, #0
 80093e6:	2100      	movs	r1, #0
 80093e8:	f000 f884 	bl	80094f4 <set_LED_colors>
		//set_LED_colors((i + 5) % LED_CFG_STRIP_CNT, 0, 0x1F, 0);
		//set_LED_colors((i + 6) % LED_CFG_STRIP_CNT, 0, 0x1F, 0);
		//set_LED_colors((i + 7) % LED_CFG_STRIP_CNT, 0, 0x7, 0);
		//set_LED_colors((i + 8) % LED_CFG_STRIP_CNT, 0, 0x7, 0);

		LED_update(1);
 80093ec:	2001      	movs	r0, #1
 80093ee:	f000 f9c7 	bl	8009780 <LED_update>
		LED_set_color_all(0, 0, 0);
 80093f2:	2200      	movs	r2, #0
 80093f4:	2100      	movs	r1, #0
 80093f6:	2000      	movs	r0, #0
 80093f8:	f000 f84a 	bl	8009490 <LED_set_color_all>
		timeout = 0x7FFFF;
 80093fc:	4b09      	ldr	r3, [pc, #36]	; (8009424 <pulse_blue+0x64>)
 80093fe:	603b      	str	r3, [r7, #0]
		while (--timeout) {}
 8009400:	bf00      	nop
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	3b01      	subs	r3, #1
 8009406:	603b      	str	r3, [r7, #0]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d1fa      	bne.n	8009402 <pulse_blue+0x42>
	for (size_t i = 0; i < LED_CFG_STRIP_CNT; i++) {
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	3301      	adds	r3, #1
 8009410:	607b      	str	r3, [r7, #4]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2b0a      	cmp	r3, #10
 8009416:	d9d9      	bls.n	80093cc <pulse_blue+0xc>
	}
	return;
 8009418:	bf00      	nop
}
 800941a:	3708      	adds	r7, #8
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}
 8009420:	ba2e8ba3 	.word	0xba2e8ba3
 8009424:	0007ffff 	.word	0x0007ffff

08009428 <pulse_purple>:

// Pulse purple
void pulse_purple(void){
 8009428:	b580      	push	{r7, lr}
 800942a:	b082      	sub	sp, #8
 800942c:	af00      	add	r7, sp, #0
	volatile uint32_t timeout;
	for (size_t i = 0; i < LED_CFG_STRIP_CNT; i++) {
 800942e:	2300      	movs	r3, #0
 8009430:	607b      	str	r3, [r7, #4]
 8009432:	e022      	b.n	800947a <pulse_purple+0x52>
		set_LED_colors((i + 0) % LED_CFG_STRIP_CNT, 0x80, 0x00, 0x80);
 8009434:	687a      	ldr	r2, [r7, #4]
 8009436:	4b14      	ldr	r3, [pc, #80]	; (8009488 <pulse_purple+0x60>)
 8009438:	fba3 1302 	umull	r1, r3, r3, r2
 800943c:	08d8      	lsrs	r0, r3, #3
 800943e:	4603      	mov	r3, r0
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	4403      	add	r3, r0
 8009444:	005b      	lsls	r3, r3, #1
 8009446:	4403      	add	r3, r0
 8009448:	1ad0      	subs	r0, r2, r3
 800944a:	2380      	movs	r3, #128	; 0x80
 800944c:	2200      	movs	r2, #0
 800944e:	2180      	movs	r1, #128	; 0x80
 8009450:	f000 f850 	bl	80094f4 <set_LED_colors>

		LED_update(1);
 8009454:	2001      	movs	r0, #1
 8009456:	f000 f993 	bl	8009780 <LED_update>
		LED_set_color_all(0, 0, 0);
 800945a:	2200      	movs	r2, #0
 800945c:	2100      	movs	r1, #0
 800945e:	2000      	movs	r0, #0
 8009460:	f000 f816 	bl	8009490 <LED_set_color_all>
		timeout = 0x7FFFF;
 8009464:	4b09      	ldr	r3, [pc, #36]	; (800948c <pulse_purple+0x64>)
 8009466:	603b      	str	r3, [r7, #0]
		while (--timeout) {}
 8009468:	bf00      	nop
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	3b01      	subs	r3, #1
 800946e:	603b      	str	r3, [r7, #0]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d1fa      	bne.n	800946a <pulse_purple+0x42>
	for (size_t i = 0; i < LED_CFG_STRIP_CNT; i++) {
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	3301      	adds	r3, #1
 8009478:	607b      	str	r3, [r7, #4]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2b0a      	cmp	r3, #10
 800947e:	d9d9      	bls.n	8009434 <pulse_purple+0xc>
	}
	return;
 8009480:	bf00      	nop
}
 8009482:	3708      	adds	r7, #8
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}
 8009488:	ba2e8ba3 	.word	0xba2e8ba3
 800948c:	0007ffff 	.word	0x0007ffff

08009490 <LED_set_color_all>:
	}
	return;
}


uint8_t LED_set_color_all(uint8_t red, uint8_t green, uint8_t blue){
 8009490:	b480      	push	{r7}
 8009492:	b085      	sub	sp, #20
 8009494:	af00      	add	r7, sp, #0
 8009496:	4603      	mov	r3, r0
 8009498:	71fb      	strb	r3, [r7, #7]
 800949a:	460b      	mov	r3, r1
 800949c:	71bb      	strb	r3, [r7, #6]
 800949e:	4613      	mov	r3, r2
 80094a0:	717b      	strb	r3, [r7, #5]
	for (size_t led_idx = 0; led_idx < LED_CFG_STRIP_CNT; led_idx++){
 80094a2:	2300      	movs	r3, #0
 80094a4:	60fb      	str	r3, [r7, #12]
 80094a6:	e019      	b.n	80094dc <LED_set_color_all+0x4c>
		LED_colors[led_idx * LED_CFG_BYTES_PER_LED + 0] = green;
 80094a8:	68fa      	ldr	r2, [r7, #12]
 80094aa:	4613      	mov	r3, r2
 80094ac:	005b      	lsls	r3, r3, #1
 80094ae:	4413      	add	r3, r2
 80094b0:	490f      	ldr	r1, [pc, #60]	; (80094f0 <LED_set_color_all+0x60>)
 80094b2:	79ba      	ldrb	r2, [r7, #6]
 80094b4:	54ca      	strb	r2, [r1, r3]
		LED_colors[led_idx * LED_CFG_BYTES_PER_LED + 1] = red;
 80094b6:	68fa      	ldr	r2, [r7, #12]
 80094b8:	4613      	mov	r3, r2
 80094ba:	005b      	lsls	r3, r3, #1
 80094bc:	4413      	add	r3, r2
 80094be:	3301      	adds	r3, #1
 80094c0:	490b      	ldr	r1, [pc, #44]	; (80094f0 <LED_set_color_all+0x60>)
 80094c2:	79fa      	ldrb	r2, [r7, #7]
 80094c4:	54ca      	strb	r2, [r1, r3]
		LED_colors[led_idx * LED_CFG_BYTES_PER_LED + 2] = blue;
 80094c6:	68fa      	ldr	r2, [r7, #12]
 80094c8:	4613      	mov	r3, r2
 80094ca:	005b      	lsls	r3, r3, #1
 80094cc:	4413      	add	r3, r2
 80094ce:	3302      	adds	r3, #2
 80094d0:	4907      	ldr	r1, [pc, #28]	; (80094f0 <LED_set_color_all+0x60>)
 80094d2:	797a      	ldrb	r2, [r7, #5]
 80094d4:	54ca      	strb	r2, [r1, r3]
	for (size_t led_idx = 0; led_idx < LED_CFG_STRIP_CNT; led_idx++){
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	3301      	adds	r3, #1
 80094da:	60fb      	str	r3, [r7, #12]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2b0a      	cmp	r3, #10
 80094e0:	d9e2      	bls.n	80094a8 <LED_set_color_all+0x18>
	}
	return 1;
 80094e2:	2301      	movs	r3, #1
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3714      	adds	r7, #20
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr
 80094f0:	20004730 	.word	0x20004730

080094f4 <set_LED_colors>:

// Set R,G,B values for a specific LED
// index: LED index in array, starting from '0'
// return 1 if successful, else 0 for fail
uint8_t set_LED_colors(size_t led_idx, uint8_t red, uint8_t green, uint8_t blue){
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	4608      	mov	r0, r1
 80094fe:	4611      	mov	r1, r2
 8009500:	461a      	mov	r2, r3
 8009502:	4603      	mov	r3, r0
 8009504:	70fb      	strb	r3, [r7, #3]
 8009506:	460b      	mov	r3, r1
 8009508:	70bb      	strb	r3, [r7, #2]
 800950a:	4613      	mov	r3, r2
 800950c:	707b      	strb	r3, [r7, #1]
	if (led_idx < LED_CFG_STRIP_CNT){
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2b0a      	cmp	r3, #10
 8009512:	d818      	bhi.n	8009546 <set_LED_colors+0x52>
		LED_colors[led_idx * LED_CFG_BYTES_PER_LED + 0] = green;
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	4613      	mov	r3, r2
 8009518:	005b      	lsls	r3, r3, #1
 800951a:	4413      	add	r3, r2
 800951c:	490d      	ldr	r1, [pc, #52]	; (8009554 <set_LED_colors+0x60>)
 800951e:	78ba      	ldrb	r2, [r7, #2]
 8009520:	54ca      	strb	r2, [r1, r3]
		LED_colors[led_idx * LED_CFG_BYTES_PER_LED + 1] = red;
 8009522:	687a      	ldr	r2, [r7, #4]
 8009524:	4613      	mov	r3, r2
 8009526:	005b      	lsls	r3, r3, #1
 8009528:	4413      	add	r3, r2
 800952a:	3301      	adds	r3, #1
 800952c:	4909      	ldr	r1, [pc, #36]	; (8009554 <set_LED_colors+0x60>)
 800952e:	78fa      	ldrb	r2, [r7, #3]
 8009530:	54ca      	strb	r2, [r1, r3]
		LED_colors[led_idx * LED_CFG_BYTES_PER_LED + 2] = blue;
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	4613      	mov	r3, r2
 8009536:	005b      	lsls	r3, r3, #1
 8009538:	4413      	add	r3, r2
 800953a:	3302      	adds	r3, #2
 800953c:	4905      	ldr	r1, [pc, #20]	; (8009554 <set_LED_colors+0x60>)
 800953e:	787a      	ldrb	r2, [r7, #1]
 8009540:	54ca      	strb	r2, [r1, r3]
		return 1;
 8009542:	2301      	movs	r3, #1
 8009544:	e000      	b.n	8009548 <set_LED_colors+0x54>
	}
	return 0;
 8009546:	2300      	movs	r3, #0
}
 8009548:	4618      	mov	r0, r3
 800954a:	370c      	adds	r7, #12
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr
 8009554:	20004730 	.word	0x20004730

08009558 <write_PWM_data>:

// Iterate through each byte of LED_colors[] and determine if bit in LED_array[] is a HIGH_BIT or LOW_BIT
uint8_t write_PWM_data(size_t led_idx, uint32_t* LED_array){
 8009558:	b480      	push	{r7}
 800955a:	b085      	sub	sp, #20
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]

	if (led_idx < LED_CFG_STRIP_CNT){
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2b0a      	cmp	r3, #10
 8009566:	d859      	bhi.n	800961c <write_PWM_data+0xc4>

		// Retrieve color hex values for RGB
		uint8_t green_hex_val = LED_colors[LED_CFG_BYTES_PER_LED * led_idx + 0];
 8009568:	687a      	ldr	r2, [r7, #4]
 800956a:	4613      	mov	r3, r2
 800956c:	005b      	lsls	r3, r3, #1
 800956e:	4413      	add	r3, r2
 8009570:	4a2e      	ldr	r2, [pc, #184]	; (800962c <write_PWM_data+0xd4>)
 8009572:	5cd3      	ldrb	r3, [r2, r3]
 8009574:	72fb      	strb	r3, [r7, #11]
		uint8_t red_hex_val = LED_colors[LED_CFG_BYTES_PER_LED * led_idx + 1];
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	4613      	mov	r3, r2
 800957a:	005b      	lsls	r3, r3, #1
 800957c:	4413      	add	r3, r2
 800957e:	3301      	adds	r3, #1
 8009580:	4a2a      	ldr	r2, [pc, #168]	; (800962c <write_PWM_data+0xd4>)
 8009582:	5cd3      	ldrb	r3, [r2, r3]
 8009584:	72bb      	strb	r3, [r7, #10]
		uint8_t blue_hex_val = LED_colors[LED_CFG_BYTES_PER_LED * led_idx + 2];
 8009586:	687a      	ldr	r2, [r7, #4]
 8009588:	4613      	mov	r3, r2
 800958a:	005b      	lsls	r3, r3, #1
 800958c:	4413      	add	r3, r2
 800958e:	3302      	adds	r3, #2
 8009590:	4a26      	ldr	r2, [pc, #152]	; (800962c <write_PWM_data+0xd4>)
 8009592:	5cd3      	ldrb	r3, [r2, r3]
 8009594:	727b      	strb	r3, [r7, #9]

		// Set each 24 bits in LED_array based on hex value. Ex: 0x1F = 8'b00011111, therefore LED_array[0] = LOW_BIT
		for (size_t i = 0; i < NUM_BITS_PER_COLOR; i++){
 8009596:	2300      	movs	r3, #0
 8009598:	60fb      	str	r3, [r7, #12]
 800959a:	e03a      	b.n	8009612 <write_PWM_data+0xba>
			LED_array[i] = 			(green_hex_val & (1 << (7 - i))) ? HIGH_BIT : LOW_BIT;		// Set green color
 800959c:	7afa      	ldrb	r2, [r7, #11]
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f1c3 0307 	rsb	r3, r3, #7
 80095a4:	fa42 f303 	asr.w	r3, r2, r3
 80095a8:	f003 0301 	and.w	r3, r3, #1
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d001      	beq.n	80095b4 <write_PWM_data+0x5c>
 80095b0:	2244      	movs	r2, #68	; 0x44
 80095b2:	e000      	b.n	80095b6 <write_PWM_data+0x5e>
 80095b4:	2222      	movs	r2, #34	; 0x22
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	6839      	ldr	r1, [r7, #0]
 80095bc:	440b      	add	r3, r1
 80095be:	601a      	str	r2, [r3, #0]
			LED_array[i + 8] = 	(red_hex_val & (1 << (7 - i))) ? HIGH_BIT : LOW_BIT;			// Set blue color
 80095c0:	7aba      	ldrb	r2, [r7, #10]
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	f1c3 0307 	rsb	r3, r3, #7
 80095c8:	fa42 f303 	asr.w	r3, r2, r3
 80095cc:	f003 0301 	and.w	r3, r3, #1
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d001      	beq.n	80095d8 <write_PWM_data+0x80>
 80095d4:	2244      	movs	r2, #68	; 0x44
 80095d6:	e000      	b.n	80095da <write_PWM_data+0x82>
 80095d8:	2222      	movs	r2, #34	; 0x22
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	3308      	adds	r3, #8
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	6839      	ldr	r1, [r7, #0]
 80095e2:	440b      	add	r3, r1
 80095e4:	601a      	str	r2, [r3, #0]
			LED_array[i + 16] = (blue_hex_val & (1 << (7 - i))) ? HIGH_BIT : LOW_BIT;		// Set red color
 80095e6:	7a7a      	ldrb	r2, [r7, #9]
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f1c3 0307 	rsb	r3, r3, #7
 80095ee:	fa42 f303 	asr.w	r3, r2, r3
 80095f2:	f003 0301 	and.w	r3, r3, #1
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d001      	beq.n	80095fe <write_PWM_data+0xa6>
 80095fa:	2244      	movs	r2, #68	; 0x44
 80095fc:	e000      	b.n	8009600 <write_PWM_data+0xa8>
 80095fe:	2222      	movs	r2, #34	; 0x22
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	3310      	adds	r3, #16
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	6839      	ldr	r1, [r7, #0]
 8009608:	440b      	add	r3, r1
 800960a:	601a      	str	r2, [r3, #0]
		for (size_t i = 0; i < NUM_BITS_PER_COLOR; i++){
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	3301      	adds	r3, #1
 8009610:	60fb      	str	r3, [r7, #12]
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2b07      	cmp	r3, #7
 8009616:	d9c1      	bls.n	800959c <write_PWM_data+0x44>
		}

		return 1;
 8009618:	2301      	movs	r3, #1
 800961a:	e000      	b.n	800961e <write_PWM_data+0xc6>
	}
	return 0;
 800961c:	2300      	movs	r3, #0
}
 800961e:	4618      	mov	r0, r3
 8009620:	3714      	adds	r7, #20
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr
 800962a:	bf00      	nop
 800962c:	20004730 	.word	0x20004730

08009630 <LED_reset_pulse>:

uint8_t LED_reset_pulse(uint8_t rst){
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
 8009636:	4603      	mov	r3, r0
 8009638:	71fb      	strb	r3, [r7, #7]
	rst_flag = rst;		// Set reset flag
 800963a:	4a3f      	ldr	r2, [pc, #252]	; (8009738 <LED_reset_pulse+0x108>)
 800963c:	79fb      	ldrb	r3, [r7, #7]
 800963e:	7013      	strb	r3, [r2, #0]

  hdma_tim2_ch1.Init.Mode = DMA_NORMAL;							// Modify DMA config to Normal Mode
 8009640:	4b3e      	ldr	r3, [pc, #248]	; (800973c <LED_reset_pulse+0x10c>)
 8009642:	2200      	movs	r2, #0
 8009644:	61da      	str	r2, [r3, #28]
  memset(tmp_led_data, 0, sizeof(tmp_led_data));	  // Set all data for tmp_led_data to 0
 8009646:	22c0      	movs	r2, #192	; 0xc0
 8009648:	2100      	movs	r1, #0
 800964a:	483d      	ldr	r0, [pc, #244]	; (8009740 <LED_reset_pulse+0x110>)
 800964c:	f000 fbbe 	bl	8009dcc <memset>

  // Initialize TIM2 DMA handle
  if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK) {
 8009650:	483a      	ldr	r0, [pc, #232]	; (800973c <LED_reset_pulse+0x10c>)
 8009652:	f7f7 fd3d 	bl	80010d0 <HAL_DMA_Init>
 8009656:	4603      	mov	r3, r0
 8009658:	2b00      	cmp	r3, #0
 800965a:	d002      	beq.n	8009662 <LED_reset_pulse+0x32>
    Error_Handler(DMA_ERROR);
 800965c:	2006      	movs	r0, #6
 800965e:	f7fe ff69 	bl	8008534 <Error_Handler>
  }

  // Clear Half Transfer and Transfer Complete flags for DMA1 Stream5
  __HAL_DMA_CLEAR_FLAG(&hdma_tim2_ch1, DMA_FLAG_HTIF1_5);
 8009662:	4b36      	ldr	r3, [pc, #216]	; (800973c <LED_reset_pulse+0x10c>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	461a      	mov	r2, r3
 8009668:	4b36      	ldr	r3, [pc, #216]	; (8009744 <LED_reset_pulse+0x114>)
 800966a:	429a      	cmp	r2, r3
 800966c:	d904      	bls.n	8009678 <LED_reset_pulse+0x48>
 800966e:	4b36      	ldr	r3, [pc, #216]	; (8009748 <LED_reset_pulse+0x118>)
 8009670:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009674:	60da      	str	r2, [r3, #12]
 8009676:	e019      	b.n	80096ac <LED_reset_pulse+0x7c>
 8009678:	4b30      	ldr	r3, [pc, #192]	; (800973c <LED_reset_pulse+0x10c>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	461a      	mov	r2, r3
 800967e:	4b33      	ldr	r3, [pc, #204]	; (800974c <LED_reset_pulse+0x11c>)
 8009680:	429a      	cmp	r2, r3
 8009682:	d904      	bls.n	800968e <LED_reset_pulse+0x5e>
 8009684:	4b30      	ldr	r3, [pc, #192]	; (8009748 <LED_reset_pulse+0x118>)
 8009686:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800968a:	609a      	str	r2, [r3, #8]
 800968c:	e00e      	b.n	80096ac <LED_reset_pulse+0x7c>
 800968e:	4b2b      	ldr	r3, [pc, #172]	; (800973c <LED_reset_pulse+0x10c>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	461a      	mov	r2, r3
 8009694:	4b2e      	ldr	r3, [pc, #184]	; (8009750 <LED_reset_pulse+0x120>)
 8009696:	429a      	cmp	r2, r3
 8009698:	d904      	bls.n	80096a4 <LED_reset_pulse+0x74>
 800969a:	4b2e      	ldr	r3, [pc, #184]	; (8009754 <LED_reset_pulse+0x124>)
 800969c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80096a0:	60da      	str	r2, [r3, #12]
 80096a2:	e003      	b.n	80096ac <LED_reset_pulse+0x7c>
 80096a4:	4b2b      	ldr	r3, [pc, #172]	; (8009754 <LED_reset_pulse+0x124>)
 80096a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80096aa:	609a      	str	r2, [r3, #8]
  __HAL_DMA_CLEAR_FLAG(&hdma_tim2_ch1, DMA_FLAG_TCIF1_5);
 80096ac:	4b23      	ldr	r3, [pc, #140]	; (800973c <LED_reset_pulse+0x10c>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	461a      	mov	r2, r3
 80096b2:	4b24      	ldr	r3, [pc, #144]	; (8009744 <LED_reset_pulse+0x114>)
 80096b4:	429a      	cmp	r2, r3
 80096b6:	d904      	bls.n	80096c2 <LED_reset_pulse+0x92>
 80096b8:	4b23      	ldr	r3, [pc, #140]	; (8009748 <LED_reset_pulse+0x118>)
 80096ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80096be:	60da      	str	r2, [r3, #12]
 80096c0:	e019      	b.n	80096f6 <LED_reset_pulse+0xc6>
 80096c2:	4b1e      	ldr	r3, [pc, #120]	; (800973c <LED_reset_pulse+0x10c>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	461a      	mov	r2, r3
 80096c8:	4b20      	ldr	r3, [pc, #128]	; (800974c <LED_reset_pulse+0x11c>)
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d904      	bls.n	80096d8 <LED_reset_pulse+0xa8>
 80096ce:	4b1e      	ldr	r3, [pc, #120]	; (8009748 <LED_reset_pulse+0x118>)
 80096d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80096d4:	609a      	str	r2, [r3, #8]
 80096d6:	e00e      	b.n	80096f6 <LED_reset_pulse+0xc6>
 80096d8:	4b18      	ldr	r3, [pc, #96]	; (800973c <LED_reset_pulse+0x10c>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	461a      	mov	r2, r3
 80096de:	4b1c      	ldr	r3, [pc, #112]	; (8009750 <LED_reset_pulse+0x120>)
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d904      	bls.n	80096ee <LED_reset_pulse+0xbe>
 80096e4:	4b1b      	ldr	r3, [pc, #108]	; (8009754 <LED_reset_pulse+0x124>)
 80096e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80096ea:	60da      	str	r2, [r3, #12]
 80096ec:	e003      	b.n	80096f6 <LED_reset_pulse+0xc6>
 80096ee:	4b19      	ldr	r3, [pc, #100]	; (8009754 <LED_reset_pulse+0x124>)
 80096f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80096f4:	609a      	str	r2, [r3, #8]

  // Disable Half Transfer Interrupt
  __HAL_DMA_DISABLE_IT(&hdma_tim2_ch1, DMA_IT_HT);
 80096f6:	4b11      	ldr	r3, [pc, #68]	; (800973c <LED_reset_pulse+0x10c>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	4b0f      	ldr	r3, [pc, #60]	; (800973c <LED_reset_pulse+0x10c>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f022 0208 	bic.w	r2, r2, #8
 8009704:	601a      	str	r2, [r3, #0]

  // Enable Complete Transfer Interrupt
  __HAL_DMA_ENABLE_IT(&hdma_tim2_ch1, DMA_IT_TC);
 8009706:	4b0d      	ldr	r3, [pc, #52]	; (800973c <LED_reset_pulse+0x10c>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	681a      	ldr	r2, [r3, #0]
 800970c:	4b0b      	ldr	r3, [pc, #44]	; (800973c <LED_reset_pulse+0x10c>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f042 0210 	orr.w	r2, r2, #16
 8009714:	601a      	str	r2, [r3, #0]

  // Start Reset Pulse. Contains 40 low pulses: 40 x 800kHz = ~50us
  if (HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*)tmp_led_data, 2 * LED_CFG_RAW_BITS_PER_LED) != HAL_OK){
 8009716:	2330      	movs	r3, #48	; 0x30
 8009718:	4a09      	ldr	r2, [pc, #36]	; (8009740 <LED_reset_pulse+0x110>)
 800971a:	2100      	movs	r1, #0
 800971c:	480e      	ldr	r0, [pc, #56]	; (8009758 <LED_reset_pulse+0x128>)
 800971e:	f7f9 f9cf 	bl	8002ac0 <HAL_TIM_PWM_Start_DMA>
 8009722:	4603      	mov	r3, r0
 8009724:	2b00      	cmp	r3, #0
 8009726:	d002      	beq.n	800972e <LED_reset_pulse+0xfe>
    Error_Handler(EN_PWM_ERROR);
 8009728:	2002      	movs	r0, #2
 800972a:	f7fe ff03 	bl	8008534 <Error_Handler>
  }
  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
  return 1;
 800972e:	2301      	movs	r3, #1
}
 8009730:	4618      	mov	r0, r3
 8009732:	3708      	adds	r7, #8
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}
 8009738:	200023c8 	.word	0x200023c8
 800973c:	200023cc 	.word	0x200023cc
 8009740:	20004754 	.word	0x20004754
 8009744:	40026458 	.word	0x40026458
 8009748:	40026400 	.word	0x40026400
 800974c:	400260b8 	.word	0x400260b8
 8009750:	40026058 	.word	0x40026058
 8009754:	40026000 	.word	0x40026000
 8009758:	20003640 	.word	0x20003640

0800975c <led_is_update_finished>:

// return 1 if not updating, 0 if updating process is in progress
uint8_t led_is_update_finished(void) {
 800975c:	b480      	push	{r7}
 800975e:	af00      	add	r7, sp, #0
	return !update_flag;
 8009760:	4b06      	ldr	r3, [pc, #24]	; (800977c <led_is_update_finished+0x20>)
 8009762:	781b      	ldrb	r3, [r3, #0]
 8009764:	b2db      	uxtb	r3, r3
 8009766:	2b00      	cmp	r3, #0
 8009768:	bf0c      	ite	eq
 800976a:	2301      	moveq	r3, #1
 800976c:	2300      	movne	r3, #0
 800976e:	b2db      	uxtb	r3, r3
	//return !is_updating;                        /* Return updating flag status */
}
 8009770:	4618      	mov	r0, r3
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr
 800977a:	bf00      	nop
 800977c:	200034c0 	.word	0x200034c0

08009780 <LED_update>:

// Block = 1 if want to wait until update process is finished
uint8_t LED_update(uint8_t block){
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	4603      	mov	r3, r0
 8009788:	71fb      	strb	r3, [r7, #7]
	if (update_flag) {
 800978a:	4b0d      	ldr	r3, [pc, #52]	; (80097c0 <LED_update+0x40>)
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	b2db      	uxtb	r3, r3
 8009790:	2b00      	cmp	r3, #0
 8009792:	d001      	beq.n	8009798 <LED_update+0x18>
		return 0;
 8009794:	2300      	movs	r3, #0
 8009796:	e00f      	b.n	80097b8 <LED_update+0x38>
	}
	update_flag = 1;		// Signify that LEDs are being updated
 8009798:	4b09      	ldr	r3, [pc, #36]	; (80097c0 <LED_update+0x40>)
 800979a:	2201      	movs	r2, #1
 800979c:	701a      	strb	r2, [r3, #0]

	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
	LED_reset_pulse(RESET_AT_START);	// Reset LED scheme with 50us pulse low
 800979e:	2001      	movs	r0, #1
 80097a0:	f7ff ff46 	bl	8009630 <LED_reset_pulse>

	if (block){
 80097a4:	79fb      	ldrb	r3, [r7, #7]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d005      	beq.n	80097b6 <LED_update+0x36>
		while(!led_is_update_finished());
 80097aa:	bf00      	nop
 80097ac:	f7ff ffd6 	bl	800975c <led_is_update_finished>
 80097b0:	4603      	mov	r3, r0
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d0fa      	beq.n	80097ac <LED_update+0x2c>
	}

	return 1;
 80097b6:	2301      	movs	r3, #1
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3708      	adds	r7, #8
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}
 80097c0:	200034c0 	.word	0x200034c0

080097c4 <led_update_sequence>:

// Update led sequence. Called on TC and HT events.
// At HT event, first 24 elements are transferred
// At TC event, second 24 elements are transferred
void led_update_sequence(uint8_t event) {
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b082      	sub	sp, #8
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	4603      	mov	r3, r0
 80097cc:	71fb      	strb	r3, [r7, #7]

	event = !!event;       // Toggle transfer-complete flag
 80097ce:	79fb      	ldrb	r3, [r7, #7]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	bf14      	ite	ne
 80097d4:	2301      	movne	r3, #1
 80097d6:	2300      	moveq	r3, #0
 80097d8:	b2db      	uxtb	r3, r3
 80097da:	71fb      	strb	r3, [r7, #7]

	// Check for reset pulse at the end of the PWM stream
	if (rst_flag == RESET_AT_END){
 80097dc:	4b66      	ldr	r3, [pc, #408]	; (8009978 <led_update_sequence+0x1b4>)
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	2b02      	cmp	r3, #2
 80097e2:	d107      	bne.n	80097f4 <led_update_sequence+0x30>

		HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);	// Stop DMA
 80097e4:	2100      	movs	r1, #0
 80097e6:	4865      	ldr	r0, [pc, #404]	; (800997c <led_update_sequence+0x1b8>)
 80097e8:	f7f9 fa70 	bl	8002ccc <HAL_TIM_PWM_Stop_DMA>
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);

		update_flag = NOT_UPDATING;										// No longer updating
 80097ec:	4b64      	ldr	r3, [pc, #400]	; (8009980 <led_update_sequence+0x1bc>)
 80097ee:	2200      	movs	r2, #0
 80097f0:	701a      	strb	r2, [r3, #0]
		return;
 80097f2:	e0bd      	b.n	8009970 <led_update_sequence+0x1ac>
	}

	// Check if reset pulse happened at the start of the PWM stream
	if (rst_flag == RESET_AT_START){
 80097f4:	4b60      	ldr	r3, [pc, #384]	; (8009978 <led_update_sequence+0x1b4>)
 80097f6:	781b      	ldrb	r3, [r3, #0]
 80097f8:	2b01      	cmp	r3, #1
 80097fa:	d10e      	bne.n	800981a <led_update_sequence+0x56>
		if (!event) { return; }		// If HT event, return and wait until TC event
 80097fc:	79fb      	ldrb	r3, [r7, #7]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	f000 80b5 	beq.w	800996e <led_update_sequence+0x1aa>

		HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);	// Disable PWM generation to update LED sequence
 8009804:	2100      	movs	r1, #0
 8009806:	485d      	ldr	r0, [pc, #372]	; (800997c <led_update_sequence+0x1b8>)
 8009808:	f7f9 fa60 	bl	8002ccc <HAL_TIM_PWM_Stop_DMA>
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);

		rst_flag = NOT_RESETTING;											// No longer resetting
 800980c:	4b5a      	ldr	r3, [pc, #360]	; (8009978 <led_update_sequence+0x1b4>)
 800980e:	2200      	movs	r2, #0
 8009810:	701a      	strb	r2, [r3, #0]

		current_led = 0;
 8009812:	4b5c      	ldr	r3, [pc, #368]	; (8009984 <led_update_sequence+0x1c0>)
 8009814:	2200      	movs	r2, #0
 8009816:	601a      	str	r2, [r3, #0]
 8009818:	e004      	b.n	8009824 <led_update_sequence+0x60>
	} else {

	// Not resetting, move to next LED and process data
		current_led++;	// Move to next LED
 800981a:	4b5a      	ldr	r3, [pc, #360]	; (8009984 <led_update_sequence+0x1c0>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	3301      	adds	r3, #1
 8009820:	4a58      	ldr	r2, [pc, #352]	; (8009984 <led_update_sequence+0x1c0>)
 8009822:	6013      	str	r3, [r2, #0]
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
	}

	// Prepare data for the next LED
	if (current_led < LED_CFG_STRIP_CNT){
 8009824:	4b57      	ldr	r3, [pc, #348]	; (8009984 <led_update_sequence+0x1c0>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	2b0a      	cmp	r3, #10
 800982a:	f200 8095 	bhi.w	8009958 <led_update_sequence+0x194>

		// 1. Write PWM signal for first LED (current_led = 0) into first-half of DMA buffer
		// 2. Write PWM signal for second LED (current_led = 1) into second-half of DMA buffer
		// 3. Set DMA to circular, clear interrupt flags and start DMA PWM generation
		// 4. Write PWM signal for third and beyond LEDs (current_led >= 2)
		if ((current_led == 0) || !event) {
 800982e:	4b55      	ldr	r3, [pc, #340]	; (8009984 <led_update_sequence+0x1c0>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d002      	beq.n	800983c <led_update_sequence+0x78>
 8009836:	79fb      	ldrb	r3, [r7, #7]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d106      	bne.n	800984a <led_update_sequence+0x86>
			write_PWM_data(current_led, &tmp_led_data[0]);	// Step 1
 800983c:	4b51      	ldr	r3, [pc, #324]	; (8009984 <led_update_sequence+0x1c0>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4951      	ldr	r1, [pc, #324]	; (8009988 <led_update_sequence+0x1c4>)
 8009842:	4618      	mov	r0, r3
 8009844:	f7ff fe88 	bl	8009558 <write_PWM_data>
 8009848:	e005      	b.n	8009856 <led_update_sequence+0x92>
		} else {
			write_PWM_data(current_led, &tmp_led_data[LED_CFG_RAW_BITS_PER_LED]);	// Step 4
 800984a:	4b4e      	ldr	r3, [pc, #312]	; (8009984 <led_update_sequence+0x1c0>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	494f      	ldr	r1, [pc, #316]	; (800998c <led_update_sequence+0x1c8>)
 8009850:	4618      	mov	r0, r3
 8009852:	f7ff fe81 	bl	8009558 <write_PWM_data>
		}

		if (current_led == 0){
 8009856:	4b4b      	ldr	r3, [pc, #300]	; (8009984 <led_update_sequence+0x1c0>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	2b00      	cmp	r3, #0
 800985c:	f040 8088 	bne.w	8009970 <led_update_sequence+0x1ac>

			current_led++;
 8009860:	4b48      	ldr	r3, [pc, #288]	; (8009984 <led_update_sequence+0x1c0>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	3301      	adds	r3, #1
 8009866:	4a47      	ldr	r2, [pc, #284]	; (8009984 <led_update_sequence+0x1c0>)
 8009868:	6013      	str	r3, [r2, #0]
			write_PWM_data(current_led, &tmp_led_data[LED_CFG_RAW_BITS_PER_LED]);	// Step 2
 800986a:	4b46      	ldr	r3, [pc, #280]	; (8009984 <led_update_sequence+0x1c0>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4947      	ldr	r1, [pc, #284]	; (800998c <led_update_sequence+0x1c8>)
 8009870:	4618      	mov	r0, r3
 8009872:	f7ff fe71 	bl	8009558 <write_PWM_data>

		  hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;										// Step 3
 8009876:	4b46      	ldr	r3, [pc, #280]	; (8009990 <led_update_sequence+0x1cc>)
 8009878:	f44f 7280 	mov.w	r2, #256	; 0x100
 800987c:	61da      	str	r2, [r3, #28]
		  // Initialize TIM2 DMA handle
		  if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK) {
 800987e:	4844      	ldr	r0, [pc, #272]	; (8009990 <led_update_sequence+0x1cc>)
 8009880:	f7f7 fc26 	bl	80010d0 <HAL_DMA_Init>
 8009884:	4603      	mov	r3, r0
 8009886:	2b00      	cmp	r3, #0
 8009888:	d002      	beq.n	8009890 <led_update_sequence+0xcc>
		    Error_Handler(DMA_ERROR);
 800988a:	2006      	movs	r0, #6
 800988c:	f7fe fe52 	bl	8008534 <Error_Handler>
		  }

		  __HAL_DMA_CLEAR_FLAG(&hdma_tim2_ch1, DMA_FLAG_HTIF1_5);
 8009890:	4b3f      	ldr	r3, [pc, #252]	; (8009990 <led_update_sequence+0x1cc>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	461a      	mov	r2, r3
 8009896:	4b3f      	ldr	r3, [pc, #252]	; (8009994 <led_update_sequence+0x1d0>)
 8009898:	429a      	cmp	r2, r3
 800989a:	d904      	bls.n	80098a6 <led_update_sequence+0xe2>
 800989c:	4b3e      	ldr	r3, [pc, #248]	; (8009998 <led_update_sequence+0x1d4>)
 800989e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80098a2:	60da      	str	r2, [r3, #12]
 80098a4:	e019      	b.n	80098da <led_update_sequence+0x116>
 80098a6:	4b3a      	ldr	r3, [pc, #232]	; (8009990 <led_update_sequence+0x1cc>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	461a      	mov	r2, r3
 80098ac:	4b3b      	ldr	r3, [pc, #236]	; (800999c <led_update_sequence+0x1d8>)
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d904      	bls.n	80098bc <led_update_sequence+0xf8>
 80098b2:	4b39      	ldr	r3, [pc, #228]	; (8009998 <led_update_sequence+0x1d4>)
 80098b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80098b8:	609a      	str	r2, [r3, #8]
 80098ba:	e00e      	b.n	80098da <led_update_sequence+0x116>
 80098bc:	4b34      	ldr	r3, [pc, #208]	; (8009990 <led_update_sequence+0x1cc>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	461a      	mov	r2, r3
 80098c2:	4b37      	ldr	r3, [pc, #220]	; (80099a0 <led_update_sequence+0x1dc>)
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d904      	bls.n	80098d2 <led_update_sequence+0x10e>
 80098c8:	4b36      	ldr	r3, [pc, #216]	; (80099a4 <led_update_sequence+0x1e0>)
 80098ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80098ce:	60da      	str	r2, [r3, #12]
 80098d0:	e003      	b.n	80098da <led_update_sequence+0x116>
 80098d2:	4b34      	ldr	r3, [pc, #208]	; (80099a4 <led_update_sequence+0x1e0>)
 80098d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80098d8:	609a      	str	r2, [r3, #8]
		  __HAL_DMA_CLEAR_FLAG(&hdma_tim2_ch1, DMA_FLAG_TCIF1_5);
 80098da:	4b2d      	ldr	r3, [pc, #180]	; (8009990 <led_update_sequence+0x1cc>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	461a      	mov	r2, r3
 80098e0:	4b2c      	ldr	r3, [pc, #176]	; (8009994 <led_update_sequence+0x1d0>)
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d904      	bls.n	80098f0 <led_update_sequence+0x12c>
 80098e6:	4b2c      	ldr	r3, [pc, #176]	; (8009998 <led_update_sequence+0x1d4>)
 80098e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80098ec:	60da      	str	r2, [r3, #12]
 80098ee:	e019      	b.n	8009924 <led_update_sequence+0x160>
 80098f0:	4b27      	ldr	r3, [pc, #156]	; (8009990 <led_update_sequence+0x1cc>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	461a      	mov	r2, r3
 80098f6:	4b29      	ldr	r3, [pc, #164]	; (800999c <led_update_sequence+0x1d8>)
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d904      	bls.n	8009906 <led_update_sequence+0x142>
 80098fc:	4b26      	ldr	r3, [pc, #152]	; (8009998 <led_update_sequence+0x1d4>)
 80098fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009902:	609a      	str	r2, [r3, #8]
 8009904:	e00e      	b.n	8009924 <led_update_sequence+0x160>
 8009906:	4b22      	ldr	r3, [pc, #136]	; (8009990 <led_update_sequence+0x1cc>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	461a      	mov	r2, r3
 800990c:	4b24      	ldr	r3, [pc, #144]	; (80099a0 <led_update_sequence+0x1dc>)
 800990e:	429a      	cmp	r2, r3
 8009910:	d904      	bls.n	800991c <led_update_sequence+0x158>
 8009912:	4b24      	ldr	r3, [pc, #144]	; (80099a4 <led_update_sequence+0x1e0>)
 8009914:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009918:	60da      	str	r2, [r3, #12]
 800991a:	e003      	b.n	8009924 <led_update_sequence+0x160>
 800991c:	4b21      	ldr	r3, [pc, #132]	; (80099a4 <led_update_sequence+0x1e0>)
 800991e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009922:	609a      	str	r2, [r3, #8]

		  __HAL_DMA_ENABLE_IT(&hdma_tim2_ch1, DMA_IT_HT);	// Enable interrupt for half-transfer event
 8009924:	4b1a      	ldr	r3, [pc, #104]	; (8009990 <led_update_sequence+0x1cc>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	681a      	ldr	r2, [r3, #0]
 800992a:	4b19      	ldr	r3, [pc, #100]	; (8009990 <led_update_sequence+0x1cc>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f042 0208 	orr.w	r2, r2, #8
 8009932:	601a      	str	r2, [r3, #0]

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8009934:	2201      	movs	r2, #1
 8009936:	2101      	movs	r1, #1
 8009938:	481b      	ldr	r0, [pc, #108]	; (80099a8 <led_update_sequence+0x1e4>)
 800993a:	f7f7 ff69 	bl	8001810 <HAL_GPIO_WritePin>
		  // Start PWM generation
		  if (HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*)tmp_led_data, 2 * LED_CFG_RAW_BITS_PER_LED) != HAL_OK){
 800993e:	2330      	movs	r3, #48	; 0x30
 8009940:	4a11      	ldr	r2, [pc, #68]	; (8009988 <led_update_sequence+0x1c4>)
 8009942:	2100      	movs	r1, #0
 8009944:	480d      	ldr	r0, [pc, #52]	; (800997c <led_update_sequence+0x1b8>)
 8009946:	f7f9 f8bb 	bl	8002ac0 <HAL_TIM_PWM_Start_DMA>
 800994a:	4603      	mov	r3, r0
 800994c:	2b00      	cmp	r3, #0
 800994e:	d00f      	beq.n	8009970 <led_update_sequence+0x1ac>
		    Error_Handler(EN_PWM_ERROR);
 8009950:	2002      	movs	r0, #2
 8009952:	f7fe fdef 	bl	8008534 <Error_Handler>
 8009956:	e00b      	b.n	8009970 <led_update_sequence+0x1ac>
		}

	// When all LEDs have been lit up, wait for all data to be transmitted before modifying DMA
	// !TC && (LED_CFG_STRIP_CNT & 0x01): Half-Transfer event occurred and even-numbered LED
	// TC && !(LED_CFG_STRIP_CNT & 0x01): Transfer-Complete event occured and odd-numbered LED
	} else if ((!event && (LED_CFG_STRIP_CNT & 0x01)) || (event && !(LED_CFG_STRIP_CNT & 0x01))) {
 8009958:	79fb      	ldrb	r3, [r7, #7]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d108      	bne.n	8009970 <led_update_sequence+0x1ac>
		HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 800995e:	2100      	movs	r1, #0
 8009960:	4806      	ldr	r0, [pc, #24]	; (800997c <led_update_sequence+0x1b8>)
 8009962:	f7f9 f9b3 	bl	8002ccc <HAL_TIM_PWM_Stop_DMA>
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
		LED_reset_pulse(RESET_AT_END);
 8009966:	2002      	movs	r0, #2
 8009968:	f7ff fe62 	bl	8009630 <LED_reset_pulse>
 800996c:	e000      	b.n	8009970 <led_update_sequence+0x1ac>
		if (!event) { return; }		// If HT event, return and wait until TC event
 800996e:	bf00      	nop
	}

}
 8009970:	3708      	adds	r7, #8
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
 8009976:	bf00      	nop
 8009978:	200023c8 	.word	0x200023c8
 800997c:	20003640 	.word	0x20003640
 8009980:	200034c0 	.word	0x200034c0
 8009984:	200035d8 	.word	0x200035d8
 8009988:	20004754 	.word	0x20004754
 800998c:	200047b4 	.word	0x200047b4
 8009990:	200023cc 	.word	0x200023cc
 8009994:	40026458 	.word	0x40026458
 8009998:	40026400 	.word	0x40026400
 800999c:	400260b8 	.word	0x400260b8
 80099a0:	40026058 	.word	0x40026058
 80099a4:	40026000 	.word	0x40026000
 80099a8:	40020400 	.word	0x40020400

080099ac <DMA1_Stream5_IRQHandler>:


// DMA1 Stream 5 Global Interrupt
void DMA1_Stream5_IRQHandler(void){
 80099ac:	b580      	push	{r7, lr}
 80099ae:	af00      	add	r7, sp, #0
	// Check for Half-Transfer (HT) event
	if (__HAL_DMA_GET_FLAG(&hdma_tim2_ch1, DMA_FLAG_HTIF1_5)){
 80099b0:	4b64      	ldr	r3, [pc, #400]	; (8009b44 <DMA1_Stream5_IRQHandler+0x198>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	461a      	mov	r2, r3
 80099b6:	4b64      	ldr	r3, [pc, #400]	; (8009b48 <DMA1_Stream5_IRQHandler+0x19c>)
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d909      	bls.n	80099d0 <DMA1_Stream5_IRQHandler+0x24>
 80099bc:	4b63      	ldr	r3, [pc, #396]	; (8009b4c <DMA1_Stream5_IRQHandler+0x1a0>)
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	bf14      	ite	ne
 80099c8:	2301      	movne	r3, #1
 80099ca:	2300      	moveq	r3, #0
 80099cc:	b2db      	uxtb	r3, r3
 80099ce:	e028      	b.n	8009a22 <DMA1_Stream5_IRQHandler+0x76>
 80099d0:	4b5c      	ldr	r3, [pc, #368]	; (8009b44 <DMA1_Stream5_IRQHandler+0x198>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	461a      	mov	r2, r3
 80099d6:	4b5e      	ldr	r3, [pc, #376]	; (8009b50 <DMA1_Stream5_IRQHandler+0x1a4>)
 80099d8:	429a      	cmp	r2, r3
 80099da:	d909      	bls.n	80099f0 <DMA1_Stream5_IRQHandler+0x44>
 80099dc:	4b5b      	ldr	r3, [pc, #364]	; (8009b4c <DMA1_Stream5_IRQHandler+0x1a0>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	bf14      	ite	ne
 80099e8:	2301      	movne	r3, #1
 80099ea:	2300      	moveq	r3, #0
 80099ec:	b2db      	uxtb	r3, r3
 80099ee:	e018      	b.n	8009a22 <DMA1_Stream5_IRQHandler+0x76>
 80099f0:	4b54      	ldr	r3, [pc, #336]	; (8009b44 <DMA1_Stream5_IRQHandler+0x198>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	461a      	mov	r2, r3
 80099f6:	4b57      	ldr	r3, [pc, #348]	; (8009b54 <DMA1_Stream5_IRQHandler+0x1a8>)
 80099f8:	429a      	cmp	r2, r3
 80099fa:	d909      	bls.n	8009a10 <DMA1_Stream5_IRQHandler+0x64>
 80099fc:	4b56      	ldr	r3, [pc, #344]	; (8009b58 <DMA1_Stream5_IRQHandler+0x1ac>)
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	bf14      	ite	ne
 8009a08:	2301      	movne	r3, #1
 8009a0a:	2300      	moveq	r3, #0
 8009a0c:	b2db      	uxtb	r3, r3
 8009a0e:	e008      	b.n	8009a22 <DMA1_Stream5_IRQHandler+0x76>
 8009a10:	4b51      	ldr	r3, [pc, #324]	; (8009b58 <DMA1_Stream5_IRQHandler+0x1ac>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	bf14      	ite	ne
 8009a1c:	2301      	movne	r3, #1
 8009a1e:	2300      	moveq	r3, #0
 8009a20:	b2db      	uxtb	r3, r3
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d028      	beq.n	8009a78 <DMA1_Stream5_IRQHandler+0xcc>
	  __HAL_DMA_CLEAR_FLAG(&hdma_tim2_ch1, DMA_FLAG_HTIF1_5);
 8009a26:	4b47      	ldr	r3, [pc, #284]	; (8009b44 <DMA1_Stream5_IRQHandler+0x198>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	4b46      	ldr	r3, [pc, #280]	; (8009b48 <DMA1_Stream5_IRQHandler+0x19c>)
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d904      	bls.n	8009a3c <DMA1_Stream5_IRQHandler+0x90>
 8009a32:	4b46      	ldr	r3, [pc, #280]	; (8009b4c <DMA1_Stream5_IRQHandler+0x1a0>)
 8009a34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009a38:	60da      	str	r2, [r3, #12]
 8009a3a:	e019      	b.n	8009a70 <DMA1_Stream5_IRQHandler+0xc4>
 8009a3c:	4b41      	ldr	r3, [pc, #260]	; (8009b44 <DMA1_Stream5_IRQHandler+0x198>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	461a      	mov	r2, r3
 8009a42:	4b43      	ldr	r3, [pc, #268]	; (8009b50 <DMA1_Stream5_IRQHandler+0x1a4>)
 8009a44:	429a      	cmp	r2, r3
 8009a46:	d904      	bls.n	8009a52 <DMA1_Stream5_IRQHandler+0xa6>
 8009a48:	4b40      	ldr	r3, [pc, #256]	; (8009b4c <DMA1_Stream5_IRQHandler+0x1a0>)
 8009a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009a4e:	609a      	str	r2, [r3, #8]
 8009a50:	e00e      	b.n	8009a70 <DMA1_Stream5_IRQHandler+0xc4>
 8009a52:	4b3c      	ldr	r3, [pc, #240]	; (8009b44 <DMA1_Stream5_IRQHandler+0x198>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	461a      	mov	r2, r3
 8009a58:	4b3e      	ldr	r3, [pc, #248]	; (8009b54 <DMA1_Stream5_IRQHandler+0x1a8>)
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d904      	bls.n	8009a68 <DMA1_Stream5_IRQHandler+0xbc>
 8009a5e:	4b3e      	ldr	r3, [pc, #248]	; (8009b58 <DMA1_Stream5_IRQHandler+0x1ac>)
 8009a60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009a64:	60da      	str	r2, [r3, #12]
 8009a66:	e003      	b.n	8009a70 <DMA1_Stream5_IRQHandler+0xc4>
 8009a68:	4b3b      	ldr	r3, [pc, #236]	; (8009b58 <DMA1_Stream5_IRQHandler+0x1ac>)
 8009a6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009a6e:	609a      	str	r2, [r3, #8]
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
	  led_update_sequence(HT_EVENT);
 8009a70:	2000      	movs	r0, #0
 8009a72:	f7ff fea7 	bl	80097c4 <led_update_sequence>
	} else if (__HAL_DMA_GET_FLAG(&hdma_tim2_ch1, DMA_FLAG_TCIF1_5)) {
	  __HAL_DMA_CLEAR_FLAG(&hdma_tim2_ch1, DMA_FLAG_TCIF1_5);
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
	  led_update_sequence(TC_EVENT);
	}
}
 8009a76:	e062      	b.n	8009b3e <DMA1_Stream5_IRQHandler+0x192>
	} else if (__HAL_DMA_GET_FLAG(&hdma_tim2_ch1, DMA_FLAG_TCIF1_5)) {
 8009a78:	4b32      	ldr	r3, [pc, #200]	; (8009b44 <DMA1_Stream5_IRQHandler+0x198>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	4b32      	ldr	r3, [pc, #200]	; (8009b48 <DMA1_Stream5_IRQHandler+0x19c>)
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d909      	bls.n	8009a98 <DMA1_Stream5_IRQHandler+0xec>
 8009a84:	4b31      	ldr	r3, [pc, #196]	; (8009b4c <DMA1_Stream5_IRQHandler+0x1a0>)
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	bf14      	ite	ne
 8009a90:	2301      	movne	r3, #1
 8009a92:	2300      	moveq	r3, #0
 8009a94:	b2db      	uxtb	r3, r3
 8009a96:	e028      	b.n	8009aea <DMA1_Stream5_IRQHandler+0x13e>
 8009a98:	4b2a      	ldr	r3, [pc, #168]	; (8009b44 <DMA1_Stream5_IRQHandler+0x198>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	461a      	mov	r2, r3
 8009a9e:	4b2c      	ldr	r3, [pc, #176]	; (8009b50 <DMA1_Stream5_IRQHandler+0x1a4>)
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d909      	bls.n	8009ab8 <DMA1_Stream5_IRQHandler+0x10c>
 8009aa4:	4b29      	ldr	r3, [pc, #164]	; (8009b4c <DMA1_Stream5_IRQHandler+0x1a0>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	bf14      	ite	ne
 8009ab0:	2301      	movne	r3, #1
 8009ab2:	2300      	moveq	r3, #0
 8009ab4:	b2db      	uxtb	r3, r3
 8009ab6:	e018      	b.n	8009aea <DMA1_Stream5_IRQHandler+0x13e>
 8009ab8:	4b22      	ldr	r3, [pc, #136]	; (8009b44 <DMA1_Stream5_IRQHandler+0x198>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	461a      	mov	r2, r3
 8009abe:	4b25      	ldr	r3, [pc, #148]	; (8009b54 <DMA1_Stream5_IRQHandler+0x1a8>)
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d909      	bls.n	8009ad8 <DMA1_Stream5_IRQHandler+0x12c>
 8009ac4:	4b24      	ldr	r3, [pc, #144]	; (8009b58 <DMA1_Stream5_IRQHandler+0x1ac>)
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	bf14      	ite	ne
 8009ad0:	2301      	movne	r3, #1
 8009ad2:	2300      	moveq	r3, #0
 8009ad4:	b2db      	uxtb	r3, r3
 8009ad6:	e008      	b.n	8009aea <DMA1_Stream5_IRQHandler+0x13e>
 8009ad8:	4b1f      	ldr	r3, [pc, #124]	; (8009b58 <DMA1_Stream5_IRQHandler+0x1ac>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	bf14      	ite	ne
 8009ae4:	2301      	movne	r3, #1
 8009ae6:	2300      	moveq	r3, #0
 8009ae8:	b2db      	uxtb	r3, r3
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d027      	beq.n	8009b3e <DMA1_Stream5_IRQHandler+0x192>
	  __HAL_DMA_CLEAR_FLAG(&hdma_tim2_ch1, DMA_FLAG_TCIF1_5);
 8009aee:	4b15      	ldr	r3, [pc, #84]	; (8009b44 <DMA1_Stream5_IRQHandler+0x198>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	461a      	mov	r2, r3
 8009af4:	4b14      	ldr	r3, [pc, #80]	; (8009b48 <DMA1_Stream5_IRQHandler+0x19c>)
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d904      	bls.n	8009b04 <DMA1_Stream5_IRQHandler+0x158>
 8009afa:	4b14      	ldr	r3, [pc, #80]	; (8009b4c <DMA1_Stream5_IRQHandler+0x1a0>)
 8009afc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009b00:	60da      	str	r2, [r3, #12]
 8009b02:	e019      	b.n	8009b38 <DMA1_Stream5_IRQHandler+0x18c>
 8009b04:	4b0f      	ldr	r3, [pc, #60]	; (8009b44 <DMA1_Stream5_IRQHandler+0x198>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	461a      	mov	r2, r3
 8009b0a:	4b11      	ldr	r3, [pc, #68]	; (8009b50 <DMA1_Stream5_IRQHandler+0x1a4>)
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d904      	bls.n	8009b1a <DMA1_Stream5_IRQHandler+0x16e>
 8009b10:	4b0e      	ldr	r3, [pc, #56]	; (8009b4c <DMA1_Stream5_IRQHandler+0x1a0>)
 8009b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009b16:	609a      	str	r2, [r3, #8]
 8009b18:	e00e      	b.n	8009b38 <DMA1_Stream5_IRQHandler+0x18c>
 8009b1a:	4b0a      	ldr	r3, [pc, #40]	; (8009b44 <DMA1_Stream5_IRQHandler+0x198>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	461a      	mov	r2, r3
 8009b20:	4b0c      	ldr	r3, [pc, #48]	; (8009b54 <DMA1_Stream5_IRQHandler+0x1a8>)
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d904      	bls.n	8009b30 <DMA1_Stream5_IRQHandler+0x184>
 8009b26:	4b0c      	ldr	r3, [pc, #48]	; (8009b58 <DMA1_Stream5_IRQHandler+0x1ac>)
 8009b28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009b2c:	60da      	str	r2, [r3, #12]
 8009b2e:	e003      	b.n	8009b38 <DMA1_Stream5_IRQHandler+0x18c>
 8009b30:	4b09      	ldr	r3, [pc, #36]	; (8009b58 <DMA1_Stream5_IRQHandler+0x1ac>)
 8009b32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009b36:	609a      	str	r2, [r3, #8]
	  led_update_sequence(TC_EVENT);
 8009b38:	2001      	movs	r0, #1
 8009b3a:	f7ff fe43 	bl	80097c4 <led_update_sequence>
}
 8009b3e:	bf00      	nop
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	bf00      	nop
 8009b44:	200023cc 	.word	0x200023cc
 8009b48:	40026458 	.word	0x40026458
 8009b4c:	40026400 	.word	0x40026400
 8009b50:	400260b8 	.word	0x400260b8
 8009b54:	40026058 	.word	0x40026058
 8009b58:	40026000 	.word	0x40026000

08009b5c <LED_Init>:


void LED_Init(void)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
  /* ------------- */
  /*  GPIO Config  */
  /* ------------- */

  // Configure TIM2_Channel 1 (PA0) as output, push-pull and alternate function mode
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8009b62:	4b61      	ldr	r3, [pc, #388]	; (8009ce8 <LED_Init+0x18c>)
 8009b64:	2201      	movs	r2, #1
 8009b66:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b68:	4b5f      	ldr	r3, [pc, #380]	; (8009ce8 <LED_Init+0x18c>)
 8009b6a:	2202      	movs	r2, #2
 8009b6c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b6e:	4b5e      	ldr	r3, [pc, #376]	; (8009ce8 <LED_Init+0x18c>)
 8009b70:	2200      	movs	r2, #0
 8009b72:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b74:	4b5c      	ldr	r3, [pc, #368]	; (8009ce8 <LED_Init+0x18c>)
 8009b76:	2203      	movs	r2, #3
 8009b78:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009b7a:	4b5b      	ldr	r3, [pc, #364]	; (8009ce8 <LED_Init+0x18c>)
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b80:	4959      	ldr	r1, [pc, #356]	; (8009ce8 <LED_Init+0x18c>)
 8009b82:	485a      	ldr	r0, [pc, #360]	; (8009cec <LED_Init+0x190>)
 8009b84:	f7f7 fcaa 	bl	80014dc <HAL_GPIO_Init>
  /* -------------- */
  /* TIM2 Channel 1 */
  /* -------------- */

  // Enable TIM2 clock
  __HAL_RCC_TIM2_CLK_ENABLE();
 8009b88:	2300      	movs	r3, #0
 8009b8a:	607b      	str	r3, [r7, #4]
 8009b8c:	4b58      	ldr	r3, [pc, #352]	; (8009cf0 <LED_Init+0x194>)
 8009b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b90:	4a57      	ldr	r2, [pc, #348]	; (8009cf0 <LED_Init+0x194>)
 8009b92:	f043 0301 	orr.w	r3, r3, #1
 8009b96:	6413      	str	r3, [r2, #64]	; 0x40
 8009b98:	4b55      	ldr	r3, [pc, #340]	; (8009cf0 <LED_Init+0x194>)
 8009b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b9c:	f003 0301 	and.w	r3, r3, #1
 8009ba0:	607b      	str	r3, [r7, #4]
 8009ba2:	687b      	ldr	r3, [r7, #4]

  // TIM Time Base handle Structure definition
  // Period = TIM2_counter_clk / PWM_freq - 1
  // Period = 84MHz / 800kHz - 1 = 104 sec
  htim2.Instance               = TIM2;
 8009ba4:	4b53      	ldr	r3, [pc, #332]	; (8009cf4 <LED_Init+0x198>)
 8009ba6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009baa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler         = 0;										// Set to 0 to achieve max frequency for timer at 84MHz
 8009bac:	4b51      	ldr	r3, [pc, #324]	; (8009cf4 <LED_Init+0x198>)
 8009bae:	2200      	movs	r2, #0
 8009bb0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8009bb2:	4b50      	ldr	r3, [pc, #320]	; (8009cf4 <LED_Init+0x198>)
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period            = TIM_PERIOD;
 8009bb8:	4b4e      	ldr	r3, [pc, #312]	; (8009cf4 <LED_Init+0x198>)
 8009bba:	2268      	movs	r2, #104	; 0x68
 8009bbc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 8009bbe:	4b4d      	ldr	r3, [pc, #308]	; (8009cf4 <LED_Init+0x198>)
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;	//TIM_AUTORELOAD_PRELOAD_DISABLE
 8009bc4:	4b4b      	ldr	r3, [pc, #300]	; (8009cf4 <LED_Init+0x198>)
 8009bc6:	2280      	movs	r2, #128	; 0x80
 8009bc8:	619a      	str	r2, [r3, #24]

  // TIM2 interrupt Init
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8009bca:	2200      	movs	r2, #0
 8009bcc:	2100      	movs	r1, #0
 8009bce:	201c      	movs	r0, #28
 8009bd0:	f7f7 fa3b 	bl	800104a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8009bd4:	201c      	movs	r0, #28
 8009bd6:	f7f7 fa54 	bl	8001082 <HAL_NVIC_EnableIRQ>

  // Note: HAL_TIM_PWM_Init() calls HAL_TIM_PWM_MspInit()
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8009bda:	4846      	ldr	r0, [pc, #280]	; (8009cf4 <LED_Init+0x198>)
 8009bdc:	f7f8 ff44 	bl	8002a68 <HAL_TIM_PWM_Init>
 8009be0:	4603      	mov	r3, r0
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d002      	beq.n	8009bec <LED_Init+0x90>
    Error_Handler(TIM_INIT_ERROR);     // Initialization Error
 8009be6:	2004      	movs	r0, #4
 8009be8:	f7fe fca4 	bl	8008534 <Error_Handler>
  }

  // Set TIM Output Compare (OC) Configuration Structure definition
  sConfigOC.OCMode       = TIM_OCMODE_PWM1;
 8009bec:	4b42      	ldr	r3, [pc, #264]	; (8009cf8 <LED_Init+0x19c>)
 8009bee:	2260      	movs	r2, #96	; 0x60
 8009bf0:	601a      	str	r2, [r3, #0]
  sConfigOC.OCPolarity   = TIM_OCPOLARITY_HIGH;
 8009bf2:	4b41      	ldr	r3, [pc, #260]	; (8009cf8 <LED_Init+0x19c>)
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	609a      	str	r2, [r3, #8]
  sConfigOC.Pulse        = 0;
 8009bf8:	4b3f      	ldr	r3, [pc, #252]	; (8009cf8 <LED_Init+0x19c>)
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 8009bfe:	4b3e      	ldr	r3, [pc, #248]	; (8009cf8 <LED_Init+0x19c>)
 8009c00:	2200      	movs	r2, #0
 8009c02:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode   = TIM_OCFAST_DISABLE;
 8009c04:	4b3c      	ldr	r3, [pc, #240]	; (8009cf8 <LED_Init+0x19c>)
 8009c06:	2200      	movs	r2, #0
 8009c08:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState  = TIM_OCIDLESTATE_RESET;
 8009c0a:	4b3b      	ldr	r3, [pc, #236]	; (8009cf8 <LED_Init+0x19c>)
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009c10:	4b39      	ldr	r3, [pc, #228]	; (8009cf8 <LED_Init+0x19c>)
 8009c12:	2200      	movs	r2, #0
 8009c14:	619a      	str	r2, [r3, #24]

  // Apply TIM OC configs to htim2 (TIM2)
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8009c16:	2200      	movs	r2, #0
 8009c18:	4937      	ldr	r1, [pc, #220]	; (8009cf8 <LED_Init+0x19c>)
 8009c1a:	4836      	ldr	r0, [pc, #216]	; (8009cf4 <LED_Init+0x198>)
 8009c1c:	f7f9 fa04 	bl	8003028 <HAL_TIM_PWM_ConfigChannel>
 8009c20:	4603      	mov	r3, r0
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d002      	beq.n	8009c2c <LED_Init+0xd0>
    Error_Handler(TIM_CONFIG_ERROR); // Configuration Error
 8009c26:	2003      	movs	r0, #3
 8009c28:	f7fe fc84 	bl	8008534 <Error_Handler>
  /* ------------------------------ */
  /* DMA1 Channel 3 Stream 5 Config */
  /* ------------------------------ */

  // Enable DMA1 clock
	__HAL_RCC_DMA1_CLK_ENABLE();
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	603b      	str	r3, [r7, #0]
 8009c30:	4b2f      	ldr	r3, [pc, #188]	; (8009cf0 <LED_Init+0x194>)
 8009c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c34:	4a2e      	ldr	r2, [pc, #184]	; (8009cf0 <LED_Init+0x194>)
 8009c36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009c3a:	6313      	str	r3, [r2, #48]	; 0x30
 8009c3c:	4b2c      	ldr	r3, [pc, #176]	; (8009cf0 <LED_Init+0x194>)
 8009c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c44:	603b      	str	r3, [r7, #0]
 8009c46:	683b      	ldr	r3, [r7, #0]

	// DMA handle Structure definition (Based on RM0383 STM32F411 Ref Manual (Table 27) TIM2_CH1 corresponds to DMA1 Channel 3 Stream 5)
  hdma_tim2_ch1.Instance = DMA1_Stream5;
 8009c48:	4b2c      	ldr	r3, [pc, #176]	; (8009cfc <LED_Init+0x1a0>)
 8009c4a:	4a2d      	ldr	r2, [pc, #180]	; (8009d00 <LED_Init+0x1a4>)
 8009c4c:	601a      	str	r2, [r3, #0]
  hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8009c4e:	4b2b      	ldr	r3, [pc, #172]	; (8009cfc <LED_Init+0x1a0>)
 8009c50:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8009c54:	605a      	str	r2, [r3, #4]
  hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;							// Memory to Peripheral mode
 8009c56:	4b29      	ldr	r3, [pc, #164]	; (8009cfc <LED_Init+0x1a0>)
 8009c58:	2240      	movs	r2, #64	; 0x40
 8009c5a:	609a      	str	r2, [r3, #8]
  hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8009c5c:	4b27      	ldr	r3, [pc, #156]	; (8009cfc <LED_Init+0x1a0>)
 8009c5e:	2200      	movs	r2, #0
 8009c60:	60da      	str	r2, [r3, #12]
  hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8009c62:	4b26      	ldr	r3, [pc, #152]	; (8009cfc <LED_Init+0x1a0>)
 8009c64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009c68:	611a      	str	r2, [r3, #16]
  hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD ;
 8009c6a:	4b24      	ldr	r3, [pc, #144]	; (8009cfc <LED_Init+0x1a0>)
 8009c6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009c70:	615a      	str	r2, [r3, #20]
  hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD ;
 8009c72:	4b22      	ldr	r3, [pc, #136]	; (8009cfc <LED_Init+0x1a0>)
 8009c74:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009c78:	619a      	str	r2, [r3, #24]
  hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;														// Set in circular mode
 8009c7a:	4b20      	ldr	r3, [pc, #128]	; (8009cfc <LED_Init+0x1a0>)
 8009c7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c80:	61da      	str	r2, [r3, #28]
  hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;										// Low priority
 8009c82:	4b1e      	ldr	r3, [pc, #120]	; (8009cfc <LED_Init+0x1a0>)
 8009c84:	2200      	movs	r2, #0
 8009c86:	621a      	str	r2, [r3, #32]
  hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009c88:	4b1c      	ldr	r3, [pc, #112]	; (8009cfc <LED_Init+0x1a0>)
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_tim2_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8009c8e:	4b1b      	ldr	r3, [pc, #108]	; (8009cfc <LED_Init+0x1a0>)
 8009c90:	2203      	movs	r2, #3
 8009c92:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_tim2_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 8009c94:	4b19      	ldr	r3, [pc, #100]	; (8009cfc <LED_Init+0x1a0>)
 8009c96:	2200      	movs	r2, #0
 8009c98:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_tim2_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8009c9a:	4b18      	ldr	r3, [pc, #96]	; (8009cfc <LED_Init+0x1a0>)
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	631a      	str	r2, [r3, #48]	; 0x30

  // Enable Half-Transfer and Full-Transfer complete interrupts
  __HAL_DMA_ENABLE_IT(&hdma_tim2_ch1, (DMA_IT_TC | DMA_IT_HT));
 8009ca0:	4b16      	ldr	r3, [pc, #88]	; (8009cfc <LED_Init+0x1a0>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	4b15      	ldr	r3, [pc, #84]	; (8009cfc <LED_Init+0x1a0>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f042 0218 	orr.w	r2, r2, #24
 8009cae:	601a      	str	r2, [r3, #0]

  // Linking a PPP peripheral to DMA structure pointer (PPP = STM32 peripheral or block)
  // hdma[TIM_DMA_ID_CC1] = Capture/Compare 1 DMA requests peripheral
  // Link htim2 (TIM peripheral) to hdma_tim2_ch1 (DMA struc pointer) with TIM_DMA_ID_CC1
  __HAL_LINKDMA(&htim2, hdma[TIM_DMA_ID_CC1], hdma_tim2_ch1);
 8009cb0:	4b10      	ldr	r3, [pc, #64]	; (8009cf4 <LED_Init+0x198>)
 8009cb2:	4a12      	ldr	r2, [pc, #72]	; (8009cfc <LED_Init+0x1a0>)
 8009cb4:	625a      	str	r2, [r3, #36]	; 0x24
 8009cb6:	4b11      	ldr	r3, [pc, #68]	; (8009cfc <LED_Init+0x1a0>)
 8009cb8:	4a0e      	ldr	r2, [pc, #56]	; (8009cf4 <LED_Init+0x198>)
 8009cba:	639a      	str	r2, [r3, #56]	; 0x38

  // Initialize TIM2 DMA handle
  if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK) {
 8009cbc:	480f      	ldr	r0, [pc, #60]	; (8009cfc <LED_Init+0x1a0>)
 8009cbe:	f7f7 fa07 	bl	80010d0 <HAL_DMA_Init>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d002      	beq.n	8009cce <LED_Init+0x172>
    Error_Handler(DMA_ERROR);
 8009cc8:	2006      	movs	r0, #6
 8009cca:	f7fe fc33 	bl	8008534 <Error_Handler>
  }

  // ##-2- Configure the NVIC for DMA #########################################
  // NVIC configuration for DMA transfer complete interrupt
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8009cce:	2200      	movs	r2, #0
 8009cd0:	2100      	movs	r1, #0
 8009cd2:	2010      	movs	r0, #16
 8009cd4:	f7f7 f9b9 	bl	800104a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8009cd8:	2010      	movs	r0, #16
 8009cda:	f7f7 f9d2 	bl	8001082 <HAL_NVIC_EnableIRQ>
}
 8009cde:	bf00      	nop
 8009ce0:	3708      	adds	r7, #8
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	200035c4 	.word	0x200035c4
 8009cec:	40020000 	.word	0x40020000
 8009cf0:	40023800 	.word	0x40023800
 8009cf4:	20003640 	.word	0x20003640
 8009cf8:	20003544 	.word	0x20003544
 8009cfc:	200023cc 	.word	0x200023cc
 8009d00:	40026088 	.word	0x40026088

08009d04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8009d04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009d3c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009d08:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009d0a:	e003      	b.n	8009d14 <LoopCopyDataInit>

08009d0c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009d0c:	4b0c      	ldr	r3, [pc, #48]	; (8009d40 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009d0e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009d10:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009d12:	3104      	adds	r1, #4

08009d14 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009d14:	480b      	ldr	r0, [pc, #44]	; (8009d44 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009d16:	4b0c      	ldr	r3, [pc, #48]	; (8009d48 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009d18:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009d1a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009d1c:	d3f6      	bcc.n	8009d0c <CopyDataInit>
  ldr  r2, =_sbss
 8009d1e:	4a0b      	ldr	r2, [pc, #44]	; (8009d4c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009d20:	e002      	b.n	8009d28 <LoopFillZerobss>

08009d22 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009d22:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009d24:	f842 3b04 	str.w	r3, [r2], #4

08009d28 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009d28:	4b09      	ldr	r3, [pc, #36]	; (8009d50 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009d2a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009d2c:	d3f9      	bcc.n	8009d22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009d2e:	f7ff f887 	bl	8008e40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009d32:	f000 f817 	bl	8009d64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009d36:	f7fe f86b 	bl	8007e10 <main>
  bx  lr    
 8009d3a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8009d3c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8009d40:	0802c1e4 	.word	0x0802c1e4
  ldr  r0, =_sdata
 8009d44:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009d48:	200000c8 	.word	0x200000c8
  ldr  r2, =_sbss
 8009d4c:	200000c8 	.word	0x200000c8
  ldr  r3, = _ebss
 8009d50:	20004818 	.word	0x20004818

08009d54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009d54:	e7fe      	b.n	8009d54 <ADC_IRQHandler>
	...

08009d58 <__errno>:
 8009d58:	4b01      	ldr	r3, [pc, #4]	; (8009d60 <__errno+0x8>)
 8009d5a:	6818      	ldr	r0, [r3, #0]
 8009d5c:	4770      	bx	lr
 8009d5e:	bf00      	nop
 8009d60:	20000064 	.word	0x20000064

08009d64 <__libc_init_array>:
 8009d64:	b570      	push	{r4, r5, r6, lr}
 8009d66:	4e0d      	ldr	r6, [pc, #52]	; (8009d9c <__libc_init_array+0x38>)
 8009d68:	4c0d      	ldr	r4, [pc, #52]	; (8009da0 <__libc_init_array+0x3c>)
 8009d6a:	1ba4      	subs	r4, r4, r6
 8009d6c:	10a4      	asrs	r4, r4, #2
 8009d6e:	2500      	movs	r5, #0
 8009d70:	42a5      	cmp	r5, r4
 8009d72:	d109      	bne.n	8009d88 <__libc_init_array+0x24>
 8009d74:	4e0b      	ldr	r6, [pc, #44]	; (8009da4 <__libc_init_array+0x40>)
 8009d76:	4c0c      	ldr	r4, [pc, #48]	; (8009da8 <__libc_init_array+0x44>)
 8009d78:	f000 fc36 	bl	800a5e8 <_init>
 8009d7c:	1ba4      	subs	r4, r4, r6
 8009d7e:	10a4      	asrs	r4, r4, #2
 8009d80:	2500      	movs	r5, #0
 8009d82:	42a5      	cmp	r5, r4
 8009d84:	d105      	bne.n	8009d92 <__libc_init_array+0x2e>
 8009d86:	bd70      	pop	{r4, r5, r6, pc}
 8009d88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009d8c:	4798      	blx	r3
 8009d8e:	3501      	adds	r5, #1
 8009d90:	e7ee      	b.n	8009d70 <__libc_init_array+0xc>
 8009d92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009d96:	4798      	blx	r3
 8009d98:	3501      	adds	r5, #1
 8009d9a:	e7f2      	b.n	8009d82 <__libc_init_array+0x1e>
 8009d9c:	0802c1dc 	.word	0x0802c1dc
 8009da0:	0802c1dc 	.word	0x0802c1dc
 8009da4:	0802c1dc 	.word	0x0802c1dc
 8009da8:	0802c1e0 	.word	0x0802c1e0

08009dac <malloc>:
 8009dac:	4b02      	ldr	r3, [pc, #8]	; (8009db8 <malloc+0xc>)
 8009dae:	4601      	mov	r1, r0
 8009db0:	6818      	ldr	r0, [r3, #0]
 8009db2:	f000 b861 	b.w	8009e78 <_malloc_r>
 8009db6:	bf00      	nop
 8009db8:	20000064 	.word	0x20000064

08009dbc <free>:
 8009dbc:	4b02      	ldr	r3, [pc, #8]	; (8009dc8 <free+0xc>)
 8009dbe:	4601      	mov	r1, r0
 8009dc0:	6818      	ldr	r0, [r3, #0]
 8009dc2:	f000 b80b 	b.w	8009ddc <_free_r>
 8009dc6:	bf00      	nop
 8009dc8:	20000064 	.word	0x20000064

08009dcc <memset>:
 8009dcc:	4402      	add	r2, r0
 8009dce:	4603      	mov	r3, r0
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d100      	bne.n	8009dd6 <memset+0xa>
 8009dd4:	4770      	bx	lr
 8009dd6:	f803 1b01 	strb.w	r1, [r3], #1
 8009dda:	e7f9      	b.n	8009dd0 <memset+0x4>

08009ddc <_free_r>:
 8009ddc:	b538      	push	{r3, r4, r5, lr}
 8009dde:	4605      	mov	r5, r0
 8009de0:	2900      	cmp	r1, #0
 8009de2:	d045      	beq.n	8009e70 <_free_r+0x94>
 8009de4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009de8:	1f0c      	subs	r4, r1, #4
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	bfb8      	it	lt
 8009dee:	18e4      	addlt	r4, r4, r3
 8009df0:	f000 f8cc 	bl	8009f8c <__malloc_lock>
 8009df4:	4a1f      	ldr	r2, [pc, #124]	; (8009e74 <_free_r+0x98>)
 8009df6:	6813      	ldr	r3, [r2, #0]
 8009df8:	4610      	mov	r0, r2
 8009dfa:	b933      	cbnz	r3, 8009e0a <_free_r+0x2e>
 8009dfc:	6063      	str	r3, [r4, #4]
 8009dfe:	6014      	str	r4, [r2, #0]
 8009e00:	4628      	mov	r0, r5
 8009e02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e06:	f000 b8c2 	b.w	8009f8e <__malloc_unlock>
 8009e0a:	42a3      	cmp	r3, r4
 8009e0c:	d90c      	bls.n	8009e28 <_free_r+0x4c>
 8009e0e:	6821      	ldr	r1, [r4, #0]
 8009e10:	1862      	adds	r2, r4, r1
 8009e12:	4293      	cmp	r3, r2
 8009e14:	bf04      	itt	eq
 8009e16:	681a      	ldreq	r2, [r3, #0]
 8009e18:	685b      	ldreq	r3, [r3, #4]
 8009e1a:	6063      	str	r3, [r4, #4]
 8009e1c:	bf04      	itt	eq
 8009e1e:	1852      	addeq	r2, r2, r1
 8009e20:	6022      	streq	r2, [r4, #0]
 8009e22:	6004      	str	r4, [r0, #0]
 8009e24:	e7ec      	b.n	8009e00 <_free_r+0x24>
 8009e26:	4613      	mov	r3, r2
 8009e28:	685a      	ldr	r2, [r3, #4]
 8009e2a:	b10a      	cbz	r2, 8009e30 <_free_r+0x54>
 8009e2c:	42a2      	cmp	r2, r4
 8009e2e:	d9fa      	bls.n	8009e26 <_free_r+0x4a>
 8009e30:	6819      	ldr	r1, [r3, #0]
 8009e32:	1858      	adds	r0, r3, r1
 8009e34:	42a0      	cmp	r0, r4
 8009e36:	d10b      	bne.n	8009e50 <_free_r+0x74>
 8009e38:	6820      	ldr	r0, [r4, #0]
 8009e3a:	4401      	add	r1, r0
 8009e3c:	1858      	adds	r0, r3, r1
 8009e3e:	4282      	cmp	r2, r0
 8009e40:	6019      	str	r1, [r3, #0]
 8009e42:	d1dd      	bne.n	8009e00 <_free_r+0x24>
 8009e44:	6810      	ldr	r0, [r2, #0]
 8009e46:	6852      	ldr	r2, [r2, #4]
 8009e48:	605a      	str	r2, [r3, #4]
 8009e4a:	4401      	add	r1, r0
 8009e4c:	6019      	str	r1, [r3, #0]
 8009e4e:	e7d7      	b.n	8009e00 <_free_r+0x24>
 8009e50:	d902      	bls.n	8009e58 <_free_r+0x7c>
 8009e52:	230c      	movs	r3, #12
 8009e54:	602b      	str	r3, [r5, #0]
 8009e56:	e7d3      	b.n	8009e00 <_free_r+0x24>
 8009e58:	6820      	ldr	r0, [r4, #0]
 8009e5a:	1821      	adds	r1, r4, r0
 8009e5c:	428a      	cmp	r2, r1
 8009e5e:	bf04      	itt	eq
 8009e60:	6811      	ldreq	r1, [r2, #0]
 8009e62:	6852      	ldreq	r2, [r2, #4]
 8009e64:	6062      	str	r2, [r4, #4]
 8009e66:	bf04      	itt	eq
 8009e68:	1809      	addeq	r1, r1, r0
 8009e6a:	6021      	streq	r1, [r4, #0]
 8009e6c:	605c      	str	r4, [r3, #4]
 8009e6e:	e7c7      	b.n	8009e00 <_free_r+0x24>
 8009e70:	bd38      	pop	{r3, r4, r5, pc}
 8009e72:	bf00      	nop
 8009e74:	20000344 	.word	0x20000344

08009e78 <_malloc_r>:
 8009e78:	b570      	push	{r4, r5, r6, lr}
 8009e7a:	1ccd      	adds	r5, r1, #3
 8009e7c:	f025 0503 	bic.w	r5, r5, #3
 8009e80:	3508      	adds	r5, #8
 8009e82:	2d0c      	cmp	r5, #12
 8009e84:	bf38      	it	cc
 8009e86:	250c      	movcc	r5, #12
 8009e88:	2d00      	cmp	r5, #0
 8009e8a:	4606      	mov	r6, r0
 8009e8c:	db01      	blt.n	8009e92 <_malloc_r+0x1a>
 8009e8e:	42a9      	cmp	r1, r5
 8009e90:	d903      	bls.n	8009e9a <_malloc_r+0x22>
 8009e92:	230c      	movs	r3, #12
 8009e94:	6033      	str	r3, [r6, #0]
 8009e96:	2000      	movs	r0, #0
 8009e98:	bd70      	pop	{r4, r5, r6, pc}
 8009e9a:	f000 f877 	bl	8009f8c <__malloc_lock>
 8009e9e:	4a21      	ldr	r2, [pc, #132]	; (8009f24 <_malloc_r+0xac>)
 8009ea0:	6814      	ldr	r4, [r2, #0]
 8009ea2:	4621      	mov	r1, r4
 8009ea4:	b991      	cbnz	r1, 8009ecc <_malloc_r+0x54>
 8009ea6:	4c20      	ldr	r4, [pc, #128]	; (8009f28 <_malloc_r+0xb0>)
 8009ea8:	6823      	ldr	r3, [r4, #0]
 8009eaa:	b91b      	cbnz	r3, 8009eb4 <_malloc_r+0x3c>
 8009eac:	4630      	mov	r0, r6
 8009eae:	f000 f83d 	bl	8009f2c <_sbrk_r>
 8009eb2:	6020      	str	r0, [r4, #0]
 8009eb4:	4629      	mov	r1, r5
 8009eb6:	4630      	mov	r0, r6
 8009eb8:	f000 f838 	bl	8009f2c <_sbrk_r>
 8009ebc:	1c43      	adds	r3, r0, #1
 8009ebe:	d124      	bne.n	8009f0a <_malloc_r+0x92>
 8009ec0:	230c      	movs	r3, #12
 8009ec2:	6033      	str	r3, [r6, #0]
 8009ec4:	4630      	mov	r0, r6
 8009ec6:	f000 f862 	bl	8009f8e <__malloc_unlock>
 8009eca:	e7e4      	b.n	8009e96 <_malloc_r+0x1e>
 8009ecc:	680b      	ldr	r3, [r1, #0]
 8009ece:	1b5b      	subs	r3, r3, r5
 8009ed0:	d418      	bmi.n	8009f04 <_malloc_r+0x8c>
 8009ed2:	2b0b      	cmp	r3, #11
 8009ed4:	d90f      	bls.n	8009ef6 <_malloc_r+0x7e>
 8009ed6:	600b      	str	r3, [r1, #0]
 8009ed8:	50cd      	str	r5, [r1, r3]
 8009eda:	18cc      	adds	r4, r1, r3
 8009edc:	4630      	mov	r0, r6
 8009ede:	f000 f856 	bl	8009f8e <__malloc_unlock>
 8009ee2:	f104 000b 	add.w	r0, r4, #11
 8009ee6:	1d23      	adds	r3, r4, #4
 8009ee8:	f020 0007 	bic.w	r0, r0, #7
 8009eec:	1ac3      	subs	r3, r0, r3
 8009eee:	d0d3      	beq.n	8009e98 <_malloc_r+0x20>
 8009ef0:	425a      	negs	r2, r3
 8009ef2:	50e2      	str	r2, [r4, r3]
 8009ef4:	e7d0      	b.n	8009e98 <_malloc_r+0x20>
 8009ef6:	428c      	cmp	r4, r1
 8009ef8:	684b      	ldr	r3, [r1, #4]
 8009efa:	bf16      	itet	ne
 8009efc:	6063      	strne	r3, [r4, #4]
 8009efe:	6013      	streq	r3, [r2, #0]
 8009f00:	460c      	movne	r4, r1
 8009f02:	e7eb      	b.n	8009edc <_malloc_r+0x64>
 8009f04:	460c      	mov	r4, r1
 8009f06:	6849      	ldr	r1, [r1, #4]
 8009f08:	e7cc      	b.n	8009ea4 <_malloc_r+0x2c>
 8009f0a:	1cc4      	adds	r4, r0, #3
 8009f0c:	f024 0403 	bic.w	r4, r4, #3
 8009f10:	42a0      	cmp	r0, r4
 8009f12:	d005      	beq.n	8009f20 <_malloc_r+0xa8>
 8009f14:	1a21      	subs	r1, r4, r0
 8009f16:	4630      	mov	r0, r6
 8009f18:	f000 f808 	bl	8009f2c <_sbrk_r>
 8009f1c:	3001      	adds	r0, #1
 8009f1e:	d0cf      	beq.n	8009ec0 <_malloc_r+0x48>
 8009f20:	6025      	str	r5, [r4, #0]
 8009f22:	e7db      	b.n	8009edc <_malloc_r+0x64>
 8009f24:	20000344 	.word	0x20000344
 8009f28:	20000348 	.word	0x20000348

08009f2c <_sbrk_r>:
 8009f2c:	b538      	push	{r3, r4, r5, lr}
 8009f2e:	4c06      	ldr	r4, [pc, #24]	; (8009f48 <_sbrk_r+0x1c>)
 8009f30:	2300      	movs	r3, #0
 8009f32:	4605      	mov	r5, r0
 8009f34:	4608      	mov	r0, r1
 8009f36:	6023      	str	r3, [r4, #0]
 8009f38:	f7fe ff56 	bl	8008de8 <_sbrk>
 8009f3c:	1c43      	adds	r3, r0, #1
 8009f3e:	d102      	bne.n	8009f46 <_sbrk_r+0x1a>
 8009f40:	6823      	ldr	r3, [r4, #0]
 8009f42:	b103      	cbz	r3, 8009f46 <_sbrk_r+0x1a>
 8009f44:	602b      	str	r3, [r5, #0]
 8009f46:	bd38      	pop	{r3, r4, r5, pc}
 8009f48:	20004814 	.word	0x20004814

08009f4c <siprintf>:
 8009f4c:	b40e      	push	{r1, r2, r3}
 8009f4e:	b500      	push	{lr}
 8009f50:	b09c      	sub	sp, #112	; 0x70
 8009f52:	ab1d      	add	r3, sp, #116	; 0x74
 8009f54:	9002      	str	r0, [sp, #8]
 8009f56:	9006      	str	r0, [sp, #24]
 8009f58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009f5c:	4809      	ldr	r0, [pc, #36]	; (8009f84 <siprintf+0x38>)
 8009f5e:	9107      	str	r1, [sp, #28]
 8009f60:	9104      	str	r1, [sp, #16]
 8009f62:	4909      	ldr	r1, [pc, #36]	; (8009f88 <siprintf+0x3c>)
 8009f64:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f68:	9105      	str	r1, [sp, #20]
 8009f6a:	6800      	ldr	r0, [r0, #0]
 8009f6c:	9301      	str	r3, [sp, #4]
 8009f6e:	a902      	add	r1, sp, #8
 8009f70:	f000 f868 	bl	800a044 <_svfiprintf_r>
 8009f74:	9b02      	ldr	r3, [sp, #8]
 8009f76:	2200      	movs	r2, #0
 8009f78:	701a      	strb	r2, [r3, #0]
 8009f7a:	b01c      	add	sp, #112	; 0x70
 8009f7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f80:	b003      	add	sp, #12
 8009f82:	4770      	bx	lr
 8009f84:	20000064 	.word	0x20000064
 8009f88:	ffff0208 	.word	0xffff0208

08009f8c <__malloc_lock>:
 8009f8c:	4770      	bx	lr

08009f8e <__malloc_unlock>:
 8009f8e:	4770      	bx	lr

08009f90 <__ssputs_r>:
 8009f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f94:	688e      	ldr	r6, [r1, #8]
 8009f96:	429e      	cmp	r6, r3
 8009f98:	4682      	mov	sl, r0
 8009f9a:	460c      	mov	r4, r1
 8009f9c:	4690      	mov	r8, r2
 8009f9e:	4699      	mov	r9, r3
 8009fa0:	d837      	bhi.n	800a012 <__ssputs_r+0x82>
 8009fa2:	898a      	ldrh	r2, [r1, #12]
 8009fa4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009fa8:	d031      	beq.n	800a00e <__ssputs_r+0x7e>
 8009faa:	6825      	ldr	r5, [r4, #0]
 8009fac:	6909      	ldr	r1, [r1, #16]
 8009fae:	1a6f      	subs	r7, r5, r1
 8009fb0:	6965      	ldr	r5, [r4, #20]
 8009fb2:	2302      	movs	r3, #2
 8009fb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009fb8:	fb95 f5f3 	sdiv	r5, r5, r3
 8009fbc:	f109 0301 	add.w	r3, r9, #1
 8009fc0:	443b      	add	r3, r7
 8009fc2:	429d      	cmp	r5, r3
 8009fc4:	bf38      	it	cc
 8009fc6:	461d      	movcc	r5, r3
 8009fc8:	0553      	lsls	r3, r2, #21
 8009fca:	d530      	bpl.n	800a02e <__ssputs_r+0x9e>
 8009fcc:	4629      	mov	r1, r5
 8009fce:	f7ff ff53 	bl	8009e78 <_malloc_r>
 8009fd2:	4606      	mov	r6, r0
 8009fd4:	b950      	cbnz	r0, 8009fec <__ssputs_r+0x5c>
 8009fd6:	230c      	movs	r3, #12
 8009fd8:	f8ca 3000 	str.w	r3, [sl]
 8009fdc:	89a3      	ldrh	r3, [r4, #12]
 8009fde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fe2:	81a3      	strh	r3, [r4, #12]
 8009fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fec:	463a      	mov	r2, r7
 8009fee:	6921      	ldr	r1, [r4, #16]
 8009ff0:	f000 faa8 	bl	800a544 <memcpy>
 8009ff4:	89a3      	ldrh	r3, [r4, #12]
 8009ff6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009ffa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ffe:	81a3      	strh	r3, [r4, #12]
 800a000:	6126      	str	r6, [r4, #16]
 800a002:	6165      	str	r5, [r4, #20]
 800a004:	443e      	add	r6, r7
 800a006:	1bed      	subs	r5, r5, r7
 800a008:	6026      	str	r6, [r4, #0]
 800a00a:	60a5      	str	r5, [r4, #8]
 800a00c:	464e      	mov	r6, r9
 800a00e:	454e      	cmp	r6, r9
 800a010:	d900      	bls.n	800a014 <__ssputs_r+0x84>
 800a012:	464e      	mov	r6, r9
 800a014:	4632      	mov	r2, r6
 800a016:	4641      	mov	r1, r8
 800a018:	6820      	ldr	r0, [r4, #0]
 800a01a:	f000 fa9e 	bl	800a55a <memmove>
 800a01e:	68a3      	ldr	r3, [r4, #8]
 800a020:	1b9b      	subs	r3, r3, r6
 800a022:	60a3      	str	r3, [r4, #8]
 800a024:	6823      	ldr	r3, [r4, #0]
 800a026:	441e      	add	r6, r3
 800a028:	6026      	str	r6, [r4, #0]
 800a02a:	2000      	movs	r0, #0
 800a02c:	e7dc      	b.n	8009fe8 <__ssputs_r+0x58>
 800a02e:	462a      	mov	r2, r5
 800a030:	f000 faac 	bl	800a58c <_realloc_r>
 800a034:	4606      	mov	r6, r0
 800a036:	2800      	cmp	r0, #0
 800a038:	d1e2      	bne.n	800a000 <__ssputs_r+0x70>
 800a03a:	6921      	ldr	r1, [r4, #16]
 800a03c:	4650      	mov	r0, sl
 800a03e:	f7ff fecd 	bl	8009ddc <_free_r>
 800a042:	e7c8      	b.n	8009fd6 <__ssputs_r+0x46>

0800a044 <_svfiprintf_r>:
 800a044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a048:	461d      	mov	r5, r3
 800a04a:	898b      	ldrh	r3, [r1, #12]
 800a04c:	061f      	lsls	r7, r3, #24
 800a04e:	b09d      	sub	sp, #116	; 0x74
 800a050:	4680      	mov	r8, r0
 800a052:	460c      	mov	r4, r1
 800a054:	4616      	mov	r6, r2
 800a056:	d50f      	bpl.n	800a078 <_svfiprintf_r+0x34>
 800a058:	690b      	ldr	r3, [r1, #16]
 800a05a:	b96b      	cbnz	r3, 800a078 <_svfiprintf_r+0x34>
 800a05c:	2140      	movs	r1, #64	; 0x40
 800a05e:	f7ff ff0b 	bl	8009e78 <_malloc_r>
 800a062:	6020      	str	r0, [r4, #0]
 800a064:	6120      	str	r0, [r4, #16]
 800a066:	b928      	cbnz	r0, 800a074 <_svfiprintf_r+0x30>
 800a068:	230c      	movs	r3, #12
 800a06a:	f8c8 3000 	str.w	r3, [r8]
 800a06e:	f04f 30ff 	mov.w	r0, #4294967295
 800a072:	e0c8      	b.n	800a206 <_svfiprintf_r+0x1c2>
 800a074:	2340      	movs	r3, #64	; 0x40
 800a076:	6163      	str	r3, [r4, #20]
 800a078:	2300      	movs	r3, #0
 800a07a:	9309      	str	r3, [sp, #36]	; 0x24
 800a07c:	2320      	movs	r3, #32
 800a07e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a082:	2330      	movs	r3, #48	; 0x30
 800a084:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a088:	9503      	str	r5, [sp, #12]
 800a08a:	f04f 0b01 	mov.w	fp, #1
 800a08e:	4637      	mov	r7, r6
 800a090:	463d      	mov	r5, r7
 800a092:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a096:	b10b      	cbz	r3, 800a09c <_svfiprintf_r+0x58>
 800a098:	2b25      	cmp	r3, #37	; 0x25
 800a09a:	d13e      	bne.n	800a11a <_svfiprintf_r+0xd6>
 800a09c:	ebb7 0a06 	subs.w	sl, r7, r6
 800a0a0:	d00b      	beq.n	800a0ba <_svfiprintf_r+0x76>
 800a0a2:	4653      	mov	r3, sl
 800a0a4:	4632      	mov	r2, r6
 800a0a6:	4621      	mov	r1, r4
 800a0a8:	4640      	mov	r0, r8
 800a0aa:	f7ff ff71 	bl	8009f90 <__ssputs_r>
 800a0ae:	3001      	adds	r0, #1
 800a0b0:	f000 80a4 	beq.w	800a1fc <_svfiprintf_r+0x1b8>
 800a0b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0b6:	4453      	add	r3, sl
 800a0b8:	9309      	str	r3, [sp, #36]	; 0x24
 800a0ba:	783b      	ldrb	r3, [r7, #0]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	f000 809d 	beq.w	800a1fc <_svfiprintf_r+0x1b8>
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	f04f 32ff 	mov.w	r2, #4294967295
 800a0c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0cc:	9304      	str	r3, [sp, #16]
 800a0ce:	9307      	str	r3, [sp, #28]
 800a0d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0d4:	931a      	str	r3, [sp, #104]	; 0x68
 800a0d6:	462f      	mov	r7, r5
 800a0d8:	2205      	movs	r2, #5
 800a0da:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a0de:	4850      	ldr	r0, [pc, #320]	; (800a220 <_svfiprintf_r+0x1dc>)
 800a0e0:	f7f6 f886 	bl	80001f0 <memchr>
 800a0e4:	9b04      	ldr	r3, [sp, #16]
 800a0e6:	b9d0      	cbnz	r0, 800a11e <_svfiprintf_r+0xda>
 800a0e8:	06d9      	lsls	r1, r3, #27
 800a0ea:	bf44      	itt	mi
 800a0ec:	2220      	movmi	r2, #32
 800a0ee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a0f2:	071a      	lsls	r2, r3, #28
 800a0f4:	bf44      	itt	mi
 800a0f6:	222b      	movmi	r2, #43	; 0x2b
 800a0f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a0fc:	782a      	ldrb	r2, [r5, #0]
 800a0fe:	2a2a      	cmp	r2, #42	; 0x2a
 800a100:	d015      	beq.n	800a12e <_svfiprintf_r+0xea>
 800a102:	9a07      	ldr	r2, [sp, #28]
 800a104:	462f      	mov	r7, r5
 800a106:	2000      	movs	r0, #0
 800a108:	250a      	movs	r5, #10
 800a10a:	4639      	mov	r1, r7
 800a10c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a110:	3b30      	subs	r3, #48	; 0x30
 800a112:	2b09      	cmp	r3, #9
 800a114:	d94d      	bls.n	800a1b2 <_svfiprintf_r+0x16e>
 800a116:	b1b8      	cbz	r0, 800a148 <_svfiprintf_r+0x104>
 800a118:	e00f      	b.n	800a13a <_svfiprintf_r+0xf6>
 800a11a:	462f      	mov	r7, r5
 800a11c:	e7b8      	b.n	800a090 <_svfiprintf_r+0x4c>
 800a11e:	4a40      	ldr	r2, [pc, #256]	; (800a220 <_svfiprintf_r+0x1dc>)
 800a120:	1a80      	subs	r0, r0, r2
 800a122:	fa0b f000 	lsl.w	r0, fp, r0
 800a126:	4318      	orrs	r0, r3
 800a128:	9004      	str	r0, [sp, #16]
 800a12a:	463d      	mov	r5, r7
 800a12c:	e7d3      	b.n	800a0d6 <_svfiprintf_r+0x92>
 800a12e:	9a03      	ldr	r2, [sp, #12]
 800a130:	1d11      	adds	r1, r2, #4
 800a132:	6812      	ldr	r2, [r2, #0]
 800a134:	9103      	str	r1, [sp, #12]
 800a136:	2a00      	cmp	r2, #0
 800a138:	db01      	blt.n	800a13e <_svfiprintf_r+0xfa>
 800a13a:	9207      	str	r2, [sp, #28]
 800a13c:	e004      	b.n	800a148 <_svfiprintf_r+0x104>
 800a13e:	4252      	negs	r2, r2
 800a140:	f043 0302 	orr.w	r3, r3, #2
 800a144:	9207      	str	r2, [sp, #28]
 800a146:	9304      	str	r3, [sp, #16]
 800a148:	783b      	ldrb	r3, [r7, #0]
 800a14a:	2b2e      	cmp	r3, #46	; 0x2e
 800a14c:	d10c      	bne.n	800a168 <_svfiprintf_r+0x124>
 800a14e:	787b      	ldrb	r3, [r7, #1]
 800a150:	2b2a      	cmp	r3, #42	; 0x2a
 800a152:	d133      	bne.n	800a1bc <_svfiprintf_r+0x178>
 800a154:	9b03      	ldr	r3, [sp, #12]
 800a156:	1d1a      	adds	r2, r3, #4
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	9203      	str	r2, [sp, #12]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	bfb8      	it	lt
 800a160:	f04f 33ff 	movlt.w	r3, #4294967295
 800a164:	3702      	adds	r7, #2
 800a166:	9305      	str	r3, [sp, #20]
 800a168:	4d2e      	ldr	r5, [pc, #184]	; (800a224 <_svfiprintf_r+0x1e0>)
 800a16a:	7839      	ldrb	r1, [r7, #0]
 800a16c:	2203      	movs	r2, #3
 800a16e:	4628      	mov	r0, r5
 800a170:	f7f6 f83e 	bl	80001f0 <memchr>
 800a174:	b138      	cbz	r0, 800a186 <_svfiprintf_r+0x142>
 800a176:	2340      	movs	r3, #64	; 0x40
 800a178:	1b40      	subs	r0, r0, r5
 800a17a:	fa03 f000 	lsl.w	r0, r3, r0
 800a17e:	9b04      	ldr	r3, [sp, #16]
 800a180:	4303      	orrs	r3, r0
 800a182:	3701      	adds	r7, #1
 800a184:	9304      	str	r3, [sp, #16]
 800a186:	7839      	ldrb	r1, [r7, #0]
 800a188:	4827      	ldr	r0, [pc, #156]	; (800a228 <_svfiprintf_r+0x1e4>)
 800a18a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a18e:	2206      	movs	r2, #6
 800a190:	1c7e      	adds	r6, r7, #1
 800a192:	f7f6 f82d 	bl	80001f0 <memchr>
 800a196:	2800      	cmp	r0, #0
 800a198:	d038      	beq.n	800a20c <_svfiprintf_r+0x1c8>
 800a19a:	4b24      	ldr	r3, [pc, #144]	; (800a22c <_svfiprintf_r+0x1e8>)
 800a19c:	bb13      	cbnz	r3, 800a1e4 <_svfiprintf_r+0x1a0>
 800a19e:	9b03      	ldr	r3, [sp, #12]
 800a1a0:	3307      	adds	r3, #7
 800a1a2:	f023 0307 	bic.w	r3, r3, #7
 800a1a6:	3308      	adds	r3, #8
 800a1a8:	9303      	str	r3, [sp, #12]
 800a1aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1ac:	444b      	add	r3, r9
 800a1ae:	9309      	str	r3, [sp, #36]	; 0x24
 800a1b0:	e76d      	b.n	800a08e <_svfiprintf_r+0x4a>
 800a1b2:	fb05 3202 	mla	r2, r5, r2, r3
 800a1b6:	2001      	movs	r0, #1
 800a1b8:	460f      	mov	r7, r1
 800a1ba:	e7a6      	b.n	800a10a <_svfiprintf_r+0xc6>
 800a1bc:	2300      	movs	r3, #0
 800a1be:	3701      	adds	r7, #1
 800a1c0:	9305      	str	r3, [sp, #20]
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	250a      	movs	r5, #10
 800a1c6:	4638      	mov	r0, r7
 800a1c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1cc:	3a30      	subs	r2, #48	; 0x30
 800a1ce:	2a09      	cmp	r2, #9
 800a1d0:	d903      	bls.n	800a1da <_svfiprintf_r+0x196>
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d0c8      	beq.n	800a168 <_svfiprintf_r+0x124>
 800a1d6:	9105      	str	r1, [sp, #20]
 800a1d8:	e7c6      	b.n	800a168 <_svfiprintf_r+0x124>
 800a1da:	fb05 2101 	mla	r1, r5, r1, r2
 800a1de:	2301      	movs	r3, #1
 800a1e0:	4607      	mov	r7, r0
 800a1e2:	e7f0      	b.n	800a1c6 <_svfiprintf_r+0x182>
 800a1e4:	ab03      	add	r3, sp, #12
 800a1e6:	9300      	str	r3, [sp, #0]
 800a1e8:	4622      	mov	r2, r4
 800a1ea:	4b11      	ldr	r3, [pc, #68]	; (800a230 <_svfiprintf_r+0x1ec>)
 800a1ec:	a904      	add	r1, sp, #16
 800a1ee:	4640      	mov	r0, r8
 800a1f0:	f3af 8000 	nop.w
 800a1f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a1f8:	4681      	mov	r9, r0
 800a1fa:	d1d6      	bne.n	800a1aa <_svfiprintf_r+0x166>
 800a1fc:	89a3      	ldrh	r3, [r4, #12]
 800a1fe:	065b      	lsls	r3, r3, #25
 800a200:	f53f af35 	bmi.w	800a06e <_svfiprintf_r+0x2a>
 800a204:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a206:	b01d      	add	sp, #116	; 0x74
 800a208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a20c:	ab03      	add	r3, sp, #12
 800a20e:	9300      	str	r3, [sp, #0]
 800a210:	4622      	mov	r2, r4
 800a212:	4b07      	ldr	r3, [pc, #28]	; (800a230 <_svfiprintf_r+0x1ec>)
 800a214:	a904      	add	r1, sp, #16
 800a216:	4640      	mov	r0, r8
 800a218:	f000 f882 	bl	800a320 <_printf_i>
 800a21c:	e7ea      	b.n	800a1f4 <_svfiprintf_r+0x1b0>
 800a21e:	bf00      	nop
 800a220:	0802c1a1 	.word	0x0802c1a1
 800a224:	0802c1a7 	.word	0x0802c1a7
 800a228:	0802c1ab 	.word	0x0802c1ab
 800a22c:	00000000 	.word	0x00000000
 800a230:	08009f91 	.word	0x08009f91

0800a234 <_printf_common>:
 800a234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a238:	4691      	mov	r9, r2
 800a23a:	461f      	mov	r7, r3
 800a23c:	688a      	ldr	r2, [r1, #8]
 800a23e:	690b      	ldr	r3, [r1, #16]
 800a240:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a244:	4293      	cmp	r3, r2
 800a246:	bfb8      	it	lt
 800a248:	4613      	movlt	r3, r2
 800a24a:	f8c9 3000 	str.w	r3, [r9]
 800a24e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a252:	4606      	mov	r6, r0
 800a254:	460c      	mov	r4, r1
 800a256:	b112      	cbz	r2, 800a25e <_printf_common+0x2a>
 800a258:	3301      	adds	r3, #1
 800a25a:	f8c9 3000 	str.w	r3, [r9]
 800a25e:	6823      	ldr	r3, [r4, #0]
 800a260:	0699      	lsls	r1, r3, #26
 800a262:	bf42      	ittt	mi
 800a264:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a268:	3302      	addmi	r3, #2
 800a26a:	f8c9 3000 	strmi.w	r3, [r9]
 800a26e:	6825      	ldr	r5, [r4, #0]
 800a270:	f015 0506 	ands.w	r5, r5, #6
 800a274:	d107      	bne.n	800a286 <_printf_common+0x52>
 800a276:	f104 0a19 	add.w	sl, r4, #25
 800a27a:	68e3      	ldr	r3, [r4, #12]
 800a27c:	f8d9 2000 	ldr.w	r2, [r9]
 800a280:	1a9b      	subs	r3, r3, r2
 800a282:	42ab      	cmp	r3, r5
 800a284:	dc28      	bgt.n	800a2d8 <_printf_common+0xa4>
 800a286:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a28a:	6822      	ldr	r2, [r4, #0]
 800a28c:	3300      	adds	r3, #0
 800a28e:	bf18      	it	ne
 800a290:	2301      	movne	r3, #1
 800a292:	0692      	lsls	r2, r2, #26
 800a294:	d42d      	bmi.n	800a2f2 <_printf_common+0xbe>
 800a296:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a29a:	4639      	mov	r1, r7
 800a29c:	4630      	mov	r0, r6
 800a29e:	47c0      	blx	r8
 800a2a0:	3001      	adds	r0, #1
 800a2a2:	d020      	beq.n	800a2e6 <_printf_common+0xb2>
 800a2a4:	6823      	ldr	r3, [r4, #0]
 800a2a6:	68e5      	ldr	r5, [r4, #12]
 800a2a8:	f8d9 2000 	ldr.w	r2, [r9]
 800a2ac:	f003 0306 	and.w	r3, r3, #6
 800a2b0:	2b04      	cmp	r3, #4
 800a2b2:	bf08      	it	eq
 800a2b4:	1aad      	subeq	r5, r5, r2
 800a2b6:	68a3      	ldr	r3, [r4, #8]
 800a2b8:	6922      	ldr	r2, [r4, #16]
 800a2ba:	bf0c      	ite	eq
 800a2bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a2c0:	2500      	movne	r5, #0
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	bfc4      	itt	gt
 800a2c6:	1a9b      	subgt	r3, r3, r2
 800a2c8:	18ed      	addgt	r5, r5, r3
 800a2ca:	f04f 0900 	mov.w	r9, #0
 800a2ce:	341a      	adds	r4, #26
 800a2d0:	454d      	cmp	r5, r9
 800a2d2:	d11a      	bne.n	800a30a <_printf_common+0xd6>
 800a2d4:	2000      	movs	r0, #0
 800a2d6:	e008      	b.n	800a2ea <_printf_common+0xb6>
 800a2d8:	2301      	movs	r3, #1
 800a2da:	4652      	mov	r2, sl
 800a2dc:	4639      	mov	r1, r7
 800a2de:	4630      	mov	r0, r6
 800a2e0:	47c0      	blx	r8
 800a2e2:	3001      	adds	r0, #1
 800a2e4:	d103      	bne.n	800a2ee <_printf_common+0xba>
 800a2e6:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2ee:	3501      	adds	r5, #1
 800a2f0:	e7c3      	b.n	800a27a <_printf_common+0x46>
 800a2f2:	18e1      	adds	r1, r4, r3
 800a2f4:	1c5a      	adds	r2, r3, #1
 800a2f6:	2030      	movs	r0, #48	; 0x30
 800a2f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a2fc:	4422      	add	r2, r4
 800a2fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a302:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a306:	3302      	adds	r3, #2
 800a308:	e7c5      	b.n	800a296 <_printf_common+0x62>
 800a30a:	2301      	movs	r3, #1
 800a30c:	4622      	mov	r2, r4
 800a30e:	4639      	mov	r1, r7
 800a310:	4630      	mov	r0, r6
 800a312:	47c0      	blx	r8
 800a314:	3001      	adds	r0, #1
 800a316:	d0e6      	beq.n	800a2e6 <_printf_common+0xb2>
 800a318:	f109 0901 	add.w	r9, r9, #1
 800a31c:	e7d8      	b.n	800a2d0 <_printf_common+0x9c>
	...

0800a320 <_printf_i>:
 800a320:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a324:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a328:	460c      	mov	r4, r1
 800a32a:	7e09      	ldrb	r1, [r1, #24]
 800a32c:	b085      	sub	sp, #20
 800a32e:	296e      	cmp	r1, #110	; 0x6e
 800a330:	4617      	mov	r7, r2
 800a332:	4606      	mov	r6, r0
 800a334:	4698      	mov	r8, r3
 800a336:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a338:	f000 80b3 	beq.w	800a4a2 <_printf_i+0x182>
 800a33c:	d822      	bhi.n	800a384 <_printf_i+0x64>
 800a33e:	2963      	cmp	r1, #99	; 0x63
 800a340:	d036      	beq.n	800a3b0 <_printf_i+0x90>
 800a342:	d80a      	bhi.n	800a35a <_printf_i+0x3a>
 800a344:	2900      	cmp	r1, #0
 800a346:	f000 80b9 	beq.w	800a4bc <_printf_i+0x19c>
 800a34a:	2958      	cmp	r1, #88	; 0x58
 800a34c:	f000 8083 	beq.w	800a456 <_printf_i+0x136>
 800a350:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a354:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a358:	e032      	b.n	800a3c0 <_printf_i+0xa0>
 800a35a:	2964      	cmp	r1, #100	; 0x64
 800a35c:	d001      	beq.n	800a362 <_printf_i+0x42>
 800a35e:	2969      	cmp	r1, #105	; 0x69
 800a360:	d1f6      	bne.n	800a350 <_printf_i+0x30>
 800a362:	6820      	ldr	r0, [r4, #0]
 800a364:	6813      	ldr	r3, [r2, #0]
 800a366:	0605      	lsls	r5, r0, #24
 800a368:	f103 0104 	add.w	r1, r3, #4
 800a36c:	d52a      	bpl.n	800a3c4 <_printf_i+0xa4>
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	6011      	str	r1, [r2, #0]
 800a372:	2b00      	cmp	r3, #0
 800a374:	da03      	bge.n	800a37e <_printf_i+0x5e>
 800a376:	222d      	movs	r2, #45	; 0x2d
 800a378:	425b      	negs	r3, r3
 800a37a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a37e:	486f      	ldr	r0, [pc, #444]	; (800a53c <_printf_i+0x21c>)
 800a380:	220a      	movs	r2, #10
 800a382:	e039      	b.n	800a3f8 <_printf_i+0xd8>
 800a384:	2973      	cmp	r1, #115	; 0x73
 800a386:	f000 809d 	beq.w	800a4c4 <_printf_i+0x1a4>
 800a38a:	d808      	bhi.n	800a39e <_printf_i+0x7e>
 800a38c:	296f      	cmp	r1, #111	; 0x6f
 800a38e:	d020      	beq.n	800a3d2 <_printf_i+0xb2>
 800a390:	2970      	cmp	r1, #112	; 0x70
 800a392:	d1dd      	bne.n	800a350 <_printf_i+0x30>
 800a394:	6823      	ldr	r3, [r4, #0]
 800a396:	f043 0320 	orr.w	r3, r3, #32
 800a39a:	6023      	str	r3, [r4, #0]
 800a39c:	e003      	b.n	800a3a6 <_printf_i+0x86>
 800a39e:	2975      	cmp	r1, #117	; 0x75
 800a3a0:	d017      	beq.n	800a3d2 <_printf_i+0xb2>
 800a3a2:	2978      	cmp	r1, #120	; 0x78
 800a3a4:	d1d4      	bne.n	800a350 <_printf_i+0x30>
 800a3a6:	2378      	movs	r3, #120	; 0x78
 800a3a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a3ac:	4864      	ldr	r0, [pc, #400]	; (800a540 <_printf_i+0x220>)
 800a3ae:	e055      	b.n	800a45c <_printf_i+0x13c>
 800a3b0:	6813      	ldr	r3, [r2, #0]
 800a3b2:	1d19      	adds	r1, r3, #4
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	6011      	str	r1, [r2, #0]
 800a3b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	e08c      	b.n	800a4de <_printf_i+0x1be>
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	6011      	str	r1, [r2, #0]
 800a3c8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a3cc:	bf18      	it	ne
 800a3ce:	b21b      	sxthne	r3, r3
 800a3d0:	e7cf      	b.n	800a372 <_printf_i+0x52>
 800a3d2:	6813      	ldr	r3, [r2, #0]
 800a3d4:	6825      	ldr	r5, [r4, #0]
 800a3d6:	1d18      	adds	r0, r3, #4
 800a3d8:	6010      	str	r0, [r2, #0]
 800a3da:	0628      	lsls	r0, r5, #24
 800a3dc:	d501      	bpl.n	800a3e2 <_printf_i+0xc2>
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	e002      	b.n	800a3e8 <_printf_i+0xc8>
 800a3e2:	0668      	lsls	r0, r5, #25
 800a3e4:	d5fb      	bpl.n	800a3de <_printf_i+0xbe>
 800a3e6:	881b      	ldrh	r3, [r3, #0]
 800a3e8:	4854      	ldr	r0, [pc, #336]	; (800a53c <_printf_i+0x21c>)
 800a3ea:	296f      	cmp	r1, #111	; 0x6f
 800a3ec:	bf14      	ite	ne
 800a3ee:	220a      	movne	r2, #10
 800a3f0:	2208      	moveq	r2, #8
 800a3f2:	2100      	movs	r1, #0
 800a3f4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a3f8:	6865      	ldr	r5, [r4, #4]
 800a3fa:	60a5      	str	r5, [r4, #8]
 800a3fc:	2d00      	cmp	r5, #0
 800a3fe:	f2c0 8095 	blt.w	800a52c <_printf_i+0x20c>
 800a402:	6821      	ldr	r1, [r4, #0]
 800a404:	f021 0104 	bic.w	r1, r1, #4
 800a408:	6021      	str	r1, [r4, #0]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d13d      	bne.n	800a48a <_printf_i+0x16a>
 800a40e:	2d00      	cmp	r5, #0
 800a410:	f040 808e 	bne.w	800a530 <_printf_i+0x210>
 800a414:	4665      	mov	r5, ip
 800a416:	2a08      	cmp	r2, #8
 800a418:	d10b      	bne.n	800a432 <_printf_i+0x112>
 800a41a:	6823      	ldr	r3, [r4, #0]
 800a41c:	07db      	lsls	r3, r3, #31
 800a41e:	d508      	bpl.n	800a432 <_printf_i+0x112>
 800a420:	6923      	ldr	r3, [r4, #16]
 800a422:	6862      	ldr	r2, [r4, #4]
 800a424:	429a      	cmp	r2, r3
 800a426:	bfde      	ittt	le
 800a428:	2330      	movle	r3, #48	; 0x30
 800a42a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a42e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a432:	ebac 0305 	sub.w	r3, ip, r5
 800a436:	6123      	str	r3, [r4, #16]
 800a438:	f8cd 8000 	str.w	r8, [sp]
 800a43c:	463b      	mov	r3, r7
 800a43e:	aa03      	add	r2, sp, #12
 800a440:	4621      	mov	r1, r4
 800a442:	4630      	mov	r0, r6
 800a444:	f7ff fef6 	bl	800a234 <_printf_common>
 800a448:	3001      	adds	r0, #1
 800a44a:	d14d      	bne.n	800a4e8 <_printf_i+0x1c8>
 800a44c:	f04f 30ff 	mov.w	r0, #4294967295
 800a450:	b005      	add	sp, #20
 800a452:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a456:	4839      	ldr	r0, [pc, #228]	; (800a53c <_printf_i+0x21c>)
 800a458:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a45c:	6813      	ldr	r3, [r2, #0]
 800a45e:	6821      	ldr	r1, [r4, #0]
 800a460:	1d1d      	adds	r5, r3, #4
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	6015      	str	r5, [r2, #0]
 800a466:	060a      	lsls	r2, r1, #24
 800a468:	d50b      	bpl.n	800a482 <_printf_i+0x162>
 800a46a:	07ca      	lsls	r2, r1, #31
 800a46c:	bf44      	itt	mi
 800a46e:	f041 0120 	orrmi.w	r1, r1, #32
 800a472:	6021      	strmi	r1, [r4, #0]
 800a474:	b91b      	cbnz	r3, 800a47e <_printf_i+0x15e>
 800a476:	6822      	ldr	r2, [r4, #0]
 800a478:	f022 0220 	bic.w	r2, r2, #32
 800a47c:	6022      	str	r2, [r4, #0]
 800a47e:	2210      	movs	r2, #16
 800a480:	e7b7      	b.n	800a3f2 <_printf_i+0xd2>
 800a482:	064d      	lsls	r5, r1, #25
 800a484:	bf48      	it	mi
 800a486:	b29b      	uxthmi	r3, r3
 800a488:	e7ef      	b.n	800a46a <_printf_i+0x14a>
 800a48a:	4665      	mov	r5, ip
 800a48c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a490:	fb02 3311 	mls	r3, r2, r1, r3
 800a494:	5cc3      	ldrb	r3, [r0, r3]
 800a496:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a49a:	460b      	mov	r3, r1
 800a49c:	2900      	cmp	r1, #0
 800a49e:	d1f5      	bne.n	800a48c <_printf_i+0x16c>
 800a4a0:	e7b9      	b.n	800a416 <_printf_i+0xf6>
 800a4a2:	6813      	ldr	r3, [r2, #0]
 800a4a4:	6825      	ldr	r5, [r4, #0]
 800a4a6:	6961      	ldr	r1, [r4, #20]
 800a4a8:	1d18      	adds	r0, r3, #4
 800a4aa:	6010      	str	r0, [r2, #0]
 800a4ac:	0628      	lsls	r0, r5, #24
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	d501      	bpl.n	800a4b6 <_printf_i+0x196>
 800a4b2:	6019      	str	r1, [r3, #0]
 800a4b4:	e002      	b.n	800a4bc <_printf_i+0x19c>
 800a4b6:	066a      	lsls	r2, r5, #25
 800a4b8:	d5fb      	bpl.n	800a4b2 <_printf_i+0x192>
 800a4ba:	8019      	strh	r1, [r3, #0]
 800a4bc:	2300      	movs	r3, #0
 800a4be:	6123      	str	r3, [r4, #16]
 800a4c0:	4665      	mov	r5, ip
 800a4c2:	e7b9      	b.n	800a438 <_printf_i+0x118>
 800a4c4:	6813      	ldr	r3, [r2, #0]
 800a4c6:	1d19      	adds	r1, r3, #4
 800a4c8:	6011      	str	r1, [r2, #0]
 800a4ca:	681d      	ldr	r5, [r3, #0]
 800a4cc:	6862      	ldr	r2, [r4, #4]
 800a4ce:	2100      	movs	r1, #0
 800a4d0:	4628      	mov	r0, r5
 800a4d2:	f7f5 fe8d 	bl	80001f0 <memchr>
 800a4d6:	b108      	cbz	r0, 800a4dc <_printf_i+0x1bc>
 800a4d8:	1b40      	subs	r0, r0, r5
 800a4da:	6060      	str	r0, [r4, #4]
 800a4dc:	6863      	ldr	r3, [r4, #4]
 800a4de:	6123      	str	r3, [r4, #16]
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4e6:	e7a7      	b.n	800a438 <_printf_i+0x118>
 800a4e8:	6923      	ldr	r3, [r4, #16]
 800a4ea:	462a      	mov	r2, r5
 800a4ec:	4639      	mov	r1, r7
 800a4ee:	4630      	mov	r0, r6
 800a4f0:	47c0      	blx	r8
 800a4f2:	3001      	adds	r0, #1
 800a4f4:	d0aa      	beq.n	800a44c <_printf_i+0x12c>
 800a4f6:	6823      	ldr	r3, [r4, #0]
 800a4f8:	079b      	lsls	r3, r3, #30
 800a4fa:	d413      	bmi.n	800a524 <_printf_i+0x204>
 800a4fc:	68e0      	ldr	r0, [r4, #12]
 800a4fe:	9b03      	ldr	r3, [sp, #12]
 800a500:	4298      	cmp	r0, r3
 800a502:	bfb8      	it	lt
 800a504:	4618      	movlt	r0, r3
 800a506:	e7a3      	b.n	800a450 <_printf_i+0x130>
 800a508:	2301      	movs	r3, #1
 800a50a:	464a      	mov	r2, r9
 800a50c:	4639      	mov	r1, r7
 800a50e:	4630      	mov	r0, r6
 800a510:	47c0      	blx	r8
 800a512:	3001      	adds	r0, #1
 800a514:	d09a      	beq.n	800a44c <_printf_i+0x12c>
 800a516:	3501      	adds	r5, #1
 800a518:	68e3      	ldr	r3, [r4, #12]
 800a51a:	9a03      	ldr	r2, [sp, #12]
 800a51c:	1a9b      	subs	r3, r3, r2
 800a51e:	42ab      	cmp	r3, r5
 800a520:	dcf2      	bgt.n	800a508 <_printf_i+0x1e8>
 800a522:	e7eb      	b.n	800a4fc <_printf_i+0x1dc>
 800a524:	2500      	movs	r5, #0
 800a526:	f104 0919 	add.w	r9, r4, #25
 800a52a:	e7f5      	b.n	800a518 <_printf_i+0x1f8>
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d1ac      	bne.n	800a48a <_printf_i+0x16a>
 800a530:	7803      	ldrb	r3, [r0, #0]
 800a532:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a536:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a53a:	e76c      	b.n	800a416 <_printf_i+0xf6>
 800a53c:	0802c1b2 	.word	0x0802c1b2
 800a540:	0802c1c3 	.word	0x0802c1c3

0800a544 <memcpy>:
 800a544:	b510      	push	{r4, lr}
 800a546:	1e43      	subs	r3, r0, #1
 800a548:	440a      	add	r2, r1
 800a54a:	4291      	cmp	r1, r2
 800a54c:	d100      	bne.n	800a550 <memcpy+0xc>
 800a54e:	bd10      	pop	{r4, pc}
 800a550:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a554:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a558:	e7f7      	b.n	800a54a <memcpy+0x6>

0800a55a <memmove>:
 800a55a:	4288      	cmp	r0, r1
 800a55c:	b510      	push	{r4, lr}
 800a55e:	eb01 0302 	add.w	r3, r1, r2
 800a562:	d807      	bhi.n	800a574 <memmove+0x1a>
 800a564:	1e42      	subs	r2, r0, #1
 800a566:	4299      	cmp	r1, r3
 800a568:	d00a      	beq.n	800a580 <memmove+0x26>
 800a56a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a56e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a572:	e7f8      	b.n	800a566 <memmove+0xc>
 800a574:	4283      	cmp	r3, r0
 800a576:	d9f5      	bls.n	800a564 <memmove+0xa>
 800a578:	1881      	adds	r1, r0, r2
 800a57a:	1ad2      	subs	r2, r2, r3
 800a57c:	42d3      	cmn	r3, r2
 800a57e:	d100      	bne.n	800a582 <memmove+0x28>
 800a580:	bd10      	pop	{r4, pc}
 800a582:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a586:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a58a:	e7f7      	b.n	800a57c <memmove+0x22>

0800a58c <_realloc_r>:
 800a58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a58e:	4607      	mov	r7, r0
 800a590:	4614      	mov	r4, r2
 800a592:	460e      	mov	r6, r1
 800a594:	b921      	cbnz	r1, 800a5a0 <_realloc_r+0x14>
 800a596:	4611      	mov	r1, r2
 800a598:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a59c:	f7ff bc6c 	b.w	8009e78 <_malloc_r>
 800a5a0:	b922      	cbnz	r2, 800a5ac <_realloc_r+0x20>
 800a5a2:	f7ff fc1b 	bl	8009ddc <_free_r>
 800a5a6:	4625      	mov	r5, r4
 800a5a8:	4628      	mov	r0, r5
 800a5aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5ac:	f000 f814 	bl	800a5d8 <_malloc_usable_size_r>
 800a5b0:	42a0      	cmp	r0, r4
 800a5b2:	d20f      	bcs.n	800a5d4 <_realloc_r+0x48>
 800a5b4:	4621      	mov	r1, r4
 800a5b6:	4638      	mov	r0, r7
 800a5b8:	f7ff fc5e 	bl	8009e78 <_malloc_r>
 800a5bc:	4605      	mov	r5, r0
 800a5be:	2800      	cmp	r0, #0
 800a5c0:	d0f2      	beq.n	800a5a8 <_realloc_r+0x1c>
 800a5c2:	4631      	mov	r1, r6
 800a5c4:	4622      	mov	r2, r4
 800a5c6:	f7ff ffbd 	bl	800a544 <memcpy>
 800a5ca:	4631      	mov	r1, r6
 800a5cc:	4638      	mov	r0, r7
 800a5ce:	f7ff fc05 	bl	8009ddc <_free_r>
 800a5d2:	e7e9      	b.n	800a5a8 <_realloc_r+0x1c>
 800a5d4:	4635      	mov	r5, r6
 800a5d6:	e7e7      	b.n	800a5a8 <_realloc_r+0x1c>

0800a5d8 <_malloc_usable_size_r>:
 800a5d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5dc:	1f18      	subs	r0, r3, #4
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	bfbc      	itt	lt
 800a5e2:	580b      	ldrlt	r3, [r1, r0]
 800a5e4:	18c0      	addlt	r0, r0, r3
 800a5e6:	4770      	bx	lr

0800a5e8 <_init>:
 800a5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ea:	bf00      	nop
 800a5ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5ee:	bc08      	pop	{r3}
 800a5f0:	469e      	mov	lr, r3
 800a5f2:	4770      	bx	lr

0800a5f4 <_fini>:
 800a5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5f6:	bf00      	nop
 800a5f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5fa:	bc08      	pop	{r3}
 800a5fc:	469e      	mov	lr, r3
 800a5fe:	4770      	bx	lr
