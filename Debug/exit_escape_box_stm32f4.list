
exit_escape_box_stm32f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e3c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002fd4  08002fd4  00012fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fec  08002fec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002fec  08002fec  00012fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ff4  08002ff4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ff4  08002ff4  00012ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ff8  08002ff8  00012ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ffc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  2000000c  08003008  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08003008  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000094e0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001626  00000000  00000000  0002951c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008a8  00000000  00000000  0002ab48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007f0  00000000  00000000  0002b3f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015c94  00000000  00000000  0002bbe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006d55  00000000  00000000  00041874  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008a3f3  00000000  00000000  000485c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d29bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002338  00000000  00000000  000d2a38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002fbc 	.word	0x08002fbc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08002fbc 	.word	0x08002fbc

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_Init+0x40>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a0d      	ldr	r2, [pc, #52]	; (8000518 <HAL_Init+0x40>)
 80004e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004e8:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <HAL_Init+0x40>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a0a      	ldr	r2, [pc, #40]	; (8000518 <HAL_Init+0x40>)
 80004ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f4:	4b08      	ldr	r3, [pc, #32]	; (8000518 <HAL_Init+0x40>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a07      	ldr	r2, [pc, #28]	; (8000518 <HAL_Init+0x40>)
 80004fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 f933 	bl	800076c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000506:	200f      	movs	r0, #15
 8000508:	f000 f810 	bl	800052c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800050c:	f000 f806 	bl	800051c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000510:	2300      	movs	r3, #0
}
 8000512:	4618      	mov	r0, r3
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40023c00 	.word	0x40023c00

0800051c <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
	...

0800052c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000534:	4b12      	ldr	r3, [pc, #72]	; (8000580 <HAL_InitTick+0x54>)
 8000536:	681a      	ldr	r2, [r3, #0]
 8000538:	4b12      	ldr	r3, [pc, #72]	; (8000584 <HAL_InitTick+0x58>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	4619      	mov	r1, r3
 800053e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000542:	fbb3 f3f1 	udiv	r3, r3, r1
 8000546:	fbb2 f3f3 	udiv	r3, r2, r3
 800054a:	4618      	mov	r0, r3
 800054c:	f000 f943 	bl	80007d6 <HAL_SYSTICK_Config>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
 8000558:	e00e      	b.n	8000578 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2b0f      	cmp	r3, #15
 800055e:	d80a      	bhi.n	8000576 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000560:	2200      	movs	r2, #0
 8000562:	6879      	ldr	r1, [r7, #4]
 8000564:	f04f 30ff 	mov.w	r0, #4294967295
 8000568:	f000 f90b 	bl	8000782 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800056c:	4a06      	ldr	r2, [pc, #24]	; (8000588 <HAL_InitTick+0x5c>)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000572:	2300      	movs	r3, #0
 8000574:	e000      	b.n	8000578 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000576:	2301      	movs	r3, #1
}
 8000578:	4618      	mov	r0, r3
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000008 	.word	0x20000008
 8000584:	20000004 	.word	0x20000004
 8000588:	20000000 	.word	0x20000000

0800058c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <HAL_IncTick+0x20>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	461a      	mov	r2, r3
 8000596:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <HAL_IncTick+0x24>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4413      	add	r3, r2
 800059c:	4a04      	ldr	r2, [pc, #16]	; (80005b0 <HAL_IncTick+0x24>)
 800059e:	6013      	str	r3, [r2, #0]
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000004 	.word	0x20000004
 80005b0:	20000028 	.word	0x20000028

080005b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  return uwTick;
 80005b8:	4b03      	ldr	r3, [pc, #12]	; (80005c8 <HAL_GetTick+0x14>)
 80005ba:	681b      	ldr	r3, [r3, #0]
}
 80005bc:	4618      	mov	r0, r3
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000028 	.word	0x20000028

080005cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f003 0307 	and.w	r3, r3, #7
 80005da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <__NVIC_SetPriorityGrouping+0x44>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005e2:	68ba      	ldr	r2, [r7, #8]
 80005e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005e8:	4013      	ands	r3, r2
 80005ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005fe:	4a04      	ldr	r2, [pc, #16]	; (8000610 <__NVIC_SetPriorityGrouping+0x44>)
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	60d3      	str	r3, [r2, #12]
}
 8000604:	bf00      	nop
 8000606:	3714      	adds	r7, #20
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	e000ed00 	.word	0xe000ed00

08000614 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000618:	4b04      	ldr	r3, [pc, #16]	; (800062c <__NVIC_GetPriorityGrouping+0x18>)
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	0a1b      	lsrs	r3, r3, #8
 800061e:	f003 0307 	and.w	r3, r3, #7
}
 8000622:	4618      	mov	r0, r3
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800063a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063e:	2b00      	cmp	r3, #0
 8000640:	db0b      	blt.n	800065a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	f003 021f 	and.w	r2, r3, #31
 8000648:	4907      	ldr	r1, [pc, #28]	; (8000668 <__NVIC_EnableIRQ+0x38>)
 800064a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064e:	095b      	lsrs	r3, r3, #5
 8000650:	2001      	movs	r0, #1
 8000652:	fa00 f202 	lsl.w	r2, r0, r2
 8000656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800065a:	bf00      	nop
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	e000e100 	.word	0xe000e100

0800066c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	6039      	str	r1, [r7, #0]
 8000676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067c:	2b00      	cmp	r3, #0
 800067e:	db0a      	blt.n	8000696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	b2da      	uxtb	r2, r3
 8000684:	490c      	ldr	r1, [pc, #48]	; (80006b8 <__NVIC_SetPriority+0x4c>)
 8000686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068a:	0112      	lsls	r2, r2, #4
 800068c:	b2d2      	uxtb	r2, r2
 800068e:	440b      	add	r3, r1
 8000690:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000694:	e00a      	b.n	80006ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4908      	ldr	r1, [pc, #32]	; (80006bc <__NVIC_SetPriority+0x50>)
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	f003 030f 	and.w	r3, r3, #15
 80006a2:	3b04      	subs	r3, #4
 80006a4:	0112      	lsls	r2, r2, #4
 80006a6:	b2d2      	uxtb	r2, r2
 80006a8:	440b      	add	r3, r1
 80006aa:	761a      	strb	r2, [r3, #24]
}
 80006ac:	bf00      	nop
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	e000e100 	.word	0xe000e100
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b089      	sub	sp, #36	; 0x24
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	f003 0307 	and.w	r3, r3, #7
 80006d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d4:	69fb      	ldr	r3, [r7, #28]
 80006d6:	f1c3 0307 	rsb	r3, r3, #7
 80006da:	2b04      	cmp	r3, #4
 80006dc:	bf28      	it	cs
 80006de:	2304      	movcs	r3, #4
 80006e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	3304      	adds	r3, #4
 80006e6:	2b06      	cmp	r3, #6
 80006e8:	d902      	bls.n	80006f0 <NVIC_EncodePriority+0x30>
 80006ea:	69fb      	ldr	r3, [r7, #28]
 80006ec:	3b03      	subs	r3, #3
 80006ee:	e000      	b.n	80006f2 <NVIC_EncodePriority+0x32>
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f4:	f04f 32ff 	mov.w	r2, #4294967295
 80006f8:	69bb      	ldr	r3, [r7, #24]
 80006fa:	fa02 f303 	lsl.w	r3, r2, r3
 80006fe:	43da      	mvns	r2, r3
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	401a      	ands	r2, r3
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000708:	f04f 31ff 	mov.w	r1, #4294967295
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	fa01 f303 	lsl.w	r3, r1, r3
 8000712:	43d9      	mvns	r1, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	4313      	orrs	r3, r2
         );
}
 800071a:	4618      	mov	r0, r3
 800071c:	3724      	adds	r7, #36	; 0x24
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
	...

08000728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	3b01      	subs	r3, #1
 8000734:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000738:	d301      	bcc.n	800073e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800073a:	2301      	movs	r3, #1
 800073c:	e00f      	b.n	800075e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800073e:	4a0a      	ldr	r2, [pc, #40]	; (8000768 <SysTick_Config+0x40>)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	3b01      	subs	r3, #1
 8000744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000746:	210f      	movs	r1, #15
 8000748:	f04f 30ff 	mov.w	r0, #4294967295
 800074c:	f7ff ff8e 	bl	800066c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <SysTick_Config+0x40>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000756:	4b04      	ldr	r3, [pc, #16]	; (8000768 <SysTick_Config+0x40>)
 8000758:	2207      	movs	r2, #7
 800075a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800075c:	2300      	movs	r3, #0
}
 800075e:	4618      	mov	r0, r3
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	e000e010 	.word	0xe000e010

0800076c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f7ff ff29 	bl	80005cc <__NVIC_SetPriorityGrouping>
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000782:	b580      	push	{r7, lr}
 8000784:	b086      	sub	sp, #24
 8000786:	af00      	add	r7, sp, #0
 8000788:	4603      	mov	r3, r0
 800078a:	60b9      	str	r1, [r7, #8]
 800078c:	607a      	str	r2, [r7, #4]
 800078e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000794:	f7ff ff3e 	bl	8000614 <__NVIC_GetPriorityGrouping>
 8000798:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800079a:	687a      	ldr	r2, [r7, #4]
 800079c:	68b9      	ldr	r1, [r7, #8]
 800079e:	6978      	ldr	r0, [r7, #20]
 80007a0:	f7ff ff8e 	bl	80006c0 <NVIC_EncodePriority>
 80007a4:	4602      	mov	r2, r0
 80007a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007aa:	4611      	mov	r1, r2
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff ff5d 	bl	800066c <__NVIC_SetPriority>
}
 80007b2:	bf00      	nop
 80007b4:	3718      	adds	r7, #24
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b082      	sub	sp, #8
 80007be:	af00      	add	r7, sp, #0
 80007c0:	4603      	mov	r3, r0
 80007c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ff31 	bl	8000630 <__NVIC_EnableIRQ>
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b082      	sub	sp, #8
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f7ff ffa2 	bl	8000728 <SysTick_Config>
 80007e4:	4603      	mov	r3, r0
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
	...

080007f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80007fc:	f7ff feda 	bl	80005b4 <HAL_GetTick>
 8000800:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d101      	bne.n	800080c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000808:	2301      	movs	r3, #1
 800080a:	e099      	b.n	8000940 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2200      	movs	r2, #0
 8000810:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2202      	movs	r2, #2
 8000818:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f022 0201 	bic.w	r2, r2, #1
 800082a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800082c:	e00f      	b.n	800084e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800082e:	f7ff fec1 	bl	80005b4 <HAL_GetTick>
 8000832:	4602      	mov	r2, r0
 8000834:	693b      	ldr	r3, [r7, #16]
 8000836:	1ad3      	subs	r3, r2, r3
 8000838:	2b05      	cmp	r3, #5
 800083a:	d908      	bls.n	800084e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2220      	movs	r2, #32
 8000840:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2203      	movs	r2, #3
 8000846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800084a:	2303      	movs	r3, #3
 800084c:	e078      	b.n	8000940 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f003 0301 	and.w	r3, r3, #1
 8000858:	2b00      	cmp	r3, #0
 800085a:	d1e8      	bne.n	800082e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000864:	697a      	ldr	r2, [r7, #20]
 8000866:	4b38      	ldr	r3, [pc, #224]	; (8000948 <HAL_DMA_Init+0x158>)
 8000868:	4013      	ands	r3, r2
 800086a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	685a      	ldr	r2, [r3, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	689b      	ldr	r3, [r3, #8]
 8000874:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800087a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	691b      	ldr	r3, [r3, #16]
 8000880:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000886:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000892:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	6a1b      	ldr	r3, [r3, #32]
 8000898:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800089a:	697a      	ldr	r2, [r7, #20]
 800089c:	4313      	orrs	r3, r2
 800089e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008a4:	2b04      	cmp	r3, #4
 80008a6:	d107      	bne.n	80008b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b0:	4313      	orrs	r3, r2
 80008b2:	697a      	ldr	r2, [r7, #20]
 80008b4:	4313      	orrs	r3, r2
 80008b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	697a      	ldr	r2, [r7, #20]
 80008be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	695b      	ldr	r3, [r3, #20]
 80008c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	f023 0307 	bic.w	r3, r3, #7
 80008ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008d4:	697a      	ldr	r2, [r7, #20]
 80008d6:	4313      	orrs	r3, r2
 80008d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008de:	2b04      	cmp	r3, #4
 80008e0:	d117      	bne.n	8000912 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008e6:	697a      	ldr	r2, [r7, #20]
 80008e8:	4313      	orrs	r3, r2
 80008ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d00e      	beq.n	8000912 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f000 f907 	bl	8000b08 <DMA_CheckFifoParam>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d008      	beq.n	8000912 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2240      	movs	r2, #64	; 0x40
 8000904:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2201      	movs	r2, #1
 800090a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800090e:	2301      	movs	r3, #1
 8000910:	e016      	b.n	8000940 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	697a      	ldr	r2, [r7, #20]
 8000918:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f000 f8be 	bl	8000a9c <DMA_CalcBaseAndBitshift>
 8000920:	4603      	mov	r3, r0
 8000922:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000928:	223f      	movs	r2, #63	; 0x3f
 800092a:	409a      	lsls	r2, r3
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2200      	movs	r2, #0
 8000934:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2201      	movs	r2, #1
 800093a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800093e:	2300      	movs	r3, #0
}
 8000940:	4618      	mov	r0, r3
 8000942:	3718      	adds	r7, #24
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	f010803f 	.word	0xf010803f

0800094c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	607a      	str	r2, [r7, #4]
 8000958:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800095a:	2300      	movs	r3, #0
 800095c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000962:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800096a:	2b01      	cmp	r3, #1
 800096c:	d101      	bne.n	8000972 <HAL_DMA_Start_IT+0x26>
 800096e:	2302      	movs	r3, #2
 8000970:	e040      	b.n	80009f4 <HAL_DMA_Start_IT+0xa8>
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	2201      	movs	r2, #1
 8000976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000980:	b2db      	uxtb	r3, r3
 8000982:	2b01      	cmp	r3, #1
 8000984:	d12f      	bne.n	80009e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	2202      	movs	r2, #2
 800098a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	2200      	movs	r2, #0
 8000992:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	68b9      	ldr	r1, [r7, #8]
 800099a:	68f8      	ldr	r0, [r7, #12]
 800099c:	f000 f850 	bl	8000a40 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009a4:	223f      	movs	r2, #63	; 0x3f
 80009a6:	409a      	lsls	r2, r3
 80009a8:	693b      	ldr	r3, [r7, #16]
 80009aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f042 0216 	orr.w	r2, r2, #22
 80009ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d007      	beq.n	80009d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f042 0208 	orr.w	r2, r2, #8
 80009d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f042 0201 	orr.w	r2, r2, #1
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	e005      	b.n	80009f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	2200      	movs	r2, #0
 80009ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80009ee:	2302      	movs	r3, #2
 80009f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80009f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3718      	adds	r7, #24
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	2b02      	cmp	r3, #2
 8000a0e:	d004      	beq.n	8000a1a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2280      	movs	r2, #128	; 0x80
 8000a14:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
 8000a18:	e00c      	b.n	8000a34 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2205      	movs	r2, #5
 8000a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f022 0201 	bic.w	r2, r2, #1
 8000a30:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000a32:	2300      	movs	r3, #0
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
 8000a4c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000a5c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	683a      	ldr	r2, [r7, #0]
 8000a64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	2b40      	cmp	r3, #64	; 0x40
 8000a6c:	d108      	bne.n	8000a80 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	68ba      	ldr	r2, [r7, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8000a7e:	e007      	b.n	8000a90 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	68ba      	ldr	r2, [r7, #8]
 8000a86:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	60da      	str	r2, [r3, #12]
}
 8000a90:	bf00      	nop
 8000a92:	3714      	adds	r7, #20
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	3b10      	subs	r3, #16
 8000aac:	4a14      	ldr	r2, [pc, #80]	; (8000b00 <DMA_CalcBaseAndBitshift+0x64>)
 8000aae:	fba2 2303 	umull	r2, r3, r2, r3
 8000ab2:	091b      	lsrs	r3, r3, #4
 8000ab4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000ab6:	4a13      	ldr	r2, [pc, #76]	; (8000b04 <DMA_CalcBaseAndBitshift+0x68>)
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	4413      	add	r3, r2
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	461a      	mov	r2, r3
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	2b03      	cmp	r3, #3
 8000ac8:	d909      	bls.n	8000ade <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000ad2:	f023 0303 	bic.w	r3, r3, #3
 8000ad6:	1d1a      	adds	r2, r3, #4
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	659a      	str	r2, [r3, #88]	; 0x58
 8000adc:	e007      	b.n	8000aee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000ae6:	f023 0303 	bic.w	r3, r3, #3
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3714      	adds	r7, #20
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	aaaaaaab 	.word	0xaaaaaaab
 8000b04:	08002fd4 	.word	0x08002fd4

08000b08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b10:	2300      	movs	r3, #0
 8000b12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d11f      	bne.n	8000b62 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	2b03      	cmp	r3, #3
 8000b26:	d855      	bhi.n	8000bd4 <DMA_CheckFifoParam+0xcc>
 8000b28:	a201      	add	r2, pc, #4	; (adr r2, 8000b30 <DMA_CheckFifoParam+0x28>)
 8000b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b2e:	bf00      	nop
 8000b30:	08000b41 	.word	0x08000b41
 8000b34:	08000b53 	.word	0x08000b53
 8000b38:	08000b41 	.word	0x08000b41
 8000b3c:	08000bd5 	.word	0x08000bd5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d045      	beq.n	8000bd8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000b50:	e042      	b.n	8000bd8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000b5a:	d13f      	bne.n	8000bdc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000b60:	e03c      	b.n	8000bdc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	699b      	ldr	r3, [r3, #24]
 8000b66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b6a:	d121      	bne.n	8000bb0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	2b03      	cmp	r3, #3
 8000b70:	d836      	bhi.n	8000be0 <DMA_CheckFifoParam+0xd8>
 8000b72:	a201      	add	r2, pc, #4	; (adr r2, 8000b78 <DMA_CheckFifoParam+0x70>)
 8000b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b78:	08000b89 	.word	0x08000b89
 8000b7c:	08000b8f 	.word	0x08000b8f
 8000b80:	08000b89 	.word	0x08000b89
 8000b84:	08000ba1 	.word	0x08000ba1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	73fb      	strb	r3, [r7, #15]
      break;
 8000b8c:	e02f      	b.n	8000bee <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d024      	beq.n	8000be4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000b9e:	e021      	b.n	8000be4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000ba8:	d11e      	bne.n	8000be8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000bae:	e01b      	b.n	8000be8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	2b02      	cmp	r3, #2
 8000bb4:	d902      	bls.n	8000bbc <DMA_CheckFifoParam+0xb4>
 8000bb6:	2b03      	cmp	r3, #3
 8000bb8:	d003      	beq.n	8000bc2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000bba:	e018      	b.n	8000bee <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8000bc0:	e015      	b.n	8000bee <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d00e      	beq.n	8000bec <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	73fb      	strb	r3, [r7, #15]
      break;
 8000bd2:	e00b      	b.n	8000bec <DMA_CheckFifoParam+0xe4>
      break;
 8000bd4:	bf00      	nop
 8000bd6:	e00a      	b.n	8000bee <DMA_CheckFifoParam+0xe6>
      break;
 8000bd8:	bf00      	nop
 8000bda:	e008      	b.n	8000bee <DMA_CheckFifoParam+0xe6>
      break;
 8000bdc:	bf00      	nop
 8000bde:	e006      	b.n	8000bee <DMA_CheckFifoParam+0xe6>
      break;
 8000be0:	bf00      	nop
 8000be2:	e004      	b.n	8000bee <DMA_CheckFifoParam+0xe6>
      break;
 8000be4:	bf00      	nop
 8000be6:	e002      	b.n	8000bee <DMA_CheckFifoParam+0xe6>
      break;   
 8000be8:	bf00      	nop
 8000bea:	e000      	b.n	8000bee <DMA_CheckFifoParam+0xe6>
      break;
 8000bec:	bf00      	nop
    }
  } 
  
  return status; 
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b089      	sub	sp, #36	; 0x24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c12:	2300      	movs	r3, #0
 8000c14:	61fb      	str	r3, [r7, #28]
 8000c16:	e159      	b.n	8000ecc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c18:	2201      	movs	r2, #1
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	697a      	ldr	r2, [r7, #20]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f040 8148 	bne.w	8000ec6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d00b      	beq.n	8000c56 <HAL_GPIO_Init+0x5a>
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d007      	beq.n	8000c56 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c4a:	2b11      	cmp	r3, #17
 8000c4c:	d003      	beq.n	8000c56 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	2b12      	cmp	r3, #18
 8000c54:	d130      	bne.n	8000cb8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	2203      	movs	r2, #3
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	43db      	mvns	r3, r3
 8000c68:	69ba      	ldr	r2, [r7, #24]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	68da      	ldr	r2, [r3, #12]
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	69ba      	ldr	r2, [r7, #24]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	69ba      	ldr	r2, [r7, #24]
 8000c84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	43db      	mvns	r3, r3
 8000c96:	69ba      	ldr	r2, [r7, #24]
 8000c98:	4013      	ands	r3, r2
 8000c9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	091b      	lsrs	r3, r3, #4
 8000ca2:	f003 0201 	and.w	r2, r3, #1
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	2203      	movs	r2, #3
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	69ba      	ldr	r2, [r7, #24]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	689a      	ldr	r2, [r3, #8]
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	d003      	beq.n	8000cf8 <HAL_GPIO_Init+0xfc>
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	2b12      	cmp	r3, #18
 8000cf6:	d123      	bne.n	8000d40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	08da      	lsrs	r2, r3, #3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3208      	adds	r2, #8
 8000d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	f003 0307 	and.w	r3, r3, #7
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	220f      	movs	r2, #15
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	43db      	mvns	r3, r3
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	691a      	ldr	r2, [r3, #16]
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	08da      	lsrs	r2, r3, #3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	3208      	adds	r2, #8
 8000d3a:	69b9      	ldr	r1, [r7, #24]
 8000d3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	2203      	movs	r2, #3
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	43db      	mvns	r3, r3
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	4013      	ands	r3, r2
 8000d56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f003 0203 	and.w	r2, r3, #3
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	f000 80a2 	beq.w	8000ec6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	4b56      	ldr	r3, [pc, #344]	; (8000ee0 <HAL_GPIO_Init+0x2e4>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8a:	4a55      	ldr	r2, [pc, #340]	; (8000ee0 <HAL_GPIO_Init+0x2e4>)
 8000d8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d90:	6453      	str	r3, [r2, #68]	; 0x44
 8000d92:	4b53      	ldr	r3, [pc, #332]	; (8000ee0 <HAL_GPIO_Init+0x2e4>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d9e:	4a51      	ldr	r2, [pc, #324]	; (8000ee4 <HAL_GPIO_Init+0x2e8>)
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	089b      	lsrs	r3, r3, #2
 8000da4:	3302      	adds	r3, #2
 8000da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	f003 0303 	and.w	r3, r3, #3
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	220f      	movs	r2, #15
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a48      	ldr	r2, [pc, #288]	; (8000ee8 <HAL_GPIO_Init+0x2ec>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d019      	beq.n	8000dfe <HAL_GPIO_Init+0x202>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a47      	ldr	r2, [pc, #284]	; (8000eec <HAL_GPIO_Init+0x2f0>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d013      	beq.n	8000dfa <HAL_GPIO_Init+0x1fe>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a46      	ldr	r2, [pc, #280]	; (8000ef0 <HAL_GPIO_Init+0x2f4>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d00d      	beq.n	8000df6 <HAL_GPIO_Init+0x1fa>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a45      	ldr	r2, [pc, #276]	; (8000ef4 <HAL_GPIO_Init+0x2f8>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d007      	beq.n	8000df2 <HAL_GPIO_Init+0x1f6>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a44      	ldr	r2, [pc, #272]	; (8000ef8 <HAL_GPIO_Init+0x2fc>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d101      	bne.n	8000dee <HAL_GPIO_Init+0x1f2>
 8000dea:	2304      	movs	r3, #4
 8000dec:	e008      	b.n	8000e00 <HAL_GPIO_Init+0x204>
 8000dee:	2307      	movs	r3, #7
 8000df0:	e006      	b.n	8000e00 <HAL_GPIO_Init+0x204>
 8000df2:	2303      	movs	r3, #3
 8000df4:	e004      	b.n	8000e00 <HAL_GPIO_Init+0x204>
 8000df6:	2302      	movs	r3, #2
 8000df8:	e002      	b.n	8000e00 <HAL_GPIO_Init+0x204>
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e000      	b.n	8000e00 <HAL_GPIO_Init+0x204>
 8000dfe:	2300      	movs	r3, #0
 8000e00:	69fa      	ldr	r2, [r7, #28]
 8000e02:	f002 0203 	and.w	r2, r2, #3
 8000e06:	0092      	lsls	r2, r2, #2
 8000e08:	4093      	lsls	r3, r2
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e10:	4934      	ldr	r1, [pc, #208]	; (8000ee4 <HAL_GPIO_Init+0x2e8>)
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	089b      	lsrs	r3, r3, #2
 8000e16:	3302      	adds	r3, #2
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e1e:	4b37      	ldr	r3, [pc, #220]	; (8000efc <HAL_GPIO_Init+0x300>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	43db      	mvns	r3, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d003      	beq.n	8000e42 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e42:	4a2e      	ldr	r2, [pc, #184]	; (8000efc <HAL_GPIO_Init+0x300>)
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e48:	4b2c      	ldr	r3, [pc, #176]	; (8000efc <HAL_GPIO_Init+0x300>)
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	43db      	mvns	r3, r3
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4013      	ands	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d003      	beq.n	8000e6c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e6c:	4a23      	ldr	r2, [pc, #140]	; (8000efc <HAL_GPIO_Init+0x300>)
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e72:	4b22      	ldr	r3, [pc, #136]	; (8000efc <HAL_GPIO_Init+0x300>)
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d003      	beq.n	8000e96 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e96:	4a19      	ldr	r2, [pc, #100]	; (8000efc <HAL_GPIO_Init+0x300>)
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e9c:	4b17      	ldr	r3, [pc, #92]	; (8000efc <HAL_GPIO_Init+0x300>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d003      	beq.n	8000ec0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ec0:	4a0e      	ldr	r2, [pc, #56]	; (8000efc <HAL_GPIO_Init+0x300>)
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	61fb      	str	r3, [r7, #28]
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	2b0f      	cmp	r3, #15
 8000ed0:	f67f aea2 	bls.w	8000c18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ed4:	bf00      	nop
 8000ed6:	3724      	adds	r7, #36	; 0x24
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40013800 	.word	0x40013800
 8000ee8:	40020000 	.word	0x40020000
 8000eec:	40020400 	.word	0x40020400
 8000ef0:	40020800 	.word	0x40020800
 8000ef4:	40020c00 	.word	0x40020c00
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	40013c00 	.word	0x40013c00

08000f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	460b      	mov	r3, r1
 8000f0a:	807b      	strh	r3, [r7, #2]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f10:	787b      	ldrb	r3, [r7, #1]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d003      	beq.n	8000f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f16:	887a      	ldrh	r2, [r7, #2]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f1c:	e003      	b.n	8000f26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f1e:	887b      	ldrh	r3, [r7, #2]
 8000f20:	041a      	lsls	r2, r3, #16
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	619a      	str	r2, [r3, #24]
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
	...

08000f34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d101      	bne.n	8000f46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e25b      	b.n	80013fe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d075      	beq.n	800103e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f52:	4ba3      	ldr	r3, [pc, #652]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	f003 030c 	and.w	r3, r3, #12
 8000f5a:	2b04      	cmp	r3, #4
 8000f5c:	d00c      	beq.n	8000f78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f5e:	4ba0      	ldr	r3, [pc, #640]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f66:	2b08      	cmp	r3, #8
 8000f68:	d112      	bne.n	8000f90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f6a:	4b9d      	ldr	r3, [pc, #628]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f76:	d10b      	bne.n	8000f90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f78:	4b99      	ldr	r3, [pc, #612]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d05b      	beq.n	800103c <HAL_RCC_OscConfig+0x108>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d157      	bne.n	800103c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e236      	b.n	80013fe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f98:	d106      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x74>
 8000f9a:	4b91      	ldr	r3, [pc, #580]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a90      	ldr	r2, [pc, #576]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8000fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fa4:	6013      	str	r3, [r2, #0]
 8000fa6:	e01d      	b.n	8000fe4 <HAL_RCC_OscConfig+0xb0>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fb0:	d10c      	bne.n	8000fcc <HAL_RCC_OscConfig+0x98>
 8000fb2:	4b8b      	ldr	r3, [pc, #556]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a8a      	ldr	r2, [pc, #552]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8000fb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	4b88      	ldr	r3, [pc, #544]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a87      	ldr	r2, [pc, #540]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8000fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fc8:	6013      	str	r3, [r2, #0]
 8000fca:	e00b      	b.n	8000fe4 <HAL_RCC_OscConfig+0xb0>
 8000fcc:	4b84      	ldr	r3, [pc, #528]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a83      	ldr	r2, [pc, #524]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8000fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fd6:	6013      	str	r3, [r2, #0]
 8000fd8:	4b81      	ldr	r3, [pc, #516]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a80      	ldr	r2, [pc, #512]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8000fde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fe2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d013      	beq.n	8001014 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fec:	f7ff fae2 	bl	80005b4 <HAL_GetTick>
 8000ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ff2:	e008      	b.n	8001006 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ff4:	f7ff fade 	bl	80005b4 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	2b64      	cmp	r3, #100	; 0x64
 8001000:	d901      	bls.n	8001006 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001002:	2303      	movs	r3, #3
 8001004:	e1fb      	b.n	80013fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001006:	4b76      	ldr	r3, [pc, #472]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d0f0      	beq.n	8000ff4 <HAL_RCC_OscConfig+0xc0>
 8001012:	e014      	b.n	800103e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001014:	f7ff face 	bl	80005b4 <HAL_GetTick>
 8001018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800101a:	e008      	b.n	800102e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800101c:	f7ff faca 	bl	80005b4 <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	2b64      	cmp	r3, #100	; 0x64
 8001028:	d901      	bls.n	800102e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800102a:	2303      	movs	r3, #3
 800102c:	e1e7      	b.n	80013fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800102e:	4b6c      	ldr	r3, [pc, #432]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d1f0      	bne.n	800101c <HAL_RCC_OscConfig+0xe8>
 800103a:	e000      	b.n	800103e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800103c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	2b00      	cmp	r3, #0
 8001048:	d063      	beq.n	8001112 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800104a:	4b65      	ldr	r3, [pc, #404]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	f003 030c 	and.w	r3, r3, #12
 8001052:	2b00      	cmp	r3, #0
 8001054:	d00b      	beq.n	800106e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001056:	4b62      	ldr	r3, [pc, #392]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800105e:	2b08      	cmp	r3, #8
 8001060:	d11c      	bne.n	800109c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001062:	4b5f      	ldr	r3, [pc, #380]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d116      	bne.n	800109c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800106e:	4b5c      	ldr	r3, [pc, #368]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	2b00      	cmp	r3, #0
 8001078:	d005      	beq.n	8001086 <HAL_RCC_OscConfig+0x152>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d001      	beq.n	8001086 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e1bb      	b.n	80013fe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001086:	4b56      	ldr	r3, [pc, #344]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	691b      	ldr	r3, [r3, #16]
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	4952      	ldr	r1, [pc, #328]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8001096:	4313      	orrs	r3, r2
 8001098:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800109a:	e03a      	b.n	8001112 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d020      	beq.n	80010e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010a4:	4b4f      	ldr	r3, [pc, #316]	; (80011e4 <HAL_RCC_OscConfig+0x2b0>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010aa:	f7ff fa83 	bl	80005b4 <HAL_GetTick>
 80010ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010b0:	e008      	b.n	80010c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010b2:	f7ff fa7f 	bl	80005b4 <HAL_GetTick>
 80010b6:	4602      	mov	r2, r0
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d901      	bls.n	80010c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80010c0:	2303      	movs	r3, #3
 80010c2:	e19c      	b.n	80013fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c4:	4b46      	ldr	r3, [pc, #280]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 0302 	and.w	r3, r3, #2
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d0f0      	beq.n	80010b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010d0:	4b43      	ldr	r3, [pc, #268]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	691b      	ldr	r3, [r3, #16]
 80010dc:	00db      	lsls	r3, r3, #3
 80010de:	4940      	ldr	r1, [pc, #256]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 80010e0:	4313      	orrs	r3, r2
 80010e2:	600b      	str	r3, [r1, #0]
 80010e4:	e015      	b.n	8001112 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010e6:	4b3f      	ldr	r3, [pc, #252]	; (80011e4 <HAL_RCC_OscConfig+0x2b0>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ec:	f7ff fa62 	bl	80005b4 <HAL_GetTick>
 80010f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010f2:	e008      	b.n	8001106 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010f4:	f7ff fa5e 	bl	80005b4 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d901      	bls.n	8001106 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e17b      	b.n	80013fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001106:	4b36      	ldr	r3, [pc, #216]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1f0      	bne.n	80010f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0308 	and.w	r3, r3, #8
 800111a:	2b00      	cmp	r3, #0
 800111c:	d030      	beq.n	8001180 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d016      	beq.n	8001154 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001126:	4b30      	ldr	r3, [pc, #192]	; (80011e8 <HAL_RCC_OscConfig+0x2b4>)
 8001128:	2201      	movs	r2, #1
 800112a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800112c:	f7ff fa42 	bl	80005b4 <HAL_GetTick>
 8001130:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001132:	e008      	b.n	8001146 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001134:	f7ff fa3e 	bl	80005b4 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b02      	cmp	r3, #2
 8001140:	d901      	bls.n	8001146 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e15b      	b.n	80013fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001146:	4b26      	ldr	r3, [pc, #152]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8001148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d0f0      	beq.n	8001134 <HAL_RCC_OscConfig+0x200>
 8001152:	e015      	b.n	8001180 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001154:	4b24      	ldr	r3, [pc, #144]	; (80011e8 <HAL_RCC_OscConfig+0x2b4>)
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800115a:	f7ff fa2b 	bl	80005b4 <HAL_GetTick>
 800115e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001160:	e008      	b.n	8001174 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001162:	f7ff fa27 	bl	80005b4 <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d901      	bls.n	8001174 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	e144      	b.n	80013fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001174:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8001176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d1f0      	bne.n	8001162 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0304 	and.w	r3, r3, #4
 8001188:	2b00      	cmp	r3, #0
 800118a:	f000 80a0 	beq.w	80012ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800118e:	2300      	movs	r3, #0
 8001190:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001192:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d10f      	bne.n	80011be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	4a0e      	ldr	r2, [pc, #56]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 80011a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ac:	6413      	str	r3, [r2, #64]	; 0x40
 80011ae:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011ba:	2301      	movs	r3, #1
 80011bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011be:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <HAL_RCC_OscConfig+0x2b8>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d121      	bne.n	800120e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011ca:	4b08      	ldr	r3, [pc, #32]	; (80011ec <HAL_RCC_OscConfig+0x2b8>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a07      	ldr	r2, [pc, #28]	; (80011ec <HAL_RCC_OscConfig+0x2b8>)
 80011d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011d6:	f7ff f9ed 	bl	80005b4 <HAL_GetTick>
 80011da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011dc:	e011      	b.n	8001202 <HAL_RCC_OscConfig+0x2ce>
 80011de:	bf00      	nop
 80011e0:	40023800 	.word	0x40023800
 80011e4:	42470000 	.word	0x42470000
 80011e8:	42470e80 	.word	0x42470e80
 80011ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011f0:	f7ff f9e0 	bl	80005b4 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e0fd      	b.n	80013fe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001202:	4b81      	ldr	r3, [pc, #516]	; (8001408 <HAL_RCC_OscConfig+0x4d4>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800120a:	2b00      	cmp	r3, #0
 800120c:	d0f0      	beq.n	80011f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d106      	bne.n	8001224 <HAL_RCC_OscConfig+0x2f0>
 8001216:	4b7d      	ldr	r3, [pc, #500]	; (800140c <HAL_RCC_OscConfig+0x4d8>)
 8001218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800121a:	4a7c      	ldr	r2, [pc, #496]	; (800140c <HAL_RCC_OscConfig+0x4d8>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6713      	str	r3, [r2, #112]	; 0x70
 8001222:	e01c      	b.n	800125e <HAL_RCC_OscConfig+0x32a>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	2b05      	cmp	r3, #5
 800122a:	d10c      	bne.n	8001246 <HAL_RCC_OscConfig+0x312>
 800122c:	4b77      	ldr	r3, [pc, #476]	; (800140c <HAL_RCC_OscConfig+0x4d8>)
 800122e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001230:	4a76      	ldr	r2, [pc, #472]	; (800140c <HAL_RCC_OscConfig+0x4d8>)
 8001232:	f043 0304 	orr.w	r3, r3, #4
 8001236:	6713      	str	r3, [r2, #112]	; 0x70
 8001238:	4b74      	ldr	r3, [pc, #464]	; (800140c <HAL_RCC_OscConfig+0x4d8>)
 800123a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800123c:	4a73      	ldr	r2, [pc, #460]	; (800140c <HAL_RCC_OscConfig+0x4d8>)
 800123e:	f043 0301 	orr.w	r3, r3, #1
 8001242:	6713      	str	r3, [r2, #112]	; 0x70
 8001244:	e00b      	b.n	800125e <HAL_RCC_OscConfig+0x32a>
 8001246:	4b71      	ldr	r3, [pc, #452]	; (800140c <HAL_RCC_OscConfig+0x4d8>)
 8001248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800124a:	4a70      	ldr	r2, [pc, #448]	; (800140c <HAL_RCC_OscConfig+0x4d8>)
 800124c:	f023 0301 	bic.w	r3, r3, #1
 8001250:	6713      	str	r3, [r2, #112]	; 0x70
 8001252:	4b6e      	ldr	r3, [pc, #440]	; (800140c <HAL_RCC_OscConfig+0x4d8>)
 8001254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001256:	4a6d      	ldr	r2, [pc, #436]	; (800140c <HAL_RCC_OscConfig+0x4d8>)
 8001258:	f023 0304 	bic.w	r3, r3, #4
 800125c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d015      	beq.n	8001292 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001266:	f7ff f9a5 	bl	80005b4 <HAL_GetTick>
 800126a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800126c:	e00a      	b.n	8001284 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800126e:	f7ff f9a1 	bl	80005b4 <HAL_GetTick>
 8001272:	4602      	mov	r2, r0
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	f241 3288 	movw	r2, #5000	; 0x1388
 800127c:	4293      	cmp	r3, r2
 800127e:	d901      	bls.n	8001284 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001280:	2303      	movs	r3, #3
 8001282:	e0bc      	b.n	80013fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001284:	4b61      	ldr	r3, [pc, #388]	; (800140c <HAL_RCC_OscConfig+0x4d8>)
 8001286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d0ee      	beq.n	800126e <HAL_RCC_OscConfig+0x33a>
 8001290:	e014      	b.n	80012bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001292:	f7ff f98f 	bl	80005b4 <HAL_GetTick>
 8001296:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001298:	e00a      	b.n	80012b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800129a:	f7ff f98b 	bl	80005b4 <HAL_GetTick>
 800129e:	4602      	mov	r2, r0
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d901      	bls.n	80012b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e0a6      	b.n	80013fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012b0:	4b56      	ldr	r3, [pc, #344]	; (800140c <HAL_RCC_OscConfig+0x4d8>)
 80012b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d1ee      	bne.n	800129a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012bc:	7dfb      	ldrb	r3, [r7, #23]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d105      	bne.n	80012ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012c2:	4b52      	ldr	r3, [pc, #328]	; (800140c <HAL_RCC_OscConfig+0x4d8>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	4a51      	ldr	r2, [pc, #324]	; (800140c <HAL_RCC_OscConfig+0x4d8>)
 80012c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	699b      	ldr	r3, [r3, #24]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f000 8092 	beq.w	80013fc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012d8:	4b4c      	ldr	r3, [pc, #304]	; (800140c <HAL_RCC_OscConfig+0x4d8>)
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	f003 030c 	and.w	r3, r3, #12
 80012e0:	2b08      	cmp	r3, #8
 80012e2:	d05c      	beq.n	800139e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d141      	bne.n	8001370 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012ec:	4b48      	ldr	r3, [pc, #288]	; (8001410 <HAL_RCC_OscConfig+0x4dc>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f2:	f7ff f95f 	bl	80005b4 <HAL_GetTick>
 80012f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012f8:	e008      	b.n	800130c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012fa:	f7ff f95b 	bl	80005b4 <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	2b02      	cmp	r3, #2
 8001306:	d901      	bls.n	800130c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e078      	b.n	80013fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800130c:	4b3f      	ldr	r3, [pc, #252]	; (800140c <HAL_RCC_OscConfig+0x4d8>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d1f0      	bne.n	80012fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69da      	ldr	r2, [r3, #28]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a1b      	ldr	r3, [r3, #32]
 8001320:	431a      	orrs	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001326:	019b      	lsls	r3, r3, #6
 8001328:	431a      	orrs	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132e:	085b      	lsrs	r3, r3, #1
 8001330:	3b01      	subs	r3, #1
 8001332:	041b      	lsls	r3, r3, #16
 8001334:	431a      	orrs	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800133a:	061b      	lsls	r3, r3, #24
 800133c:	4933      	ldr	r1, [pc, #204]	; (800140c <HAL_RCC_OscConfig+0x4d8>)
 800133e:	4313      	orrs	r3, r2
 8001340:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001342:	4b33      	ldr	r3, [pc, #204]	; (8001410 <HAL_RCC_OscConfig+0x4dc>)
 8001344:	2201      	movs	r2, #1
 8001346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001348:	f7ff f934 	bl	80005b4 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001350:	f7ff f930 	bl	80005b4 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e04d      	b.n	80013fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001362:	4b2a      	ldr	r3, [pc, #168]	; (800140c <HAL_RCC_OscConfig+0x4d8>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0f0      	beq.n	8001350 <HAL_RCC_OscConfig+0x41c>
 800136e:	e045      	b.n	80013fc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001370:	4b27      	ldr	r3, [pc, #156]	; (8001410 <HAL_RCC_OscConfig+0x4dc>)
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001376:	f7ff f91d 	bl	80005b4 <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800137c:	e008      	b.n	8001390 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800137e:	f7ff f919 	bl	80005b4 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e036      	b.n	80013fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001390:	4b1e      	ldr	r3, [pc, #120]	; (800140c <HAL_RCC_OscConfig+0x4d8>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1f0      	bne.n	800137e <HAL_RCC_OscConfig+0x44a>
 800139c:	e02e      	b.n	80013fc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d101      	bne.n	80013aa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e029      	b.n	80013fe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80013aa:	4b18      	ldr	r3, [pc, #96]	; (800140c <HAL_RCC_OscConfig+0x4d8>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d11c      	bne.n	80013f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d115      	bne.n	80013f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80013cc:	68fa      	ldr	r2, [r7, #12]
 80013ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80013d2:	4013      	ands	r3, r2
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013d8:	4293      	cmp	r3, r2
 80013da:	d10d      	bne.n	80013f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d106      	bne.n	80013f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d001      	beq.n	80013fc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e000      	b.n	80013fe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3718      	adds	r7, #24
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40007000 	.word	0x40007000
 800140c:	40023800 	.word	0x40023800
 8001410:	42470060 	.word	0x42470060

08001414 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d101      	bne.n	8001428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e0cc      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001428:	4b68      	ldr	r3, [pc, #416]	; (80015cc <HAL_RCC_ClockConfig+0x1b8>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 030f 	and.w	r3, r3, #15
 8001430:	683a      	ldr	r2, [r7, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	d90c      	bls.n	8001450 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001436:	4b65      	ldr	r3, [pc, #404]	; (80015cc <HAL_RCC_ClockConfig+0x1b8>)
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	b2d2      	uxtb	r2, r2
 800143c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800143e:	4b63      	ldr	r3, [pc, #396]	; (80015cc <HAL_RCC_ClockConfig+0x1b8>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 030f 	and.w	r3, r3, #15
 8001446:	683a      	ldr	r2, [r7, #0]
 8001448:	429a      	cmp	r2, r3
 800144a:	d001      	beq.n	8001450 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e0b8      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d020      	beq.n	800149e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	2b00      	cmp	r3, #0
 8001466:	d005      	beq.n	8001474 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001468:	4b59      	ldr	r3, [pc, #356]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	4a58      	ldr	r2, [pc, #352]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 800146e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001472:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0308 	and.w	r3, r3, #8
 800147c:	2b00      	cmp	r3, #0
 800147e:	d005      	beq.n	800148c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001480:	4b53      	ldr	r3, [pc, #332]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	4a52      	ldr	r2, [pc, #328]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001486:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800148a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800148c:	4b50      	ldr	r3, [pc, #320]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	494d      	ldr	r1, [pc, #308]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 800149a:	4313      	orrs	r3, r2
 800149c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d044      	beq.n	8001534 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d107      	bne.n	80014c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b2:	4b47      	ldr	r3, [pc, #284]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d119      	bne.n	80014f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e07f      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d003      	beq.n	80014d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014ce:	2b03      	cmp	r3, #3
 80014d0:	d107      	bne.n	80014e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014d2:	4b3f      	ldr	r3, [pc, #252]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d109      	bne.n	80014f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e06f      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e2:	4b3b      	ldr	r3, [pc, #236]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e067      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014f2:	4b37      	ldr	r3, [pc, #220]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f023 0203 	bic.w	r2, r3, #3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	4934      	ldr	r1, [pc, #208]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001500:	4313      	orrs	r3, r2
 8001502:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001504:	f7ff f856 	bl	80005b4 <HAL_GetTick>
 8001508:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800150a:	e00a      	b.n	8001522 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800150c:	f7ff f852 	bl	80005b4 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	f241 3288 	movw	r2, #5000	; 0x1388
 800151a:	4293      	cmp	r3, r2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e04f      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001522:	4b2b      	ldr	r3, [pc, #172]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f003 020c 	and.w	r2, r3, #12
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	429a      	cmp	r2, r3
 8001532:	d1eb      	bne.n	800150c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001534:	4b25      	ldr	r3, [pc, #148]	; (80015cc <HAL_RCC_ClockConfig+0x1b8>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 030f 	and.w	r3, r3, #15
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	429a      	cmp	r2, r3
 8001540:	d20c      	bcs.n	800155c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001542:	4b22      	ldr	r3, [pc, #136]	; (80015cc <HAL_RCC_ClockConfig+0x1b8>)
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	b2d2      	uxtb	r2, r2
 8001548:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800154a:	4b20      	ldr	r3, [pc, #128]	; (80015cc <HAL_RCC_ClockConfig+0x1b8>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 030f 	and.w	r3, r3, #15
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	429a      	cmp	r2, r3
 8001556:	d001      	beq.n	800155c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e032      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0304 	and.w	r3, r3, #4
 8001564:	2b00      	cmp	r3, #0
 8001566:	d008      	beq.n	800157a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001568:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	4916      	ldr	r1, [pc, #88]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001576:	4313      	orrs	r3, r2
 8001578:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0308 	and.w	r3, r3, #8
 8001582:	2b00      	cmp	r3, #0
 8001584:	d009      	beq.n	800159a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001586:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	490e      	ldr	r1, [pc, #56]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001596:	4313      	orrs	r3, r2
 8001598:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800159a:	f000 f821 	bl	80015e0 <HAL_RCC_GetSysClockFreq>
 800159e:	4601      	mov	r1, r0
 80015a0:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	091b      	lsrs	r3, r3, #4
 80015a6:	f003 030f 	and.w	r3, r3, #15
 80015aa:	4a0a      	ldr	r2, [pc, #40]	; (80015d4 <HAL_RCC_ClockConfig+0x1c0>)
 80015ac:	5cd3      	ldrb	r3, [r2, r3]
 80015ae:	fa21 f303 	lsr.w	r3, r1, r3
 80015b2:	4a09      	ldr	r2, [pc, #36]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 80015b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <HAL_RCC_ClockConfig+0x1c8>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7fe ffb6 	bl	800052c <HAL_InitTick>

  return HAL_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40023c00 	.word	0x40023c00
 80015d0:	40023800 	.word	0x40023800
 80015d4:	08002fdc 	.word	0x08002fdc
 80015d8:	20000008 	.word	0x20000008
 80015dc:	20000000 	.word	0x20000000

080015e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80015e6:	2300      	movs	r3, #0
 80015e8:	607b      	str	r3, [r7, #4]
 80015ea:	2300      	movs	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	2300      	movs	r3, #0
 80015f0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015f6:	4b63      	ldr	r3, [pc, #396]	; (8001784 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f003 030c 	and.w	r3, r3, #12
 80015fe:	2b04      	cmp	r3, #4
 8001600:	d007      	beq.n	8001612 <HAL_RCC_GetSysClockFreq+0x32>
 8001602:	2b08      	cmp	r3, #8
 8001604:	d008      	beq.n	8001618 <HAL_RCC_GetSysClockFreq+0x38>
 8001606:	2b00      	cmp	r3, #0
 8001608:	f040 80b4 	bne.w	8001774 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800160c:	4b5e      	ldr	r3, [pc, #376]	; (8001788 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800160e:	60bb      	str	r3, [r7, #8]
       break;
 8001610:	e0b3      	b.n	800177a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001612:	4b5e      	ldr	r3, [pc, #376]	; (800178c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001614:	60bb      	str	r3, [r7, #8]
      break;
 8001616:	e0b0      	b.n	800177a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001618:	4b5a      	ldr	r3, [pc, #360]	; (8001784 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001620:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001622:	4b58      	ldr	r3, [pc, #352]	; (8001784 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d04a      	beq.n	80016c4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800162e:	4b55      	ldr	r3, [pc, #340]	; (8001784 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	099b      	lsrs	r3, r3, #6
 8001634:	f04f 0400 	mov.w	r4, #0
 8001638:	f240 11ff 	movw	r1, #511	; 0x1ff
 800163c:	f04f 0200 	mov.w	r2, #0
 8001640:	ea03 0501 	and.w	r5, r3, r1
 8001644:	ea04 0602 	and.w	r6, r4, r2
 8001648:	4629      	mov	r1, r5
 800164a:	4632      	mov	r2, r6
 800164c:	f04f 0300 	mov.w	r3, #0
 8001650:	f04f 0400 	mov.w	r4, #0
 8001654:	0154      	lsls	r4, r2, #5
 8001656:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800165a:	014b      	lsls	r3, r1, #5
 800165c:	4619      	mov	r1, r3
 800165e:	4622      	mov	r2, r4
 8001660:	1b49      	subs	r1, r1, r5
 8001662:	eb62 0206 	sbc.w	r2, r2, r6
 8001666:	f04f 0300 	mov.w	r3, #0
 800166a:	f04f 0400 	mov.w	r4, #0
 800166e:	0194      	lsls	r4, r2, #6
 8001670:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001674:	018b      	lsls	r3, r1, #6
 8001676:	1a5b      	subs	r3, r3, r1
 8001678:	eb64 0402 	sbc.w	r4, r4, r2
 800167c:	f04f 0100 	mov.w	r1, #0
 8001680:	f04f 0200 	mov.w	r2, #0
 8001684:	00e2      	lsls	r2, r4, #3
 8001686:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800168a:	00d9      	lsls	r1, r3, #3
 800168c:	460b      	mov	r3, r1
 800168e:	4614      	mov	r4, r2
 8001690:	195b      	adds	r3, r3, r5
 8001692:	eb44 0406 	adc.w	r4, r4, r6
 8001696:	f04f 0100 	mov.w	r1, #0
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	0262      	lsls	r2, r4, #9
 80016a0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80016a4:	0259      	lsls	r1, r3, #9
 80016a6:	460b      	mov	r3, r1
 80016a8:	4614      	mov	r4, r2
 80016aa:	4618      	mov	r0, r3
 80016ac:	4621      	mov	r1, r4
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f04f 0400 	mov.w	r4, #0
 80016b4:	461a      	mov	r2, r3
 80016b6:	4623      	mov	r3, r4
 80016b8:	f7fe fd8e 	bl	80001d8 <__aeabi_uldivmod>
 80016bc:	4603      	mov	r3, r0
 80016be:	460c      	mov	r4, r1
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	e049      	b.n	8001758 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016c4:	4b2f      	ldr	r3, [pc, #188]	; (8001784 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	099b      	lsrs	r3, r3, #6
 80016ca:	f04f 0400 	mov.w	r4, #0
 80016ce:	f240 11ff 	movw	r1, #511	; 0x1ff
 80016d2:	f04f 0200 	mov.w	r2, #0
 80016d6:	ea03 0501 	and.w	r5, r3, r1
 80016da:	ea04 0602 	and.w	r6, r4, r2
 80016de:	4629      	mov	r1, r5
 80016e0:	4632      	mov	r2, r6
 80016e2:	f04f 0300 	mov.w	r3, #0
 80016e6:	f04f 0400 	mov.w	r4, #0
 80016ea:	0154      	lsls	r4, r2, #5
 80016ec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80016f0:	014b      	lsls	r3, r1, #5
 80016f2:	4619      	mov	r1, r3
 80016f4:	4622      	mov	r2, r4
 80016f6:	1b49      	subs	r1, r1, r5
 80016f8:	eb62 0206 	sbc.w	r2, r2, r6
 80016fc:	f04f 0300 	mov.w	r3, #0
 8001700:	f04f 0400 	mov.w	r4, #0
 8001704:	0194      	lsls	r4, r2, #6
 8001706:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800170a:	018b      	lsls	r3, r1, #6
 800170c:	1a5b      	subs	r3, r3, r1
 800170e:	eb64 0402 	sbc.w	r4, r4, r2
 8001712:	f04f 0100 	mov.w	r1, #0
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	00e2      	lsls	r2, r4, #3
 800171c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001720:	00d9      	lsls	r1, r3, #3
 8001722:	460b      	mov	r3, r1
 8001724:	4614      	mov	r4, r2
 8001726:	195b      	adds	r3, r3, r5
 8001728:	eb44 0406 	adc.w	r4, r4, r6
 800172c:	f04f 0100 	mov.w	r1, #0
 8001730:	f04f 0200 	mov.w	r2, #0
 8001734:	02a2      	lsls	r2, r4, #10
 8001736:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800173a:	0299      	lsls	r1, r3, #10
 800173c:	460b      	mov	r3, r1
 800173e:	4614      	mov	r4, r2
 8001740:	4618      	mov	r0, r3
 8001742:	4621      	mov	r1, r4
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f04f 0400 	mov.w	r4, #0
 800174a:	461a      	mov	r2, r3
 800174c:	4623      	mov	r3, r4
 800174e:	f7fe fd43 	bl	80001d8 <__aeabi_uldivmod>
 8001752:	4603      	mov	r3, r0
 8001754:	460c      	mov	r4, r1
 8001756:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001758:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	0c1b      	lsrs	r3, r3, #16
 800175e:	f003 0303 	and.w	r3, r3, #3
 8001762:	3301      	adds	r3, #1
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001770:	60bb      	str	r3, [r7, #8]
      break;
 8001772:	e002      	b.n	800177a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001774:	4b04      	ldr	r3, [pc, #16]	; (8001788 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001776:	60bb      	str	r3, [r7, #8]
      break;
 8001778:	bf00      	nop
    }
  }
  return sysclockfreq;
 800177a:	68bb      	ldr	r3, [r7, #8]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001784:	40023800 	.word	0x40023800
 8001788:	00f42400 	.word	0x00f42400
 800178c:	007a1200 	.word	0x007a1200

08001790 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e01d      	b.n	80017de <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d106      	bne.n	80017bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 fe74 	bl	80024a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2202      	movs	r2, #2
 80017c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3304      	adds	r3, #4
 80017cc:	4619      	mov	r1, r3
 80017ce:	4610      	mov	r0, r2
 80017d0:	f000 fb1c 	bl	8001e0c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
	...

080017e8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
 80017f4:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d101      	bne.n	8001806 <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8001802:	2302      	movs	r3, #2
 8001804:	e0e9      	b.n	80019da <HAL_TIM_PWM_Start_DMA+0x1f2>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b01      	cmp	r3, #1
 8001810:	d10b      	bne.n	800182a <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d104      	bne.n	8001822 <HAL_TIM_PWM_Start_DMA+0x3a>
 8001818:	887b      	ldrh	r3, [r7, #2]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e0db      	b.n	80019da <HAL_TIM_PWM_Start_DMA+0x1f2>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2202      	movs	r2, #2
 8001826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	2b0c      	cmp	r3, #12
 800182e:	f200 80ad 	bhi.w	800198c <HAL_TIM_PWM_Start_DMA+0x1a4>
 8001832:	a201      	add	r2, pc, #4	; (adr r2, 8001838 <HAL_TIM_PWM_Start_DMA+0x50>)
 8001834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001838:	0800186d 	.word	0x0800186d
 800183c:	0800198d 	.word	0x0800198d
 8001840:	0800198d 	.word	0x0800198d
 8001844:	0800198d 	.word	0x0800198d
 8001848:	080018b5 	.word	0x080018b5
 800184c:	0800198d 	.word	0x0800198d
 8001850:	0800198d 	.word	0x0800198d
 8001854:	0800198d 	.word	0x0800198d
 8001858:	080018fd 	.word	0x080018fd
 800185c:	0800198d 	.word	0x0800198d
 8001860:	0800198d 	.word	0x0800198d
 8001864:	0800198d 	.word	0x0800198d
 8001868:	08001945 	.word	0x08001945
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001870:	4a5c      	ldr	r2, [pc, #368]	; (80019e4 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8001872:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001878:	4a5b      	ldr	r2, [pc, #364]	; (80019e8 <HAL_TIM_PWM_Start_DMA+0x200>)
 800187a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001880:	4a5a      	ldr	r2, [pc, #360]	; (80019ec <HAL_TIM_PWM_Start_DMA+0x204>)
 8001882:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001888:	6879      	ldr	r1, [r7, #4]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	3334      	adds	r3, #52	; 0x34
 8001890:	461a      	mov	r2, r3
 8001892:	887b      	ldrh	r3, [r7, #2]
 8001894:	f7ff f85a 	bl	800094c <HAL_DMA_Start_IT>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e09b      	b.n	80019da <HAL_TIM_PWM_Start_DMA+0x1f2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68da      	ldr	r2, [r3, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018b0:	60da      	str	r2, [r3, #12]
      break;
 80018b2:	e06c      	b.n	800198e <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b8:	4a4a      	ldr	r2, [pc, #296]	; (80019e4 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 80018ba:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c0:	4a49      	ldr	r2, [pc, #292]	; (80019e8 <HAL_TIM_PWM_Start_DMA+0x200>)
 80018c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c8:	4a48      	ldr	r2, [pc, #288]	; (80019ec <HAL_TIM_PWM_Start_DMA+0x204>)
 80018ca:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	3338      	adds	r3, #56	; 0x38
 80018d8:	461a      	mov	r2, r3
 80018da:	887b      	ldrh	r3, [r7, #2]
 80018dc:	f7ff f836 	bl	800094c <HAL_DMA_Start_IT>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e077      	b.n	80019da <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	68da      	ldr	r2, [r3, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80018f8:	60da      	str	r2, [r3, #12]
      break;
 80018fa:	e048      	b.n	800198e <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001900:	4a38      	ldr	r2, [pc, #224]	; (80019e4 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8001902:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001908:	4a37      	ldr	r2, [pc, #220]	; (80019e8 <HAL_TIM_PWM_Start_DMA+0x200>)
 800190a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001910:	4a36      	ldr	r2, [pc, #216]	; (80019ec <HAL_TIM_PWM_Start_DMA+0x204>)
 8001912:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	333c      	adds	r3, #60	; 0x3c
 8001920:	461a      	mov	r2, r3
 8001922:	887b      	ldrh	r3, [r7, #2]
 8001924:	f7ff f812 	bl	800094c <HAL_DMA_Start_IT>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e053      	b.n	80019da <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	68da      	ldr	r2, [r3, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001940:	60da      	str	r2, [r3, #12]
      break;
 8001942:	e024      	b.n	800198e <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001948:	4a26      	ldr	r2, [pc, #152]	; (80019e4 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 800194a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001950:	4a25      	ldr	r2, [pc, #148]	; (80019e8 <HAL_TIM_PWM_Start_DMA+0x200>)
 8001952:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001958:	4a24      	ldr	r2, [pc, #144]	; (80019ec <HAL_TIM_PWM_Start_DMA+0x204>)
 800195a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001960:	6879      	ldr	r1, [r7, #4]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	3340      	adds	r3, #64	; 0x40
 8001968:	461a      	mov	r2, r3
 800196a:	887b      	ldrh	r3, [r7, #2]
 800196c:	f7fe ffee 	bl	800094c <HAL_DMA_Start_IT>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e02f      	b.n	80019da <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68da      	ldr	r2, [r3, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001988:	60da      	str	r2, [r3, #12]
      break;
 800198a:	e000      	b.n	800198e <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 800198c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2201      	movs	r2, #1
 8001994:	68b9      	ldr	r1, [r7, #8]
 8001996:	4618      	mov	r0, r3
 8001998:	f000 fc44 	bl	8002224 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a13      	ldr	r2, [pc, #76]	; (80019f0 <HAL_TIM_PWM_Start_DMA+0x208>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d107      	bne.n	80019b6 <HAL_TIM_PWM_Start_DMA+0x1ce>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	2b06      	cmp	r3, #6
 80019c6:	d007      	beq.n	80019d8 <HAL_TIM_PWM_Start_DMA+0x1f0>
  {
    __HAL_TIM_ENABLE(htim);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f042 0201 	orr.w	r2, r2, #1
 80019d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	08001d2d 	.word	0x08001d2d
 80019e8:	08001d9d 	.word	0x08001d9d
 80019ec:	08001d09 	.word	0x08001d09
 80019f0:	40010000 	.word	0x40010000

080019f4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	2b0c      	cmp	r3, #12
 8001a02:	d855      	bhi.n	8001ab0 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8001a04:	a201      	add	r2, pc, #4	; (adr r2, 8001a0c <HAL_TIM_PWM_Stop_DMA+0x18>)
 8001a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a0a:	bf00      	nop
 8001a0c:	08001a41 	.word	0x08001a41
 8001a10:	08001ab1 	.word	0x08001ab1
 8001a14:	08001ab1 	.word	0x08001ab1
 8001a18:	08001ab1 	.word	0x08001ab1
 8001a1c:	08001a5d 	.word	0x08001a5d
 8001a20:	08001ab1 	.word	0x08001ab1
 8001a24:	08001ab1 	.word	0x08001ab1
 8001a28:	08001ab1 	.word	0x08001ab1
 8001a2c:	08001a79 	.word	0x08001a79
 8001a30:	08001ab1 	.word	0x08001ab1
 8001a34:	08001ab1 	.word	0x08001ab1
 8001a38:	08001ab1 	.word	0x08001ab1
 8001a3c:	08001a95 	.word	0x08001a95
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	68da      	ldr	r2, [r3, #12]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a4e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7fe ffd1 	bl	80009fc <HAL_DMA_Abort_IT>
      break;
 8001a5a:	e02a      	b.n	8001ab2 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68da      	ldr	r2, [r3, #12]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a6a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7fe ffc3 	bl	80009fc <HAL_DMA_Abort_IT>
      break;
 8001a76:	e01c      	b.n	8001ab2 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	68da      	ldr	r2, [r3, #12]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a86:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7fe ffb5 	bl	80009fc <HAL_DMA_Abort_IT>
      break;
 8001a92:	e00e      	b.n	8001ab2 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68da      	ldr	r2, [r3, #12]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001aa2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe ffa7 	bl	80009fc <HAL_DMA_Abort_IT>
      break;
 8001aae:	e000      	b.n	8001ab2 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8001ab0:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	6839      	ldr	r1, [r7, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f000 fbb2 	bl	8002224 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a1d      	ldr	r2, [pc, #116]	; (8001b3c <HAL_TIM_PWM_Stop_DMA+0x148>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d117      	bne.n	8001afa <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6a1a      	ldr	r2, [r3, #32]
 8001ad0:	f241 1311 	movw	r3, #4369	; 0x1111
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10f      	bne.n	8001afa <HAL_TIM_PWM_Stop_DMA+0x106>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6a1a      	ldr	r2, [r3, #32]
 8001ae0:	f240 4344 	movw	r3, #1092	; 0x444
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d107      	bne.n	8001afa <HAL_TIM_PWM_Stop_DMA+0x106>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001af8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6a1a      	ldr	r2, [r3, #32]
 8001b00:	f241 1311 	movw	r3, #4369	; 0x1111
 8001b04:	4013      	ands	r3, r2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d10f      	bne.n	8001b2a <HAL_TIM_PWM_Stop_DMA+0x136>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6a1a      	ldr	r2, [r3, #32]
 8001b10:	f240 4344 	movw	r3, #1092	; 0x444
 8001b14:	4013      	ands	r3, r2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d107      	bne.n	8001b2a <HAL_TIM_PWM_Stop_DMA+0x136>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f022 0201 	bic.w	r2, r2, #1
 8001b28:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40010000 	.word	0x40010000

08001b40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d101      	bne.n	8001b5a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001b56:	2302      	movs	r3, #2
 8001b58:	e0b4      	b.n	8001cc4 <HAL_TIM_PWM_ConfigChannel+0x184>
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2202      	movs	r2, #2
 8001b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b0c      	cmp	r3, #12
 8001b6e:	f200 809f 	bhi.w	8001cb0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8001b72:	a201      	add	r2, pc, #4	; (adr r2, 8001b78 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b78:	08001bad 	.word	0x08001bad
 8001b7c:	08001cb1 	.word	0x08001cb1
 8001b80:	08001cb1 	.word	0x08001cb1
 8001b84:	08001cb1 	.word	0x08001cb1
 8001b88:	08001bed 	.word	0x08001bed
 8001b8c:	08001cb1 	.word	0x08001cb1
 8001b90:	08001cb1 	.word	0x08001cb1
 8001b94:	08001cb1 	.word	0x08001cb1
 8001b98:	08001c2f 	.word	0x08001c2f
 8001b9c:	08001cb1 	.word	0x08001cb1
 8001ba0:	08001cb1 	.word	0x08001cb1
 8001ba4:	08001cb1 	.word	0x08001cb1
 8001ba8:	08001c6f 	.word	0x08001c6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68b9      	ldr	r1, [r7, #8]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f000 f9aa 	bl	8001f0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	699a      	ldr	r2, [r3, #24]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f042 0208 	orr.w	r2, r2, #8
 8001bc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	699a      	ldr	r2, [r3, #24]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f022 0204 	bic.w	r2, r2, #4
 8001bd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6999      	ldr	r1, [r3, #24]
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	691a      	ldr	r2, [r3, #16]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	430a      	orrs	r2, r1
 8001be8:	619a      	str	r2, [r3, #24]
      break;
 8001bea:	e062      	b.n	8001cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68b9      	ldr	r1, [r7, #8]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f000 f9f0 	bl	8001fd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	699a      	ldr	r2, [r3, #24]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	699a      	ldr	r2, [r3, #24]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6999      	ldr	r1, [r3, #24]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	021a      	lsls	r2, r3, #8
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	619a      	str	r2, [r3, #24]
      break;
 8001c2c:	e041      	b.n	8001cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68b9      	ldr	r1, [r7, #8]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f000 fa3b 	bl	80020b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	69da      	ldr	r2, [r3, #28]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f042 0208 	orr.w	r2, r2, #8
 8001c48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	69da      	ldr	r2, [r3, #28]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 0204 	bic.w	r2, r2, #4
 8001c58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	69d9      	ldr	r1, [r3, #28]
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	691a      	ldr	r2, [r3, #16]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	61da      	str	r2, [r3, #28]
      break;
 8001c6c:	e021      	b.n	8001cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68b9      	ldr	r1, [r7, #8]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f000 fa85 	bl	8002184 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	69da      	ldr	r2, [r3, #28]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	69da      	ldr	r2, [r3, #28]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	69d9      	ldr	r1, [r3, #28]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	021a      	lsls	r2, r3, #8
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	430a      	orrs	r2, r1
 8001cac:	61da      	str	r2, [r3, #28]
      break;
 8001cae:	e000      	b.n	8001cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8001cb0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d14:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8001d1e:	68f8      	ldr	r0, [r7, #12]
 8001d20:	f7ff ffe8 	bl	8001cf4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8001d24:	bf00      	nop
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d38:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d103      	bne.n	8001d54 <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	771a      	strb	r2, [r3, #28]
 8001d52:	e019      	b.n	8001d88 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d103      	bne.n	8001d66 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2202      	movs	r2, #2
 8001d62:	771a      	strb	r2, [r3, #28]
 8001d64:	e010      	b.n	8001d88 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d103      	bne.n	8001d78 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2204      	movs	r2, #4
 8001d74:	771a      	strb	r2, [r3, #28]
 8001d76:	e007      	b.n	8001d88 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d102      	bne.n	8001d88 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2208      	movs	r2, #8
 8001d86:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d88:	68f8      	ldr	r0, [r7, #12]
 8001d8a:	f7ff ff9f 	bl	8001ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2200      	movs	r2, #0
 8001d92:	771a      	strb	r2, [r3, #28]
}
 8001d94:	bf00      	nop
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da8:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d103      	bne.n	8001dc4 <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	771a      	strb	r2, [r3, #28]
 8001dc2:	e019      	b.n	8001df8 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d103      	bne.n	8001dd6 <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	771a      	strb	r2, [r3, #28]
 8001dd4:	e010      	b.n	8001df8 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d103      	bne.n	8001de8 <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2204      	movs	r2, #4
 8001de4:	771a      	strb	r2, [r3, #28]
 8001de6:	e007      	b.n	8001df8 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d102      	bne.n	8001df8 <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2208      	movs	r2, #8
 8001df6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8001df8:	68f8      	ldr	r0, [r7, #12]
 8001dfa:	f7ff ff71 	bl	8001ce0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	771a      	strb	r2, [r3, #28]
}
 8001e04:	bf00      	nop
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a34      	ldr	r2, [pc, #208]	; (8001ef0 <TIM_Base_SetConfig+0xe4>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d00f      	beq.n	8001e44 <TIM_Base_SetConfig+0x38>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e2a:	d00b      	beq.n	8001e44 <TIM_Base_SetConfig+0x38>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a31      	ldr	r2, [pc, #196]	; (8001ef4 <TIM_Base_SetConfig+0xe8>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d007      	beq.n	8001e44 <TIM_Base_SetConfig+0x38>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a30      	ldr	r2, [pc, #192]	; (8001ef8 <TIM_Base_SetConfig+0xec>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d003      	beq.n	8001e44 <TIM_Base_SetConfig+0x38>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a2f      	ldr	r2, [pc, #188]	; (8001efc <TIM_Base_SetConfig+0xf0>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d108      	bne.n	8001e56 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a25      	ldr	r2, [pc, #148]	; (8001ef0 <TIM_Base_SetConfig+0xe4>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d01b      	beq.n	8001e96 <TIM_Base_SetConfig+0x8a>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e64:	d017      	beq.n	8001e96 <TIM_Base_SetConfig+0x8a>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a22      	ldr	r2, [pc, #136]	; (8001ef4 <TIM_Base_SetConfig+0xe8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d013      	beq.n	8001e96 <TIM_Base_SetConfig+0x8a>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a21      	ldr	r2, [pc, #132]	; (8001ef8 <TIM_Base_SetConfig+0xec>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d00f      	beq.n	8001e96 <TIM_Base_SetConfig+0x8a>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a20      	ldr	r2, [pc, #128]	; (8001efc <TIM_Base_SetConfig+0xf0>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d00b      	beq.n	8001e96 <TIM_Base_SetConfig+0x8a>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a1f      	ldr	r2, [pc, #124]	; (8001f00 <TIM_Base_SetConfig+0xf4>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d007      	beq.n	8001e96 <TIM_Base_SetConfig+0x8a>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a1e      	ldr	r2, [pc, #120]	; (8001f04 <TIM_Base_SetConfig+0xf8>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d003      	beq.n	8001e96 <TIM_Base_SetConfig+0x8a>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a1d      	ldr	r2, [pc, #116]	; (8001f08 <TIM_Base_SetConfig+0xfc>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d108      	bne.n	8001ea8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a08      	ldr	r2, [pc, #32]	; (8001ef0 <TIM_Base_SetConfig+0xe4>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d103      	bne.n	8001edc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	691a      	ldr	r2, [r3, #16]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	615a      	str	r2, [r3, #20]
}
 8001ee2:	bf00      	nop
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	40010000 	.word	0x40010000
 8001ef4:	40000400 	.word	0x40000400
 8001ef8:	40000800 	.word	0x40000800
 8001efc:	40000c00 	.word	0x40000c00
 8001f00:	40014000 	.word	0x40014000
 8001f04:	40014400 	.word	0x40014400
 8001f08:	40014800 	.word	0x40014800

08001f0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b087      	sub	sp, #28
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	f023 0201 	bic.w	r2, r3, #1
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f023 0303 	bic.w	r3, r3, #3
 8001f42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	f023 0302 	bic.w	r3, r3, #2
 8001f54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a1c      	ldr	r2, [pc, #112]	; (8001fd4 <TIM_OC1_SetConfig+0xc8>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d10c      	bne.n	8001f82 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	f023 0308 	bic.w	r3, r3, #8
 8001f6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	f023 0304 	bic.w	r3, r3, #4
 8001f80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a13      	ldr	r2, [pc, #76]	; (8001fd4 <TIM_OC1_SetConfig+0xc8>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d111      	bne.n	8001fae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	697a      	ldr	r2, [r7, #20]
 8001fc6:	621a      	str	r2, [r3, #32]
}
 8001fc8:	bf00      	nop
 8001fca:	371c      	adds	r7, #28
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	40010000 	.word	0x40010000

08001fd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b087      	sub	sp, #28
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	f023 0210 	bic.w	r2, r3, #16
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800200e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	021b      	lsls	r3, r3, #8
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	4313      	orrs	r3, r2
 800201a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	f023 0320 	bic.w	r3, r3, #32
 8002022:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	011b      	lsls	r3, r3, #4
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	4313      	orrs	r3, r2
 800202e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a1e      	ldr	r2, [pc, #120]	; (80020ac <TIM_OC2_SetConfig+0xd4>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d10d      	bne.n	8002054 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800203e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	011b      	lsls	r3, r3, #4
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	4313      	orrs	r3, r2
 800204a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002052:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a15      	ldr	r2, [pc, #84]	; (80020ac <TIM_OC2_SetConfig+0xd4>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d113      	bne.n	8002084 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002062:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800206a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	4313      	orrs	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	4313      	orrs	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	621a      	str	r2, [r3, #32]
}
 800209e:	bf00      	nop
 80020a0:	371c      	adds	r7, #28
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	40010000 	.word	0x40010000

080020b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b087      	sub	sp, #28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f023 0303 	bic.w	r3, r3, #3
 80020e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80020f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	021b      	lsls	r3, r3, #8
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	4313      	orrs	r3, r2
 8002104:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a1d      	ldr	r2, [pc, #116]	; (8002180 <TIM_OC3_SetConfig+0xd0>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d10d      	bne.n	800212a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002114:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	021b      	lsls	r3, r3, #8
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	4313      	orrs	r3, r2
 8002120:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002128:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a14      	ldr	r2, [pc, #80]	; (8002180 <TIM_OC3_SetConfig+0xd0>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d113      	bne.n	800215a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002138:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002140:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	011b      	lsls	r3, r3, #4
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	4313      	orrs	r3, r2
 800214c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	011b      	lsls	r3, r3, #4
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	4313      	orrs	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	621a      	str	r2, [r3, #32]
}
 8002174:	bf00      	nop
 8002176:	371c      	adds	r7, #28
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	40010000 	.word	0x40010000

08002184 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002184:	b480      	push	{r7}
 8002186:	b087      	sub	sp, #28
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	021b      	lsls	r3, r3, #8
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80021ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	031b      	lsls	r3, r3, #12
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	4313      	orrs	r3, r2
 80021da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a10      	ldr	r2, [pc, #64]	; (8002220 <TIM_OC4_SetConfig+0x9c>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d109      	bne.n	80021f8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	695b      	ldr	r3, [r3, #20]
 80021f0:	019b      	lsls	r3, r3, #6
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	621a      	str	r2, [r3, #32]
}
 8002212:	bf00      	nop
 8002214:	371c      	adds	r7, #28
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	40010000 	.word	0x40010000

08002224 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002224:	b480      	push	{r7}
 8002226:	b087      	sub	sp, #28
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	f003 031f 	and.w	r3, r3, #31
 8002236:	2201      	movs	r2, #1
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6a1a      	ldr	r2, [r3, #32]
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	43db      	mvns	r3, r3
 8002246:	401a      	ands	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6a1a      	ldr	r2, [r3, #32]
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	f003 031f 	and.w	r3, r3, #31
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	fa01 f303 	lsl.w	r3, r1, r3
 800225c:	431a      	orrs	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	621a      	str	r2, [r3, #32]
}
 8002262:	bf00      	nop
 8002264:	371c      	adds	r7, #28
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <main>:
  * @brief  Main program.
  * @param  None
  * @retval None
  */
int main(void)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	af00      	add	r7, sp, #0
  HAL_Init();
 8002272:	f7fe f931 	bl	80004d8 <HAL_Init>
  SystemClock_Config();		// Configure system clock to 180MHz
 8002276:	f000 f80f 	bl	8002298 <SystemClock_Config>
  MX_GPIO_Init();
 800227a:	f000 f879 	bl	8002370 <MX_GPIO_Init>

  // WS2812B Setup
  LED_Init();
 800227e:	f000 fd45 	bl	8002d0c <LED_Init>
  LED_set_color_all(0x00, 0x00, 0x00);	//Set color order of array. Ex: R0,G0,B0,R1,G1,B1
 8002282:	2200      	movs	r2, #0
 8002284:	2100      	movs	r1, #0
 8002286:	2000      	movs	r0, #0
 8002288:	f000 f9ac 	bl	80025e4 <LED_set_color_all>
  LED_update(1);
 800228c:	2001      	movs	r0, #1
 800228e:	f000 fb29 	bl	80028e4 <LED_update>

  /* Infinite loop */
  while (1) {
  	pulse();
 8002292:	f000 f975 	bl	8002580 <pulse>
 8002296:	e7fc      	b.n	8002292 <main+0x24>

08002298 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b094      	sub	sp, #80	; 0x50
 800229c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800229e:	f107 0320 	add.w	r3, r7, #32
 80022a2:	2230      	movs	r2, #48	; 0x30
 80022a4:	2100      	movs	r1, #0
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 fe80 	bl	8002fac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022ac:	f107 030c 	add.w	r3, r7, #12
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	60da      	str	r2, [r3, #12]
 80022ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022bc:	2300      	movs	r3, #0
 80022be:	60bb      	str	r3, [r7, #8]
 80022c0:	4b29      	ldr	r3, [pc, #164]	; (8002368 <SystemClock_Config+0xd0>)
 80022c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c4:	4a28      	ldr	r2, [pc, #160]	; (8002368 <SystemClock_Config+0xd0>)
 80022c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ca:	6413      	str	r3, [r2, #64]	; 0x40
 80022cc:	4b26      	ldr	r3, [pc, #152]	; (8002368 <SystemClock_Config+0xd0>)
 80022ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d4:	60bb      	str	r3, [r7, #8]
 80022d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022d8:	2300      	movs	r3, #0
 80022da:	607b      	str	r3, [r7, #4]
 80022dc:	4b23      	ldr	r3, [pc, #140]	; (800236c <SystemClock_Config+0xd4>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a22      	ldr	r2, [pc, #136]	; (800236c <SystemClock_Config+0xd4>)
 80022e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022e6:	6013      	str	r3, [r2, #0]
 80022e8:	4b20      	ldr	r3, [pc, #128]	; (800236c <SystemClock_Config+0xd4>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80022f0:	607b      	str	r3, [r7, #4]
 80022f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022f4:	2302      	movs	r3, #2
 80022f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022f8:	2301      	movs	r3, #1
 80022fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022fc:	2310      	movs	r3, #16
 80022fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002300:	2302      	movs	r3, #2
 8002302:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002304:	2300      	movs	r3, #0
 8002306:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002308:	2310      	movs	r3, #16
 800230a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800230c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002310:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002312:	2304      	movs	r3, #4
 8002314:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002316:	2304      	movs	r3, #4
 8002318:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800231a:	f107 0320 	add.w	r3, r7, #32
 800231e:	4618      	mov	r0, r3
 8002320:	f7fe fe08 	bl	8000f34 <HAL_RCC_OscConfig>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d002      	beq.n	8002330 <SystemClock_Config+0x98>
  {
    Error_Handler(SYSCONF_ERROR1);
 800232a:	2000      	movs	r0, #0
 800232c:	f000 f890 	bl	8002450 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002330:	230f      	movs	r3, #15
 8002332:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002334:	2302      	movs	r3, #2
 8002336:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800233c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002340:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002342:	2300      	movs	r3, #0
 8002344:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002346:	f107 030c 	add.w	r3, r7, #12
 800234a:	2102      	movs	r1, #2
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff f861 	bl	8001414 <HAL_RCC_ClockConfig>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d002      	beq.n	800235e <SystemClock_Config+0xc6>
  {
    Error_Handler(SYSCONF_ERROR2);
 8002358:	2001      	movs	r0, #1
 800235a:	f000 f879 	bl	8002450 <Error_Handler>
  }
}
 800235e:	bf00      	nop
 8002360:	3750      	adds	r7, #80	; 0x50
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40023800 	.word	0x40023800
 800236c:	40007000 	.word	0x40007000

08002370 <MX_GPIO_Init>:
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void){
 8002370:	b580      	push	{r7, lr}
 8002372:	b08a      	sub	sp, #40	; 0x28
 8002374:	af00      	add	r7, sp, #0
  // GPIO Ports Clock Enable
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	613b      	str	r3, [r7, #16]
 800237a:	4b31      	ldr	r3, [pc, #196]	; (8002440 <MX_GPIO_Init+0xd0>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	4a30      	ldr	r2, [pc, #192]	; (8002440 <MX_GPIO_Init+0xd0>)
 8002380:	f043 0304 	orr.w	r3, r3, #4
 8002384:	6313      	str	r3, [r2, #48]	; 0x30
 8002386:	4b2e      	ldr	r3, [pc, #184]	; (8002440 <MX_GPIO_Init+0xd0>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	f003 0304 	and.w	r3, r3, #4
 800238e:	613b      	str	r3, [r7, #16]
 8002390:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	4b2a      	ldr	r3, [pc, #168]	; (8002440 <MX_GPIO_Init+0xd0>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	4a29      	ldr	r2, [pc, #164]	; (8002440 <MX_GPIO_Init+0xd0>)
 800239c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023a0:	6313      	str	r3, [r2, #48]	; 0x30
 80023a2:	4b27      	ldr	r3, [pc, #156]	; (8002440 <MX_GPIO_Init+0xd0>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	60bb      	str	r3, [r7, #8]
 80023b2:	4b23      	ldr	r3, [pc, #140]	; (8002440 <MX_GPIO_Init+0xd0>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	4a22      	ldr	r2, [pc, #136]	; (8002440 <MX_GPIO_Init+0xd0>)
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	6313      	str	r3, [r2, #48]	; 0x30
 80023be:	4b20      	ldr	r3, [pc, #128]	; (8002440 <MX_GPIO_Init+0xd0>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	60bb      	str	r3, [r7, #8]
 80023c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	607b      	str	r3, [r7, #4]
 80023ce:	4b1c      	ldr	r3, [pc, #112]	; (8002440 <MX_GPIO_Init+0xd0>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	4a1b      	ldr	r2, [pc, #108]	; (8002440 <MX_GPIO_Init+0xd0>)
 80023d4:	f043 0302 	orr.w	r3, r3, #2
 80023d8:	6313      	str	r3, [r2, #48]	; 0x30
 80023da:	4b19      	ldr	r3, [pc, #100]	; (8002440 <MX_GPIO_Init+0xd0>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	607b      	str	r3, [r7, #4]
 80023e4:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e6:	f107 0314 	add.w	r3, r7, #20
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	605a      	str	r2, [r3, #4]
 80023f0:	609a      	str	r2, [r3, #8]
 80023f2:	60da      	str	r2, [r3, #12]
 80023f4:	611a      	str	r2, [r3, #16]

  // Configure GPIO pin Output Level
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80023f6:	2200      	movs	r2, #0
 80023f8:	2120      	movs	r1, #32
 80023fa:	4812      	ldr	r0, [pc, #72]	; (8002444 <MX_GPIO_Init+0xd4>)
 80023fc:	f7fe fd80 	bl	8000f00 <HAL_GPIO_WritePin>

  // Configure GPIO pin : B1_Pin
  GPIO_InitStruct.Pin = B1_Pin;
 8002400:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002404:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002406:	4b10      	ldr	r3, [pc, #64]	; (8002448 <MX_GPIO_Init+0xd8>)
 8002408:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240a:	2300      	movs	r3, #0
 800240c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800240e:	f107 0314 	add.w	r3, r7, #20
 8002412:	4619      	mov	r1, r3
 8002414:	480d      	ldr	r0, [pc, #52]	; (800244c <MX_GPIO_Init+0xdc>)
 8002416:	f7fe fbf1 	bl	8000bfc <HAL_GPIO_Init>

  // Configure GPIO pin : LD2_Pin
  GPIO_InitStruct.Pin = LD2_Pin;
 800241a:	2320      	movs	r3, #32
 800241c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800241e:	2301      	movs	r3, #1
 8002420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002422:	2300      	movs	r3, #0
 8002424:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002426:	2300      	movs	r3, #0
 8002428:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800242a:	f107 0314 	add.w	r3, r7, #20
 800242e:	4619      	mov	r1, r3
 8002430:	4804      	ldr	r0, [pc, #16]	; (8002444 <MX_GPIO_Init+0xd4>)
 8002432:	f7fe fbe3 	bl	8000bfc <HAL_GPIO_Init>
}
 8002436:	bf00      	nop
 8002438:	3728      	adds	r7, #40	; 0x28
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40023800 	.word	0x40023800
 8002444:	40020000 	.word	0x40020000
 8002448:	10210000 	.word	0x10210000
 800244c:	40020800 	.word	0x40020800

08002450 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(uint8_t ERROR)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	71fb      	strb	r3, [r7, #7]
  while (1) {
    /* Turn LED2 on */
  	switch(ERROR){
 800245a:	79fb      	ldrb	r3, [r7, #7]
 800245c:	2b06      	cmp	r3, #6
 800245e:	d817      	bhi.n	8002490 <Error_Handler+0x40>
 8002460:	a201      	add	r2, pc, #4	; (adr r2, 8002468 <Error_Handler+0x18>)
 8002462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002466:	bf00      	nop
 8002468:	0800249d 	.word	0x0800249d
 800246c:	0800249d 	.word	0x0800249d
 8002470:	08002485 	.word	0x08002485
 8002474:	0800249d 	.word	0x0800249d
 8002478:	0800249d 	.word	0x0800249d
 800247c:	0800249d 	.word	0x0800249d
 8002480:	0800249d 	.word	0x0800249d
  		break;
  	case TIM_INIT_ERROR:
  	  //HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
  	  break;
  	case EN_PWM_ERROR:
  	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8002484:	2201      	movs	r2, #1
 8002486:	2120      	movs	r1, #32
 8002488:	4805      	ldr	r0, [pc, #20]	; (80024a0 <Error_Handler+0x50>)
 800248a:	f7fe fd39 	bl	8000f00 <HAL_GPIO_WritePin>
  	  break;
 800248e:	e006      	b.n	800249e <Error_Handler+0x4e>
  	  break;
  	case GPIO_ERROR:
  	  //HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
  	  break;
  	default:
  	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002490:	2200      	movs	r2, #0
 8002492:	2120      	movs	r1, #32
 8002494:	4802      	ldr	r0, [pc, #8]	; (80024a0 <Error_Handler+0x50>)
 8002496:	f7fe fd33 	bl	8000f00 <HAL_GPIO_WritePin>
 800249a:	e7de      	b.n	800245a <Error_Handler+0xa>
  		break;
 800249c:	bf00      	nop
  	switch(ERROR){
 800249e:	e7dc      	b.n	800245a <Error_Handler+0xa>
 80024a0:	40020000 	.word	0x40020000

080024a4 <HAL_TIM_PWM_MspInit>:
  * @param htim: TIM handle pointer
  * @retval None
  */

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  // ##-2- Configure the NVIC for DMA #########################################
  // NVIC configuration for DMA transfer complete interrupt
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
  */
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
}
 80024bc:	bf00      	nop
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80024c6:	b480      	push	{r7}
 80024c8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80024ca:	e7fe      	b.n	80024ca <HardFault_Handler+0x4>

080024cc <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80024d0:	e7fe      	b.n	80024d0 <MemManage_Handler+0x4>

080024d2 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80024d2:	b480      	push	{r7}
 80024d4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80024d6:	e7fe      	b.n	80024d6 <BusFault_Handler+0x4>

080024d8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80024dc:	e7fe      	b.n	80024dc <UsageFault_Handler+0x4>

080024de <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80024de:	b480      	push	{r7}
 80024e0:	af00      	add	r7, sp, #0
}
 80024e2:	bf00      	nop
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
}
 80024f0:	bf00      	nop
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80024fa:	b480      	push	{r7}
 80024fc:	af00      	add	r7, sp, #0
}
 80024fe:	bf00      	nop
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800250c:	f7fe f83e 	bl	800058c <HAL_IncTick>
}
 8002510:	bf00      	nop
 8002512:	bd80      	pop	{r7, pc}

08002514 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002518:	4b16      	ldr	r3, [pc, #88]	; (8002574 <SystemInit+0x60>)
 800251a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251e:	4a15      	ldr	r2, [pc, #84]	; (8002574 <SystemInit+0x60>)
 8002520:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002524:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002528:	4b13      	ldr	r3, [pc, #76]	; (8002578 <SystemInit+0x64>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a12      	ldr	r2, [pc, #72]	; (8002578 <SystemInit+0x64>)
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002534:	4b10      	ldr	r3, [pc, #64]	; (8002578 <SystemInit+0x64>)
 8002536:	2200      	movs	r2, #0
 8002538:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800253a:	4b0f      	ldr	r3, [pc, #60]	; (8002578 <SystemInit+0x64>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a0e      	ldr	r2, [pc, #56]	; (8002578 <SystemInit+0x64>)
 8002540:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002544:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002548:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800254a:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <SystemInit+0x64>)
 800254c:	4a0b      	ldr	r2, [pc, #44]	; (800257c <SystemInit+0x68>)
 800254e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002550:	4b09      	ldr	r3, [pc, #36]	; (8002578 <SystemInit+0x64>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a08      	ldr	r2, [pc, #32]	; (8002578 <SystemInit+0x64>)
 8002556:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800255a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800255c:	4b06      	ldr	r3, [pc, #24]	; (8002578 <SystemInit+0x64>)
 800255e:	2200      	movs	r2, #0
 8002560:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002562:	4b04      	ldr	r3, [pc, #16]	; (8002574 <SystemInit+0x60>)
 8002564:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002568:	609a      	str	r2, [r3, #8]
#endif
}
 800256a:	bf00      	nop
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	e000ed00 	.word	0xe000ed00
 8002578:	40023800 	.word	0x40023800
 800257c:	24003010 	.word	0x24003010

08002580 <pulse>:
	}
	return;
}

// Pulse
void pulse(void){
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
	volatile uint32_t timeout;
	for (size_t i = 0; i < LED_CFG_STRIP_CNT; i++) {
 8002586:	2300      	movs	r3, #0
 8002588:	607b      	str	r3, [r7, #4]
 800258a:	e020      	b.n	80025ce <pulse+0x4e>
		set_LED_colors((i + 0) % LED_CFG_STRIP_CNT, 0x1F, 0, 0x1F);
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	4b13      	ldr	r3, [pc, #76]	; (80025dc <pulse+0x5c>)
 8002590:	fba3 1302 	umull	r1, r3, r3, r2
 8002594:	0898      	lsrs	r0, r3, #2
 8002596:	4603      	mov	r3, r0
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4403      	add	r3, r0
 800259c:	1ad0      	subs	r0, r2, r3
 800259e:	231f      	movs	r3, #31
 80025a0:	2200      	movs	r2, #0
 80025a2:	211f      	movs	r1, #31
 80025a4:	f000 f850 	bl	8002648 <set_LED_colors>
		//set_LED_colors((i + 5) % LED_CFG_STRIP_CNT, 0, 0x1F, 0);
		//set_LED_colors((i + 6) % LED_CFG_STRIP_CNT, 0, 0x1F, 0);
		//set_LED_colors((i + 7) % LED_CFG_STRIP_CNT, 0, 0x7, 0);
		//set_LED_colors((i + 8) % LED_CFG_STRIP_CNT, 0, 0x7, 0);

		LED_update(1);
 80025a8:	2001      	movs	r0, #1
 80025aa:	f000 f99b 	bl	80028e4 <LED_update>
		LED_set_color_all(0, 0, 0);
 80025ae:	2200      	movs	r2, #0
 80025b0:	2100      	movs	r1, #0
 80025b2:	2000      	movs	r0, #0
 80025b4:	f000 f816 	bl	80025e4 <LED_set_color_all>
		timeout = 0x7FFFF;
 80025b8:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <pulse+0x60>)
 80025ba:	603b      	str	r3, [r7, #0]
		while (--timeout) {}
 80025bc:	bf00      	nop
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	3b01      	subs	r3, #1
 80025c2:	603b      	str	r3, [r7, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1fa      	bne.n	80025be <pulse+0x3e>
	for (size_t i = 0; i < LED_CFG_STRIP_CNT; i++) {
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3301      	adds	r3, #1
 80025cc:	607b      	str	r3, [r7, #4]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b04      	cmp	r3, #4
 80025d2:	d9db      	bls.n	800258c <pulse+0xc>
	}
	return;
 80025d4:	bf00      	nop
}
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	cccccccd 	.word	0xcccccccd
 80025e0:	0007ffff 	.word	0x0007ffff

080025e4 <LED_set_color_all>:
	}
	return;
}


uint8_t LED_set_color_all(uint8_t red, uint8_t green, uint8_t blue){
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	71fb      	strb	r3, [r7, #7]
 80025ee:	460b      	mov	r3, r1
 80025f0:	71bb      	strb	r3, [r7, #6]
 80025f2:	4613      	mov	r3, r2
 80025f4:	717b      	strb	r3, [r7, #5]
	for (size_t led_idx = 0; led_idx < LED_CFG_STRIP_CNT; led_idx++){
 80025f6:	2300      	movs	r3, #0
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	e019      	b.n	8002630 <LED_set_color_all+0x4c>
		LED_colors[led_idx * LED_CFG_BYTES_PER_LED + 0] = green;
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	4613      	mov	r3, r2
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	4413      	add	r3, r2
 8002604:	490f      	ldr	r1, [pc, #60]	; (8002644 <LED_set_color_all+0x60>)
 8002606:	79ba      	ldrb	r2, [r7, #6]
 8002608:	54ca      	strb	r2, [r1, r3]
		LED_colors[led_idx * LED_CFG_BYTES_PER_LED + 1] = red;
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	4613      	mov	r3, r2
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	4413      	add	r3, r2
 8002612:	3301      	adds	r3, #1
 8002614:	490b      	ldr	r1, [pc, #44]	; (8002644 <LED_set_color_all+0x60>)
 8002616:	79fa      	ldrb	r2, [r7, #7]
 8002618:	54ca      	strb	r2, [r1, r3]
		LED_colors[led_idx * LED_CFG_BYTES_PER_LED + 2] = blue;
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	4613      	mov	r3, r2
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	4413      	add	r3, r2
 8002622:	3302      	adds	r3, #2
 8002624:	4907      	ldr	r1, [pc, #28]	; (8002644 <LED_set_color_all+0x60>)
 8002626:	797a      	ldrb	r2, [r7, #5]
 8002628:	54ca      	strb	r2, [r1, r3]
	for (size_t led_idx = 0; led_idx < LED_CFG_STRIP_CNT; led_idx++){
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	3301      	adds	r3, #1
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2b04      	cmp	r3, #4
 8002634:	d9e2      	bls.n	80025fc <LED_set_color_all+0x18>
	}
	return 1;
 8002636:	2301      	movs	r3, #1
}
 8002638:	4618      	mov	r0, r3
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	20000154 	.word	0x20000154

08002648 <set_LED_colors>:

// Set R,G,B values for a specific LED
// index: LED index in array, starting from '0'
// return 1 if successful, else 0 for fail
uint8_t set_LED_colors(size_t led_idx, uint8_t red, uint8_t green, uint8_t blue){
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	4608      	mov	r0, r1
 8002652:	4611      	mov	r1, r2
 8002654:	461a      	mov	r2, r3
 8002656:	4603      	mov	r3, r0
 8002658:	70fb      	strb	r3, [r7, #3]
 800265a:	460b      	mov	r3, r1
 800265c:	70bb      	strb	r3, [r7, #2]
 800265e:	4613      	mov	r3, r2
 8002660:	707b      	strb	r3, [r7, #1]
	if (led_idx < LED_CFG_STRIP_CNT){
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b04      	cmp	r3, #4
 8002666:	d818      	bhi.n	800269a <set_LED_colors+0x52>
		LED_colors[led_idx * LED_CFG_BYTES_PER_LED + 0] = green;
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	4613      	mov	r3, r2
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	4413      	add	r3, r2
 8002670:	490d      	ldr	r1, [pc, #52]	; (80026a8 <set_LED_colors+0x60>)
 8002672:	78ba      	ldrb	r2, [r7, #2]
 8002674:	54ca      	strb	r2, [r1, r3]
		LED_colors[led_idx * LED_CFG_BYTES_PER_LED + 1] = red;
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	4413      	add	r3, r2
 800267e:	3301      	adds	r3, #1
 8002680:	4909      	ldr	r1, [pc, #36]	; (80026a8 <set_LED_colors+0x60>)
 8002682:	78fa      	ldrb	r2, [r7, #3]
 8002684:	54ca      	strb	r2, [r1, r3]
		LED_colors[led_idx * LED_CFG_BYTES_PER_LED + 2] = blue;
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	4613      	mov	r3, r2
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	4413      	add	r3, r2
 800268e:	3302      	adds	r3, #2
 8002690:	4905      	ldr	r1, [pc, #20]	; (80026a8 <set_LED_colors+0x60>)
 8002692:	787a      	ldrb	r2, [r7, #1]
 8002694:	54ca      	strb	r2, [r1, r3]
		return 1;
 8002696:	2301      	movs	r3, #1
 8002698:	e000      	b.n	800269c <set_LED_colors+0x54>
	}
	return 0;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	20000154 	.word	0x20000154

080026ac <write_PWM_data>:

// Iterate through each byte of LED_colors[] and determine if bit in LED_array[] is a HIGH_BIT or LOW_BIT
uint8_t write_PWM_data(size_t led_idx, uint32_t* LED_array){
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]

	if (led_idx < LED_CFG_STRIP_CNT){
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b04      	cmp	r3, #4
 80026ba:	d859      	bhi.n	8002770 <write_PWM_data+0xc4>

		// Retrieve color hex values for RGB
		uint8_t green_hex_val = LED_colors[LED_CFG_BYTES_PER_LED * led_idx + 0];
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	4613      	mov	r3, r2
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	4413      	add	r3, r2
 80026c4:	4a2e      	ldr	r2, [pc, #184]	; (8002780 <write_PWM_data+0xd4>)
 80026c6:	5cd3      	ldrb	r3, [r2, r3]
 80026c8:	72fb      	strb	r3, [r7, #11]
		uint8_t red_hex_val = LED_colors[LED_CFG_BYTES_PER_LED * led_idx + 1];
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	4413      	add	r3, r2
 80026d2:	3301      	adds	r3, #1
 80026d4:	4a2a      	ldr	r2, [pc, #168]	; (8002780 <write_PWM_data+0xd4>)
 80026d6:	5cd3      	ldrb	r3, [r2, r3]
 80026d8:	72bb      	strb	r3, [r7, #10]
		uint8_t blue_hex_val = LED_colors[LED_CFG_BYTES_PER_LED * led_idx + 2];
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	4613      	mov	r3, r2
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	4413      	add	r3, r2
 80026e2:	3302      	adds	r3, #2
 80026e4:	4a26      	ldr	r2, [pc, #152]	; (8002780 <write_PWM_data+0xd4>)
 80026e6:	5cd3      	ldrb	r3, [r2, r3]
 80026e8:	727b      	strb	r3, [r7, #9]

		// Set each 24 bits in LED_array based on hex value. Ex: 0x1F = 8'b00011111, therefore LED_array[0] = LOW_BIT
		for (size_t i = 0; i < NUM_BITS_PER_COLOR; i++){
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	e03a      	b.n	8002766 <write_PWM_data+0xba>
			LED_array[i] = 			(green_hex_val & (1 << (7 - i))) ? HIGH_BIT : LOW_BIT;		// Set green color
 80026f0:	7afa      	ldrb	r2, [r7, #11]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f1c3 0307 	rsb	r3, r3, #7
 80026f8:	fa42 f303 	asr.w	r3, r2, r3
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <write_PWM_data+0x5c>
 8002704:	2244      	movs	r2, #68	; 0x44
 8002706:	e000      	b.n	800270a <write_PWM_data+0x5e>
 8002708:	2222      	movs	r2, #34	; 0x22
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	6839      	ldr	r1, [r7, #0]
 8002710:	440b      	add	r3, r1
 8002712:	601a      	str	r2, [r3, #0]
			LED_array[i + 8] = 	(red_hex_val & (1 << (7 - i))) ? HIGH_BIT : LOW_BIT;			// Set blue color
 8002714:	7aba      	ldrb	r2, [r7, #10]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f1c3 0307 	rsb	r3, r3, #7
 800271c:	fa42 f303 	asr.w	r3, r2, r3
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <write_PWM_data+0x80>
 8002728:	2244      	movs	r2, #68	; 0x44
 800272a:	e000      	b.n	800272e <write_PWM_data+0x82>
 800272c:	2222      	movs	r2, #34	; 0x22
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	3308      	adds	r3, #8
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	6839      	ldr	r1, [r7, #0]
 8002736:	440b      	add	r3, r1
 8002738:	601a      	str	r2, [r3, #0]
			LED_array[i + 16] = (blue_hex_val & (1 << (7 - i))) ? HIGH_BIT : LOW_BIT;		// Set red color
 800273a:	7a7a      	ldrb	r2, [r7, #9]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f1c3 0307 	rsb	r3, r3, #7
 8002742:	fa42 f303 	asr.w	r3, r2, r3
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <write_PWM_data+0xa6>
 800274e:	2244      	movs	r2, #68	; 0x44
 8002750:	e000      	b.n	8002754 <write_PWM_data+0xa8>
 8002752:	2222      	movs	r2, #34	; 0x22
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	3310      	adds	r3, #16
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	6839      	ldr	r1, [r7, #0]
 800275c:	440b      	add	r3, r1
 800275e:	601a      	str	r2, [r3, #0]
		for (size_t i = 0; i < NUM_BITS_PER_COLOR; i++){
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	3301      	adds	r3, #1
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2b07      	cmp	r3, #7
 800276a:	d9c1      	bls.n	80026f0 <write_PWM_data+0x44>
		}

		return 1;
 800276c:	2301      	movs	r3, #1
 800276e:	e000      	b.n	8002772 <write_PWM_data+0xc6>
	}
	return 0;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3714      	adds	r7, #20
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	20000154 	.word	0x20000154

08002784 <LED_reset_pulse>:

uint8_t LED_reset_pulse(uint8_t rst){
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	71fb      	strb	r3, [r7, #7]
	rst_flag = rst;		// Set reset flag
 800278e:	4a42      	ldr	r2, [pc, #264]	; (8002898 <LED_reset_pulse+0x114>)
 8002790:	79fb      	ldrb	r3, [r7, #7]
 8002792:	7013      	strb	r3, [r2, #0]

  hdma_tim2_ch1.Init.Mode = DMA_NORMAL;							// Modify DMA config to Normal Mode
 8002794:	4b41      	ldr	r3, [pc, #260]	; (800289c <LED_reset_pulse+0x118>)
 8002796:	2200      	movs	r2, #0
 8002798:	61da      	str	r2, [r3, #28]
  memset(tmp_led_data, 0, sizeof(tmp_led_data));	  // Set all data for tmp_led_data to 0
 800279a:	22c0      	movs	r2, #192	; 0xc0
 800279c:	2100      	movs	r1, #0
 800279e:	4840      	ldr	r0, [pc, #256]	; (80028a0 <LED_reset_pulse+0x11c>)
 80027a0:	f000 fc04 	bl	8002fac <memset>

  // Initialize TIM2 DMA handle
  if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK) {
 80027a4:	483d      	ldr	r0, [pc, #244]	; (800289c <LED_reset_pulse+0x118>)
 80027a6:	f7fe f823 	bl	80007f0 <HAL_DMA_Init>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d002      	beq.n	80027b6 <LED_reset_pulse+0x32>
    Error_Handler(DMA_ERROR);
 80027b0:	2006      	movs	r0, #6
 80027b2:	f7ff fe4d 	bl	8002450 <Error_Handler>
  }

  // Clear Half Transfer and Transfer Complete flags for DMA1 Stream5
  __HAL_DMA_CLEAR_FLAG(&hdma_tim2_ch1, DMA_FLAG_HTIF1_5);
 80027b6:	4b39      	ldr	r3, [pc, #228]	; (800289c <LED_reset_pulse+0x118>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	461a      	mov	r2, r3
 80027bc:	4b39      	ldr	r3, [pc, #228]	; (80028a4 <LED_reset_pulse+0x120>)
 80027be:	429a      	cmp	r2, r3
 80027c0:	d904      	bls.n	80027cc <LED_reset_pulse+0x48>
 80027c2:	4b39      	ldr	r3, [pc, #228]	; (80028a8 <LED_reset_pulse+0x124>)
 80027c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027c8:	60da      	str	r2, [r3, #12]
 80027ca:	e019      	b.n	8002800 <LED_reset_pulse+0x7c>
 80027cc:	4b33      	ldr	r3, [pc, #204]	; (800289c <LED_reset_pulse+0x118>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	461a      	mov	r2, r3
 80027d2:	4b36      	ldr	r3, [pc, #216]	; (80028ac <LED_reset_pulse+0x128>)
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d904      	bls.n	80027e2 <LED_reset_pulse+0x5e>
 80027d8:	4b33      	ldr	r3, [pc, #204]	; (80028a8 <LED_reset_pulse+0x124>)
 80027da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027de:	609a      	str	r2, [r3, #8]
 80027e0:	e00e      	b.n	8002800 <LED_reset_pulse+0x7c>
 80027e2:	4b2e      	ldr	r3, [pc, #184]	; (800289c <LED_reset_pulse+0x118>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	461a      	mov	r2, r3
 80027e8:	4b31      	ldr	r3, [pc, #196]	; (80028b0 <LED_reset_pulse+0x12c>)
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d904      	bls.n	80027f8 <LED_reset_pulse+0x74>
 80027ee:	4b31      	ldr	r3, [pc, #196]	; (80028b4 <LED_reset_pulse+0x130>)
 80027f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027f4:	60da      	str	r2, [r3, #12]
 80027f6:	e003      	b.n	8002800 <LED_reset_pulse+0x7c>
 80027f8:	4b2e      	ldr	r3, [pc, #184]	; (80028b4 <LED_reset_pulse+0x130>)
 80027fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027fe:	609a      	str	r2, [r3, #8]
  __HAL_DMA_CLEAR_FLAG(&hdma_tim2_ch1, DMA_FLAG_TCIF1_5);
 8002800:	4b26      	ldr	r3, [pc, #152]	; (800289c <LED_reset_pulse+0x118>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	461a      	mov	r2, r3
 8002806:	4b27      	ldr	r3, [pc, #156]	; (80028a4 <LED_reset_pulse+0x120>)
 8002808:	429a      	cmp	r2, r3
 800280a:	d904      	bls.n	8002816 <LED_reset_pulse+0x92>
 800280c:	4b26      	ldr	r3, [pc, #152]	; (80028a8 <LED_reset_pulse+0x124>)
 800280e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002812:	60da      	str	r2, [r3, #12]
 8002814:	e019      	b.n	800284a <LED_reset_pulse+0xc6>
 8002816:	4b21      	ldr	r3, [pc, #132]	; (800289c <LED_reset_pulse+0x118>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	461a      	mov	r2, r3
 800281c:	4b23      	ldr	r3, [pc, #140]	; (80028ac <LED_reset_pulse+0x128>)
 800281e:	429a      	cmp	r2, r3
 8002820:	d904      	bls.n	800282c <LED_reset_pulse+0xa8>
 8002822:	4b21      	ldr	r3, [pc, #132]	; (80028a8 <LED_reset_pulse+0x124>)
 8002824:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002828:	609a      	str	r2, [r3, #8]
 800282a:	e00e      	b.n	800284a <LED_reset_pulse+0xc6>
 800282c:	4b1b      	ldr	r3, [pc, #108]	; (800289c <LED_reset_pulse+0x118>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	461a      	mov	r2, r3
 8002832:	4b1f      	ldr	r3, [pc, #124]	; (80028b0 <LED_reset_pulse+0x12c>)
 8002834:	429a      	cmp	r2, r3
 8002836:	d904      	bls.n	8002842 <LED_reset_pulse+0xbe>
 8002838:	4b1e      	ldr	r3, [pc, #120]	; (80028b4 <LED_reset_pulse+0x130>)
 800283a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800283e:	60da      	str	r2, [r3, #12]
 8002840:	e003      	b.n	800284a <LED_reset_pulse+0xc6>
 8002842:	4b1c      	ldr	r3, [pc, #112]	; (80028b4 <LED_reset_pulse+0x130>)
 8002844:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002848:	609a      	str	r2, [r3, #8]

  // Disable Half Transfer Interrupt
  __HAL_DMA_DISABLE_IT(&hdma_tim2_ch1, DMA_IT_HT);
 800284a:	4b14      	ldr	r3, [pc, #80]	; (800289c <LED_reset_pulse+0x118>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	4b12      	ldr	r3, [pc, #72]	; (800289c <LED_reset_pulse+0x118>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 0208 	bic.w	r2, r2, #8
 8002858:	601a      	str	r2, [r3, #0]

  // Enable Complete Transfer Interrupt
  __HAL_DMA_ENABLE_IT(&hdma_tim2_ch1, DMA_IT_TC);
 800285a:	4b10      	ldr	r3, [pc, #64]	; (800289c <LED_reset_pulse+0x118>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	4b0e      	ldr	r3, [pc, #56]	; (800289c <LED_reset_pulse+0x118>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f042 0210 	orr.w	r2, r2, #16
 8002868:	601a      	str	r2, [r3, #0]

  // Start Reset Pulse. Contains 40 low pulses: 40 x 800kHz = ~50us
  if (HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*)tmp_led_data, 2 * LED_CFG_RAW_BITS_PER_LED) != HAL_OK){
 800286a:	2330      	movs	r3, #48	; 0x30
 800286c:	4a0c      	ldr	r2, [pc, #48]	; (80028a0 <LED_reset_pulse+0x11c>)
 800286e:	2100      	movs	r1, #0
 8002870:	4811      	ldr	r0, [pc, #68]	; (80028b8 <LED_reset_pulse+0x134>)
 8002872:	f7fe ffb9 	bl	80017e8 <HAL_TIM_PWM_Start_DMA>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d002      	beq.n	8002882 <LED_reset_pulse+0xfe>
    Error_Handler(EN_PWM_ERROR);
 800287c:	2002      	movs	r0, #2
 800287e:	f7ff fde7 	bl	8002450 <Error_Handler>
  }
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8002882:	2201      	movs	r2, #1
 8002884:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002888:	480c      	ldr	r0, [pc, #48]	; (80028bc <LED_reset_pulse+0x138>)
 800288a:	f7fe fb39 	bl	8000f00 <HAL_GPIO_WritePin>
  return 1;
 800288e:	2301      	movs	r3, #1
}
 8002890:	4618      	mov	r0, r3
 8002892:	3708      	adds	r7, #8
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	2000002c 	.word	0x2000002c
 800289c:	20000030 	.word	0x20000030
 80028a0:	20000164 	.word	0x20000164
 80028a4:	40026458 	.word	0x40026458
 80028a8:	40026400 	.word	0x40026400
 80028ac:	400260b8 	.word	0x400260b8
 80028b0:	40026058 	.word	0x40026058
 80028b4:	40026000 	.word	0x40026000
 80028b8:	200000e4 	.word	0x200000e4
 80028bc:	40020400 	.word	0x40020400

080028c0 <led_is_update_finished>:

// return 1 if not updating, 0 if updating process is in progress
uint8_t led_is_update_finished(void) {
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
	return !update_flag;
 80028c4:	4b06      	ldr	r3, [pc, #24]	; (80028e0 <led_is_update_finished+0x20>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	bf0c      	ite	eq
 80028ce:	2301      	moveq	r3, #1
 80028d0:	2300      	movne	r3, #0
 80028d2:	b2db      	uxtb	r3, r3
	//return !is_updating;                        /* Return updating flag status */
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	20000090 	.word	0x20000090

080028e4 <LED_update>:

// Block = 1 if want to wait until update process is finished
uint8_t LED_update(uint8_t block){
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	71fb      	strb	r3, [r7, #7]
	if (update_flag) {
 80028ee:	4b0d      	ldr	r3, [pc, #52]	; (8002924 <LED_update+0x40>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <LED_update+0x18>
		return 0;
 80028f8:	2300      	movs	r3, #0
 80028fa:	e00f      	b.n	800291c <LED_update+0x38>
	}
	update_flag = 1;		// Signify that LEDs are being updated
 80028fc:	4b09      	ldr	r3, [pc, #36]	; (8002924 <LED_update+0x40>)
 80028fe:	2201      	movs	r2, #1
 8002900:	701a      	strb	r2, [r3, #0]

	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
	LED_reset_pulse(RESET_AT_START);	// Reset LED scheme with 50us pulse low
 8002902:	2001      	movs	r0, #1
 8002904:	f7ff ff3e 	bl	8002784 <LED_reset_pulse>

	if (block){
 8002908:	79fb      	ldrb	r3, [r7, #7]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d005      	beq.n	800291a <LED_update+0x36>
		while(!led_is_update_finished());
 800290e:	bf00      	nop
 8002910:	f7ff ffd6 	bl	80028c0 <led_is_update_finished>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0fa      	beq.n	8002910 <LED_update+0x2c>
	}

	return 1;
 800291a:	2301      	movs	r3, #1
}
 800291c:	4618      	mov	r0, r3
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	20000090 	.word	0x20000090

08002928 <led_update_sequence>:

// Update led sequence. Called on TC and HT events.
// At HT event, first 24 elements are transferred
// At TC event, second 24 elements are transferred
void led_update_sequence(uint8_t event) {
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	4603      	mov	r3, r0
 8002930:	71fb      	strb	r3, [r7, #7]

	event = !!event;       // Toggle transfer-complete flag
 8002932:	79fb      	ldrb	r3, [r7, #7]
 8002934:	2b00      	cmp	r3, #0
 8002936:	bf14      	ite	ne
 8002938:	2301      	movne	r3, #1
 800293a:	2300      	moveq	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	71fb      	strb	r3, [r7, #7]

	// Check for reset pulse at the end of the PWM stream
	if (rst_flag == RESET_AT_END){
 8002940:	4b72      	ldr	r3, [pc, #456]	; (8002b0c <led_update_sequence+0x1e4>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	2b02      	cmp	r3, #2
 8002946:	d10d      	bne.n	8002964 <led_update_sequence+0x3c>

		HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);	// Stop DMA
 8002948:	2100      	movs	r1, #0
 800294a:	4871      	ldr	r0, [pc, #452]	; (8002b10 <led_update_sequence+0x1e8>)
 800294c:	f7ff f852 	bl	80019f4 <HAL_TIM_PWM_Stop_DMA>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8002950:	2200      	movs	r2, #0
 8002952:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002956:	486f      	ldr	r0, [pc, #444]	; (8002b14 <led_update_sequence+0x1ec>)
 8002958:	f7fe fad2 	bl	8000f00 <HAL_GPIO_WritePin>

		update_flag = NOT_UPDATING;										// No longer updating
 800295c:	4b6e      	ldr	r3, [pc, #440]	; (8002b18 <led_update_sequence+0x1f0>)
 800295e:	2200      	movs	r2, #0
 8002960:	701a      	strb	r2, [r3, #0]
		return;
 8002962:	e0cf      	b.n	8002b04 <led_update_sequence+0x1dc>
	}

	// Check if reset pulse happened at the start of the PWM stream
	if (rst_flag == RESET_AT_START){
 8002964:	4b69      	ldr	r3, [pc, #420]	; (8002b0c <led_update_sequence+0x1e4>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d114      	bne.n	8002996 <led_update_sequence+0x6e>
		if (!event) { return; }		// If HT event, return and wait until TC event
 800296c:	79fb      	ldrb	r3, [r7, #7]
 800296e:	2b00      	cmp	r3, #0
 8002970:	f000 80c7 	beq.w	8002b02 <led_update_sequence+0x1da>

		HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);	// Disable PWM generation to update LED sequence
 8002974:	2100      	movs	r1, #0
 8002976:	4866      	ldr	r0, [pc, #408]	; (8002b10 <led_update_sequence+0x1e8>)
 8002978:	f7ff f83c 	bl	80019f4 <HAL_TIM_PWM_Stop_DMA>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800297c:	2200      	movs	r2, #0
 800297e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002982:	4864      	ldr	r0, [pc, #400]	; (8002b14 <led_update_sequence+0x1ec>)
 8002984:	f7fe fabc 	bl	8000f00 <HAL_GPIO_WritePin>

		rst_flag = NOT_RESETTING;											// No longer resetting
 8002988:	4b60      	ldr	r3, [pc, #384]	; (8002b0c <led_update_sequence+0x1e4>)
 800298a:	2200      	movs	r2, #0
 800298c:	701a      	strb	r2, [r3, #0]

		current_led = 0;
 800298e:	4b63      	ldr	r3, [pc, #396]	; (8002b1c <led_update_sequence+0x1f4>)
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	e004      	b.n	80029a0 <led_update_sequence+0x78>
	} else {

	// Not resetting, move to next LED and process data
		current_led++;	// Move to next LED
 8002996:	4b61      	ldr	r3, [pc, #388]	; (8002b1c <led_update_sequence+0x1f4>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	3301      	adds	r3, #1
 800299c:	4a5f      	ldr	r2, [pc, #380]	; (8002b1c <led_update_sequence+0x1f4>)
 800299e:	6013      	str	r3, [r2, #0]
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
	}

	// Prepare data for the next LED
	if (current_led < LED_CFG_STRIP_CNT){
 80029a0:	4b5e      	ldr	r3, [pc, #376]	; (8002b1c <led_update_sequence+0x1f4>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2b04      	cmp	r3, #4
 80029a6:	f200 809b 	bhi.w	8002ae0 <led_update_sequence+0x1b8>

		// 1. Write PWM signal for first LED (current_led = 0) into first-half of DMA buffer
		// 2. Write PWM signal for second LED (current_led = 1) into second-half of DMA buffer
		// 3. Set DMA to circular, clear interrupt flags and start DMA PWM generation
		// 4. Write PWM signal for third and beyond LEDs (current_led >= 2)
		if ((current_led == 0) || !event) {
 80029aa:	4b5c      	ldr	r3, [pc, #368]	; (8002b1c <led_update_sequence+0x1f4>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d002      	beq.n	80029b8 <led_update_sequence+0x90>
 80029b2:	79fb      	ldrb	r3, [r7, #7]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d106      	bne.n	80029c6 <led_update_sequence+0x9e>
			write_PWM_data(current_led, &tmp_led_data[0]);	// Step 1
 80029b8:	4b58      	ldr	r3, [pc, #352]	; (8002b1c <led_update_sequence+0x1f4>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4958      	ldr	r1, [pc, #352]	; (8002b20 <led_update_sequence+0x1f8>)
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff fe74 	bl	80026ac <write_PWM_data>
 80029c4:	e005      	b.n	80029d2 <led_update_sequence+0xaa>
		} else {
			write_PWM_data(current_led, &tmp_led_data[LED_CFG_RAW_BITS_PER_LED]);	// Step 4
 80029c6:	4b55      	ldr	r3, [pc, #340]	; (8002b1c <led_update_sequence+0x1f4>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4956      	ldr	r1, [pc, #344]	; (8002b24 <led_update_sequence+0x1fc>)
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff fe6d 	bl	80026ac <write_PWM_data>
		}

		if (current_led == 0){
 80029d2:	4b52      	ldr	r3, [pc, #328]	; (8002b1c <led_update_sequence+0x1f4>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f040 8094 	bne.w	8002b04 <led_update_sequence+0x1dc>

			current_led++;
 80029dc:	4b4f      	ldr	r3, [pc, #316]	; (8002b1c <led_update_sequence+0x1f4>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	3301      	adds	r3, #1
 80029e2:	4a4e      	ldr	r2, [pc, #312]	; (8002b1c <led_update_sequence+0x1f4>)
 80029e4:	6013      	str	r3, [r2, #0]
			write_PWM_data(current_led, &tmp_led_data[LED_CFG_RAW_BITS_PER_LED]);	// Step 2
 80029e6:	4b4d      	ldr	r3, [pc, #308]	; (8002b1c <led_update_sequence+0x1f4>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	494e      	ldr	r1, [pc, #312]	; (8002b24 <led_update_sequence+0x1fc>)
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff fe5d 	bl	80026ac <write_PWM_data>

		  hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;										// Step 3
 80029f2:	4b4d      	ldr	r3, [pc, #308]	; (8002b28 <led_update_sequence+0x200>)
 80029f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029f8:	61da      	str	r2, [r3, #28]
		  // Initialize TIM2 DMA handle
		  if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK) {
 80029fa:	484b      	ldr	r0, [pc, #300]	; (8002b28 <led_update_sequence+0x200>)
 80029fc:	f7fd fef8 	bl	80007f0 <HAL_DMA_Init>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d002      	beq.n	8002a0c <led_update_sequence+0xe4>
		    Error_Handler(DMA_ERROR);
 8002a06:	2006      	movs	r0, #6
 8002a08:	f7ff fd22 	bl	8002450 <Error_Handler>
		  }

		  __HAL_DMA_CLEAR_FLAG(&hdma_tim2_ch1, DMA_FLAG_HTIF1_5);
 8002a0c:	4b46      	ldr	r3, [pc, #280]	; (8002b28 <led_update_sequence+0x200>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	461a      	mov	r2, r3
 8002a12:	4b46      	ldr	r3, [pc, #280]	; (8002b2c <led_update_sequence+0x204>)
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d904      	bls.n	8002a22 <led_update_sequence+0xfa>
 8002a18:	4b45      	ldr	r3, [pc, #276]	; (8002b30 <led_update_sequence+0x208>)
 8002a1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a1e:	60da      	str	r2, [r3, #12]
 8002a20:	e019      	b.n	8002a56 <led_update_sequence+0x12e>
 8002a22:	4b41      	ldr	r3, [pc, #260]	; (8002b28 <led_update_sequence+0x200>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	461a      	mov	r2, r3
 8002a28:	4b42      	ldr	r3, [pc, #264]	; (8002b34 <led_update_sequence+0x20c>)
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d904      	bls.n	8002a38 <led_update_sequence+0x110>
 8002a2e:	4b40      	ldr	r3, [pc, #256]	; (8002b30 <led_update_sequence+0x208>)
 8002a30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a34:	609a      	str	r2, [r3, #8]
 8002a36:	e00e      	b.n	8002a56 <led_update_sequence+0x12e>
 8002a38:	4b3b      	ldr	r3, [pc, #236]	; (8002b28 <led_update_sequence+0x200>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	4b3e      	ldr	r3, [pc, #248]	; (8002b38 <led_update_sequence+0x210>)
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d904      	bls.n	8002a4e <led_update_sequence+0x126>
 8002a44:	4b3d      	ldr	r3, [pc, #244]	; (8002b3c <led_update_sequence+0x214>)
 8002a46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a4a:	60da      	str	r2, [r3, #12]
 8002a4c:	e003      	b.n	8002a56 <led_update_sequence+0x12e>
 8002a4e:	4b3b      	ldr	r3, [pc, #236]	; (8002b3c <led_update_sequence+0x214>)
 8002a50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a54:	609a      	str	r2, [r3, #8]
		  __HAL_DMA_CLEAR_FLAG(&hdma_tim2_ch1, DMA_FLAG_TCIF1_5);
 8002a56:	4b34      	ldr	r3, [pc, #208]	; (8002b28 <led_update_sequence+0x200>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	4b33      	ldr	r3, [pc, #204]	; (8002b2c <led_update_sequence+0x204>)
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d904      	bls.n	8002a6c <led_update_sequence+0x144>
 8002a62:	4b33      	ldr	r3, [pc, #204]	; (8002b30 <led_update_sequence+0x208>)
 8002a64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a68:	60da      	str	r2, [r3, #12]
 8002a6a:	e019      	b.n	8002aa0 <led_update_sequence+0x178>
 8002a6c:	4b2e      	ldr	r3, [pc, #184]	; (8002b28 <led_update_sequence+0x200>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	461a      	mov	r2, r3
 8002a72:	4b30      	ldr	r3, [pc, #192]	; (8002b34 <led_update_sequence+0x20c>)
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d904      	bls.n	8002a82 <led_update_sequence+0x15a>
 8002a78:	4b2d      	ldr	r3, [pc, #180]	; (8002b30 <led_update_sequence+0x208>)
 8002a7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a7e:	609a      	str	r2, [r3, #8]
 8002a80:	e00e      	b.n	8002aa0 <led_update_sequence+0x178>
 8002a82:	4b29      	ldr	r3, [pc, #164]	; (8002b28 <led_update_sequence+0x200>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	461a      	mov	r2, r3
 8002a88:	4b2b      	ldr	r3, [pc, #172]	; (8002b38 <led_update_sequence+0x210>)
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d904      	bls.n	8002a98 <led_update_sequence+0x170>
 8002a8e:	4b2b      	ldr	r3, [pc, #172]	; (8002b3c <led_update_sequence+0x214>)
 8002a90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a94:	60da      	str	r2, [r3, #12]
 8002a96:	e003      	b.n	8002aa0 <led_update_sequence+0x178>
 8002a98:	4b28      	ldr	r3, [pc, #160]	; (8002b3c <led_update_sequence+0x214>)
 8002a9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a9e:	609a      	str	r2, [r3, #8]

		  __HAL_DMA_ENABLE_IT(&hdma_tim2_ch1, DMA_IT_HT);	// Enable interrupt for half-transfer event
 8002aa0:	4b21      	ldr	r3, [pc, #132]	; (8002b28 <led_update_sequence+0x200>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	4b20      	ldr	r3, [pc, #128]	; (8002b28 <led_update_sequence+0x200>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f042 0208 	orr.w	r2, r2, #8
 8002aae:	601a      	str	r2, [r3, #0]

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	4817      	ldr	r0, [pc, #92]	; (8002b14 <led_update_sequence+0x1ec>)
 8002ab6:	f7fe fa23 	bl	8000f00 <HAL_GPIO_WritePin>
		  // Start PWM generation
		  if (HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*)tmp_led_data, 2 * LED_CFG_RAW_BITS_PER_LED) != HAL_OK){
 8002aba:	2330      	movs	r3, #48	; 0x30
 8002abc:	4a18      	ldr	r2, [pc, #96]	; (8002b20 <led_update_sequence+0x1f8>)
 8002abe:	2100      	movs	r1, #0
 8002ac0:	4813      	ldr	r0, [pc, #76]	; (8002b10 <led_update_sequence+0x1e8>)
 8002ac2:	f7fe fe91 	bl	80017e8 <HAL_TIM_PWM_Start_DMA>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d002      	beq.n	8002ad2 <led_update_sequence+0x1aa>
		    Error_Handler(EN_PWM_ERROR);
 8002acc:	2002      	movs	r0, #2
 8002ace:	f7ff fcbf 	bl	8002450 <Error_Handler>
		  }
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ad8:	480e      	ldr	r0, [pc, #56]	; (8002b14 <led_update_sequence+0x1ec>)
 8002ada:	f7fe fa11 	bl	8000f00 <HAL_GPIO_WritePin>
 8002ade:	e011      	b.n	8002b04 <led_update_sequence+0x1dc>
		}

	// When all LEDs have been lit up, wait for all data to be transmitted before modifying DMA
	// !TC && (LED_CFG_STRIP_CNT & 0x01): Half-Transfer event occurred and even-numbered LED
	// TC && !(LED_CFG_STRIP_CNT & 0x01): Transfer-Complete event occured and odd-numbered LED
	} else if ((!event && (LED_CFG_STRIP_CNT & 0x01)) || (event && !(LED_CFG_STRIP_CNT & 0x01))) {
 8002ae0:	79fb      	ldrb	r3, [r7, #7]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10e      	bne.n	8002b04 <led_update_sequence+0x1dc>
		HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	4809      	ldr	r0, [pc, #36]	; (8002b10 <led_update_sequence+0x1e8>)
 8002aea:	f7fe ff83 	bl	80019f4 <HAL_TIM_PWM_Stop_DMA>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8002aee:	2200      	movs	r2, #0
 8002af0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002af4:	4807      	ldr	r0, [pc, #28]	; (8002b14 <led_update_sequence+0x1ec>)
 8002af6:	f7fe fa03 	bl	8000f00 <HAL_GPIO_WritePin>
		LED_reset_pulse(RESET_AT_END);
 8002afa:	2002      	movs	r0, #2
 8002afc:	f7ff fe42 	bl	8002784 <LED_reset_pulse>
 8002b00:	e000      	b.n	8002b04 <led_update_sequence+0x1dc>
		if (!event) { return; }		// If HT event, return and wait until TC event
 8002b02:	bf00      	nop
	}

}
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	2000002c 	.word	0x2000002c
 8002b10:	200000e4 	.word	0x200000e4
 8002b14:	40020400 	.word	0x40020400
 8002b18:	20000090 	.word	0x20000090
 8002b1c:	200000c4 	.word	0x200000c4
 8002b20:	20000164 	.word	0x20000164
 8002b24:	200001c4 	.word	0x200001c4
 8002b28:	20000030 	.word	0x20000030
 8002b2c:	40026458 	.word	0x40026458
 8002b30:	40026400 	.word	0x40026400
 8002b34:	400260b8 	.word	0x400260b8
 8002b38:	40026058 	.word	0x40026058
 8002b3c:	40026000 	.word	0x40026000

08002b40 <DMA1_Stream5_IRQHandler>:


// DMA1 Stream 5 Global Interrupt
void DMA1_Stream5_IRQHandler(void){
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
	// Check for Half-Transfer (HT) event
	if (__HAL_DMA_GET_FLAG(&hdma_tim2_ch1, DMA_FLAG_HTIF1_5)){
 8002b44:	4b6a      	ldr	r3, [pc, #424]	; (8002cf0 <DMA1_Stream5_IRQHandler+0x1b0>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	461a      	mov	r2, r3
 8002b4a:	4b6a      	ldr	r3, [pc, #424]	; (8002cf4 <DMA1_Stream5_IRQHandler+0x1b4>)
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d909      	bls.n	8002b64 <DMA1_Stream5_IRQHandler+0x24>
 8002b50:	4b69      	ldr	r3, [pc, #420]	; (8002cf8 <DMA1_Stream5_IRQHandler+0x1b8>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	bf14      	ite	ne
 8002b5c:	2301      	movne	r3, #1
 8002b5e:	2300      	moveq	r3, #0
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	e028      	b.n	8002bb6 <DMA1_Stream5_IRQHandler+0x76>
 8002b64:	4b62      	ldr	r3, [pc, #392]	; (8002cf0 <DMA1_Stream5_IRQHandler+0x1b0>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	4b64      	ldr	r3, [pc, #400]	; (8002cfc <DMA1_Stream5_IRQHandler+0x1bc>)
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d909      	bls.n	8002b84 <DMA1_Stream5_IRQHandler+0x44>
 8002b70:	4b61      	ldr	r3, [pc, #388]	; (8002cf8 <DMA1_Stream5_IRQHandler+0x1b8>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	bf14      	ite	ne
 8002b7c:	2301      	movne	r3, #1
 8002b7e:	2300      	moveq	r3, #0
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	e018      	b.n	8002bb6 <DMA1_Stream5_IRQHandler+0x76>
 8002b84:	4b5a      	ldr	r3, [pc, #360]	; (8002cf0 <DMA1_Stream5_IRQHandler+0x1b0>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	461a      	mov	r2, r3
 8002b8a:	4b5d      	ldr	r3, [pc, #372]	; (8002d00 <DMA1_Stream5_IRQHandler+0x1c0>)
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d909      	bls.n	8002ba4 <DMA1_Stream5_IRQHandler+0x64>
 8002b90:	4b5c      	ldr	r3, [pc, #368]	; (8002d04 <DMA1_Stream5_IRQHandler+0x1c4>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	bf14      	ite	ne
 8002b9c:	2301      	movne	r3, #1
 8002b9e:	2300      	moveq	r3, #0
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	e008      	b.n	8002bb6 <DMA1_Stream5_IRQHandler+0x76>
 8002ba4:	4b57      	ldr	r3, [pc, #348]	; (8002d04 <DMA1_Stream5_IRQHandler+0x1c4>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	bf14      	ite	ne
 8002bb0:	2301      	movne	r3, #1
 8002bb2:	2300      	moveq	r3, #0
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d02e      	beq.n	8002c18 <DMA1_Stream5_IRQHandler+0xd8>
	  __HAL_DMA_CLEAR_FLAG(&hdma_tim2_ch1, DMA_FLAG_HTIF1_5);
 8002bba:	4b4d      	ldr	r3, [pc, #308]	; (8002cf0 <DMA1_Stream5_IRQHandler+0x1b0>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	4b4c      	ldr	r3, [pc, #304]	; (8002cf4 <DMA1_Stream5_IRQHandler+0x1b4>)
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d904      	bls.n	8002bd0 <DMA1_Stream5_IRQHandler+0x90>
 8002bc6:	4b4c      	ldr	r3, [pc, #304]	; (8002cf8 <DMA1_Stream5_IRQHandler+0x1b8>)
 8002bc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bcc:	60da      	str	r2, [r3, #12]
 8002bce:	e019      	b.n	8002c04 <DMA1_Stream5_IRQHandler+0xc4>
 8002bd0:	4b47      	ldr	r3, [pc, #284]	; (8002cf0 <DMA1_Stream5_IRQHandler+0x1b0>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	4b49      	ldr	r3, [pc, #292]	; (8002cfc <DMA1_Stream5_IRQHandler+0x1bc>)
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d904      	bls.n	8002be6 <DMA1_Stream5_IRQHandler+0xa6>
 8002bdc:	4b46      	ldr	r3, [pc, #280]	; (8002cf8 <DMA1_Stream5_IRQHandler+0x1b8>)
 8002bde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002be2:	609a      	str	r2, [r3, #8]
 8002be4:	e00e      	b.n	8002c04 <DMA1_Stream5_IRQHandler+0xc4>
 8002be6:	4b42      	ldr	r3, [pc, #264]	; (8002cf0 <DMA1_Stream5_IRQHandler+0x1b0>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	461a      	mov	r2, r3
 8002bec:	4b44      	ldr	r3, [pc, #272]	; (8002d00 <DMA1_Stream5_IRQHandler+0x1c0>)
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d904      	bls.n	8002bfc <DMA1_Stream5_IRQHandler+0xbc>
 8002bf2:	4b44      	ldr	r3, [pc, #272]	; (8002d04 <DMA1_Stream5_IRQHandler+0x1c4>)
 8002bf4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bf8:	60da      	str	r2, [r3, #12]
 8002bfa:	e003      	b.n	8002c04 <DMA1_Stream5_IRQHandler+0xc4>
 8002bfc:	4b41      	ldr	r3, [pc, #260]	; (8002d04 <DMA1_Stream5_IRQHandler+0x1c4>)
 8002bfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c02:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002c04:	2201      	movs	r2, #1
 8002c06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c0a:	483f      	ldr	r0, [pc, #252]	; (8002d08 <DMA1_Stream5_IRQHandler+0x1c8>)
 8002c0c:	f7fe f978 	bl	8000f00 <HAL_GPIO_WritePin>
	  led_update_sequence(HT_EVENT);
 8002c10:	2000      	movs	r0, #0
 8002c12:	f7ff fe89 	bl	8002928 <led_update_sequence>
	} else if (__HAL_DMA_GET_FLAG(&hdma_tim2_ch1, DMA_FLAG_TCIF1_5)) {
	  __HAL_DMA_CLEAR_FLAG(&hdma_tim2_ch1, DMA_FLAG_TCIF1_5);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
	  led_update_sequence(TC_EVENT);
	}
}
 8002c16:	e068      	b.n	8002cea <DMA1_Stream5_IRQHandler+0x1aa>
	} else if (__HAL_DMA_GET_FLAG(&hdma_tim2_ch1, DMA_FLAG_TCIF1_5)) {
 8002c18:	4b35      	ldr	r3, [pc, #212]	; (8002cf0 <DMA1_Stream5_IRQHandler+0x1b0>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4b35      	ldr	r3, [pc, #212]	; (8002cf4 <DMA1_Stream5_IRQHandler+0x1b4>)
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d909      	bls.n	8002c38 <DMA1_Stream5_IRQHandler+0xf8>
 8002c24:	4b34      	ldr	r3, [pc, #208]	; (8002cf8 <DMA1_Stream5_IRQHandler+0x1b8>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	bf14      	ite	ne
 8002c30:	2301      	movne	r3, #1
 8002c32:	2300      	moveq	r3, #0
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	e028      	b.n	8002c8a <DMA1_Stream5_IRQHandler+0x14a>
 8002c38:	4b2d      	ldr	r3, [pc, #180]	; (8002cf0 <DMA1_Stream5_IRQHandler+0x1b0>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	4b2f      	ldr	r3, [pc, #188]	; (8002cfc <DMA1_Stream5_IRQHandler+0x1bc>)
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d909      	bls.n	8002c58 <DMA1_Stream5_IRQHandler+0x118>
 8002c44:	4b2c      	ldr	r3, [pc, #176]	; (8002cf8 <DMA1_Stream5_IRQHandler+0x1b8>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	bf14      	ite	ne
 8002c50:	2301      	movne	r3, #1
 8002c52:	2300      	moveq	r3, #0
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	e018      	b.n	8002c8a <DMA1_Stream5_IRQHandler+0x14a>
 8002c58:	4b25      	ldr	r3, [pc, #148]	; (8002cf0 <DMA1_Stream5_IRQHandler+0x1b0>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	4b28      	ldr	r3, [pc, #160]	; (8002d00 <DMA1_Stream5_IRQHandler+0x1c0>)
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d909      	bls.n	8002c78 <DMA1_Stream5_IRQHandler+0x138>
 8002c64:	4b27      	ldr	r3, [pc, #156]	; (8002d04 <DMA1_Stream5_IRQHandler+0x1c4>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	bf14      	ite	ne
 8002c70:	2301      	movne	r3, #1
 8002c72:	2300      	moveq	r3, #0
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	e008      	b.n	8002c8a <DMA1_Stream5_IRQHandler+0x14a>
 8002c78:	4b22      	ldr	r3, [pc, #136]	; (8002d04 <DMA1_Stream5_IRQHandler+0x1c4>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	bf14      	ite	ne
 8002c84:	2301      	movne	r3, #1
 8002c86:	2300      	moveq	r3, #0
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d02d      	beq.n	8002cea <DMA1_Stream5_IRQHandler+0x1aa>
	  __HAL_DMA_CLEAR_FLAG(&hdma_tim2_ch1, DMA_FLAG_TCIF1_5);
 8002c8e:	4b18      	ldr	r3, [pc, #96]	; (8002cf0 <DMA1_Stream5_IRQHandler+0x1b0>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	461a      	mov	r2, r3
 8002c94:	4b17      	ldr	r3, [pc, #92]	; (8002cf4 <DMA1_Stream5_IRQHandler+0x1b4>)
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d904      	bls.n	8002ca4 <DMA1_Stream5_IRQHandler+0x164>
 8002c9a:	4b17      	ldr	r3, [pc, #92]	; (8002cf8 <DMA1_Stream5_IRQHandler+0x1b8>)
 8002c9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ca0:	60da      	str	r2, [r3, #12]
 8002ca2:	e019      	b.n	8002cd8 <DMA1_Stream5_IRQHandler+0x198>
 8002ca4:	4b12      	ldr	r3, [pc, #72]	; (8002cf0 <DMA1_Stream5_IRQHandler+0x1b0>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	461a      	mov	r2, r3
 8002caa:	4b14      	ldr	r3, [pc, #80]	; (8002cfc <DMA1_Stream5_IRQHandler+0x1bc>)
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d904      	bls.n	8002cba <DMA1_Stream5_IRQHandler+0x17a>
 8002cb0:	4b11      	ldr	r3, [pc, #68]	; (8002cf8 <DMA1_Stream5_IRQHandler+0x1b8>)
 8002cb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cb6:	609a      	str	r2, [r3, #8]
 8002cb8:	e00e      	b.n	8002cd8 <DMA1_Stream5_IRQHandler+0x198>
 8002cba:	4b0d      	ldr	r3, [pc, #52]	; (8002cf0 <DMA1_Stream5_IRQHandler+0x1b0>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <DMA1_Stream5_IRQHandler+0x1c0>)
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d904      	bls.n	8002cd0 <DMA1_Stream5_IRQHandler+0x190>
 8002cc6:	4b0f      	ldr	r3, [pc, #60]	; (8002d04 <DMA1_Stream5_IRQHandler+0x1c4>)
 8002cc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ccc:	60da      	str	r2, [r3, #12]
 8002cce:	e003      	b.n	8002cd8 <DMA1_Stream5_IRQHandler+0x198>
 8002cd0:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <DMA1_Stream5_IRQHandler+0x1c4>)
 8002cd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cd6:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cde:	480a      	ldr	r0, [pc, #40]	; (8002d08 <DMA1_Stream5_IRQHandler+0x1c8>)
 8002ce0:	f7fe f90e 	bl	8000f00 <HAL_GPIO_WritePin>
	  led_update_sequence(TC_EVENT);
 8002ce4:	2001      	movs	r0, #1
 8002ce6:	f7ff fe1f 	bl	8002928 <led_update_sequence>
}
 8002cea:	bf00      	nop
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	20000030 	.word	0x20000030
 8002cf4:	40026458 	.word	0x40026458
 8002cf8:	40026400 	.word	0x40026400
 8002cfc:	400260b8 	.word	0x400260b8
 8002d00:	40026058 	.word	0x40026058
 8002d04:	40026000 	.word	0x40026000
 8002d08:	40020000 	.word	0x40020000

08002d0c <LED_Init>:


void LED_Init(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
  /* ------------- */
  /*  GPIO Config  */
  /* ------------- */

  // Configure TIM2_Channel 1 (PA0) as output, push-pull and alternate function mode
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d12:	4b77      	ldr	r3, [pc, #476]	; (8002ef0 <LED_Init+0x1e4>)
 8002d14:	2201      	movs	r2, #1
 8002d16:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d18:	4b75      	ldr	r3, [pc, #468]	; (8002ef0 <LED_Init+0x1e4>)
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1e:	4b74      	ldr	r3, [pc, #464]	; (8002ef0 <LED_Init+0x1e4>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d24:	4b72      	ldr	r3, [pc, #456]	; (8002ef0 <LED_Init+0x1e4>)
 8002d26:	2203      	movs	r2, #3
 8002d28:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d2a:	4b71      	ldr	r3, [pc, #452]	; (8002ef0 <LED_Init+0x1e4>)
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d30:	496f      	ldr	r1, [pc, #444]	; (8002ef0 <LED_Init+0x1e4>)
 8002d32:	4870      	ldr	r0, [pc, #448]	; (8002ef4 <LED_Init+0x1e8>)
 8002d34:	f7fd ff62 	bl	8000bfc <HAL_GPIO_Init>

  // Configure GPIO pin: PA8, debugging for DMA IRQ
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d3e:	486d      	ldr	r0, [pc, #436]	; (8002ef4 <LED_Init+0x1e8>)
 8002d40:	f7fe f8de 	bl	8000f00 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002d44:	4b6a      	ldr	r3, [pc, #424]	; (8002ef0 <LED_Init+0x1e4>)
 8002d46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d4a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d4c:	4b68      	ldr	r3, [pc, #416]	; (8002ef0 <LED_Init+0x1e4>)
 8002d4e:	2201      	movs	r2, #1
 8002d50:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d52:	4b67      	ldr	r3, [pc, #412]	; (8002ef0 <LED_Init+0x1e4>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d58:	4965      	ldr	r1, [pc, #404]	; (8002ef0 <LED_Init+0x1e4>)
 8002d5a:	4866      	ldr	r0, [pc, #408]	; (8002ef4 <LED_Init+0x1e8>)
 8002d5c:	f7fd ff4e 	bl	8000bfc <HAL_GPIO_Init>

  // Configure GPIO pin: PB0, PB10, debugging for is_updating flag
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8002d60:	2200      	movs	r2, #0
 8002d62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d66:	4864      	ldr	r0, [pc, #400]	; (8002ef8 <LED_Init+0x1ec>)
 8002d68:	f7fe f8ca 	bl	8000f00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	2101      	movs	r1, #1
 8002d70:	4861      	ldr	r0, [pc, #388]	; (8002ef8 <LED_Init+0x1ec>)
 8002d72:	f7fe f8c5 	bl	8000f00 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_0;
 8002d76:	4b5e      	ldr	r3, [pc, #376]	; (8002ef0 <LED_Init+0x1e4>)
 8002d78:	f240 4201 	movw	r2, #1025	; 0x401
 8002d7c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d7e:	4b5c      	ldr	r3, [pc, #368]	; (8002ef0 <LED_Init+0x1e4>)
 8002d80:	2201      	movs	r2, #1
 8002d82:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d84:	4b5a      	ldr	r3, [pc, #360]	; (8002ef0 <LED_Init+0x1e4>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d8a:	4959      	ldr	r1, [pc, #356]	; (8002ef0 <LED_Init+0x1e4>)
 8002d8c:	485a      	ldr	r0, [pc, #360]	; (8002ef8 <LED_Init+0x1ec>)
 8002d8e:	f7fd ff35 	bl	8000bfc <HAL_GPIO_Init>
  /* -------------- */
  /* TIM2 Channel 1 */
  /* -------------- */

  // Enable TIM2 clock
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002d92:	2300      	movs	r3, #0
 8002d94:	607b      	str	r3, [r7, #4]
 8002d96:	4b59      	ldr	r3, [pc, #356]	; (8002efc <LED_Init+0x1f0>)
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	4a58      	ldr	r2, [pc, #352]	; (8002efc <LED_Init+0x1f0>)
 8002d9c:	f043 0301 	orr.w	r3, r3, #1
 8002da0:	6413      	str	r3, [r2, #64]	; 0x40
 8002da2:	4b56      	ldr	r3, [pc, #344]	; (8002efc <LED_Init+0x1f0>)
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	607b      	str	r3, [r7, #4]
 8002dac:	687b      	ldr	r3, [r7, #4]

  // TIM Time Base handle Structure definition
  // Period = TIM2_counter_clk / PWM_freq - 1
  // Period = 84MHz / 800kHz - 1 = 104
  htim2.Instance               = TIM2;
 8002dae:	4b54      	ldr	r3, [pc, #336]	; (8002f00 <LED_Init+0x1f4>)
 8002db0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002db4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler         = 0;										// Set to 0 to acheive max frequency for timer at 84MHz
 8002db6:	4b52      	ldr	r3, [pc, #328]	; (8002f00 <LED_Init+0x1f4>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8002dbc:	4b50      	ldr	r3, [pc, #320]	; (8002f00 <LED_Init+0x1f4>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period            = TIM_PERIOD;
 8002dc2:	4b4f      	ldr	r3, [pc, #316]	; (8002f00 <LED_Init+0x1f4>)
 8002dc4:	2268      	movs	r2, #104	; 0x68
 8002dc6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 8002dc8:	4b4d      	ldr	r3, [pc, #308]	; (8002f00 <LED_Init+0x1f4>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;	//TIM_AUTORELOAD_PRELOAD_DISABLE
 8002dce:	4b4c      	ldr	r3, [pc, #304]	; (8002f00 <LED_Init+0x1f4>)
 8002dd0:	2280      	movs	r2, #128	; 0x80
 8002dd2:	619a      	str	r2, [r3, #24]

  // TIM2 interrupt Init
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	201c      	movs	r0, #28
 8002dda:	f7fd fcd2 	bl	8000782 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002dde:	201c      	movs	r0, #28
 8002de0:	f7fd fceb 	bl	80007ba <HAL_NVIC_EnableIRQ>

  // Note: HAL_TIM_PWM_Init() calls HAL_TIM_PWM_MspInit()
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8002de4:	4846      	ldr	r0, [pc, #280]	; (8002f00 <LED_Init+0x1f4>)
 8002de6:	f7fe fcd3 	bl	8001790 <HAL_TIM_PWM_Init>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d002      	beq.n	8002df6 <LED_Init+0xea>
    Error_Handler(TIM_INIT_ERROR);     // Initialization Error
 8002df0:	2004      	movs	r0, #4
 8002df2:	f7ff fb2d 	bl	8002450 <Error_Handler>
  }

  // Set TIM Output Compare (OC) Configuration Structure definition
  sConfigOC.OCMode       = TIM_OCMODE_PWM1;
 8002df6:	4b43      	ldr	r3, [pc, #268]	; (8002f04 <LED_Init+0x1f8>)
 8002df8:	2260      	movs	r2, #96	; 0x60
 8002dfa:	601a      	str	r2, [r3, #0]
  sConfigOC.OCPolarity   = TIM_OCPOLARITY_HIGH;
 8002dfc:	4b41      	ldr	r3, [pc, #260]	; (8002f04 <LED_Init+0x1f8>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	609a      	str	r2, [r3, #8]
  sConfigOC.Pulse        = 0;
 8002e02:	4b40      	ldr	r3, [pc, #256]	; (8002f04 <LED_Init+0x1f8>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	605a      	str	r2, [r3, #4]
  sConfigOC.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 8002e08:	4b3e      	ldr	r3, [pc, #248]	; (8002f04 <LED_Init+0x1f8>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode   = TIM_OCFAST_DISABLE;
 8002e0e:	4b3d      	ldr	r3, [pc, #244]	; (8002f04 <LED_Init+0x1f8>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState  = TIM_OCIDLESTATE_RESET;
 8002e14:	4b3b      	ldr	r3, [pc, #236]	; (8002f04 <LED_Init+0x1f8>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e1a:	4b3a      	ldr	r3, [pc, #232]	; (8002f04 <LED_Init+0x1f8>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	619a      	str	r2, [r3, #24]

  // Apply TIM OC configs to htim2 (TIM2)
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8002e20:	2200      	movs	r2, #0
 8002e22:	4938      	ldr	r1, [pc, #224]	; (8002f04 <LED_Init+0x1f8>)
 8002e24:	4836      	ldr	r0, [pc, #216]	; (8002f00 <LED_Init+0x1f4>)
 8002e26:	f7fe fe8b 	bl	8001b40 <HAL_TIM_PWM_ConfigChannel>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d002      	beq.n	8002e36 <LED_Init+0x12a>
    Error_Handler(TIM_CONFIG_ERROR); // Configuration Error
 8002e30:	2003      	movs	r0, #3
 8002e32:	f7ff fb0d 	bl	8002450 <Error_Handler>
  /* ------------------------------ */
  /* DMA1 Channel 3 Stream 5 Config */
  /* ------------------------------ */

  // Enable DMA1 clock
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002e36:	2300      	movs	r3, #0
 8002e38:	603b      	str	r3, [r7, #0]
 8002e3a:	4b30      	ldr	r3, [pc, #192]	; (8002efc <LED_Init+0x1f0>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	4a2f      	ldr	r2, [pc, #188]	; (8002efc <LED_Init+0x1f0>)
 8002e40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e44:	6313      	str	r3, [r2, #48]	; 0x30
 8002e46:	4b2d      	ldr	r3, [pc, #180]	; (8002efc <LED_Init+0x1f0>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e4e:	603b      	str	r3, [r7, #0]
 8002e50:	683b      	ldr	r3, [r7, #0]

	// DMA handle Structure definition (Based on RM0383 STM32F411 Ref Manual (Table 27) TIM2_CH1 corresponds to DMA1 Channel 3 Stream 5)
  hdma_tim2_ch1.Instance = DMA1_Stream5;
 8002e52:	4b2d      	ldr	r3, [pc, #180]	; (8002f08 <LED_Init+0x1fc>)
 8002e54:	4a2d      	ldr	r2, [pc, #180]	; (8002f0c <LED_Init+0x200>)
 8002e56:	601a      	str	r2, [r3, #0]
  hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8002e58:	4b2b      	ldr	r3, [pc, #172]	; (8002f08 <LED_Init+0x1fc>)
 8002e5a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002e5e:	605a      	str	r2, [r3, #4]
  hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;							// Memory to Peripheral mode
 8002e60:	4b29      	ldr	r3, [pc, #164]	; (8002f08 <LED_Init+0x1fc>)
 8002e62:	2240      	movs	r2, #64	; 0x40
 8002e64:	609a      	str	r2, [r3, #8]
  hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e66:	4b28      	ldr	r3, [pc, #160]	; (8002f08 <LED_Init+0x1fc>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	60da      	str	r2, [r3, #12]
  hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002e6c:	4b26      	ldr	r3, [pc, #152]	; (8002f08 <LED_Init+0x1fc>)
 8002e6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e72:	611a      	str	r2, [r3, #16]
  hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD ;
 8002e74:	4b24      	ldr	r3, [pc, #144]	; (8002f08 <LED_Init+0x1fc>)
 8002e76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e7a:	615a      	str	r2, [r3, #20]
  hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD ;
 8002e7c:	4b22      	ldr	r3, [pc, #136]	; (8002f08 <LED_Init+0x1fc>)
 8002e7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e82:	619a      	str	r2, [r3, #24]
  hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;														// Set in circular mode
 8002e84:	4b20      	ldr	r3, [pc, #128]	; (8002f08 <LED_Init+0x1fc>)
 8002e86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e8a:	61da      	str	r2, [r3, #28]
  hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;										// Low priority
 8002e8c:	4b1e      	ldr	r3, [pc, #120]	; (8002f08 <LED_Init+0x1fc>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	621a      	str	r2, [r3, #32]
  hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e92:	4b1d      	ldr	r3, [pc, #116]	; (8002f08 <LED_Init+0x1fc>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_tim2_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002e98:	4b1b      	ldr	r3, [pc, #108]	; (8002f08 <LED_Init+0x1fc>)
 8002e9a:	2203      	movs	r2, #3
 8002e9c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_tim2_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 8002e9e:	4b1a      	ldr	r3, [pc, #104]	; (8002f08 <LED_Init+0x1fc>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_tim2_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002ea4:	4b18      	ldr	r3, [pc, #96]	; (8002f08 <LED_Init+0x1fc>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	631a      	str	r2, [r3, #48]	; 0x30

  // Enable Half-Transfer and Full-Transfer complete interrupts
  __HAL_DMA_ENABLE_IT(&hdma_tim2_ch1, (DMA_IT_TC | DMA_IT_HT));
 8002eaa:	4b17      	ldr	r3, [pc, #92]	; (8002f08 <LED_Init+0x1fc>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	4b15      	ldr	r3, [pc, #84]	; (8002f08 <LED_Init+0x1fc>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f042 0218 	orr.w	r2, r2, #24
 8002eb8:	601a      	str	r2, [r3, #0]

  // Linking a PPP peripheral to DMA structure pointer (PPP = STM32 peripheral or block)
  // hdma[TIM_DMA_ID_CC1] = Capture/Compare 1 DMA requests peripheral
  // Link htim2 (TIM peripheral) to hdma_tim2_ch1 (DMA struc pointer) with TIM_DMA_ID_CC1
  __HAL_LINKDMA(&htim2, hdma[TIM_DMA_ID_CC1], hdma_tim2_ch1);
 8002eba:	4b11      	ldr	r3, [pc, #68]	; (8002f00 <LED_Init+0x1f4>)
 8002ebc:	4a12      	ldr	r2, [pc, #72]	; (8002f08 <LED_Init+0x1fc>)
 8002ebe:	625a      	str	r2, [r3, #36]	; 0x24
 8002ec0:	4b11      	ldr	r3, [pc, #68]	; (8002f08 <LED_Init+0x1fc>)
 8002ec2:	4a0f      	ldr	r2, [pc, #60]	; (8002f00 <LED_Init+0x1f4>)
 8002ec4:	639a      	str	r2, [r3, #56]	; 0x38

  // Initialize TIM2 DMA handle
  if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK) {
 8002ec6:	4810      	ldr	r0, [pc, #64]	; (8002f08 <LED_Init+0x1fc>)
 8002ec8:	f7fd fc92 	bl	80007f0 <HAL_DMA_Init>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d002      	beq.n	8002ed8 <LED_Init+0x1cc>
    Error_Handler(DMA_ERROR);
 8002ed2:	2006      	movs	r0, #6
 8002ed4:	f7ff fabc 	bl	8002450 <Error_Handler>
  }

  // ##-2- Configure the NVIC for DMA #########################################
  // NVIC configuration for DMA transfer complete interrupt
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002ed8:	2200      	movs	r2, #0
 8002eda:	2100      	movs	r1, #0
 8002edc:	2010      	movs	r0, #16
 8002ede:	f7fd fc50 	bl	8000782 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002ee2:	2010      	movs	r0, #16
 8002ee4:	f7fd fc69 	bl	80007ba <HAL_NVIC_EnableIRQ>
}
 8002ee8:	bf00      	nop
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	200000b0 	.word	0x200000b0
 8002ef4:	40020000 	.word	0x40020000
 8002ef8:	40020400 	.word	0x40020400
 8002efc:	40023800 	.word	0x40023800
 8002f00:	200000e4 	.word	0x200000e4
 8002f04:	20000094 	.word	0x20000094
 8002f08:	20000030 	.word	0x20000030
 8002f0c:	40026088 	.word	0x40026088

08002f10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f48 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002f14:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002f16:	e003      	b.n	8002f20 <LoopCopyDataInit>

08002f18 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002f18:	4b0c      	ldr	r3, [pc, #48]	; (8002f4c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002f1a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002f1c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002f1e:	3104      	adds	r1, #4

08002f20 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002f20:	480b      	ldr	r0, [pc, #44]	; (8002f50 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002f22:	4b0c      	ldr	r3, [pc, #48]	; (8002f54 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002f24:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002f26:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002f28:	d3f6      	bcc.n	8002f18 <CopyDataInit>
  ldr  r2, =_sbss
 8002f2a:	4a0b      	ldr	r2, [pc, #44]	; (8002f58 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002f2c:	e002      	b.n	8002f34 <LoopFillZerobss>

08002f2e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002f2e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002f30:	f842 3b04 	str.w	r3, [r2], #4

08002f34 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002f34:	4b09      	ldr	r3, [pc, #36]	; (8002f5c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002f36:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002f38:	d3f9      	bcc.n	8002f2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002f3a:	f7ff faeb 	bl	8002514 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f3e:	f000 f811 	bl	8002f64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f42:	f7ff f994 	bl	800226e <main>
  bx  lr    
 8002f46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f48:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002f4c:	08002ffc 	.word	0x08002ffc
  ldr  r0, =_sdata
 8002f50:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002f54:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002f58:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002f5c:	20000224 	.word	0x20000224

08002f60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f60:	e7fe      	b.n	8002f60 <ADC_IRQHandler>
	...

08002f64 <__libc_init_array>:
 8002f64:	b570      	push	{r4, r5, r6, lr}
 8002f66:	4e0d      	ldr	r6, [pc, #52]	; (8002f9c <__libc_init_array+0x38>)
 8002f68:	4c0d      	ldr	r4, [pc, #52]	; (8002fa0 <__libc_init_array+0x3c>)
 8002f6a:	1ba4      	subs	r4, r4, r6
 8002f6c:	10a4      	asrs	r4, r4, #2
 8002f6e:	2500      	movs	r5, #0
 8002f70:	42a5      	cmp	r5, r4
 8002f72:	d109      	bne.n	8002f88 <__libc_init_array+0x24>
 8002f74:	4e0b      	ldr	r6, [pc, #44]	; (8002fa4 <__libc_init_array+0x40>)
 8002f76:	4c0c      	ldr	r4, [pc, #48]	; (8002fa8 <__libc_init_array+0x44>)
 8002f78:	f000 f820 	bl	8002fbc <_init>
 8002f7c:	1ba4      	subs	r4, r4, r6
 8002f7e:	10a4      	asrs	r4, r4, #2
 8002f80:	2500      	movs	r5, #0
 8002f82:	42a5      	cmp	r5, r4
 8002f84:	d105      	bne.n	8002f92 <__libc_init_array+0x2e>
 8002f86:	bd70      	pop	{r4, r5, r6, pc}
 8002f88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f8c:	4798      	blx	r3
 8002f8e:	3501      	adds	r5, #1
 8002f90:	e7ee      	b.n	8002f70 <__libc_init_array+0xc>
 8002f92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f96:	4798      	blx	r3
 8002f98:	3501      	adds	r5, #1
 8002f9a:	e7f2      	b.n	8002f82 <__libc_init_array+0x1e>
 8002f9c:	08002ff4 	.word	0x08002ff4
 8002fa0:	08002ff4 	.word	0x08002ff4
 8002fa4:	08002ff4 	.word	0x08002ff4
 8002fa8:	08002ff8 	.word	0x08002ff8

08002fac <memset>:
 8002fac:	4402      	add	r2, r0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d100      	bne.n	8002fb6 <memset+0xa>
 8002fb4:	4770      	bx	lr
 8002fb6:	f803 1b01 	strb.w	r1, [r3], #1
 8002fba:	e7f9      	b.n	8002fb0 <memset+0x4>

08002fbc <_init>:
 8002fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fbe:	bf00      	nop
 8002fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fc2:	bc08      	pop	{r3}
 8002fc4:	469e      	mov	lr, r3
 8002fc6:	4770      	bx	lr

08002fc8 <_fini>:
 8002fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fca:	bf00      	nop
 8002fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fce:	bc08      	pop	{r3}
 8002fd0:	469e      	mov	lr, r3
 8002fd2:	4770      	bx	lr
