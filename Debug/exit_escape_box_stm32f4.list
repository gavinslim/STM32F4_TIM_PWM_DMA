
exit_escape_box_stm32f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008264  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00021b14  08008404  08008404  00018404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029f18  08029f18  00040084  2**0
                  CONTENTS
  4 .ARM          00000008  08029f18  08029f18  00039f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029f20  08029f20  00040084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08029f20  08029f20  00039f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08029f24  08029f24  00039f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08029f28  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004680  20000084  08029fac  00040084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004704  08029fac  00044704  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001729d  00000000  00000000  000400b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ee5  00000000  00000000  00057351  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001130  00000000  00000000  0005a238  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fc8  00000000  00000000  0005b368  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001936f  00000000  00000000  0005c330  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f7f1  00000000  00000000  0007569f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008fc39  00000000  00000000  00084e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00114ac9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a2c  00000000  00000000  00114b44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080083ec 	.word	0x080083ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	080083ec 	.word	0x080083ec

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_Init+0x40>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a0d      	ldr	r2, [pc, #52]	; (80005d0 <HAL_Init+0x40>)
 800059a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800059e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005a0:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <HAL_Init+0x40>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a0a      	ldr	r2, [pc, #40]	; (80005d0 <HAL_Init+0x40>)
 80005a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <HAL_Init+0x40>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <HAL_Init+0x40>)
 80005b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b8:	2003      	movs	r0, #3
 80005ba:	f000 f955 	bl	8000868 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005be:	200f      	movs	r0, #15
 80005c0:	f000 f810 	bl	80005e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c4:	f000 f806 	bl	80005d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40023c00 	.word	0x40023c00

080005d4 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
	...

080005e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005ec:	4b12      	ldr	r3, [pc, #72]	; (8000638 <HAL_InitTick+0x54>)
 80005ee:	681a      	ldr	r2, [r3, #0]
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <HAL_InitTick+0x58>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	4619      	mov	r1, r3
 80005f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80005fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000602:	4618      	mov	r0, r3
 8000604:	f000 f965 	bl	80008d2 <HAL_SYSTICK_Config>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
 8000610:	e00e      	b.n	8000630 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2b0f      	cmp	r3, #15
 8000616:	d80a      	bhi.n	800062e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000618:	2200      	movs	r2, #0
 800061a:	6879      	ldr	r1, [r7, #4]
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	f000 f92d 	bl	800087e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000624:	4a06      	ldr	r2, [pc, #24]	; (8000640 <HAL_InitTick+0x5c>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800062a:	2300      	movs	r3, #0
 800062c:	e000      	b.n	8000630 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800062e:	2301      	movs	r3, #1
}
 8000630:	4618      	mov	r0, r3
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000008 	.word	0x20000008
 800063c:	20000004 	.word	0x20000004
 8000640:	20000000 	.word	0x20000000

08000644 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <HAL_IncTick+0x20>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	461a      	mov	r2, r3
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <HAL_IncTick+0x24>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4413      	add	r3, r2
 8000654:	4a04      	ldr	r2, [pc, #16]	; (8000668 <HAL_IncTick+0x24>)
 8000656:	6013      	str	r3, [r2, #0]
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	20000004 	.word	0x20000004
 8000668:	200002e4 	.word	0x200002e4

0800066c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  return uwTick;
 8000670:	4b03      	ldr	r3, [pc, #12]	; (8000680 <HAL_GetTick+0x14>)
 8000672:	681b      	ldr	r3, [r3, #0]
}
 8000674:	4618      	mov	r0, r3
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	200002e4 	.word	0x200002e4

08000684 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800068c:	f7ff ffee 	bl	800066c <HAL_GetTick>
 8000690:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800069c:	d005      	beq.n	80006aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <HAL_Delay+0x40>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	461a      	mov	r2, r3
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	4413      	add	r3, r2
 80006a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80006aa:	bf00      	nop
 80006ac:	f7ff ffde 	bl	800066c <HAL_GetTick>
 80006b0:	4602      	mov	r2, r0
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	1ad3      	subs	r3, r2, r3
 80006b6:	68fa      	ldr	r2, [r7, #12]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d8f7      	bhi.n	80006ac <HAL_Delay+0x28>
  {
  }
}
 80006bc:	bf00      	nop
 80006be:	3710      	adds	r7, #16
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000004 	.word	0x20000004

080006c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f003 0307 	and.w	r3, r3, #7
 80006d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <__NVIC_SetPriorityGrouping+0x44>)
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006de:	68ba      	ldr	r2, [r7, #8]
 80006e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006e4:	4013      	ands	r3, r2
 80006e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006fa:	4a04      	ldr	r2, [pc, #16]	; (800070c <__NVIC_SetPriorityGrouping+0x44>)
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	60d3      	str	r3, [r2, #12]
}
 8000700:	bf00      	nop
 8000702:	3714      	adds	r7, #20
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000714:	4b04      	ldr	r3, [pc, #16]	; (8000728 <__NVIC_GetPriorityGrouping+0x18>)
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	0a1b      	lsrs	r3, r3, #8
 800071a:	f003 0307 	and.w	r3, r3, #7
}
 800071e:	4618      	mov	r0, r3
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073a:	2b00      	cmp	r3, #0
 800073c:	db0b      	blt.n	8000756 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	f003 021f 	and.w	r2, r3, #31
 8000744:	4907      	ldr	r1, [pc, #28]	; (8000764 <__NVIC_EnableIRQ+0x38>)
 8000746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074a:	095b      	lsrs	r3, r3, #5
 800074c:	2001      	movs	r0, #1
 800074e:	fa00 f202 	lsl.w	r2, r0, r2
 8000752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	e000e100 	.word	0xe000e100

08000768 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	6039      	str	r1, [r7, #0]
 8000772:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000778:	2b00      	cmp	r3, #0
 800077a:	db0a      	blt.n	8000792 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	b2da      	uxtb	r2, r3
 8000780:	490c      	ldr	r1, [pc, #48]	; (80007b4 <__NVIC_SetPriority+0x4c>)
 8000782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000786:	0112      	lsls	r2, r2, #4
 8000788:	b2d2      	uxtb	r2, r2
 800078a:	440b      	add	r3, r1
 800078c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000790:	e00a      	b.n	80007a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	b2da      	uxtb	r2, r3
 8000796:	4908      	ldr	r1, [pc, #32]	; (80007b8 <__NVIC_SetPriority+0x50>)
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	f003 030f 	and.w	r3, r3, #15
 800079e:	3b04      	subs	r3, #4
 80007a0:	0112      	lsls	r2, r2, #4
 80007a2:	b2d2      	uxtb	r2, r2
 80007a4:	440b      	add	r3, r1
 80007a6:	761a      	strb	r2, [r3, #24]
}
 80007a8:	bf00      	nop
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	e000e100 	.word	0xe000e100
 80007b8:	e000ed00 	.word	0xe000ed00

080007bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007bc:	b480      	push	{r7}
 80007be:	b089      	sub	sp, #36	; 0x24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	f003 0307 	and.w	r3, r3, #7
 80007ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	f1c3 0307 	rsb	r3, r3, #7
 80007d6:	2b04      	cmp	r3, #4
 80007d8:	bf28      	it	cs
 80007da:	2304      	movcs	r3, #4
 80007dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	3304      	adds	r3, #4
 80007e2:	2b06      	cmp	r3, #6
 80007e4:	d902      	bls.n	80007ec <NVIC_EncodePriority+0x30>
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	3b03      	subs	r3, #3
 80007ea:	e000      	b.n	80007ee <NVIC_EncodePriority+0x32>
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f0:	f04f 32ff 	mov.w	r2, #4294967295
 80007f4:	69bb      	ldr	r3, [r7, #24]
 80007f6:	fa02 f303 	lsl.w	r3, r2, r3
 80007fa:	43da      	mvns	r2, r3
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	401a      	ands	r2, r3
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000804:	f04f 31ff 	mov.w	r1, #4294967295
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	fa01 f303 	lsl.w	r3, r1, r3
 800080e:	43d9      	mvns	r1, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000814:	4313      	orrs	r3, r2
         );
}
 8000816:	4618      	mov	r0, r3
 8000818:	3724      	adds	r7, #36	; 0x24
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
	...

08000824 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3b01      	subs	r3, #1
 8000830:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000834:	d301      	bcc.n	800083a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000836:	2301      	movs	r3, #1
 8000838:	e00f      	b.n	800085a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800083a:	4a0a      	ldr	r2, [pc, #40]	; (8000864 <SysTick_Config+0x40>)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	3b01      	subs	r3, #1
 8000840:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000842:	210f      	movs	r1, #15
 8000844:	f04f 30ff 	mov.w	r0, #4294967295
 8000848:	f7ff ff8e 	bl	8000768 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800084c:	4b05      	ldr	r3, [pc, #20]	; (8000864 <SysTick_Config+0x40>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000852:	4b04      	ldr	r3, [pc, #16]	; (8000864 <SysTick_Config+0x40>)
 8000854:	2207      	movs	r2, #7
 8000856:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000858:	2300      	movs	r3, #0
}
 800085a:	4618      	mov	r0, r3
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	e000e010 	.word	0xe000e010

08000868 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f7ff ff29 	bl	80006c8 <__NVIC_SetPriorityGrouping>
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800087e:	b580      	push	{r7, lr}
 8000880:	b086      	sub	sp, #24
 8000882:	af00      	add	r7, sp, #0
 8000884:	4603      	mov	r3, r0
 8000886:	60b9      	str	r1, [r7, #8]
 8000888:	607a      	str	r2, [r7, #4]
 800088a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000890:	f7ff ff3e 	bl	8000710 <__NVIC_GetPriorityGrouping>
 8000894:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	68b9      	ldr	r1, [r7, #8]
 800089a:	6978      	ldr	r0, [r7, #20]
 800089c:	f7ff ff8e 	bl	80007bc <NVIC_EncodePriority>
 80008a0:	4602      	mov	r2, r0
 80008a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008a6:	4611      	mov	r1, r2
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff ff5d 	bl	8000768 <__NVIC_SetPriority>
}
 80008ae:	bf00      	nop
 80008b0:	3718      	adds	r7, #24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b082      	sub	sp, #8
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	4603      	mov	r3, r0
 80008be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff ff31 	bl	800072c <__NVIC_EnableIRQ>
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b082      	sub	sp, #8
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f7ff ffa2 	bl	8000824 <SysTick_Config>
 80008e0:	4603      	mov	r3, r0
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80008ee:	f000 f802 	bl	80008f6 <HAL_SYSTICK_Callback>
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000910:	f7ff feac 	bl	800066c <HAL_GetTick>
 8000914:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d101      	bne.n	8000920 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800091c:	2301      	movs	r3, #1
 800091e:	e099      	b.n	8000a54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2200      	movs	r2, #0
 8000924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2202      	movs	r2, #2
 800092c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f022 0201 	bic.w	r2, r2, #1
 800093e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000940:	e00f      	b.n	8000962 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000942:	f7ff fe93 	bl	800066c <HAL_GetTick>
 8000946:	4602      	mov	r2, r0
 8000948:	693b      	ldr	r3, [r7, #16]
 800094a:	1ad3      	subs	r3, r2, r3
 800094c:	2b05      	cmp	r3, #5
 800094e:	d908      	bls.n	8000962 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2220      	movs	r2, #32
 8000954:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2203      	movs	r2, #3
 800095a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800095e:	2303      	movs	r3, #3
 8000960:	e078      	b.n	8000a54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f003 0301 	and.w	r3, r3, #1
 800096c:	2b00      	cmp	r3, #0
 800096e:	d1e8      	bne.n	8000942 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000978:	697a      	ldr	r2, [r7, #20]
 800097a:	4b38      	ldr	r3, [pc, #224]	; (8000a5c <HAL_DMA_Init+0x158>)
 800097c:	4013      	ands	r3, r2
 800097e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	685a      	ldr	r2, [r3, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800098e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	691b      	ldr	r3, [r3, #16]
 8000994:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800099a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	6a1b      	ldr	r3, [r3, #32]
 80009ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80009ae:	697a      	ldr	r2, [r7, #20]
 80009b0:	4313      	orrs	r3, r2
 80009b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009b8:	2b04      	cmp	r3, #4
 80009ba:	d107      	bne.n	80009cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c4:	4313      	orrs	r3, r2
 80009c6:	697a      	ldr	r2, [r7, #20]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	697a      	ldr	r2, [r7, #20]
 80009d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	695b      	ldr	r3, [r3, #20]
 80009da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	f023 0307 	bic.w	r3, r3, #7
 80009e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009e8:	697a      	ldr	r2, [r7, #20]
 80009ea:	4313      	orrs	r3, r2
 80009ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009f2:	2b04      	cmp	r3, #4
 80009f4:	d117      	bne.n	8000a26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009fa:	697a      	ldr	r2, [r7, #20]
 80009fc:	4313      	orrs	r3, r2
 80009fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d00e      	beq.n	8000a26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f000 f907 	bl	8000c1c <DMA_CheckFifoParam>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d008      	beq.n	8000a26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2240      	movs	r2, #64	; 0x40
 8000a18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000a22:	2301      	movs	r3, #1
 8000a24:	e016      	b.n	8000a54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	697a      	ldr	r2, [r7, #20]
 8000a2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f000 f8be 	bl	8000bb0 <DMA_CalcBaseAndBitshift>
 8000a34:	4603      	mov	r3, r0
 8000a36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a3c:	223f      	movs	r2, #63	; 0x3f
 8000a3e:	409a      	lsls	r2, r3
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2200      	movs	r2, #0
 8000a48:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000a52:	2300      	movs	r3, #0
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3718      	adds	r7, #24
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	f010803f 	.word	0xf010803f

08000a60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	60b9      	str	r1, [r7, #8]
 8000a6a:	607a      	str	r2, [r7, #4]
 8000a6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a76:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d101      	bne.n	8000a86 <HAL_DMA_Start_IT+0x26>
 8000a82:	2302      	movs	r3, #2
 8000a84:	e040      	b.n	8000b08 <HAL_DMA_Start_IT+0xa8>
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	2201      	movs	r2, #1
 8000a8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d12f      	bne.n	8000afa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	2202      	movs	r2, #2
 8000a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	687a      	ldr	r2, [r7, #4]
 8000aac:	68b9      	ldr	r1, [r7, #8]
 8000aae:	68f8      	ldr	r0, [r7, #12]
 8000ab0:	f000 f850 	bl	8000b54 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ab8:	223f      	movs	r2, #63	; 0x3f
 8000aba:	409a      	lsls	r2, r3
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f042 0216 	orr.w	r2, r2, #22
 8000ace:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d007      	beq.n	8000ae8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f042 0208 	orr.w	r2, r2, #8
 8000ae6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f042 0201 	orr.w	r2, r2, #1
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	e005      	b.n	8000b06 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	2200      	movs	r2, #0
 8000afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000b02:	2302      	movs	r3, #2
 8000b04:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3718      	adds	r7, #24
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	2b02      	cmp	r3, #2
 8000b22:	d004      	beq.n	8000b2e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2280      	movs	r2, #128	; 0x80
 8000b28:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e00c      	b.n	8000b48 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2205      	movs	r2, #5
 8000b32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f022 0201 	bic.w	r2, r2, #1
 8000b44:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000b46:	2300      	movs	r3, #0
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
 8000b60:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000b70:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	683a      	ldr	r2, [r7, #0]
 8000b78:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	2b40      	cmp	r3, #64	; 0x40
 8000b80:	d108      	bne.n	8000b94 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8000b92:	e007      	b.n	8000ba4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	68ba      	ldr	r2, [r7, #8]
 8000b9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	687a      	ldr	r2, [r7, #4]
 8000ba2:	60da      	str	r2, [r3, #12]
}
 8000ba4:	bf00      	nop
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	3b10      	subs	r3, #16
 8000bc0:	4a14      	ldr	r2, [pc, #80]	; (8000c14 <DMA_CalcBaseAndBitshift+0x64>)
 8000bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc6:	091b      	lsrs	r3, r3, #4
 8000bc8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000bca:	4a13      	ldr	r2, [pc, #76]	; (8000c18 <DMA_CalcBaseAndBitshift+0x68>)
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	4413      	add	r3, r2
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	2b03      	cmp	r3, #3
 8000bdc:	d909      	bls.n	8000bf2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000be6:	f023 0303 	bic.w	r3, r3, #3
 8000bea:	1d1a      	adds	r2, r3, #4
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	659a      	str	r2, [r3, #88]	; 0x58
 8000bf0:	e007      	b.n	8000c02 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000bfa:	f023 0303 	bic.w	r3, r3, #3
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3714      	adds	r7, #20
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	aaaaaaab 	.word	0xaaaaaaab
 8000c18:	0800873c 	.word	0x0800873c

08000c1c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c24:	2300      	movs	r3, #0
 8000c26:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c2c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	699b      	ldr	r3, [r3, #24]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d11f      	bne.n	8000c76 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	2b03      	cmp	r3, #3
 8000c3a:	d855      	bhi.n	8000ce8 <DMA_CheckFifoParam+0xcc>
 8000c3c:	a201      	add	r2, pc, #4	; (adr r2, 8000c44 <DMA_CheckFifoParam+0x28>)
 8000c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c42:	bf00      	nop
 8000c44:	08000c55 	.word	0x08000c55
 8000c48:	08000c67 	.word	0x08000c67
 8000c4c:	08000c55 	.word	0x08000c55
 8000c50:	08000ce9 	.word	0x08000ce9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d045      	beq.n	8000cec <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000c64:	e042      	b.n	8000cec <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c6a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000c6e:	d13f      	bne.n	8000cf0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000c70:	2301      	movs	r3, #1
 8000c72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000c74:	e03c      	b.n	8000cf0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	699b      	ldr	r3, [r3, #24]
 8000c7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c7e:	d121      	bne.n	8000cc4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	2b03      	cmp	r3, #3
 8000c84:	d836      	bhi.n	8000cf4 <DMA_CheckFifoParam+0xd8>
 8000c86:	a201      	add	r2, pc, #4	; (adr r2, 8000c8c <DMA_CheckFifoParam+0x70>)
 8000c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c8c:	08000c9d 	.word	0x08000c9d
 8000c90:	08000ca3 	.word	0x08000ca3
 8000c94:	08000c9d 	.word	0x08000c9d
 8000c98:	08000cb5 	.word	0x08000cb5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	73fb      	strb	r3, [r7, #15]
      break;
 8000ca0:	e02f      	b.n	8000d02 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d024      	beq.n	8000cf8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000cb2:	e021      	b.n	8000cf8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000cbc:	d11e      	bne.n	8000cfc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000cc2:	e01b      	b.n	8000cfc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	d902      	bls.n	8000cd0 <DMA_CheckFifoParam+0xb4>
 8000cca:	2b03      	cmp	r3, #3
 8000ccc:	d003      	beq.n	8000cd6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000cce:	e018      	b.n	8000d02 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8000cd4:	e015      	b.n	8000d02 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d00e      	beq.n	8000d00 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	73fb      	strb	r3, [r7, #15]
      break;
 8000ce6:	e00b      	b.n	8000d00 <DMA_CheckFifoParam+0xe4>
      break;
 8000ce8:	bf00      	nop
 8000cea:	e00a      	b.n	8000d02 <DMA_CheckFifoParam+0xe6>
      break;
 8000cec:	bf00      	nop
 8000cee:	e008      	b.n	8000d02 <DMA_CheckFifoParam+0xe6>
      break;
 8000cf0:	bf00      	nop
 8000cf2:	e006      	b.n	8000d02 <DMA_CheckFifoParam+0xe6>
      break;
 8000cf4:	bf00      	nop
 8000cf6:	e004      	b.n	8000d02 <DMA_CheckFifoParam+0xe6>
      break;
 8000cf8:	bf00      	nop
 8000cfa:	e002      	b.n	8000d02 <DMA_CheckFifoParam+0xe6>
      break;   
 8000cfc:	bf00      	nop
 8000cfe:	e000      	b.n	8000d02 <DMA_CheckFifoParam+0xe6>
      break;
 8000d00:	bf00      	nop
    }
  } 
  
  return status; 
 8000d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3714      	adds	r7, #20
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b089      	sub	sp, #36	; 0x24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
 8000d2a:	e159      	b.n	8000fe0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	697a      	ldr	r2, [r7, #20]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	f040 8148 	bne.w	8000fda <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d00b      	beq.n	8000d6a <HAL_GPIO_Init+0x5a>
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d007      	beq.n	8000d6a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d5e:	2b11      	cmp	r3, #17
 8000d60:	d003      	beq.n	8000d6a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	2b12      	cmp	r3, #18
 8000d68:	d130      	bne.n	8000dcc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	2203      	movs	r2, #3
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	68da      	ldr	r2, [r3, #12]
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000da0:	2201      	movs	r2, #1
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	4013      	ands	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	091b      	lsrs	r3, r3, #4
 8000db6:	f003 0201 	and.w	r2, r3, #1
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	2203      	movs	r2, #3
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	4013      	ands	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	689a      	ldr	r2, [r3, #8]
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d003      	beq.n	8000e0c <HAL_GPIO_Init+0xfc>
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	2b12      	cmp	r3, #18
 8000e0a:	d123      	bne.n	8000e54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	08da      	lsrs	r2, r3, #3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3208      	adds	r2, #8
 8000e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	f003 0307 	and.w	r3, r3, #7
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	220f      	movs	r2, #15
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	691a      	ldr	r2, [r3, #16]
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	08da      	lsrs	r2, r3, #3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	3208      	adds	r2, #8
 8000e4e:	69b9      	ldr	r1, [r7, #24]
 8000e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	2203      	movs	r2, #3
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 0203 	and.w	r2, r3, #3
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	f000 80a2 	beq.w	8000fda <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	4b56      	ldr	r3, [pc, #344]	; (8000ff4 <HAL_GPIO_Init+0x2e4>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	4a55      	ldr	r2, [pc, #340]	; (8000ff4 <HAL_GPIO_Init+0x2e4>)
 8000ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea6:	4b53      	ldr	r3, [pc, #332]	; (8000ff4 <HAL_GPIO_Init+0x2e4>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eb2:	4a51      	ldr	r2, [pc, #324]	; (8000ff8 <HAL_GPIO_Init+0x2e8>)
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	089b      	lsrs	r3, r3, #2
 8000eb8:	3302      	adds	r3, #2
 8000eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	f003 0303 	and.w	r3, r3, #3
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	220f      	movs	r2, #15
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a48      	ldr	r2, [pc, #288]	; (8000ffc <HAL_GPIO_Init+0x2ec>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d019      	beq.n	8000f12 <HAL_GPIO_Init+0x202>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a47      	ldr	r2, [pc, #284]	; (8001000 <HAL_GPIO_Init+0x2f0>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d013      	beq.n	8000f0e <HAL_GPIO_Init+0x1fe>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a46      	ldr	r2, [pc, #280]	; (8001004 <HAL_GPIO_Init+0x2f4>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d00d      	beq.n	8000f0a <HAL_GPIO_Init+0x1fa>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a45      	ldr	r2, [pc, #276]	; (8001008 <HAL_GPIO_Init+0x2f8>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d007      	beq.n	8000f06 <HAL_GPIO_Init+0x1f6>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a44      	ldr	r2, [pc, #272]	; (800100c <HAL_GPIO_Init+0x2fc>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d101      	bne.n	8000f02 <HAL_GPIO_Init+0x1f2>
 8000efe:	2304      	movs	r3, #4
 8000f00:	e008      	b.n	8000f14 <HAL_GPIO_Init+0x204>
 8000f02:	2307      	movs	r3, #7
 8000f04:	e006      	b.n	8000f14 <HAL_GPIO_Init+0x204>
 8000f06:	2303      	movs	r3, #3
 8000f08:	e004      	b.n	8000f14 <HAL_GPIO_Init+0x204>
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	e002      	b.n	8000f14 <HAL_GPIO_Init+0x204>
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e000      	b.n	8000f14 <HAL_GPIO_Init+0x204>
 8000f12:	2300      	movs	r3, #0
 8000f14:	69fa      	ldr	r2, [r7, #28]
 8000f16:	f002 0203 	and.w	r2, r2, #3
 8000f1a:	0092      	lsls	r2, r2, #2
 8000f1c:	4093      	lsls	r3, r2
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f24:	4934      	ldr	r1, [pc, #208]	; (8000ff8 <HAL_GPIO_Init+0x2e8>)
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	089b      	lsrs	r3, r3, #2
 8000f2a:	3302      	adds	r3, #2
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f32:	4b37      	ldr	r3, [pc, #220]	; (8001010 <HAL_GPIO_Init+0x300>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d003      	beq.n	8000f56 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f56:	4a2e      	ldr	r2, [pc, #184]	; (8001010 <HAL_GPIO_Init+0x300>)
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f5c:	4b2c      	ldr	r3, [pc, #176]	; (8001010 <HAL_GPIO_Init+0x300>)
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d003      	beq.n	8000f80 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f80:	4a23      	ldr	r2, [pc, #140]	; (8001010 <HAL_GPIO_Init+0x300>)
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f86:	4b22      	ldr	r3, [pc, #136]	; (8001010 <HAL_GPIO_Init+0x300>)
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4013      	ands	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d003      	beq.n	8000faa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000faa:	4a19      	ldr	r2, [pc, #100]	; (8001010 <HAL_GPIO_Init+0x300>)
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fb0:	4b17      	ldr	r3, [pc, #92]	; (8001010 <HAL_GPIO_Init+0x300>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d003      	beq.n	8000fd4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fd4:	4a0e      	ldr	r2, [pc, #56]	; (8001010 <HAL_GPIO_Init+0x300>)
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	61fb      	str	r3, [r7, #28]
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	2b0f      	cmp	r3, #15
 8000fe4:	f67f aea2 	bls.w	8000d2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fe8:	bf00      	nop
 8000fea:	3724      	adds	r7, #36	; 0x24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40013800 	.word	0x40013800
 8000ffc:	40020000 	.word	0x40020000
 8001000:	40020400 	.word	0x40020400
 8001004:	40020800 	.word	0x40020800
 8001008:	40020c00 	.word	0x40020c00
 800100c:	40021000 	.word	0x40021000
 8001010:	40013c00 	.word	0x40013c00

08001014 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	460b      	mov	r3, r1
 800101e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	691a      	ldr	r2, [r3, #16]
 8001024:	887b      	ldrh	r3, [r7, #2]
 8001026:	4013      	ands	r3, r2
 8001028:	2b00      	cmp	r3, #0
 800102a:	d002      	beq.n	8001032 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800102c:	2301      	movs	r3, #1
 800102e:	73fb      	strb	r3, [r7, #15]
 8001030:	e001      	b.n	8001036 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001032:	2300      	movs	r3, #0
 8001034:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001036:	7bfb      	ldrb	r3, [r7, #15]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3714      	adds	r7, #20
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	807b      	strh	r3, [r7, #2]
 8001050:	4613      	mov	r3, r2
 8001052:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001054:	787b      	ldrb	r3, [r7, #1]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800105a:	887a      	ldrh	r2, [r7, #2]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001060:	e003      	b.n	800106a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001062:	887b      	ldrh	r3, [r7, #2]
 8001064:	041a      	lsls	r2, r3, #16
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	619a      	str	r2, [r3, #24]
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
	...

08001078 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d101      	bne.n	800108a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e25b      	b.n	8001542 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	2b00      	cmp	r3, #0
 8001094:	d075      	beq.n	8001182 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001096:	4ba3      	ldr	r3, [pc, #652]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	f003 030c 	and.w	r3, r3, #12
 800109e:	2b04      	cmp	r3, #4
 80010a0:	d00c      	beq.n	80010bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010a2:	4ba0      	ldr	r3, [pc, #640]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010aa:	2b08      	cmp	r3, #8
 80010ac:	d112      	bne.n	80010d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ae:	4b9d      	ldr	r3, [pc, #628]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010ba:	d10b      	bne.n	80010d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010bc:	4b99      	ldr	r3, [pc, #612]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d05b      	beq.n	8001180 <HAL_RCC_OscConfig+0x108>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d157      	bne.n	8001180 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e236      	b.n	8001542 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010dc:	d106      	bne.n	80010ec <HAL_RCC_OscConfig+0x74>
 80010de:	4b91      	ldr	r3, [pc, #580]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a90      	ldr	r2, [pc, #576]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80010e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010e8:	6013      	str	r3, [r2, #0]
 80010ea:	e01d      	b.n	8001128 <HAL_RCC_OscConfig+0xb0>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010f4:	d10c      	bne.n	8001110 <HAL_RCC_OscConfig+0x98>
 80010f6:	4b8b      	ldr	r3, [pc, #556]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a8a      	ldr	r2, [pc, #552]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80010fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001100:	6013      	str	r3, [r2, #0]
 8001102:	4b88      	ldr	r3, [pc, #544]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a87      	ldr	r2, [pc, #540]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 8001108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	e00b      	b.n	8001128 <HAL_RCC_OscConfig+0xb0>
 8001110:	4b84      	ldr	r3, [pc, #528]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a83      	ldr	r2, [pc, #524]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 8001116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800111a:	6013      	str	r3, [r2, #0]
 800111c:	4b81      	ldr	r3, [pc, #516]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a80      	ldr	r2, [pc, #512]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 8001122:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001126:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d013      	beq.n	8001158 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001130:	f7ff fa9c 	bl	800066c <HAL_GetTick>
 8001134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001136:	e008      	b.n	800114a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001138:	f7ff fa98 	bl	800066c <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b64      	cmp	r3, #100	; 0x64
 8001144:	d901      	bls.n	800114a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e1fb      	b.n	8001542 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800114a:	4b76      	ldr	r3, [pc, #472]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d0f0      	beq.n	8001138 <HAL_RCC_OscConfig+0xc0>
 8001156:	e014      	b.n	8001182 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001158:	f7ff fa88 	bl	800066c <HAL_GetTick>
 800115c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800115e:	e008      	b.n	8001172 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001160:	f7ff fa84 	bl	800066c <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b64      	cmp	r3, #100	; 0x64
 800116c:	d901      	bls.n	8001172 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e1e7      	b.n	8001542 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001172:	4b6c      	ldr	r3, [pc, #432]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1f0      	bne.n	8001160 <HAL_RCC_OscConfig+0xe8>
 800117e:	e000      	b.n	8001182 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001180:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	2b00      	cmp	r3, #0
 800118c:	d063      	beq.n	8001256 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800118e:	4b65      	ldr	r3, [pc, #404]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f003 030c 	and.w	r3, r3, #12
 8001196:	2b00      	cmp	r3, #0
 8001198:	d00b      	beq.n	80011b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800119a:	4b62      	ldr	r3, [pc, #392]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011a2:	2b08      	cmp	r3, #8
 80011a4:	d11c      	bne.n	80011e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011a6:	4b5f      	ldr	r3, [pc, #380]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d116      	bne.n	80011e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011b2:	4b5c      	ldr	r3, [pc, #368]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d005      	beq.n	80011ca <HAL_RCC_OscConfig+0x152>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d001      	beq.n	80011ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e1bb      	b.n	8001542 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ca:	4b56      	ldr	r3, [pc, #344]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	691b      	ldr	r3, [r3, #16]
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	4952      	ldr	r1, [pc, #328]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80011da:	4313      	orrs	r3, r2
 80011dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011de:	e03a      	b.n	8001256 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d020      	beq.n	800122a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011e8:	4b4f      	ldr	r3, [pc, #316]	; (8001328 <HAL_RCC_OscConfig+0x2b0>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ee:	f7ff fa3d 	bl	800066c <HAL_GetTick>
 80011f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f4:	e008      	b.n	8001208 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011f6:	f7ff fa39 	bl	800066c <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d901      	bls.n	8001208 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e19c      	b.n	8001542 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001208:	4b46      	ldr	r3, [pc, #280]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d0f0      	beq.n	80011f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001214:	4b43      	ldr	r3, [pc, #268]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	691b      	ldr	r3, [r3, #16]
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	4940      	ldr	r1, [pc, #256]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 8001224:	4313      	orrs	r3, r2
 8001226:	600b      	str	r3, [r1, #0]
 8001228:	e015      	b.n	8001256 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800122a:	4b3f      	ldr	r3, [pc, #252]	; (8001328 <HAL_RCC_OscConfig+0x2b0>)
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001230:	f7ff fa1c 	bl	800066c <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001238:	f7ff fa18 	bl	800066c <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e17b      	b.n	8001542 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800124a:	4b36      	ldr	r3, [pc, #216]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1f0      	bne.n	8001238 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0308 	and.w	r3, r3, #8
 800125e:	2b00      	cmp	r3, #0
 8001260:	d030      	beq.n	80012c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	695b      	ldr	r3, [r3, #20]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d016      	beq.n	8001298 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800126a:	4b30      	ldr	r3, [pc, #192]	; (800132c <HAL_RCC_OscConfig+0x2b4>)
 800126c:	2201      	movs	r2, #1
 800126e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001270:	f7ff f9fc 	bl	800066c <HAL_GetTick>
 8001274:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001276:	e008      	b.n	800128a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001278:	f7ff f9f8 	bl	800066c <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b02      	cmp	r3, #2
 8001284:	d901      	bls.n	800128a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e15b      	b.n	8001542 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800128a:	4b26      	ldr	r3, [pc, #152]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 800128c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d0f0      	beq.n	8001278 <HAL_RCC_OscConfig+0x200>
 8001296:	e015      	b.n	80012c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001298:	4b24      	ldr	r3, [pc, #144]	; (800132c <HAL_RCC_OscConfig+0x2b4>)
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800129e:	f7ff f9e5 	bl	800066c <HAL_GetTick>
 80012a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012a4:	e008      	b.n	80012b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012a6:	f7ff f9e1 	bl	800066c <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e144      	b.n	8001542 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012b8:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80012ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1f0      	bne.n	80012a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0304 	and.w	r3, r3, #4
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f000 80a0 	beq.w	8001412 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012d2:	2300      	movs	r3, #0
 80012d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012d6:	4b13      	ldr	r3, [pc, #76]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d10f      	bne.n	8001302 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	4a0e      	ldr	r2, [pc, #56]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80012ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f0:	6413      	str	r3, [r2, #64]	; 0x40
 80012f2:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012fe:	2301      	movs	r3, #1
 8001300:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <HAL_RCC_OscConfig+0x2b8>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800130a:	2b00      	cmp	r3, #0
 800130c:	d121      	bne.n	8001352 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800130e:	4b08      	ldr	r3, [pc, #32]	; (8001330 <HAL_RCC_OscConfig+0x2b8>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a07      	ldr	r2, [pc, #28]	; (8001330 <HAL_RCC_OscConfig+0x2b8>)
 8001314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001318:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800131a:	f7ff f9a7 	bl	800066c <HAL_GetTick>
 800131e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001320:	e011      	b.n	8001346 <HAL_RCC_OscConfig+0x2ce>
 8001322:	bf00      	nop
 8001324:	40023800 	.word	0x40023800
 8001328:	42470000 	.word	0x42470000
 800132c:	42470e80 	.word	0x42470e80
 8001330:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001334:	f7ff f99a 	bl	800066c <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e0fd      	b.n	8001542 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001346:	4b81      	ldr	r3, [pc, #516]	; (800154c <HAL_RCC_OscConfig+0x4d4>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800134e:	2b00      	cmp	r3, #0
 8001350:	d0f0      	beq.n	8001334 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d106      	bne.n	8001368 <HAL_RCC_OscConfig+0x2f0>
 800135a:	4b7d      	ldr	r3, [pc, #500]	; (8001550 <HAL_RCC_OscConfig+0x4d8>)
 800135c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800135e:	4a7c      	ldr	r2, [pc, #496]	; (8001550 <HAL_RCC_OscConfig+0x4d8>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6713      	str	r3, [r2, #112]	; 0x70
 8001366:	e01c      	b.n	80013a2 <HAL_RCC_OscConfig+0x32a>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	2b05      	cmp	r3, #5
 800136e:	d10c      	bne.n	800138a <HAL_RCC_OscConfig+0x312>
 8001370:	4b77      	ldr	r3, [pc, #476]	; (8001550 <HAL_RCC_OscConfig+0x4d8>)
 8001372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001374:	4a76      	ldr	r2, [pc, #472]	; (8001550 <HAL_RCC_OscConfig+0x4d8>)
 8001376:	f043 0304 	orr.w	r3, r3, #4
 800137a:	6713      	str	r3, [r2, #112]	; 0x70
 800137c:	4b74      	ldr	r3, [pc, #464]	; (8001550 <HAL_RCC_OscConfig+0x4d8>)
 800137e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001380:	4a73      	ldr	r2, [pc, #460]	; (8001550 <HAL_RCC_OscConfig+0x4d8>)
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	6713      	str	r3, [r2, #112]	; 0x70
 8001388:	e00b      	b.n	80013a2 <HAL_RCC_OscConfig+0x32a>
 800138a:	4b71      	ldr	r3, [pc, #452]	; (8001550 <HAL_RCC_OscConfig+0x4d8>)
 800138c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800138e:	4a70      	ldr	r2, [pc, #448]	; (8001550 <HAL_RCC_OscConfig+0x4d8>)
 8001390:	f023 0301 	bic.w	r3, r3, #1
 8001394:	6713      	str	r3, [r2, #112]	; 0x70
 8001396:	4b6e      	ldr	r3, [pc, #440]	; (8001550 <HAL_RCC_OscConfig+0x4d8>)
 8001398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800139a:	4a6d      	ldr	r2, [pc, #436]	; (8001550 <HAL_RCC_OscConfig+0x4d8>)
 800139c:	f023 0304 	bic.w	r3, r3, #4
 80013a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d015      	beq.n	80013d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013aa:	f7ff f95f 	bl	800066c <HAL_GetTick>
 80013ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013b0:	e00a      	b.n	80013c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013b2:	f7ff f95b 	bl	800066c <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e0bc      	b.n	8001542 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013c8:	4b61      	ldr	r3, [pc, #388]	; (8001550 <HAL_RCC_OscConfig+0x4d8>)
 80013ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0ee      	beq.n	80013b2 <HAL_RCC_OscConfig+0x33a>
 80013d4:	e014      	b.n	8001400 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d6:	f7ff f949 	bl	800066c <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013dc:	e00a      	b.n	80013f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013de:	f7ff f945 	bl	800066c <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d901      	bls.n	80013f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e0a6      	b.n	8001542 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013f4:	4b56      	ldr	r3, [pc, #344]	; (8001550 <HAL_RCC_OscConfig+0x4d8>)
 80013f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1ee      	bne.n	80013de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001400:	7dfb      	ldrb	r3, [r7, #23]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d105      	bne.n	8001412 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001406:	4b52      	ldr	r3, [pc, #328]	; (8001550 <HAL_RCC_OscConfig+0x4d8>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	4a51      	ldr	r2, [pc, #324]	; (8001550 <HAL_RCC_OscConfig+0x4d8>)
 800140c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001410:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	699b      	ldr	r3, [r3, #24]
 8001416:	2b00      	cmp	r3, #0
 8001418:	f000 8092 	beq.w	8001540 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800141c:	4b4c      	ldr	r3, [pc, #304]	; (8001550 <HAL_RCC_OscConfig+0x4d8>)
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f003 030c 	and.w	r3, r3, #12
 8001424:	2b08      	cmp	r3, #8
 8001426:	d05c      	beq.n	80014e2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	2b02      	cmp	r3, #2
 800142e:	d141      	bne.n	80014b4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001430:	4b48      	ldr	r3, [pc, #288]	; (8001554 <HAL_RCC_OscConfig+0x4dc>)
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001436:	f7ff f919 	bl	800066c <HAL_GetTick>
 800143a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800143e:	f7ff f915 	bl	800066c <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e078      	b.n	8001542 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001450:	4b3f      	ldr	r3, [pc, #252]	; (8001550 <HAL_RCC_OscConfig+0x4d8>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1f0      	bne.n	800143e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	69da      	ldr	r2, [r3, #28]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	431a      	orrs	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146a:	019b      	lsls	r3, r3, #6
 800146c:	431a      	orrs	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001472:	085b      	lsrs	r3, r3, #1
 8001474:	3b01      	subs	r3, #1
 8001476:	041b      	lsls	r3, r3, #16
 8001478:	431a      	orrs	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147e:	061b      	lsls	r3, r3, #24
 8001480:	4933      	ldr	r1, [pc, #204]	; (8001550 <HAL_RCC_OscConfig+0x4d8>)
 8001482:	4313      	orrs	r3, r2
 8001484:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001486:	4b33      	ldr	r3, [pc, #204]	; (8001554 <HAL_RCC_OscConfig+0x4dc>)
 8001488:	2201      	movs	r2, #1
 800148a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148c:	f7ff f8ee 	bl	800066c <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001494:	f7ff f8ea 	bl	800066c <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e04d      	b.n	8001542 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014a6:	4b2a      	ldr	r3, [pc, #168]	; (8001550 <HAL_RCC_OscConfig+0x4d8>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d0f0      	beq.n	8001494 <HAL_RCC_OscConfig+0x41c>
 80014b2:	e045      	b.n	8001540 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014b4:	4b27      	ldr	r3, [pc, #156]	; (8001554 <HAL_RCC_OscConfig+0x4dc>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ba:	f7ff f8d7 	bl	800066c <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014c2:	f7ff f8d3 	bl	800066c <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e036      	b.n	8001542 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014d4:	4b1e      	ldr	r3, [pc, #120]	; (8001550 <HAL_RCC_OscConfig+0x4d8>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1f0      	bne.n	80014c2 <HAL_RCC_OscConfig+0x44a>
 80014e0:	e02e      	b.n	8001540 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d101      	bne.n	80014ee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e029      	b.n	8001542 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014ee:	4b18      	ldr	r3, [pc, #96]	; (8001550 <HAL_RCC_OscConfig+0x4d8>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d11c      	bne.n	800153c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800150c:	429a      	cmp	r2, r3
 800150e:	d115      	bne.n	800153c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001510:	68fa      	ldr	r2, [r7, #12]
 8001512:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001516:	4013      	ands	r3, r2
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800151c:	4293      	cmp	r3, r2
 800151e:	d10d      	bne.n	800153c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800152a:	429a      	cmp	r2, r3
 800152c:	d106      	bne.n	800153c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001538:	429a      	cmp	r2, r3
 800153a:	d001      	beq.n	8001540 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e000      	b.n	8001542 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40007000 	.word	0x40007000
 8001550:	40023800 	.word	0x40023800
 8001554:	42470060 	.word	0x42470060

08001558 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e0cc      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800156c:	4b68      	ldr	r3, [pc, #416]	; (8001710 <HAL_RCC_ClockConfig+0x1b8>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 030f 	and.w	r3, r3, #15
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	429a      	cmp	r2, r3
 8001578:	d90c      	bls.n	8001594 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800157a:	4b65      	ldr	r3, [pc, #404]	; (8001710 <HAL_RCC_ClockConfig+0x1b8>)
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001582:	4b63      	ldr	r3, [pc, #396]	; (8001710 <HAL_RCC_ClockConfig+0x1b8>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 030f 	and.w	r3, r3, #15
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	429a      	cmp	r2, r3
 800158e:	d001      	beq.n	8001594 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e0b8      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d020      	beq.n	80015e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d005      	beq.n	80015b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015ac:	4b59      	ldr	r3, [pc, #356]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	4a58      	ldr	r2, [pc, #352]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80015b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0308 	and.w	r3, r3, #8
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d005      	beq.n	80015d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015c4:	4b53      	ldr	r3, [pc, #332]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	4a52      	ldr	r2, [pc, #328]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80015ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015d0:	4b50      	ldr	r3, [pc, #320]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	494d      	ldr	r1, [pc, #308]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80015de:	4313      	orrs	r3, r2
 80015e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d044      	beq.n	8001678 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d107      	bne.n	8001606 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f6:	4b47      	ldr	r3, [pc, #284]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d119      	bne.n	8001636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e07f      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	2b02      	cmp	r3, #2
 800160c:	d003      	beq.n	8001616 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001612:	2b03      	cmp	r3, #3
 8001614:	d107      	bne.n	8001626 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001616:	4b3f      	ldr	r3, [pc, #252]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d109      	bne.n	8001636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e06f      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001626:	4b3b      	ldr	r3, [pc, #236]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e067      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001636:	4b37      	ldr	r3, [pc, #220]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f023 0203 	bic.w	r2, r3, #3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	4934      	ldr	r1, [pc, #208]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 8001644:	4313      	orrs	r3, r2
 8001646:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001648:	f7ff f810 	bl	800066c <HAL_GetTick>
 800164c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800164e:	e00a      	b.n	8001666 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001650:	f7ff f80c 	bl	800066c <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	f241 3288 	movw	r2, #5000	; 0x1388
 800165e:	4293      	cmp	r3, r2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e04f      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001666:	4b2b      	ldr	r3, [pc, #172]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 020c 	and.w	r2, r3, #12
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	429a      	cmp	r2, r3
 8001676:	d1eb      	bne.n	8001650 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001678:	4b25      	ldr	r3, [pc, #148]	; (8001710 <HAL_RCC_ClockConfig+0x1b8>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 030f 	and.w	r3, r3, #15
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	429a      	cmp	r2, r3
 8001684:	d20c      	bcs.n	80016a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001686:	4b22      	ldr	r3, [pc, #136]	; (8001710 <HAL_RCC_ClockConfig+0x1b8>)
 8001688:	683a      	ldr	r2, [r7, #0]
 800168a:	b2d2      	uxtb	r2, r2
 800168c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800168e:	4b20      	ldr	r3, [pc, #128]	; (8001710 <HAL_RCC_ClockConfig+0x1b8>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 030f 	and.w	r3, r3, #15
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	429a      	cmp	r2, r3
 800169a:	d001      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e032      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0304 	and.w	r3, r3, #4
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d008      	beq.n	80016be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016ac:	4b19      	ldr	r3, [pc, #100]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	4916      	ldr	r1, [pc, #88]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0308 	and.w	r3, r3, #8
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d009      	beq.n	80016de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016ca:	4b12      	ldr	r3, [pc, #72]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	490e      	ldr	r1, [pc, #56]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016de:	f000 f821 	bl	8001724 <HAL_RCC_GetSysClockFreq>
 80016e2:	4601      	mov	r1, r0
 80016e4:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	091b      	lsrs	r3, r3, #4
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	4a0a      	ldr	r2, [pc, #40]	; (8001718 <HAL_RCC_ClockConfig+0x1c0>)
 80016f0:	5cd3      	ldrb	r3, [r2, r3]
 80016f2:	fa21 f303 	lsr.w	r3, r1, r3
 80016f6:	4a09      	ldr	r2, [pc, #36]	; (800171c <HAL_RCC_ClockConfig+0x1c4>)
 80016f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016fa:	4b09      	ldr	r3, [pc, #36]	; (8001720 <HAL_RCC_ClockConfig+0x1c8>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7fe ff70 	bl	80005e4 <HAL_InitTick>

  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40023c00 	.word	0x40023c00
 8001714:	40023800 	.word	0x40023800
 8001718:	08029ecc 	.word	0x08029ecc
 800171c:	20000008 	.word	0x20000008
 8001720:	20000000 	.word	0x20000000

08001724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800172a:	2300      	movs	r3, #0
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	2300      	movs	r3, #0
 8001734:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001736:	2300      	movs	r3, #0
 8001738:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800173a:	4b63      	ldr	r3, [pc, #396]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 030c 	and.w	r3, r3, #12
 8001742:	2b04      	cmp	r3, #4
 8001744:	d007      	beq.n	8001756 <HAL_RCC_GetSysClockFreq+0x32>
 8001746:	2b08      	cmp	r3, #8
 8001748:	d008      	beq.n	800175c <HAL_RCC_GetSysClockFreq+0x38>
 800174a:	2b00      	cmp	r3, #0
 800174c:	f040 80b4 	bne.w	80018b8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001750:	4b5e      	ldr	r3, [pc, #376]	; (80018cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001752:	60bb      	str	r3, [r7, #8]
       break;
 8001754:	e0b3      	b.n	80018be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001756:	4b5e      	ldr	r3, [pc, #376]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001758:	60bb      	str	r3, [r7, #8]
      break;
 800175a:	e0b0      	b.n	80018be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800175c:	4b5a      	ldr	r3, [pc, #360]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001764:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001766:	4b58      	ldr	r3, [pc, #352]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d04a      	beq.n	8001808 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001772:	4b55      	ldr	r3, [pc, #340]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	099b      	lsrs	r3, r3, #6
 8001778:	f04f 0400 	mov.w	r4, #0
 800177c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	ea03 0501 	and.w	r5, r3, r1
 8001788:	ea04 0602 	and.w	r6, r4, r2
 800178c:	4629      	mov	r1, r5
 800178e:	4632      	mov	r2, r6
 8001790:	f04f 0300 	mov.w	r3, #0
 8001794:	f04f 0400 	mov.w	r4, #0
 8001798:	0154      	lsls	r4, r2, #5
 800179a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800179e:	014b      	lsls	r3, r1, #5
 80017a0:	4619      	mov	r1, r3
 80017a2:	4622      	mov	r2, r4
 80017a4:	1b49      	subs	r1, r1, r5
 80017a6:	eb62 0206 	sbc.w	r2, r2, r6
 80017aa:	f04f 0300 	mov.w	r3, #0
 80017ae:	f04f 0400 	mov.w	r4, #0
 80017b2:	0194      	lsls	r4, r2, #6
 80017b4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80017b8:	018b      	lsls	r3, r1, #6
 80017ba:	1a5b      	subs	r3, r3, r1
 80017bc:	eb64 0402 	sbc.w	r4, r4, r2
 80017c0:	f04f 0100 	mov.w	r1, #0
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	00e2      	lsls	r2, r4, #3
 80017ca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80017ce:	00d9      	lsls	r1, r3, #3
 80017d0:	460b      	mov	r3, r1
 80017d2:	4614      	mov	r4, r2
 80017d4:	195b      	adds	r3, r3, r5
 80017d6:	eb44 0406 	adc.w	r4, r4, r6
 80017da:	f04f 0100 	mov.w	r1, #0
 80017de:	f04f 0200 	mov.w	r2, #0
 80017e2:	0262      	lsls	r2, r4, #9
 80017e4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80017e8:	0259      	lsls	r1, r3, #9
 80017ea:	460b      	mov	r3, r1
 80017ec:	4614      	mov	r4, r2
 80017ee:	4618      	mov	r0, r3
 80017f0:	4621      	mov	r1, r4
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f04f 0400 	mov.w	r4, #0
 80017f8:	461a      	mov	r2, r3
 80017fa:	4623      	mov	r3, r4
 80017fc:	f7fe fd48 	bl	8000290 <__aeabi_uldivmod>
 8001800:	4603      	mov	r3, r0
 8001802:	460c      	mov	r4, r1
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	e049      	b.n	800189c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001808:	4b2f      	ldr	r3, [pc, #188]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	099b      	lsrs	r3, r3, #6
 800180e:	f04f 0400 	mov.w	r4, #0
 8001812:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001816:	f04f 0200 	mov.w	r2, #0
 800181a:	ea03 0501 	and.w	r5, r3, r1
 800181e:	ea04 0602 	and.w	r6, r4, r2
 8001822:	4629      	mov	r1, r5
 8001824:	4632      	mov	r2, r6
 8001826:	f04f 0300 	mov.w	r3, #0
 800182a:	f04f 0400 	mov.w	r4, #0
 800182e:	0154      	lsls	r4, r2, #5
 8001830:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001834:	014b      	lsls	r3, r1, #5
 8001836:	4619      	mov	r1, r3
 8001838:	4622      	mov	r2, r4
 800183a:	1b49      	subs	r1, r1, r5
 800183c:	eb62 0206 	sbc.w	r2, r2, r6
 8001840:	f04f 0300 	mov.w	r3, #0
 8001844:	f04f 0400 	mov.w	r4, #0
 8001848:	0194      	lsls	r4, r2, #6
 800184a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800184e:	018b      	lsls	r3, r1, #6
 8001850:	1a5b      	subs	r3, r3, r1
 8001852:	eb64 0402 	sbc.w	r4, r4, r2
 8001856:	f04f 0100 	mov.w	r1, #0
 800185a:	f04f 0200 	mov.w	r2, #0
 800185e:	00e2      	lsls	r2, r4, #3
 8001860:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001864:	00d9      	lsls	r1, r3, #3
 8001866:	460b      	mov	r3, r1
 8001868:	4614      	mov	r4, r2
 800186a:	195b      	adds	r3, r3, r5
 800186c:	eb44 0406 	adc.w	r4, r4, r6
 8001870:	f04f 0100 	mov.w	r1, #0
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	02a2      	lsls	r2, r4, #10
 800187a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800187e:	0299      	lsls	r1, r3, #10
 8001880:	460b      	mov	r3, r1
 8001882:	4614      	mov	r4, r2
 8001884:	4618      	mov	r0, r3
 8001886:	4621      	mov	r1, r4
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f04f 0400 	mov.w	r4, #0
 800188e:	461a      	mov	r2, r3
 8001890:	4623      	mov	r3, r4
 8001892:	f7fe fcfd 	bl	8000290 <__aeabi_uldivmod>
 8001896:	4603      	mov	r3, r0
 8001898:	460c      	mov	r4, r1
 800189a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800189c:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	0c1b      	lsrs	r3, r3, #16
 80018a2:	f003 0303 	and.w	r3, r3, #3
 80018a6:	3301      	adds	r3, #1
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80018ac:	68fa      	ldr	r2, [r7, #12]
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b4:	60bb      	str	r3, [r7, #8]
      break;
 80018b6:	e002      	b.n	80018be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018b8:	4b04      	ldr	r3, [pc, #16]	; (80018cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80018ba:	60bb      	str	r3, [r7, #8]
      break;
 80018bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018be:	68bb      	ldr	r3, [r7, #8]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018c8:	40023800 	.word	0x40023800
 80018cc:	00f42400 	.word	0x00f42400
 80018d0:	007a1200 	.word	0x007a1200

080018d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018d8:	4b03      	ldr	r3, [pc, #12]	; (80018e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80018da:	681b      	ldr	r3, [r3, #0]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	20000008 	.word	0x20000008

080018ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018f0:	f7ff fff0 	bl	80018d4 <HAL_RCC_GetHCLKFreq>
 80018f4:	4601      	mov	r1, r0
 80018f6:	4b05      	ldr	r3, [pc, #20]	; (800190c <HAL_RCC_GetPCLK1Freq+0x20>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	0a9b      	lsrs	r3, r3, #10
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	4a03      	ldr	r2, [pc, #12]	; (8001910 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001902:	5cd3      	ldrb	r3, [r2, r3]
 8001904:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001908:	4618      	mov	r0, r3
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40023800 	.word	0x40023800
 8001910:	08029edc 	.word	0x08029edc

08001914 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001918:	f7ff ffdc 	bl	80018d4 <HAL_RCC_GetHCLKFreq>
 800191c:	4601      	mov	r1, r0
 800191e:	4b05      	ldr	r3, [pc, #20]	; (8001934 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	0b5b      	lsrs	r3, r3, #13
 8001924:	f003 0307 	and.w	r3, r3, #7
 8001928:	4a03      	ldr	r2, [pc, #12]	; (8001938 <HAL_RCC_GetPCLK2Freq+0x24>)
 800192a:	5cd3      	ldrb	r3, [r2, r3]
 800192c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001930:	4618      	mov	r0, r3
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40023800 	.word	0x40023800
 8001938:	08029edc 	.word	0x08029edc

0800193c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d101      	bne.n	800194e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e05d      	b.n	8001a0a <HAL_SPI_Init+0xce>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d106      	bne.n	8001968 <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f005 fab2 	bl	8006ecc <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2202      	movs	r2, #2
 800196c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800197e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	431a      	orrs	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	431a      	orrs	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	431a      	orrs	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	431a      	orrs	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019a4:	431a      	orrs	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	431a      	orrs	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	ea42 0103 	orr.w	r1, r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	430a      	orrs	r2, r1
 80019be:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	0c1b      	lsrs	r3, r3, #16
 80019c6:	f003 0104 	and.w	r1, r3, #4
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	430a      	orrs	r2, r1
 80019d4:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019de:	d104      	bne.n	80019ea <HAL_SPI_Init+0xae>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80019e8:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	69da      	ldr	r2, [r3, #28]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019f8:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b08a      	sub	sp, #40	; 0x28
 8001a16:	af02      	add	r7, sp, #8
 8001a18:	60f8      	str	r0, [r7, #12]
 8001a1a:	60b9      	str	r1, [r7, #8]
 8001a1c:	603b      	str	r3, [r7, #0]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001a26:	2300      	movs	r3, #0
 8001a28:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d101      	bne.n	8001a38 <HAL_SPI_Transmit+0x26>
 8001a34:	2302      	movs	r3, #2
 8001a36:	e147      	b.n	8001cc8 <HAL_SPI_Transmit+0x2b6>
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a40:	f7fe fe14 	bl	800066c <HAL_GetTick>
 8001a44:	61b8      	str	r0, [r7, #24]

  if(hspi->State != HAL_SPI_STATE_READY)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d002      	beq.n	8001a58 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001a52:	2302      	movs	r3, #2
 8001a54:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001a56:	e12e      	b.n	8001cb6 <HAL_SPI_Transmit+0x2a4>
  }

  if((pData == NULL ) || (Size == 0))
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d002      	beq.n	8001a64 <HAL_SPI_Transmit+0x52>
 8001a5e:	88fb      	ldrh	r3, [r7, #6]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d102      	bne.n	8001a6a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001a68:	e125      	b.n	8001cb6 <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2203      	movs	r2, #3
 8001a6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2200      	movs	r2, #0
 8001a76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	68ba      	ldr	r2, [r7, #8]
 8001a7c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	88fa      	ldrh	r2, [r7, #6]
 8001a82:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	88fa      	ldrh	r2, [r7, #6]
 8001a88:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2200      	movs	r2, #0
 8001a94:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ab0:	d107      	bne.n	8001ac2 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ac0:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001aca:	d10f      	bne.n	8001aec <HAL_SPI_Transmit+0xda>
  {
    SPI_RESET_CRC(hspi);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001aea:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001af6:	2b40      	cmp	r3, #64	; 0x40
 8001af8:	d007      	beq.n	8001b0a <HAL_SPI_Transmit+0xf8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b08:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b12:	d147      	bne.n	8001ba4 <HAL_SPI_Transmit+0x192>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d004      	beq.n	8001b26 <HAL_SPI_Transmit+0x114>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d138      	bne.n	8001b98 <HAL_SPI_Transmit+0x186>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	881a      	ldrh	r2, [r3, #0]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	3302      	adds	r3, #2
 8001b34:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001b44:	e028      	b.n	8001b98 <HAL_SPI_Transmit+0x186>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d10f      	bne.n	8001b74 <HAL_SPI_Transmit+0x162>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	881a      	ldrh	r2, [r3, #0]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	3302      	adds	r3, #2
 8001b62:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount--;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	86da      	strh	r2, [r3, #54]	; 0x36
 8001b72:	e011      	b.n	8001b98 <HAL_SPI_Transmit+0x186>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d00b      	beq.n	8001b92 <HAL_SPI_Transmit+0x180>
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b80:	d00a      	beq.n	8001b98 <HAL_SPI_Transmit+0x186>
 8001b82:	f7fe fd73 	bl	800066c <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d802      	bhi.n	8001b98 <HAL_SPI_Transmit+0x186>
        {
          errorcode = HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001b96:	e08e      	b.n	8001cb6 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1d1      	bne.n	8001b46 <HAL_SPI_Transmit+0x134>
 8001ba2:	e048      	b.n	8001c36 <HAL_SPI_Transmit+0x224>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d004      	beq.n	8001bb6 <HAL_SPI_Transmit+0x1a4>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d13a      	bne.n	8001c2c <HAL_SPI_Transmit+0x21a>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	330c      	adds	r3, #12
 8001bbc:	68ba      	ldr	r2, [r7, #8]
 8001bbe:	7812      	ldrb	r2, [r2, #0]
 8001bc0:	701a      	strb	r2, [r3, #0]
      pData += sizeof(uint8_t);
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001bd6:	e029      	b.n	8001c2c <HAL_SPI_Transmit+0x21a>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d110      	bne.n	8001c08 <HAL_SPI_Transmit+0x1f6>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	330c      	adds	r3, #12
 8001bec:	68ba      	ldr	r2, [r7, #8]
 8001bee:	7812      	ldrb	r2, [r2, #0]
 8001bf0:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	86da      	strh	r2, [r3, #54]	; 0x36
 8001c06:	e011      	b.n	8001c2c <HAL_SPI_Transmit+0x21a>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00b      	beq.n	8001c26 <HAL_SPI_Transmit+0x214>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c14:	d00a      	beq.n	8001c2c <HAL_SPI_Transmit+0x21a>
 8001c16:	f7fe fd29 	bl	800066c <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d802      	bhi.n	8001c2c <HAL_SPI_Transmit+0x21a>
        {
          errorcode = HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001c2a:	e044      	b.n	8001cb6 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1d0      	bne.n	8001bd8 <HAL_SPI_Transmit+0x1c6>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	2102      	movs	r1, #2
 8001c40:	68f8      	ldr	r0, [r7, #12]
 8001c42:	f000 fa56 	bl	80020f2 <SPI_WaitFlagStateUntilTimeout>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d002      	beq.n	8001c52 <HAL_SPI_Transmit+0x240>
  {
    errorcode = HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001c50:	e031      	b.n	8001cb6 <HAL_SPI_Transmit+0x2a4>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	6839      	ldr	r1, [r7, #0]
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	f000 fab3 	bl	80021c2 <SPI_CheckFlag_BSY>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d005      	beq.n	8001c6e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	77fb      	strb	r3, [r7, #31]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2220      	movs	r2, #32
 8001c6a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001c6c:	e023      	b.n	8001cb6 <HAL_SPI_Transmit+0x2a4>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10a      	bne.n	8001c8c <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	617b      	str	r3, [r7, #20]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	617b      	str	r3, [r7, #20]
 8001c8a:	697b      	ldr	r3, [r7, #20]
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c94:	d107      	bne.n	8001ca6 <HAL_SPI_Transmit+0x294>
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001ca4:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d002      	beq.n	8001cb4 <HAL_SPI_Transmit+0x2a2>
  {
    errorcode = HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	77fb      	strb	r3, [r7, #31]
 8001cb2:	e000      	b.n	8001cb6 <HAL_SPI_Transmit+0x2a4>
  }

error:
 8001cb4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001cc6:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3720      	adds	r7, #32
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <HAL_SPI_TransmitReceive>:
  * @param  Size amount of data to be sent and received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08e      	sub	sp, #56	; 0x38
 8001cd4:	af02      	add	r7, sp, #8
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
 8001cdc:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	623b      	str	r3, [r7, #32]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg1 = 0U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	837b      	strh	r3, [r7, #26]
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d101      	bne.n	8001d06 <HAL_SPI_TransmitReceive+0x36>
 8001d02:	2302      	movs	r3, #2
 8001d04:	e1f1      	b.n	80020ea <HAL_SPI_TransmitReceive+0x41a>
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d0e:	f7fe fcad 	bl	800066c <HAL_GetTick>
 8001d12:	61f8      	str	r0, [r7, #28]
  
  tmp  = hspi->State;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp1 = hspi->Init.Mode;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	623b      	str	r3, [r7, #32]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8001d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d00e      	beq.n	8001d48 <HAL_SPI_TransmitReceive+0x78>
 8001d2a:	6a3b      	ldr	r3, [r7, #32]
 8001d2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d30:	d106      	bne.n	8001d40 <HAL_SPI_TransmitReceive+0x70>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d102      	bne.n	8001d40 <HAL_SPI_TransmitReceive+0x70>
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	2b04      	cmp	r3, #4
 8001d3e:	d003      	beq.n	8001d48 <HAL_SPI_TransmitReceive+0x78>
  {
    errorcode = HAL_BUSY;
 8001d40:	2302      	movs	r3, #2
 8001d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001d46:	e1c6      	b.n	80020d6 <HAL_SPI_TransmitReceive+0x406>
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d005      	beq.n	8001d5a <HAL_SPI_TransmitReceive+0x8a>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d002      	beq.n	8001d5a <HAL_SPI_TransmitReceive+0x8a>
 8001d54:	887b      	ldrh	r3, [r7, #2]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d103      	bne.n	8001d62 <HAL_SPI_TransmitReceive+0x92>
  {
    errorcode = HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001d60:	e1b9      	b.n	80020d6 <HAL_SPI_TransmitReceive+0x406>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d103      	bne.n	8001d76 <HAL_SPI_TransmitReceive+0xa6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2205      	movs	r2, #5
 8001d72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	887a      	ldrh	r2, [r7, #2]
 8001d86:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	887a      	ldrh	r2, [r7, #2]
 8001d8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	68ba      	ldr	r2, [r7, #8]
 8001d92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	887a      	ldrh	r2, [r7, #2]
 8001d98:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	887a      	ldrh	r2, [r7, #2]
 8001d9e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2200      	movs	r2, #0
 8001da4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2200      	movs	r2, #0
 8001daa:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001db4:	d10f      	bne.n	8001dd6 <HAL_SPI_TransmitReceive+0x106>
  {
    SPI_RESET_CRC(hspi);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001dd4:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001de0:	2b40      	cmp	r3, #64	; 0x40
 8001de2:	d007      	beq.n	8001df4 <HAL_SPI_TransmitReceive+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001df2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001dfc:	f040 8084 	bne.w	8001f08 <HAL_SPI_TransmitReceive+0x238>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d004      	beq.n	8001e12 <HAL_SPI_TransmitReceive+0x142>
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d16f      	bne.n	8001ef2 <HAL_SPI_TransmitReceive+0x222>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	881a      	ldrh	r2, [r3, #0]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	3302      	adds	r3, #2
 8001e20:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e30:	e05f      	b.n	8001ef2 <HAL_SPI_TransmitReceive+0x222>
    {
      /* Check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d02e      	beq.n	8001e96 <HAL_SPI_TransmitReceive+0x1c6>
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d029      	beq.n	8001e96 <HAL_SPI_TransmitReceive+0x1c6>
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d122      	bne.n	8001e96 <HAL_SPI_TransmitReceive+0x1c6>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	881a      	ldrh	r2, [r3, #0]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	3302      	adds	r3, #2
 8001e5e:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	3b01      	subs	r3, #1
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d10c      	bne.n	8001e96 <HAL_SPI_TransmitReceive+0x1c6>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e84:	d107      	bne.n	8001e96 <HAL_SPI_TransmitReceive+0x1c6>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001e94:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d018      	beq.n	8001ed2 <HAL_SPI_TransmitReceive+0x202>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d111      	bne.n	8001ed2 <HAL_SPI_TransmitReceive+0x202>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	3302      	adds	r3, #2
 8001ebe:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8001ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed8:	d00b      	beq.n	8001ef2 <HAL_SPI_TransmitReceive+0x222>
 8001eda:	f7fe fbc7 	bl	800066c <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d803      	bhi.n	8001ef2 <HAL_SPI_TransmitReceive+0x222>
      {
        errorcode = HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001ef0:	e0f1      	b.n	80020d6 <HAL_SPI_TransmitReceive+0x406>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d19a      	bne.n	8001e32 <HAL_SPI_TransmitReceive+0x162>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d195      	bne.n	8001e32 <HAL_SPI_TransmitReceive+0x162>
 8001f06:	e082      	b.n	800200e <HAL_SPI_TransmitReceive+0x33e>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d004      	beq.n	8001f1a <HAL_SPI_TransmitReceive+0x24a>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d16f      	bne.n	8001ffa <HAL_SPI_TransmitReceive+0x32a>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	330c      	adds	r3, #12
 8001f20:	68ba      	ldr	r2, [r7, #8]
 8001f22:	7812      	ldrb	r2, [r2, #0]
 8001f24:	701a      	strb	r2, [r3, #0]
      pTxData += sizeof(uint8_t);
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	3b01      	subs	r3, #1
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f3a:	e05e      	b.n	8001ffa <HAL_SPI_TransmitReceive+0x32a>
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d02e      	beq.n	8001fa0 <HAL_SPI_TransmitReceive+0x2d0>
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d029      	beq.n	8001fa0 <HAL_SPI_TransmitReceive+0x2d0>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d122      	bne.n	8001fa0 <HAL_SPI_TransmitReceive+0x2d0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	1c5a      	adds	r2, r3, #1
 8001f5e:	60ba      	str	r2, [r7, #8]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	6812      	ldr	r2, [r2, #0]
 8001f64:	320c      	adds	r2, #12
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	3b01      	subs	r3, #1
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10c      	bne.n	8001fa0 <HAL_SPI_TransmitReceive+0x2d0>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f8e:	d107      	bne.n	8001fa0 <HAL_SPI_TransmitReceive+0x2d0>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001f9e:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d017      	beq.n	8001fda <HAL_SPI_TransmitReceive+0x30a>
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d110      	bne.n	8001fda <HAL_SPI_TransmitReceive+0x30a>
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68d9      	ldr	r1, [r3, #12]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	1c5a      	adds	r2, r3, #1
 8001fc2:	607a      	str	r2, [r7, #4]
 8001fc4:	b2ca      	uxtb	r2, r1
 8001fc6:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8001fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe0:	d00b      	beq.n	8001ffa <HAL_SPI_TransmitReceive+0x32a>
 8001fe2:	f7fe fb43 	bl	800066c <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d803      	bhi.n	8001ffa <HAL_SPI_TransmitReceive+0x32a>
      {
        errorcode = HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001ff8:	e06d      	b.n	80020d6 <HAL_SPI_TransmitReceive+0x406>
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	2b00      	cmp	r3, #0
 8002002:	d19b      	bne.n	8001f3c <HAL_SPI_TransmitReceive+0x26c>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002008:	b29b      	uxth	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d196      	bne.n	8001f3c <HAL_SPI_TransmitReceive+0x26c>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002012:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002016:	d11a      	bne.n	800204e <HAL_SPI_TransmitReceive+0x37e>
  {
    /* Wait until TXE flag */
    if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800201e:	2201      	movs	r2, #1
 8002020:	2101      	movs	r1, #1
 8002022:	68f8      	ldr	r0, [r7, #12]
 8002024:	f000 f865 	bl	80020f2 <SPI_WaitFlagStateUntilTimeout>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d009      	beq.n	8002042 <HAL_SPI_TransmitReceive+0x372>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002032:	f043 0202 	orr.w	r2, r3, #2
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 8002040:	e049      	b.n	80020d6 <HAL_SPI_TransmitReceive+0x406>
    }
    /* Read CRC */
    tmpreg1 = hspi->Instance->DR;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	b29b      	uxth	r3, r3
 800204a:	837b      	strh	r3, [r7, #26]
    /* To avoid GCC warning */
    UNUSED(tmpreg1);
 800204c:	8b7b      	ldrh	r3, [r7, #26]
  }

  /* Check if CRC error occurred */
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 0310 	and.w	r3, r3, #16
 8002058:	2b10      	cmp	r3, #16
 800205a:	d10d      	bne.n	8002078 <HAL_SPI_TransmitReceive+0x3a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002060:	f043 0202 	orr.w	r2, r3, #2
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002070:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800207e:	2201      	movs	r2, #1
 8002080:	2102      	movs	r1, #2
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f000 f835 	bl	80020f2 <SPI_WaitFlagStateUntilTimeout>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_SPI_TransmitReceive+0x3c6>
  {
    errorcode = HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002094:	e01f      	b.n	80020d6 <HAL_SPI_TransmitReceive+0x406>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8002096:	69fa      	ldr	r2, [r7, #28]
 8002098:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f000 f891 	bl	80021c2 <SPI_CheckFlag_BSY>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d006      	beq.n	80020b4 <HAL_SPI_TransmitReceive+0x3e4>
  {
    errorcode = HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2220      	movs	r2, #32
 80020b0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80020b2:	e010      	b.n	80020d6 <HAL_SPI_TransmitReceive+0x406>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d10b      	bne.n	80020d4 <HAL_SPI_TransmitReceive+0x404>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	617b      	str	r3, [r7, #20]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	e000      	b.n	80020d6 <HAL_SPI_TransmitReceive+0x406>
  }
  
error :
 80020d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80020e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3730      	adds	r7, #48	; 0x30
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b084      	sub	sp, #16
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	60f8      	str	r0, [r7, #12]
 80020fa:	60b9      	str	r1, [r7, #8]
 80020fc:	607a      	str	r2, [r7, #4]
 80020fe:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8002100:	e04c      	b.n	800219c <SPI_WaitFlagStateUntilTimeout+0xaa>
  {
    if(Timeout != HAL_MAX_DELAY)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002108:	d048      	beq.n	800219c <SPI_WaitFlagStateUntilTimeout+0xaa>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d007      	beq.n	8002120 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8002110:	f7fe faac 	bl	800066c <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	429a      	cmp	r2, r3
 800211e:	d83d      	bhi.n	800219c <SPI_WaitFlagStateUntilTimeout+0xaa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800212e:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002138:	d111      	bne.n	800215e <SPI_WaitFlagStateUntilTimeout+0x6c>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002142:	d004      	beq.n	800214e <SPI_WaitFlagStateUntilTimeout+0x5c>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800214c:	d107      	bne.n	800215e <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800215c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002162:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002166:	d10f      	bne.n	8002188 <SPI_WaitFlagStateUntilTimeout+0x96>
        {
          SPI_RESET_CRC(hspi);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002186:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e00e      	b.n	80021ba <SPI_WaitFlagStateUntilTimeout+0xc8>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689a      	ldr	r2, [r3, #8]
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	4013      	ands	r3, r2
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d101      	bne.n	80021b0 <SPI_WaitFlagStateUntilTimeout+0xbe>
 80021ac:	2201      	movs	r2, #1
 80021ae:	e000      	b.n	80021b2 <SPI_WaitFlagStateUntilTimeout+0xc0>
 80021b0:	2200      	movs	r2, #0
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d1a4      	bne.n	8002102 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b086      	sub	sp, #24
 80021c6:	af02      	add	r7, sp, #8
 80021c8:	60f8      	str	r0, [r7, #12]
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	2200      	movs	r2, #0
 80021d6:	2180      	movs	r1, #128	; 0x80
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	f7ff ff8a 	bl	80020f2 <SPI_WaitFlagStateUntilTimeout>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d007      	beq.n	80021f4 <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e8:	f043 0220 	orr.w	r2, r3, #32
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e000      	b.n	80021f6 <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b082      	sub	sp, #8
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e01d      	b.n	800224c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	d106      	bne.n	800222a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f004 fdff 	bl	8006e28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2202      	movs	r2, #2
 800222e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	3304      	adds	r3, #4
 800223a:	4619      	mov	r1, r3
 800223c:	4610      	mov	r0, r2
 800223e:	f000 fb1b 	bl	8002878 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
 8002260:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d101      	bne.n	8002272 <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 800226e:	2302      	movs	r3, #2
 8002270:	e0e9      	b.n	8002446 <HAL_TIM_PWM_Start_DMA+0x1f2>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b01      	cmp	r3, #1
 800227c:	d10b      	bne.n	8002296 <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d104      	bne.n	800228e <HAL_TIM_PWM_Start_DMA+0x3a>
 8002284:	887b      	ldrh	r3, [r7, #2]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e0db      	b.n	8002446 <HAL_TIM_PWM_Start_DMA+0x1f2>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2202      	movs	r2, #2
 8002292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2b0c      	cmp	r3, #12
 800229a:	f200 80ad 	bhi.w	80023f8 <HAL_TIM_PWM_Start_DMA+0x1a4>
 800229e:	a201      	add	r2, pc, #4	; (adr r2, 80022a4 <HAL_TIM_PWM_Start_DMA+0x50>)
 80022a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a4:	080022d9 	.word	0x080022d9
 80022a8:	080023f9 	.word	0x080023f9
 80022ac:	080023f9 	.word	0x080023f9
 80022b0:	080023f9 	.word	0x080023f9
 80022b4:	08002321 	.word	0x08002321
 80022b8:	080023f9 	.word	0x080023f9
 80022bc:	080023f9 	.word	0x080023f9
 80022c0:	080023f9 	.word	0x080023f9
 80022c4:	08002369 	.word	0x08002369
 80022c8:	080023f9 	.word	0x080023f9
 80022cc:	080023f9 	.word	0x080023f9
 80022d0:	080023f9 	.word	0x080023f9
 80022d4:	080023b1 	.word	0x080023b1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022dc:	4a5c      	ldr	r2, [pc, #368]	; (8002450 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 80022de:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e4:	4a5b      	ldr	r2, [pc, #364]	; (8002454 <HAL_TIM_PWM_Start_DMA+0x200>)
 80022e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ec:	4a5a      	ldr	r2, [pc, #360]	; (8002458 <HAL_TIM_PWM_Start_DMA+0x204>)
 80022ee:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	3334      	adds	r3, #52	; 0x34
 80022fc:	461a      	mov	r2, r3
 80022fe:	887b      	ldrh	r3, [r7, #2]
 8002300:	f7fe fbae 	bl	8000a60 <HAL_DMA_Start_IT>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e09b      	b.n	8002446 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68da      	ldr	r2, [r3, #12]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800231c:	60da      	str	r2, [r3, #12]
      break;
 800231e:	e06c      	b.n	80023fa <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002324:	4a4a      	ldr	r2, [pc, #296]	; (8002450 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8002326:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232c:	4a49      	ldr	r2, [pc, #292]	; (8002454 <HAL_TIM_PWM_Start_DMA+0x200>)
 800232e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002334:	4a48      	ldr	r2, [pc, #288]	; (8002458 <HAL_TIM_PWM_Start_DMA+0x204>)
 8002336:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	3338      	adds	r3, #56	; 0x38
 8002344:	461a      	mov	r2, r3
 8002346:	887b      	ldrh	r3, [r7, #2]
 8002348:	f7fe fb8a 	bl	8000a60 <HAL_DMA_Start_IT>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e077      	b.n	8002446 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68da      	ldr	r2, [r3, #12]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002364:	60da      	str	r2, [r3, #12]
      break;
 8002366:	e048      	b.n	80023fa <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236c:	4a38      	ldr	r2, [pc, #224]	; (8002450 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 800236e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002374:	4a37      	ldr	r2, [pc, #220]	; (8002454 <HAL_TIM_PWM_Start_DMA+0x200>)
 8002376:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237c:	4a36      	ldr	r2, [pc, #216]	; (8002458 <HAL_TIM_PWM_Start_DMA+0x204>)
 800237e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	333c      	adds	r3, #60	; 0x3c
 800238c:	461a      	mov	r2, r3
 800238e:	887b      	ldrh	r3, [r7, #2]
 8002390:	f7fe fb66 	bl	8000a60 <HAL_DMA_Start_IT>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e053      	b.n	8002446 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68da      	ldr	r2, [r3, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023ac:	60da      	str	r2, [r3, #12]
      break;
 80023ae:	e024      	b.n	80023fa <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b4:	4a26      	ldr	r2, [pc, #152]	; (8002450 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 80023b6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023bc:	4a25      	ldr	r2, [pc, #148]	; (8002454 <HAL_TIM_PWM_Start_DMA+0x200>)
 80023be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c4:	4a24      	ldr	r2, [pc, #144]	; (8002458 <HAL_TIM_PWM_Start_DMA+0x204>)
 80023c6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	3340      	adds	r3, #64	; 0x40
 80023d4:	461a      	mov	r2, r3
 80023d6:	887b      	ldrh	r3, [r7, #2]
 80023d8:	f7fe fb42 	bl	8000a60 <HAL_DMA_Start_IT>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e02f      	b.n	8002446 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68da      	ldr	r2, [r3, #12]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80023f4:	60da      	str	r2, [r3, #12]
      break;
 80023f6:	e000      	b.n	80023fa <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 80023f8:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2201      	movs	r2, #1
 8002400:	68b9      	ldr	r1, [r7, #8]
 8002402:	4618      	mov	r0, r3
 8002404:	f000 fc44 	bl	8002c90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a13      	ldr	r2, [pc, #76]	; (800245c <HAL_TIM_PWM_Start_DMA+0x208>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d107      	bne.n	8002422 <HAL_TIM_PWM_Start_DMA+0x1ce>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002420:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	2b06      	cmp	r3, #6
 8002432:	d007      	beq.n	8002444 <HAL_TIM_PWM_Start_DMA+0x1f0>
  {
    __HAL_TIM_ENABLE(htim);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f042 0201 	orr.w	r2, r2, #1
 8002442:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	08002799 	.word	0x08002799
 8002454:	08002809 	.word	0x08002809
 8002458:	08002775 	.word	0x08002775
 800245c:	40010000 	.word	0x40010000

08002460 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	2b0c      	cmp	r3, #12
 800246e:	d855      	bhi.n	800251c <HAL_TIM_PWM_Stop_DMA+0xbc>
 8002470:	a201      	add	r2, pc, #4	; (adr r2, 8002478 <HAL_TIM_PWM_Stop_DMA+0x18>)
 8002472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002476:	bf00      	nop
 8002478:	080024ad 	.word	0x080024ad
 800247c:	0800251d 	.word	0x0800251d
 8002480:	0800251d 	.word	0x0800251d
 8002484:	0800251d 	.word	0x0800251d
 8002488:	080024c9 	.word	0x080024c9
 800248c:	0800251d 	.word	0x0800251d
 8002490:	0800251d 	.word	0x0800251d
 8002494:	0800251d 	.word	0x0800251d
 8002498:	080024e5 	.word	0x080024e5
 800249c:	0800251d 	.word	0x0800251d
 80024a0:	0800251d 	.word	0x0800251d
 80024a4:	0800251d 	.word	0x0800251d
 80024a8:	08002501 	.word	0x08002501
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68da      	ldr	r2, [r3, #12]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024ba:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7fe fb25 	bl	8000b10 <HAL_DMA_Abort_IT>
      break;
 80024c6:	e02a      	b.n	800251e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68da      	ldr	r2, [r3, #12]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024d6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fe fb17 	bl	8000b10 <HAL_DMA_Abort_IT>
      break;
 80024e2:	e01c      	b.n	800251e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68da      	ldr	r2, [r3, #12]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024f2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7fe fb09 	bl	8000b10 <HAL_DMA_Abort_IT>
      break;
 80024fe:	e00e      	b.n	800251e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68da      	ldr	r2, [r3, #12]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800250e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002514:	4618      	mov	r0, r3
 8002516:	f7fe fafb 	bl	8000b10 <HAL_DMA_Abort_IT>
      break;
 800251a:	e000      	b.n	800251e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 800251c:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2200      	movs	r2, #0
 8002524:	6839      	ldr	r1, [r7, #0]
 8002526:	4618      	mov	r0, r3
 8002528:	f000 fbb2 	bl	8002c90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a1d      	ldr	r2, [pc, #116]	; (80025a8 <HAL_TIM_PWM_Stop_DMA+0x148>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d117      	bne.n	8002566 <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6a1a      	ldr	r2, [r3, #32]
 800253c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002540:	4013      	ands	r3, r2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10f      	bne.n	8002566 <HAL_TIM_PWM_Stop_DMA+0x106>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6a1a      	ldr	r2, [r3, #32]
 800254c:	f240 4344 	movw	r3, #1092	; 0x444
 8002550:	4013      	ands	r3, r2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d107      	bne.n	8002566 <HAL_TIM_PWM_Stop_DMA+0x106>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002564:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6a1a      	ldr	r2, [r3, #32]
 800256c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002570:	4013      	ands	r3, r2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10f      	bne.n	8002596 <HAL_TIM_PWM_Stop_DMA+0x136>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6a1a      	ldr	r2, [r3, #32]
 800257c:	f240 4344 	movw	r3, #1092	; 0x444
 8002580:	4013      	ands	r3, r2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d107      	bne.n	8002596 <HAL_TIM_PWM_Stop_DMA+0x136>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 0201 	bic.w	r2, r2, #1
 8002594:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40010000 	.word	0x40010000

080025ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d101      	bne.n	80025c6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80025c2:	2302      	movs	r3, #2
 80025c4:	e0b4      	b.n	8002730 <HAL_TIM_PWM_ConfigChannel+0x184>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2202      	movs	r2, #2
 80025d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b0c      	cmp	r3, #12
 80025da:	f200 809f 	bhi.w	800271c <HAL_TIM_PWM_ConfigChannel+0x170>
 80025de:	a201      	add	r2, pc, #4	; (adr r2, 80025e4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80025e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e4:	08002619 	.word	0x08002619
 80025e8:	0800271d 	.word	0x0800271d
 80025ec:	0800271d 	.word	0x0800271d
 80025f0:	0800271d 	.word	0x0800271d
 80025f4:	08002659 	.word	0x08002659
 80025f8:	0800271d 	.word	0x0800271d
 80025fc:	0800271d 	.word	0x0800271d
 8002600:	0800271d 	.word	0x0800271d
 8002604:	0800269b 	.word	0x0800269b
 8002608:	0800271d 	.word	0x0800271d
 800260c:	0800271d 	.word	0x0800271d
 8002610:	0800271d 	.word	0x0800271d
 8002614:	080026db 	.word	0x080026db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68b9      	ldr	r1, [r7, #8]
 800261e:	4618      	mov	r0, r3
 8002620:	f000 f9aa 	bl	8002978 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	699a      	ldr	r2, [r3, #24]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0208 	orr.w	r2, r2, #8
 8002632:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	699a      	ldr	r2, [r3, #24]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 0204 	bic.w	r2, r2, #4
 8002642:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6999      	ldr	r1, [r3, #24]
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	691a      	ldr	r2, [r3, #16]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	430a      	orrs	r2, r1
 8002654:	619a      	str	r2, [r3, #24]
      break;
 8002656:	e062      	b.n	800271e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68b9      	ldr	r1, [r7, #8]
 800265e:	4618      	mov	r0, r3
 8002660:	f000 f9f0 	bl	8002a44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	699a      	ldr	r2, [r3, #24]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002672:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	699a      	ldr	r2, [r3, #24]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002682:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6999      	ldr	r1, [r3, #24]
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	021a      	lsls	r2, r3, #8
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	430a      	orrs	r2, r1
 8002696:	619a      	str	r2, [r3, #24]
      break;
 8002698:	e041      	b.n	800271e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68b9      	ldr	r1, [r7, #8]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f000 fa3b 	bl	8002b1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	69da      	ldr	r2, [r3, #28]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f042 0208 	orr.w	r2, r2, #8
 80026b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	69da      	ldr	r2, [r3, #28]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 0204 	bic.w	r2, r2, #4
 80026c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	69d9      	ldr	r1, [r3, #28]
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	691a      	ldr	r2, [r3, #16]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	430a      	orrs	r2, r1
 80026d6:	61da      	str	r2, [r3, #28]
      break;
 80026d8:	e021      	b.n	800271e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68b9      	ldr	r1, [r7, #8]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f000 fa85 	bl	8002bf0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	69da      	ldr	r2, [r3, #28]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	69da      	ldr	r2, [r3, #28]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002704:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	69d9      	ldr	r1, [r3, #28]
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	021a      	lsls	r2, r3, #8
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	61da      	str	r2, [r3, #28]
      break;
 800271a:	e000      	b.n	800271e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800271c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002780:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f7ff ffe8 	bl	8002760 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8002790:	bf00      	nop
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a4:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d103      	bne.n	80027c0 <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2201      	movs	r2, #1
 80027bc:	771a      	strb	r2, [r3, #28]
 80027be:	e019      	b.n	80027f4 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d103      	bne.n	80027d2 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2202      	movs	r2, #2
 80027ce:	771a      	strb	r2, [r3, #28]
 80027d0:	e010      	b.n	80027f4 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d103      	bne.n	80027e4 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2204      	movs	r2, #4
 80027e0:	771a      	strb	r2, [r3, #28]
 80027e2:	e007      	b.n	80027f4 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d102      	bne.n	80027f4 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2208      	movs	r2, #8
 80027f2:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f7ff ff9f 	bl	8002738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2200      	movs	r2, #0
 80027fe:	771a      	strb	r2, [r3, #28]
}
 8002800:	bf00      	nop
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002814:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	429a      	cmp	r2, r3
 8002826:	d103      	bne.n	8002830 <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2201      	movs	r2, #1
 800282c:	771a      	strb	r2, [r3, #28]
 800282e:	e019      	b.n	8002864 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	429a      	cmp	r2, r3
 8002838:	d103      	bne.n	8002842 <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2202      	movs	r2, #2
 800283e:	771a      	strb	r2, [r3, #28]
 8002840:	e010      	b.n	8002864 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	429a      	cmp	r2, r3
 800284a:	d103      	bne.n	8002854 <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2204      	movs	r2, #4
 8002850:	771a      	strb	r2, [r3, #28]
 8002852:	e007      	b.n	8002864 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	429a      	cmp	r2, r3
 800285c:	d102      	bne.n	8002864 <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2208      	movs	r2, #8
 8002862:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f7ff ff71 	bl	800274c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	771a      	strb	r2, [r3, #28]
}
 8002870:	bf00      	nop
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a34      	ldr	r2, [pc, #208]	; (800295c <TIM_Base_SetConfig+0xe4>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d00f      	beq.n	80028b0 <TIM_Base_SetConfig+0x38>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002896:	d00b      	beq.n	80028b0 <TIM_Base_SetConfig+0x38>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a31      	ldr	r2, [pc, #196]	; (8002960 <TIM_Base_SetConfig+0xe8>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d007      	beq.n	80028b0 <TIM_Base_SetConfig+0x38>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a30      	ldr	r2, [pc, #192]	; (8002964 <TIM_Base_SetConfig+0xec>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d003      	beq.n	80028b0 <TIM_Base_SetConfig+0x38>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a2f      	ldr	r2, [pc, #188]	; (8002968 <TIM_Base_SetConfig+0xf0>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d108      	bne.n	80028c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	4313      	orrs	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a25      	ldr	r2, [pc, #148]	; (800295c <TIM_Base_SetConfig+0xe4>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d01b      	beq.n	8002902 <TIM_Base_SetConfig+0x8a>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028d0:	d017      	beq.n	8002902 <TIM_Base_SetConfig+0x8a>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a22      	ldr	r2, [pc, #136]	; (8002960 <TIM_Base_SetConfig+0xe8>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d013      	beq.n	8002902 <TIM_Base_SetConfig+0x8a>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a21      	ldr	r2, [pc, #132]	; (8002964 <TIM_Base_SetConfig+0xec>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d00f      	beq.n	8002902 <TIM_Base_SetConfig+0x8a>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a20      	ldr	r2, [pc, #128]	; (8002968 <TIM_Base_SetConfig+0xf0>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d00b      	beq.n	8002902 <TIM_Base_SetConfig+0x8a>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a1f      	ldr	r2, [pc, #124]	; (800296c <TIM_Base_SetConfig+0xf4>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d007      	beq.n	8002902 <TIM_Base_SetConfig+0x8a>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a1e      	ldr	r2, [pc, #120]	; (8002970 <TIM_Base_SetConfig+0xf8>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d003      	beq.n	8002902 <TIM_Base_SetConfig+0x8a>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a1d      	ldr	r2, [pc, #116]	; (8002974 <TIM_Base_SetConfig+0xfc>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d108      	bne.n	8002914 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002908:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	4313      	orrs	r3, r2
 8002912:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	4313      	orrs	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a08      	ldr	r2, [pc, #32]	; (800295c <TIM_Base_SetConfig+0xe4>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d103      	bne.n	8002948 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	691a      	ldr	r2, [r3, #16]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	615a      	str	r2, [r3, #20]
}
 800294e:	bf00      	nop
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	40010000 	.word	0x40010000
 8002960:	40000400 	.word	0x40000400
 8002964:	40000800 	.word	0x40000800
 8002968:	40000c00 	.word	0x40000c00
 800296c:	40014000 	.word	0x40014000
 8002970:	40014400 	.word	0x40014400
 8002974:	40014800 	.word	0x40014800

08002978 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002978:	b480      	push	{r7}
 800297a:	b087      	sub	sp, #28
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	f023 0201 	bic.w	r2, r3, #1
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f023 0303 	bic.w	r3, r3, #3
 80029ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f023 0302 	bic.w	r3, r3, #2
 80029c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a1c      	ldr	r2, [pc, #112]	; (8002a40 <TIM_OC1_SetConfig+0xc8>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d10c      	bne.n	80029ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	f023 0308 	bic.w	r3, r3, #8
 80029da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f023 0304 	bic.w	r3, r3, #4
 80029ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a13      	ldr	r2, [pc, #76]	; (8002a40 <TIM_OC1_SetConfig+0xc8>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d111      	bne.n	8002a1a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	621a      	str	r2, [r3, #32]
}
 8002a34:	bf00      	nop
 8002a36:	371c      	adds	r7, #28
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	40010000 	.word	0x40010000

08002a44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b087      	sub	sp, #28
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	f023 0210 	bic.w	r2, r3, #16
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	021b      	lsls	r3, r3, #8
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	f023 0320 	bic.w	r3, r3, #32
 8002a8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	011b      	lsls	r3, r3, #4
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a1e      	ldr	r2, [pc, #120]	; (8002b18 <TIM_OC2_SetConfig+0xd4>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d10d      	bne.n	8002ac0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002aaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	011b      	lsls	r3, r3, #4
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002abe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a15      	ldr	r2, [pc, #84]	; (8002b18 <TIM_OC2_SetConfig+0xd4>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d113      	bne.n	8002af0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ace:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ad6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	621a      	str	r2, [r3, #32]
}
 8002b0a:	bf00      	nop
 8002b0c:	371c      	adds	r7, #28
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	40010000 	.word	0x40010000

08002b1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b087      	sub	sp, #28
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f023 0303 	bic.w	r3, r3, #3
 8002b52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	021b      	lsls	r3, r3, #8
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a1d      	ldr	r2, [pc, #116]	; (8002bec <TIM_OC3_SetConfig+0xd0>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d10d      	bne.n	8002b96 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	021b      	lsls	r3, r3, #8
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a14      	ldr	r2, [pc, #80]	; (8002bec <TIM_OC3_SetConfig+0xd0>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d113      	bne.n	8002bc6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ba4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	011b      	lsls	r3, r3, #4
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	011b      	lsls	r3, r3, #4
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	621a      	str	r2, [r3, #32]
}
 8002be0:	bf00      	nop
 8002be2:	371c      	adds	r7, #28
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	40010000 	.word	0x40010000

08002bf0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b087      	sub	sp, #28
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	021b      	lsls	r3, r3, #8
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	031b      	lsls	r3, r3, #12
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a10      	ldr	r2, [pc, #64]	; (8002c8c <TIM_OC4_SetConfig+0x9c>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d109      	bne.n	8002c64 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	019b      	lsls	r3, r3, #6
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	621a      	str	r2, [r3, #32]
}
 8002c7e:	bf00      	nop
 8002c80:	371c      	adds	r7, #28
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	40010000 	.word	0x40010000

08002c90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b087      	sub	sp, #28
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	f003 031f 	and.w	r3, r3, #31
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6a1a      	ldr	r2, [r3, #32]
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	401a      	ands	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6a1a      	ldr	r2, [r3, #32]
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	f003 031f 	and.w	r3, r3, #31
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	621a      	str	r2, [r3, #32]
}
 8002cce:	bf00      	nop
 8002cd0:	371c      	adds	r7, #28
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b082      	sub	sp, #8
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e03f      	b.n	8002d6c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d106      	bne.n	8002d06 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f004 f89b 	bl	8006e3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2224      	movs	r2, #36	; 0x24
 8002d0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68da      	ldr	r2, [r3, #12]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d1c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f90c 	bl	8002f3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	691a      	ldr	r2, [r3, #16]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d32:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	695a      	ldr	r2, [r3, #20]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d42:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68da      	ldr	r2, [r3, #12]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d52:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2220      	movs	r2, #32
 8002d66:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b088      	sub	sp, #32
 8002d78:	af02      	add	r7, sp, #8
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	603b      	str	r3, [r7, #0]
 8002d80:	4613      	mov	r3, r2
 8002d82:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b20      	cmp	r3, #32
 8002d92:	f040 8083 	bne.w	8002e9c <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d002      	beq.n	8002da2 <HAL_UART_Transmit+0x2e>
 8002d9c:	88fb      	ldrh	r3, [r7, #6]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e07b      	b.n	8002e9e <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d101      	bne.n	8002db4 <HAL_UART_Transmit+0x40>
 8002db0:	2302      	movs	r3, #2
 8002db2:	e074      	b.n	8002e9e <HAL_UART_Transmit+0x12a>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2221      	movs	r2, #33	; 0x21
 8002dc6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002dca:	f7fd fc4f 	bl	800066c <HAL_GetTick>
 8002dce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	88fa      	ldrh	r2, [r7, #6]
 8002dd4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	88fa      	ldrh	r2, [r7, #6]
 8002dda:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002de4:	e042      	b.n	8002e6c <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	3b01      	subs	r3, #1
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dfc:	d122      	bne.n	8002e44 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2200      	movs	r2, #0
 8002e06:	2180      	movs	r1, #128	; 0x80
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 f84c 	bl	8002ea6 <UART_WaitOnFlagUntilTimeout>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e042      	b.n	8002e9e <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	881b      	ldrh	r3, [r3, #0]
 8002e20:	461a      	mov	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e2a:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d103      	bne.n	8002e3c <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	3302      	adds	r3, #2
 8002e38:	60bb      	str	r3, [r7, #8]
 8002e3a:	e017      	b.n	8002e6c <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	60bb      	str	r3, [r7, #8]
 8002e42:	e013      	b.n	8002e6c <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	2180      	movs	r1, #128	; 0x80
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 f829 	bl	8002ea6 <UART_WaitOnFlagUntilTimeout>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e01f      	b.n	8002e9e <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	1c5a      	adds	r2, r3, #1
 8002e62:	60ba      	str	r2, [r7, #8]
 8002e64:	781a      	ldrb	r2, [r3, #0]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1b7      	bne.n	8002de6 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	2140      	movs	r1, #64	; 0x40
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 f810 	bl	8002ea6 <UART_WaitOnFlagUntilTimeout>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e006      	b.n	8002e9e <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2220      	movs	r2, #32
 8002e94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	e000      	b.n	8002e9e <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002e9c:	2302      	movs	r3, #2
  }
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b084      	sub	sp, #16
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	60f8      	str	r0, [r7, #12]
 8002eae:	60b9      	str	r1, [r7, #8]
 8002eb0:	603b      	str	r3, [r7, #0]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eb6:	e02c      	b.n	8002f12 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ebe:	d028      	beq.n	8002f12 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d007      	beq.n	8002ed6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ec6:	f7fd fbd1 	bl	800066c <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d21d      	bcs.n	8002f12 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68da      	ldr	r2, [r3, #12]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ee4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	695a      	ldr	r2, [r3, #20]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 0201 	bic.w	r2, r2, #1
 8002ef4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2220      	movs	r2, #32
 8002efa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2220      	movs	r2, #32
 8002f02:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e00f      	b.n	8002f32 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	bf0c      	ite	eq
 8002f22:	2301      	moveq	r3, #1
 8002f24:	2300      	movne	r3, #0
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	461a      	mov	r2, r3
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d0c3      	beq.n	8002eb8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
	...

08002f3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f40:	b085      	sub	sp, #20
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68da      	ldr	r2, [r3, #12]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	431a      	orrs	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	69db      	ldr	r3, [r3, #28]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002f7e:	f023 030c 	bic.w	r3, r3, #12
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	6812      	ldr	r2, [r2, #0]
 8002f86:	68f9      	ldr	r1, [r7, #12]
 8002f88:	430b      	orrs	r3, r1
 8002f8a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	699a      	ldr	r2, [r3, #24]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002faa:	f040 818b 	bne.w	80032c4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4ac1      	ldr	r2, [pc, #772]	; (80032b8 <UART_SetConfig+0x37c>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d005      	beq.n	8002fc4 <UART_SetConfig+0x88>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4abf      	ldr	r2, [pc, #764]	; (80032bc <UART_SetConfig+0x380>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	f040 80bd 	bne.w	800313e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fc4:	f7fe fca6 	bl	8001914 <HAL_RCC_GetPCLK2Freq>
 8002fc8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	461d      	mov	r5, r3
 8002fce:	f04f 0600 	mov.w	r6, #0
 8002fd2:	46a8      	mov	r8, r5
 8002fd4:	46b1      	mov	r9, r6
 8002fd6:	eb18 0308 	adds.w	r3, r8, r8
 8002fda:	eb49 0409 	adc.w	r4, r9, r9
 8002fde:	4698      	mov	r8, r3
 8002fe0:	46a1      	mov	r9, r4
 8002fe2:	eb18 0805 	adds.w	r8, r8, r5
 8002fe6:	eb49 0906 	adc.w	r9, r9, r6
 8002fea:	f04f 0100 	mov.w	r1, #0
 8002fee:	f04f 0200 	mov.w	r2, #0
 8002ff2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002ff6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002ffa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002ffe:	4688      	mov	r8, r1
 8003000:	4691      	mov	r9, r2
 8003002:	eb18 0005 	adds.w	r0, r8, r5
 8003006:	eb49 0106 	adc.w	r1, r9, r6
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	461d      	mov	r5, r3
 8003010:	f04f 0600 	mov.w	r6, #0
 8003014:	196b      	adds	r3, r5, r5
 8003016:	eb46 0406 	adc.w	r4, r6, r6
 800301a:	461a      	mov	r2, r3
 800301c:	4623      	mov	r3, r4
 800301e:	f7fd f937 	bl	8000290 <__aeabi_uldivmod>
 8003022:	4603      	mov	r3, r0
 8003024:	460c      	mov	r4, r1
 8003026:	461a      	mov	r2, r3
 8003028:	4ba5      	ldr	r3, [pc, #660]	; (80032c0 <UART_SetConfig+0x384>)
 800302a:	fba3 2302 	umull	r2, r3, r3, r2
 800302e:	095b      	lsrs	r3, r3, #5
 8003030:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	461d      	mov	r5, r3
 8003038:	f04f 0600 	mov.w	r6, #0
 800303c:	46a9      	mov	r9, r5
 800303e:	46b2      	mov	sl, r6
 8003040:	eb19 0309 	adds.w	r3, r9, r9
 8003044:	eb4a 040a 	adc.w	r4, sl, sl
 8003048:	4699      	mov	r9, r3
 800304a:	46a2      	mov	sl, r4
 800304c:	eb19 0905 	adds.w	r9, r9, r5
 8003050:	eb4a 0a06 	adc.w	sl, sl, r6
 8003054:	f04f 0100 	mov.w	r1, #0
 8003058:	f04f 0200 	mov.w	r2, #0
 800305c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003060:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003064:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003068:	4689      	mov	r9, r1
 800306a:	4692      	mov	sl, r2
 800306c:	eb19 0005 	adds.w	r0, r9, r5
 8003070:	eb4a 0106 	adc.w	r1, sl, r6
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	461d      	mov	r5, r3
 800307a:	f04f 0600 	mov.w	r6, #0
 800307e:	196b      	adds	r3, r5, r5
 8003080:	eb46 0406 	adc.w	r4, r6, r6
 8003084:	461a      	mov	r2, r3
 8003086:	4623      	mov	r3, r4
 8003088:	f7fd f902 	bl	8000290 <__aeabi_uldivmod>
 800308c:	4603      	mov	r3, r0
 800308e:	460c      	mov	r4, r1
 8003090:	461a      	mov	r2, r3
 8003092:	4b8b      	ldr	r3, [pc, #556]	; (80032c0 <UART_SetConfig+0x384>)
 8003094:	fba3 1302 	umull	r1, r3, r3, r2
 8003098:	095b      	lsrs	r3, r3, #5
 800309a:	2164      	movs	r1, #100	; 0x64
 800309c:	fb01 f303 	mul.w	r3, r1, r3
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	3332      	adds	r3, #50	; 0x32
 80030a6:	4a86      	ldr	r2, [pc, #536]	; (80032c0 <UART_SetConfig+0x384>)
 80030a8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ac:	095b      	lsrs	r3, r3, #5
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030b4:	4498      	add	r8, r3
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	461d      	mov	r5, r3
 80030ba:	f04f 0600 	mov.w	r6, #0
 80030be:	46a9      	mov	r9, r5
 80030c0:	46b2      	mov	sl, r6
 80030c2:	eb19 0309 	adds.w	r3, r9, r9
 80030c6:	eb4a 040a 	adc.w	r4, sl, sl
 80030ca:	4699      	mov	r9, r3
 80030cc:	46a2      	mov	sl, r4
 80030ce:	eb19 0905 	adds.w	r9, r9, r5
 80030d2:	eb4a 0a06 	adc.w	sl, sl, r6
 80030d6:	f04f 0100 	mov.w	r1, #0
 80030da:	f04f 0200 	mov.w	r2, #0
 80030de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80030e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80030ea:	4689      	mov	r9, r1
 80030ec:	4692      	mov	sl, r2
 80030ee:	eb19 0005 	adds.w	r0, r9, r5
 80030f2:	eb4a 0106 	adc.w	r1, sl, r6
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	461d      	mov	r5, r3
 80030fc:	f04f 0600 	mov.w	r6, #0
 8003100:	196b      	adds	r3, r5, r5
 8003102:	eb46 0406 	adc.w	r4, r6, r6
 8003106:	461a      	mov	r2, r3
 8003108:	4623      	mov	r3, r4
 800310a:	f7fd f8c1 	bl	8000290 <__aeabi_uldivmod>
 800310e:	4603      	mov	r3, r0
 8003110:	460c      	mov	r4, r1
 8003112:	461a      	mov	r2, r3
 8003114:	4b6a      	ldr	r3, [pc, #424]	; (80032c0 <UART_SetConfig+0x384>)
 8003116:	fba3 1302 	umull	r1, r3, r3, r2
 800311a:	095b      	lsrs	r3, r3, #5
 800311c:	2164      	movs	r1, #100	; 0x64
 800311e:	fb01 f303 	mul.w	r3, r1, r3
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	3332      	adds	r3, #50	; 0x32
 8003128:	4a65      	ldr	r2, [pc, #404]	; (80032c0 <UART_SetConfig+0x384>)
 800312a:	fba2 2303 	umull	r2, r3, r2, r3
 800312e:	095b      	lsrs	r3, r3, #5
 8003130:	f003 0207 	and.w	r2, r3, #7
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4442      	add	r2, r8
 800313a:	609a      	str	r2, [r3, #8]
 800313c:	e26f      	b.n	800361e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800313e:	f7fe fbd5 	bl	80018ec <HAL_RCC_GetPCLK1Freq>
 8003142:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	461d      	mov	r5, r3
 8003148:	f04f 0600 	mov.w	r6, #0
 800314c:	46a8      	mov	r8, r5
 800314e:	46b1      	mov	r9, r6
 8003150:	eb18 0308 	adds.w	r3, r8, r8
 8003154:	eb49 0409 	adc.w	r4, r9, r9
 8003158:	4698      	mov	r8, r3
 800315a:	46a1      	mov	r9, r4
 800315c:	eb18 0805 	adds.w	r8, r8, r5
 8003160:	eb49 0906 	adc.w	r9, r9, r6
 8003164:	f04f 0100 	mov.w	r1, #0
 8003168:	f04f 0200 	mov.w	r2, #0
 800316c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003170:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003174:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003178:	4688      	mov	r8, r1
 800317a:	4691      	mov	r9, r2
 800317c:	eb18 0005 	adds.w	r0, r8, r5
 8003180:	eb49 0106 	adc.w	r1, r9, r6
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	461d      	mov	r5, r3
 800318a:	f04f 0600 	mov.w	r6, #0
 800318e:	196b      	adds	r3, r5, r5
 8003190:	eb46 0406 	adc.w	r4, r6, r6
 8003194:	461a      	mov	r2, r3
 8003196:	4623      	mov	r3, r4
 8003198:	f7fd f87a 	bl	8000290 <__aeabi_uldivmod>
 800319c:	4603      	mov	r3, r0
 800319e:	460c      	mov	r4, r1
 80031a0:	461a      	mov	r2, r3
 80031a2:	4b47      	ldr	r3, [pc, #284]	; (80032c0 <UART_SetConfig+0x384>)
 80031a4:	fba3 2302 	umull	r2, r3, r3, r2
 80031a8:	095b      	lsrs	r3, r3, #5
 80031aa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	461d      	mov	r5, r3
 80031b2:	f04f 0600 	mov.w	r6, #0
 80031b6:	46a9      	mov	r9, r5
 80031b8:	46b2      	mov	sl, r6
 80031ba:	eb19 0309 	adds.w	r3, r9, r9
 80031be:	eb4a 040a 	adc.w	r4, sl, sl
 80031c2:	4699      	mov	r9, r3
 80031c4:	46a2      	mov	sl, r4
 80031c6:	eb19 0905 	adds.w	r9, r9, r5
 80031ca:	eb4a 0a06 	adc.w	sl, sl, r6
 80031ce:	f04f 0100 	mov.w	r1, #0
 80031d2:	f04f 0200 	mov.w	r2, #0
 80031d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031e2:	4689      	mov	r9, r1
 80031e4:	4692      	mov	sl, r2
 80031e6:	eb19 0005 	adds.w	r0, r9, r5
 80031ea:	eb4a 0106 	adc.w	r1, sl, r6
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	461d      	mov	r5, r3
 80031f4:	f04f 0600 	mov.w	r6, #0
 80031f8:	196b      	adds	r3, r5, r5
 80031fa:	eb46 0406 	adc.w	r4, r6, r6
 80031fe:	461a      	mov	r2, r3
 8003200:	4623      	mov	r3, r4
 8003202:	f7fd f845 	bl	8000290 <__aeabi_uldivmod>
 8003206:	4603      	mov	r3, r0
 8003208:	460c      	mov	r4, r1
 800320a:	461a      	mov	r2, r3
 800320c:	4b2c      	ldr	r3, [pc, #176]	; (80032c0 <UART_SetConfig+0x384>)
 800320e:	fba3 1302 	umull	r1, r3, r3, r2
 8003212:	095b      	lsrs	r3, r3, #5
 8003214:	2164      	movs	r1, #100	; 0x64
 8003216:	fb01 f303 	mul.w	r3, r1, r3
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	3332      	adds	r3, #50	; 0x32
 8003220:	4a27      	ldr	r2, [pc, #156]	; (80032c0 <UART_SetConfig+0x384>)
 8003222:	fba2 2303 	umull	r2, r3, r2, r3
 8003226:	095b      	lsrs	r3, r3, #5
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800322e:	4498      	add	r8, r3
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	461d      	mov	r5, r3
 8003234:	f04f 0600 	mov.w	r6, #0
 8003238:	46a9      	mov	r9, r5
 800323a:	46b2      	mov	sl, r6
 800323c:	eb19 0309 	adds.w	r3, r9, r9
 8003240:	eb4a 040a 	adc.w	r4, sl, sl
 8003244:	4699      	mov	r9, r3
 8003246:	46a2      	mov	sl, r4
 8003248:	eb19 0905 	adds.w	r9, r9, r5
 800324c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003250:	f04f 0100 	mov.w	r1, #0
 8003254:	f04f 0200 	mov.w	r2, #0
 8003258:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800325c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003260:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003264:	4689      	mov	r9, r1
 8003266:	4692      	mov	sl, r2
 8003268:	eb19 0005 	adds.w	r0, r9, r5
 800326c:	eb4a 0106 	adc.w	r1, sl, r6
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	461d      	mov	r5, r3
 8003276:	f04f 0600 	mov.w	r6, #0
 800327a:	196b      	adds	r3, r5, r5
 800327c:	eb46 0406 	adc.w	r4, r6, r6
 8003280:	461a      	mov	r2, r3
 8003282:	4623      	mov	r3, r4
 8003284:	f7fd f804 	bl	8000290 <__aeabi_uldivmod>
 8003288:	4603      	mov	r3, r0
 800328a:	460c      	mov	r4, r1
 800328c:	461a      	mov	r2, r3
 800328e:	4b0c      	ldr	r3, [pc, #48]	; (80032c0 <UART_SetConfig+0x384>)
 8003290:	fba3 1302 	umull	r1, r3, r3, r2
 8003294:	095b      	lsrs	r3, r3, #5
 8003296:	2164      	movs	r1, #100	; 0x64
 8003298:	fb01 f303 	mul.w	r3, r1, r3
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	3332      	adds	r3, #50	; 0x32
 80032a2:	4a07      	ldr	r2, [pc, #28]	; (80032c0 <UART_SetConfig+0x384>)
 80032a4:	fba2 2303 	umull	r2, r3, r2, r3
 80032a8:	095b      	lsrs	r3, r3, #5
 80032aa:	f003 0207 	and.w	r2, r3, #7
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4442      	add	r2, r8
 80032b4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80032b6:	e1b2      	b.n	800361e <UART_SetConfig+0x6e2>
 80032b8:	40011000 	.word	0x40011000
 80032bc:	40011400 	.word	0x40011400
 80032c0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4ad7      	ldr	r2, [pc, #860]	; (8003628 <UART_SetConfig+0x6ec>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d005      	beq.n	80032da <UART_SetConfig+0x39e>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4ad6      	ldr	r2, [pc, #856]	; (800362c <UART_SetConfig+0x6f0>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	f040 80d1 	bne.w	800347c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80032da:	f7fe fb1b 	bl	8001914 <HAL_RCC_GetPCLK2Freq>
 80032de:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	469a      	mov	sl, r3
 80032e4:	f04f 0b00 	mov.w	fp, #0
 80032e8:	46d0      	mov	r8, sl
 80032ea:	46d9      	mov	r9, fp
 80032ec:	eb18 0308 	adds.w	r3, r8, r8
 80032f0:	eb49 0409 	adc.w	r4, r9, r9
 80032f4:	4698      	mov	r8, r3
 80032f6:	46a1      	mov	r9, r4
 80032f8:	eb18 080a 	adds.w	r8, r8, sl
 80032fc:	eb49 090b 	adc.w	r9, r9, fp
 8003300:	f04f 0100 	mov.w	r1, #0
 8003304:	f04f 0200 	mov.w	r2, #0
 8003308:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800330c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003310:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003314:	4688      	mov	r8, r1
 8003316:	4691      	mov	r9, r2
 8003318:	eb1a 0508 	adds.w	r5, sl, r8
 800331c:	eb4b 0609 	adc.w	r6, fp, r9
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	4619      	mov	r1, r3
 8003326:	f04f 0200 	mov.w	r2, #0
 800332a:	f04f 0300 	mov.w	r3, #0
 800332e:	f04f 0400 	mov.w	r4, #0
 8003332:	0094      	lsls	r4, r2, #2
 8003334:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003338:	008b      	lsls	r3, r1, #2
 800333a:	461a      	mov	r2, r3
 800333c:	4623      	mov	r3, r4
 800333e:	4628      	mov	r0, r5
 8003340:	4631      	mov	r1, r6
 8003342:	f7fc ffa5 	bl	8000290 <__aeabi_uldivmod>
 8003346:	4603      	mov	r3, r0
 8003348:	460c      	mov	r4, r1
 800334a:	461a      	mov	r2, r3
 800334c:	4bb8      	ldr	r3, [pc, #736]	; (8003630 <UART_SetConfig+0x6f4>)
 800334e:	fba3 2302 	umull	r2, r3, r3, r2
 8003352:	095b      	lsrs	r3, r3, #5
 8003354:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	469b      	mov	fp, r3
 800335c:	f04f 0c00 	mov.w	ip, #0
 8003360:	46d9      	mov	r9, fp
 8003362:	46e2      	mov	sl, ip
 8003364:	eb19 0309 	adds.w	r3, r9, r9
 8003368:	eb4a 040a 	adc.w	r4, sl, sl
 800336c:	4699      	mov	r9, r3
 800336e:	46a2      	mov	sl, r4
 8003370:	eb19 090b 	adds.w	r9, r9, fp
 8003374:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003378:	f04f 0100 	mov.w	r1, #0
 800337c:	f04f 0200 	mov.w	r2, #0
 8003380:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003384:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003388:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800338c:	4689      	mov	r9, r1
 800338e:	4692      	mov	sl, r2
 8003390:	eb1b 0509 	adds.w	r5, fp, r9
 8003394:	eb4c 060a 	adc.w	r6, ip, sl
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	4619      	mov	r1, r3
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	f04f 0300 	mov.w	r3, #0
 80033a6:	f04f 0400 	mov.w	r4, #0
 80033aa:	0094      	lsls	r4, r2, #2
 80033ac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80033b0:	008b      	lsls	r3, r1, #2
 80033b2:	461a      	mov	r2, r3
 80033b4:	4623      	mov	r3, r4
 80033b6:	4628      	mov	r0, r5
 80033b8:	4631      	mov	r1, r6
 80033ba:	f7fc ff69 	bl	8000290 <__aeabi_uldivmod>
 80033be:	4603      	mov	r3, r0
 80033c0:	460c      	mov	r4, r1
 80033c2:	461a      	mov	r2, r3
 80033c4:	4b9a      	ldr	r3, [pc, #616]	; (8003630 <UART_SetConfig+0x6f4>)
 80033c6:	fba3 1302 	umull	r1, r3, r3, r2
 80033ca:	095b      	lsrs	r3, r3, #5
 80033cc:	2164      	movs	r1, #100	; 0x64
 80033ce:	fb01 f303 	mul.w	r3, r1, r3
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	3332      	adds	r3, #50	; 0x32
 80033d8:	4a95      	ldr	r2, [pc, #596]	; (8003630 <UART_SetConfig+0x6f4>)
 80033da:	fba2 2303 	umull	r2, r3, r2, r3
 80033de:	095b      	lsrs	r3, r3, #5
 80033e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033e4:	4498      	add	r8, r3
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	469b      	mov	fp, r3
 80033ea:	f04f 0c00 	mov.w	ip, #0
 80033ee:	46d9      	mov	r9, fp
 80033f0:	46e2      	mov	sl, ip
 80033f2:	eb19 0309 	adds.w	r3, r9, r9
 80033f6:	eb4a 040a 	adc.w	r4, sl, sl
 80033fa:	4699      	mov	r9, r3
 80033fc:	46a2      	mov	sl, r4
 80033fe:	eb19 090b 	adds.w	r9, r9, fp
 8003402:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003406:	f04f 0100 	mov.w	r1, #0
 800340a:	f04f 0200 	mov.w	r2, #0
 800340e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003412:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003416:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800341a:	4689      	mov	r9, r1
 800341c:	4692      	mov	sl, r2
 800341e:	eb1b 0509 	adds.w	r5, fp, r9
 8003422:	eb4c 060a 	adc.w	r6, ip, sl
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	4619      	mov	r1, r3
 800342c:	f04f 0200 	mov.w	r2, #0
 8003430:	f04f 0300 	mov.w	r3, #0
 8003434:	f04f 0400 	mov.w	r4, #0
 8003438:	0094      	lsls	r4, r2, #2
 800343a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800343e:	008b      	lsls	r3, r1, #2
 8003440:	461a      	mov	r2, r3
 8003442:	4623      	mov	r3, r4
 8003444:	4628      	mov	r0, r5
 8003446:	4631      	mov	r1, r6
 8003448:	f7fc ff22 	bl	8000290 <__aeabi_uldivmod>
 800344c:	4603      	mov	r3, r0
 800344e:	460c      	mov	r4, r1
 8003450:	461a      	mov	r2, r3
 8003452:	4b77      	ldr	r3, [pc, #476]	; (8003630 <UART_SetConfig+0x6f4>)
 8003454:	fba3 1302 	umull	r1, r3, r3, r2
 8003458:	095b      	lsrs	r3, r3, #5
 800345a:	2164      	movs	r1, #100	; 0x64
 800345c:	fb01 f303 	mul.w	r3, r1, r3
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	011b      	lsls	r3, r3, #4
 8003464:	3332      	adds	r3, #50	; 0x32
 8003466:	4a72      	ldr	r2, [pc, #456]	; (8003630 <UART_SetConfig+0x6f4>)
 8003468:	fba2 2303 	umull	r2, r3, r2, r3
 800346c:	095b      	lsrs	r3, r3, #5
 800346e:	f003 020f 	and.w	r2, r3, #15
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4442      	add	r2, r8
 8003478:	609a      	str	r2, [r3, #8]
 800347a:	e0d0      	b.n	800361e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800347c:	f7fe fa36 	bl	80018ec <HAL_RCC_GetPCLK1Freq>
 8003480:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	469a      	mov	sl, r3
 8003486:	f04f 0b00 	mov.w	fp, #0
 800348a:	46d0      	mov	r8, sl
 800348c:	46d9      	mov	r9, fp
 800348e:	eb18 0308 	adds.w	r3, r8, r8
 8003492:	eb49 0409 	adc.w	r4, r9, r9
 8003496:	4698      	mov	r8, r3
 8003498:	46a1      	mov	r9, r4
 800349a:	eb18 080a 	adds.w	r8, r8, sl
 800349e:	eb49 090b 	adc.w	r9, r9, fp
 80034a2:	f04f 0100 	mov.w	r1, #0
 80034a6:	f04f 0200 	mov.w	r2, #0
 80034aa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80034ae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80034b2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80034b6:	4688      	mov	r8, r1
 80034b8:	4691      	mov	r9, r2
 80034ba:	eb1a 0508 	adds.w	r5, sl, r8
 80034be:	eb4b 0609 	adc.w	r6, fp, r9
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	4619      	mov	r1, r3
 80034c8:	f04f 0200 	mov.w	r2, #0
 80034cc:	f04f 0300 	mov.w	r3, #0
 80034d0:	f04f 0400 	mov.w	r4, #0
 80034d4:	0094      	lsls	r4, r2, #2
 80034d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80034da:	008b      	lsls	r3, r1, #2
 80034dc:	461a      	mov	r2, r3
 80034de:	4623      	mov	r3, r4
 80034e0:	4628      	mov	r0, r5
 80034e2:	4631      	mov	r1, r6
 80034e4:	f7fc fed4 	bl	8000290 <__aeabi_uldivmod>
 80034e8:	4603      	mov	r3, r0
 80034ea:	460c      	mov	r4, r1
 80034ec:	461a      	mov	r2, r3
 80034ee:	4b50      	ldr	r3, [pc, #320]	; (8003630 <UART_SetConfig+0x6f4>)
 80034f0:	fba3 2302 	umull	r2, r3, r3, r2
 80034f4:	095b      	lsrs	r3, r3, #5
 80034f6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	469b      	mov	fp, r3
 80034fe:	f04f 0c00 	mov.w	ip, #0
 8003502:	46d9      	mov	r9, fp
 8003504:	46e2      	mov	sl, ip
 8003506:	eb19 0309 	adds.w	r3, r9, r9
 800350a:	eb4a 040a 	adc.w	r4, sl, sl
 800350e:	4699      	mov	r9, r3
 8003510:	46a2      	mov	sl, r4
 8003512:	eb19 090b 	adds.w	r9, r9, fp
 8003516:	eb4a 0a0c 	adc.w	sl, sl, ip
 800351a:	f04f 0100 	mov.w	r1, #0
 800351e:	f04f 0200 	mov.w	r2, #0
 8003522:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003526:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800352a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800352e:	4689      	mov	r9, r1
 8003530:	4692      	mov	sl, r2
 8003532:	eb1b 0509 	adds.w	r5, fp, r9
 8003536:	eb4c 060a 	adc.w	r6, ip, sl
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	4619      	mov	r1, r3
 8003540:	f04f 0200 	mov.w	r2, #0
 8003544:	f04f 0300 	mov.w	r3, #0
 8003548:	f04f 0400 	mov.w	r4, #0
 800354c:	0094      	lsls	r4, r2, #2
 800354e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003552:	008b      	lsls	r3, r1, #2
 8003554:	461a      	mov	r2, r3
 8003556:	4623      	mov	r3, r4
 8003558:	4628      	mov	r0, r5
 800355a:	4631      	mov	r1, r6
 800355c:	f7fc fe98 	bl	8000290 <__aeabi_uldivmod>
 8003560:	4603      	mov	r3, r0
 8003562:	460c      	mov	r4, r1
 8003564:	461a      	mov	r2, r3
 8003566:	4b32      	ldr	r3, [pc, #200]	; (8003630 <UART_SetConfig+0x6f4>)
 8003568:	fba3 1302 	umull	r1, r3, r3, r2
 800356c:	095b      	lsrs	r3, r3, #5
 800356e:	2164      	movs	r1, #100	; 0x64
 8003570:	fb01 f303 	mul.w	r3, r1, r3
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	3332      	adds	r3, #50	; 0x32
 800357a:	4a2d      	ldr	r2, [pc, #180]	; (8003630 <UART_SetConfig+0x6f4>)
 800357c:	fba2 2303 	umull	r2, r3, r2, r3
 8003580:	095b      	lsrs	r3, r3, #5
 8003582:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003586:	4498      	add	r8, r3
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	469b      	mov	fp, r3
 800358c:	f04f 0c00 	mov.w	ip, #0
 8003590:	46d9      	mov	r9, fp
 8003592:	46e2      	mov	sl, ip
 8003594:	eb19 0309 	adds.w	r3, r9, r9
 8003598:	eb4a 040a 	adc.w	r4, sl, sl
 800359c:	4699      	mov	r9, r3
 800359e:	46a2      	mov	sl, r4
 80035a0:	eb19 090b 	adds.w	r9, r9, fp
 80035a4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80035a8:	f04f 0100 	mov.w	r1, #0
 80035ac:	f04f 0200 	mov.w	r2, #0
 80035b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80035b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80035bc:	4689      	mov	r9, r1
 80035be:	4692      	mov	sl, r2
 80035c0:	eb1b 0509 	adds.w	r5, fp, r9
 80035c4:	eb4c 060a 	adc.w	r6, ip, sl
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	4619      	mov	r1, r3
 80035ce:	f04f 0200 	mov.w	r2, #0
 80035d2:	f04f 0300 	mov.w	r3, #0
 80035d6:	f04f 0400 	mov.w	r4, #0
 80035da:	0094      	lsls	r4, r2, #2
 80035dc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80035e0:	008b      	lsls	r3, r1, #2
 80035e2:	461a      	mov	r2, r3
 80035e4:	4623      	mov	r3, r4
 80035e6:	4628      	mov	r0, r5
 80035e8:	4631      	mov	r1, r6
 80035ea:	f7fc fe51 	bl	8000290 <__aeabi_uldivmod>
 80035ee:	4603      	mov	r3, r0
 80035f0:	460c      	mov	r4, r1
 80035f2:	461a      	mov	r2, r3
 80035f4:	4b0e      	ldr	r3, [pc, #56]	; (8003630 <UART_SetConfig+0x6f4>)
 80035f6:	fba3 1302 	umull	r1, r3, r3, r2
 80035fa:	095b      	lsrs	r3, r3, #5
 80035fc:	2164      	movs	r1, #100	; 0x64
 80035fe:	fb01 f303 	mul.w	r3, r1, r3
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	011b      	lsls	r3, r3, #4
 8003606:	3332      	adds	r3, #50	; 0x32
 8003608:	4a09      	ldr	r2, [pc, #36]	; (8003630 <UART_SetConfig+0x6f4>)
 800360a:	fba2 2303 	umull	r2, r3, r2, r3
 800360e:	095b      	lsrs	r3, r3, #5
 8003610:	f003 020f 	and.w	r2, r3, #15
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4442      	add	r2, r8
 800361a:	609a      	str	r2, [r3, #8]
}
 800361c:	e7ff      	b.n	800361e <UART_SetConfig+0x6e2>
 800361e:	bf00      	nop
 8003620:	3714      	adds	r7, #20
 8003622:	46bd      	mov	sp, r7
 8003624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003628:	40011000 	.word	0x40011000
 800362c:	40011400 	.word	0x40011400
 8003630:	51eb851f 	.word	0x51eb851f

08003634 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	4603      	mov	r3, r0
 800363c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800363e:	79fb      	ldrb	r3, [r7, #7]
 8003640:	4a08      	ldr	r2, [pc, #32]	; (8003664 <disk_status+0x30>)
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	79fa      	ldrb	r2, [r7, #7]
 800364c:	4905      	ldr	r1, [pc, #20]	; (8003664 <disk_status+0x30>)
 800364e:	440a      	add	r2, r1
 8003650:	7a12      	ldrb	r2, [r2, #8]
 8003652:	4610      	mov	r0, r2
 8003654:	4798      	blx	r3
 8003656:	4603      	mov	r3, r0
 8003658:	73fb      	strb	r3, [r7, #15]
  return stat;
 800365a:	7bfb      	ldrb	r3, [r7, #15]
}
 800365c:	4618      	mov	r0, r3
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	200002c8 	.word	0x200002c8

08003668 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	4603      	mov	r3, r0
 8003670:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003672:	2300      	movs	r3, #0
 8003674:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003676:	79fb      	ldrb	r3, [r7, #7]
 8003678:	4a0d      	ldr	r2, [pc, #52]	; (80036b0 <disk_initialize+0x48>)
 800367a:	5cd3      	ldrb	r3, [r2, r3]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d111      	bne.n	80036a4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003680:	79fb      	ldrb	r3, [r7, #7]
 8003682:	4a0b      	ldr	r2, [pc, #44]	; (80036b0 <disk_initialize+0x48>)
 8003684:	2101      	movs	r1, #1
 8003686:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003688:	79fb      	ldrb	r3, [r7, #7]
 800368a:	4a09      	ldr	r2, [pc, #36]	; (80036b0 <disk_initialize+0x48>)
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4413      	add	r3, r2
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	79fa      	ldrb	r2, [r7, #7]
 8003696:	4906      	ldr	r1, [pc, #24]	; (80036b0 <disk_initialize+0x48>)
 8003698:	440a      	add	r2, r1
 800369a:	7a12      	ldrb	r2, [r2, #8]
 800369c:	4610      	mov	r0, r2
 800369e:	4798      	blx	r3
 80036a0:	4603      	mov	r3, r0
 80036a2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80036a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	200002c8 	.word	0x200002c8

080036b4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80036b4:	b590      	push	{r4, r7, lr}
 80036b6:	b087      	sub	sp, #28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60b9      	str	r1, [r7, #8]
 80036bc:	607a      	str	r2, [r7, #4]
 80036be:	603b      	str	r3, [r7, #0]
 80036c0:	4603      	mov	r3, r0
 80036c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
 80036c6:	4a0a      	ldr	r2, [pc, #40]	; (80036f0 <disk_read+0x3c>)
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	689c      	ldr	r4, [r3, #8]
 80036d0:	7bfb      	ldrb	r3, [r7, #15]
 80036d2:	4a07      	ldr	r2, [pc, #28]	; (80036f0 <disk_read+0x3c>)
 80036d4:	4413      	add	r3, r2
 80036d6:	7a18      	ldrb	r0, [r3, #8]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	68b9      	ldr	r1, [r7, #8]
 80036de:	47a0      	blx	r4
 80036e0:	4603      	mov	r3, r0
 80036e2:	75fb      	strb	r3, [r7, #23]
  return res;
 80036e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	371c      	adds	r7, #28
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd90      	pop	{r4, r7, pc}
 80036ee:	bf00      	nop
 80036f0:	200002c8 	.word	0x200002c8

080036f4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80036f4:	b590      	push	{r4, r7, lr}
 80036f6:	b087      	sub	sp, #28
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60b9      	str	r1, [r7, #8]
 80036fc:	607a      	str	r2, [r7, #4]
 80036fe:	603b      	str	r3, [r7, #0]
 8003700:	4603      	mov	r3, r0
 8003702:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003704:	7bfb      	ldrb	r3, [r7, #15]
 8003706:	4a0a      	ldr	r2, [pc, #40]	; (8003730 <disk_write+0x3c>)
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4413      	add	r3, r2
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	68dc      	ldr	r4, [r3, #12]
 8003710:	7bfb      	ldrb	r3, [r7, #15]
 8003712:	4a07      	ldr	r2, [pc, #28]	; (8003730 <disk_write+0x3c>)
 8003714:	4413      	add	r3, r2
 8003716:	7a18      	ldrb	r0, [r3, #8]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	68b9      	ldr	r1, [r7, #8]
 800371e:	47a0      	blx	r4
 8003720:	4603      	mov	r3, r0
 8003722:	75fb      	strb	r3, [r7, #23]
  return res;
 8003724:	7dfb      	ldrb	r3, [r7, #23]
}
 8003726:	4618      	mov	r0, r3
 8003728:	371c      	adds	r7, #28
 800372a:	46bd      	mov	sp, r7
 800372c:	bd90      	pop	{r4, r7, pc}
 800372e:	bf00      	nop
 8003730:	200002c8 	.word	0x200002c8

08003734 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	4603      	mov	r3, r0
 800373c:	603a      	str	r2, [r7, #0]
 800373e:	71fb      	strb	r3, [r7, #7]
 8003740:	460b      	mov	r3, r1
 8003742:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003744:	79fb      	ldrb	r3, [r7, #7]
 8003746:	4a09      	ldr	r2, [pc, #36]	; (800376c <disk_ioctl+0x38>)
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	4413      	add	r3, r2
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	79fa      	ldrb	r2, [r7, #7]
 8003752:	4906      	ldr	r1, [pc, #24]	; (800376c <disk_ioctl+0x38>)
 8003754:	440a      	add	r2, r1
 8003756:	7a10      	ldrb	r0, [r2, #8]
 8003758:	79b9      	ldrb	r1, [r7, #6]
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	4798      	blx	r3
 800375e:	4603      	mov	r3, r0
 8003760:	73fb      	strb	r3, [r7, #15]
  return res;
 8003762:	7bfb      	ldrb	r3, [r7, #15]
}
 8003764:	4618      	mov	r0, r3
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	200002c8 	.word	0x200002c8

08003770 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	3301      	adds	r3, #1
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003780:	89fb      	ldrh	r3, [r7, #14]
 8003782:	021b      	lsls	r3, r3, #8
 8003784:	b21a      	sxth	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	b21b      	sxth	r3, r3
 800378c:	4313      	orrs	r3, r2
 800378e:	b21b      	sxth	r3, r3
 8003790:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003792:	89fb      	ldrh	r3, [r7, #14]
}
 8003794:	4618      	mov	r0, r3
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3303      	adds	r3, #3
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	021b      	lsls	r3, r3, #8
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	3202      	adds	r2, #2
 80037b8:	7812      	ldrb	r2, [r2, #0]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	021b      	lsls	r3, r3, #8
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	3201      	adds	r2, #1
 80037c6:	7812      	ldrb	r2, [r2, #0]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	021b      	lsls	r3, r3, #8
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	7812      	ldrb	r2, [r2, #0]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	60fb      	str	r3, [r7, #12]
	return rv;
 80037d8:	68fb      	ldr	r3, [r7, #12]
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3714      	adds	r7, #20
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr

080037e6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80037e6:	b480      	push	{r7}
 80037e8:	b083      	sub	sp, #12
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
 80037ee:	460b      	mov	r3, r1
 80037f0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	1c5a      	adds	r2, r3, #1
 80037f6:	607a      	str	r2, [r7, #4]
 80037f8:	887a      	ldrh	r2, [r7, #2]
 80037fa:	b2d2      	uxtb	r2, r2
 80037fc:	701a      	strb	r2, [r3, #0]
 80037fe:	887b      	ldrh	r3, [r7, #2]
 8003800:	0a1b      	lsrs	r3, r3, #8
 8003802:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	1c5a      	adds	r2, r3, #1
 8003808:	607a      	str	r2, [r7, #4]
 800380a:	887a      	ldrh	r2, [r7, #2]
 800380c:	b2d2      	uxtb	r2, r2
 800380e:	701a      	strb	r2, [r3, #0]
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	1c5a      	adds	r2, r3, #1
 800382a:	607a      	str	r2, [r7, #4]
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	701a      	strb	r2, [r3, #0]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	0a1b      	lsrs	r3, r3, #8
 8003836:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	1c5a      	adds	r2, r3, #1
 800383c:	607a      	str	r2, [r7, #4]
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	b2d2      	uxtb	r2, r2
 8003842:	701a      	strb	r2, [r3, #0]
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	0a1b      	lsrs	r3, r3, #8
 8003848:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	1c5a      	adds	r2, r3, #1
 800384e:	607a      	str	r2, [r7, #4]
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	701a      	strb	r2, [r3, #0]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	0a1b      	lsrs	r3, r3, #8
 800385a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	1c5a      	adds	r2, r3, #1
 8003860:	607a      	str	r2, [r7, #4]
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	b2d2      	uxtb	r2, r2
 8003866:	701a      	strb	r2, [r3, #0]
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003874:	b480      	push	{r7}
 8003876:	b087      	sub	sp, #28
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	1c5a      	adds	r2, r3, #1
 8003888:	617a      	str	r2, [r7, #20]
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	b2d2      	uxtb	r2, r2
 800388e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3b01      	subs	r3, #1
 8003894:	607b      	str	r3, [r7, #4]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1f3      	bne.n	8003884 <mem_set+0x10>
}
 800389c:	bf00      	nop
 800389e:	371c      	adds	r7, #28
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80038a8:	b480      	push	{r7}
 80038aa:	b089      	sub	sp, #36	; 0x24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	61fb      	str	r3, [r7, #28]
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80038bc:	2300      	movs	r3, #0
 80038be:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	1c5a      	adds	r2, r3, #1
 80038c4:	61fa      	str	r2, [r7, #28]
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	4619      	mov	r1, r3
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	1c5a      	adds	r2, r3, #1
 80038ce:	61ba      	str	r2, [r7, #24]
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	1acb      	subs	r3, r1, r3
 80038d4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	3b01      	subs	r3, #1
 80038da:	607b      	str	r3, [r7, #4]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d002      	beq.n	80038e8 <mem_cmp+0x40>
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d0eb      	beq.n	80038c0 <mem_cmp+0x18>

	return r;
 80038e8:	697b      	ldr	r3, [r7, #20]
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3724      	adds	r7, #36	; 0x24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80038f6:	b480      	push	{r7}
 80038f8:	b083      	sub	sp, #12
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
 80038fe:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003900:	e002      	b.n	8003908 <chk_chr+0x12>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	3301      	adds	r3, #1
 8003906:	607b      	str	r3, [r7, #4]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d005      	beq.n	800391c <chk_chr+0x26>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	461a      	mov	r2, r3
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	4293      	cmp	r3, r2
 800391a:	d1f2      	bne.n	8003902 <chk_chr+0xc>
	return *str;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	781b      	ldrb	r3, [r3, #0]
}
 8003920:	4618      	mov	r0, r3
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003936:	2300      	movs	r3, #0
 8003938:	60fb      	str	r3, [r7, #12]
 800393a:	e01f      	b.n	800397c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800393c:	4a41      	ldr	r2, [pc, #260]	; (8003a44 <inc_lock+0x118>)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	011b      	lsls	r3, r3, #4
 8003942:	4413      	add	r3, r2
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	429a      	cmp	r2, r3
 800394c:	d113      	bne.n	8003976 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800394e:	4a3d      	ldr	r2, [pc, #244]	; (8003a44 <inc_lock+0x118>)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	011b      	lsls	r3, r3, #4
 8003954:	4413      	add	r3, r2
 8003956:	3304      	adds	r3, #4
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800395e:	429a      	cmp	r2, r3
 8003960:	d109      	bne.n	8003976 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8003962:	4a38      	ldr	r2, [pc, #224]	; (8003a44 <inc_lock+0x118>)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	011b      	lsls	r3, r3, #4
 8003968:	4413      	add	r3, r2
 800396a:	3308      	adds	r3, #8
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8003972:	429a      	cmp	r2, r3
 8003974:	d006      	beq.n	8003984 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	3301      	adds	r3, #1
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d9dc      	bls.n	800393c <inc_lock+0x10>
 8003982:	e000      	b.n	8003986 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8003984:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2b02      	cmp	r3, #2
 800398a:	d132      	bne.n	80039f2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800398c:	2300      	movs	r3, #0
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	e002      	b.n	8003998 <inc_lock+0x6c>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	3301      	adds	r3, #1
 8003996:	60fb      	str	r3, [r7, #12]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d806      	bhi.n	80039ac <inc_lock+0x80>
 800399e:	4a29      	ldr	r2, [pc, #164]	; (8003a44 <inc_lock+0x118>)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	011b      	lsls	r3, r3, #4
 80039a4:	4413      	add	r3, r2
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1f2      	bne.n	8003992 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d101      	bne.n	80039b6 <inc_lock+0x8a>
 80039b2:	2300      	movs	r3, #0
 80039b4:	e040      	b.n	8003a38 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	4922      	ldr	r1, [pc, #136]	; (8003a44 <inc_lock+0x118>)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	011b      	lsls	r3, r3, #4
 80039c0:	440b      	add	r3, r1
 80039c2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689a      	ldr	r2, [r3, #8]
 80039c8:	491e      	ldr	r1, [pc, #120]	; (8003a44 <inc_lock+0x118>)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	011b      	lsls	r3, r3, #4
 80039ce:	440b      	add	r3, r1
 80039d0:	3304      	adds	r3, #4
 80039d2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	695a      	ldr	r2, [r3, #20]
 80039d8:	491a      	ldr	r1, [pc, #104]	; (8003a44 <inc_lock+0x118>)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	011b      	lsls	r3, r3, #4
 80039de:	440b      	add	r3, r1
 80039e0:	3308      	adds	r3, #8
 80039e2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80039e4:	4a17      	ldr	r2, [pc, #92]	; (8003a44 <inc_lock+0x118>)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	011b      	lsls	r3, r3, #4
 80039ea:	4413      	add	r3, r2
 80039ec:	330c      	adds	r3, #12
 80039ee:	2200      	movs	r2, #0
 80039f0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d009      	beq.n	8003a0c <inc_lock+0xe0>
 80039f8:	4a12      	ldr	r2, [pc, #72]	; (8003a44 <inc_lock+0x118>)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	011b      	lsls	r3, r3, #4
 80039fe:	4413      	add	r3, r2
 8003a00:	330c      	adds	r3, #12
 8003a02:	881b      	ldrh	r3, [r3, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <inc_lock+0xe0>
 8003a08:	2300      	movs	r3, #0
 8003a0a:	e015      	b.n	8003a38 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d108      	bne.n	8003a24 <inc_lock+0xf8>
 8003a12:	4a0c      	ldr	r2, [pc, #48]	; (8003a44 <inc_lock+0x118>)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	011b      	lsls	r3, r3, #4
 8003a18:	4413      	add	r3, r2
 8003a1a:	330c      	adds	r3, #12
 8003a1c:	881b      	ldrh	r3, [r3, #0]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	e001      	b.n	8003a28 <inc_lock+0xfc>
 8003a24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a28:	4906      	ldr	r1, [pc, #24]	; (8003a44 <inc_lock+0x118>)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	440b      	add	r3, r1
 8003a30:	330c      	adds	r3, #12
 8003a32:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	3301      	adds	r3, #1
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3714      	adds	r7, #20
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr
 8003a44:	200000a8 	.word	0x200000a8

08003a48 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	3b01      	subs	r3, #1
 8003a54:	607b      	str	r3, [r7, #4]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d825      	bhi.n	8003aa8 <dec_lock+0x60>
		n = Files[i].ctr;
 8003a5c:	4a17      	ldr	r2, [pc, #92]	; (8003abc <dec_lock+0x74>)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	011b      	lsls	r3, r3, #4
 8003a62:	4413      	add	r3, r2
 8003a64:	330c      	adds	r3, #12
 8003a66:	881b      	ldrh	r3, [r3, #0]
 8003a68:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003a6a:	89fb      	ldrh	r3, [r7, #14]
 8003a6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a70:	d101      	bne.n	8003a76 <dec_lock+0x2e>
 8003a72:	2300      	movs	r3, #0
 8003a74:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8003a76:	89fb      	ldrh	r3, [r7, #14]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d002      	beq.n	8003a82 <dec_lock+0x3a>
 8003a7c:	89fb      	ldrh	r3, [r7, #14]
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003a82:	4a0e      	ldr	r2, [pc, #56]	; (8003abc <dec_lock+0x74>)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	011b      	lsls	r3, r3, #4
 8003a88:	4413      	add	r3, r2
 8003a8a:	330c      	adds	r3, #12
 8003a8c:	89fa      	ldrh	r2, [r7, #14]
 8003a8e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003a90:	89fb      	ldrh	r3, [r7, #14]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d105      	bne.n	8003aa2 <dec_lock+0x5a>
 8003a96:	4a09      	ldr	r2, [pc, #36]	; (8003abc <dec_lock+0x74>)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	011b      	lsls	r3, r3, #4
 8003a9c:	4413      	add	r3, r2
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	737b      	strb	r3, [r7, #13]
 8003aa6:	e001      	b.n	8003aac <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003aac:	7b7b      	ldrb	r3, [r7, #13]
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3714      	adds	r7, #20
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	200000a8 	.word	0x200000a8

08003ac0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003ac8:	2300      	movs	r3, #0
 8003aca:	60fb      	str	r3, [r7, #12]
 8003acc:	e010      	b.n	8003af0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003ace:	4a0d      	ldr	r2, [pc, #52]	; (8003b04 <clear_lock+0x44>)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	011b      	lsls	r3, r3, #4
 8003ad4:	4413      	add	r3, r2
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d105      	bne.n	8003aea <clear_lock+0x2a>
 8003ade:	4a09      	ldr	r2, [pc, #36]	; (8003b04 <clear_lock+0x44>)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	011b      	lsls	r3, r3, #4
 8003ae4:	4413      	add	r3, r2
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	3301      	adds	r3, #1
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d9eb      	bls.n	8003ace <clear_lock+0xe>
	}
}
 8003af6:	bf00      	nop
 8003af8:	3714      	adds	r7, #20
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	200000a8 	.word	0x200000a8

08003b08 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003b10:	2300      	movs	r3, #0
 8003b12:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	78db      	ldrb	r3, [r3, #3]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d034      	beq.n	8003b86 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b20:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	7858      	ldrb	r0, [r3, #1]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	f7ff fde0 	bl	80036f4 <disk_write>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d002      	beq.n	8003b40 <sync_window+0x38>
			res = FR_DISK_ERR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	73fb      	strb	r3, [r7, #15]
 8003b3e:	e022      	b.n	8003b86 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	1ad2      	subs	r2, r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d217      	bcs.n	8003b86 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	789b      	ldrb	r3, [r3, #2]
 8003b5a:	613b      	str	r3, [r7, #16]
 8003b5c:	e010      	b.n	8003b80 <sync_window+0x78>
					wsect += fs->fsize;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	4413      	add	r3, r2
 8003b66:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	7858      	ldrb	r0, [r3, #1]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003b72:	2301      	movs	r3, #1
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	f7ff fdbd 	bl	80036f4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	613b      	str	r3, [r7, #16]
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d8eb      	bhi.n	8003b5e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8003b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3718      	adds	r7, #24
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d01b      	beq.n	8003be0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f7ff ffad 	bl	8003b08 <sync_window>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003bb2:	7bfb      	ldrb	r3, [r7, #15]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d113      	bne.n	8003be0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	7858      	ldrb	r0, [r3, #1]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	f7ff fd75 	bl	80036b4 <disk_read>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d004      	beq.n	8003bda <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8003bd4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	683a      	ldr	r2, [r7, #0]
 8003bde:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8003be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003bea:	b480      	push	{r7}
 8003bec:	b083      	sub	sp, #12
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
 8003bf2:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	3b02      	subs	r3, #2
 8003bf8:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	3b02      	subs	r3, #2
 8003c00:	683a      	ldr	r2, [r7, #0]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d301      	bcc.n	8003c0a <clust2sect+0x20>
 8003c06:	2300      	movs	r3, #0
 8003c08:	e008      	b.n	8003c1c <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	895b      	ldrh	r3, [r3, #10]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	fb03 f202 	mul.w	r2, r3, r2
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1a:	4413      	add	r3, r2
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d904      	bls.n	8003c48 <get_fat+0x20>
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d302      	bcc.n	8003c4e <get_fat+0x26>
		val = 1;	/* Internal error */
 8003c48:	2301      	movs	r3, #1
 8003c4a:	617b      	str	r3, [r7, #20]
 8003c4c:	e0b7      	b.n	8003dbe <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c52:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d05a      	beq.n	8003d12 <get_fat+0xea>
 8003c5c:	2b03      	cmp	r3, #3
 8003c5e:	d07d      	beq.n	8003d5c <get_fat+0x134>
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	f040 80a2 	bne.w	8003daa <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	60fb      	str	r3, [r7, #12]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	085b      	lsrs	r3, r3, #1
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	4413      	add	r3, r2
 8003c72:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	899b      	ldrh	r3, [r3, #12]
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c84:	4413      	add	r3, r2
 8003c86:	4619      	mov	r1, r3
 8003c88:	6938      	ldr	r0, [r7, #16]
 8003c8a:	f7ff ff81 	bl	8003b90 <move_window>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f040 808d 	bne.w	8003db0 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	1c5a      	adds	r2, r3, #1
 8003c9a:	60fa      	str	r2, [r7, #12]
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	8992      	ldrh	r2, [r2, #12]
 8003ca0:	fbb3 f1f2 	udiv	r1, r3, r2
 8003ca4:	fb02 f201 	mul.w	r2, r2, r1
 8003ca8:	1a9b      	subs	r3, r3, r2
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	4413      	add	r3, r2
 8003cae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003cb2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	899b      	ldrh	r3, [r3, #12]
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cc4:	4413      	add	r3, r2
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	6938      	ldr	r0, [r7, #16]
 8003cca:	f7ff ff61 	bl	8003b90 <move_window>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d16f      	bne.n	8003db4 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	899b      	ldrh	r3, [r3, #12]
 8003cd8:	461a      	mov	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	fbb3 f1f2 	udiv	r1, r3, r2
 8003ce0:	fb02 f201 	mul.w	r2, r2, r1
 8003ce4:	1a9b      	subs	r3, r3, r2
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	4413      	add	r3, r2
 8003cea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003cee:	021b      	lsls	r3, r3, #8
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d002      	beq.n	8003d08 <get_fat+0xe0>
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	091b      	lsrs	r3, r3, #4
 8003d06:	e002      	b.n	8003d0e <get_fat+0xe6>
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d0e:	617b      	str	r3, [r7, #20]
			break;
 8003d10:	e055      	b.n	8003dbe <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	899b      	ldrh	r3, [r3, #12]
 8003d1a:	085b      	lsrs	r3, r3, #1
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	4619      	mov	r1, r3
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d26:	4413      	add	r3, r2
 8003d28:	4619      	mov	r1, r3
 8003d2a:	6938      	ldr	r0, [r7, #16]
 8003d2c:	f7ff ff30 	bl	8003b90 <move_window>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d140      	bne.n	8003db8 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	8992      	ldrh	r2, [r2, #12]
 8003d44:	fbb3 f0f2 	udiv	r0, r3, r2
 8003d48:	fb02 f200 	mul.w	r2, r2, r0
 8003d4c:	1a9b      	subs	r3, r3, r2
 8003d4e:	440b      	add	r3, r1
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7ff fd0d 	bl	8003770 <ld_word>
 8003d56:	4603      	mov	r3, r0
 8003d58:	617b      	str	r3, [r7, #20]
			break;
 8003d5a:	e030      	b.n	8003dbe <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	899b      	ldrh	r3, [r3, #12]
 8003d64:	089b      	lsrs	r3, r3, #2
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	4619      	mov	r1, r3
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d70:	4413      	add	r3, r2
 8003d72:	4619      	mov	r1, r3
 8003d74:	6938      	ldr	r0, [r7, #16]
 8003d76:	f7ff ff0b 	bl	8003b90 <move_window>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d11d      	bne.n	8003dbc <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	8992      	ldrh	r2, [r2, #12]
 8003d8e:	fbb3 f0f2 	udiv	r0, r3, r2
 8003d92:	fb02 f200 	mul.w	r2, r2, r0
 8003d96:	1a9b      	subs	r3, r3, r2
 8003d98:	440b      	add	r3, r1
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7ff fd00 	bl	80037a0 <ld_dword>
 8003da0:	4603      	mov	r3, r0
 8003da2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003da6:	617b      	str	r3, [r7, #20]
			break;
 8003da8:	e009      	b.n	8003dbe <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8003daa:	2301      	movs	r3, #1
 8003dac:	617b      	str	r3, [r7, #20]
 8003dae:	e006      	b.n	8003dbe <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003db0:	bf00      	nop
 8003db2:	e004      	b.n	8003dbe <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003db4:	bf00      	nop
 8003db6:	e002      	b.n	8003dbe <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003db8:	bf00      	nop
 8003dba:	e000      	b.n	8003dbe <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003dbc:	bf00      	nop
		}
	}

	return val;
 8003dbe:	697b      	ldr	r3, [r7, #20]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3718      	adds	r7, #24
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8003dc8:	b590      	push	{r4, r7, lr}
 8003dca:	b089      	sub	sp, #36	; 0x24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	f240 8106 	bls.w	8003fec <put_fat+0x224>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	f080 8100 	bcs.w	8003fec <put_fat+0x224>
		switch (fs->fs_type) {
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	f000 8088 	beq.w	8003f06 <put_fat+0x13e>
 8003df6:	2b03      	cmp	r3, #3
 8003df8:	f000 80b0 	beq.w	8003f5c <put_fat+0x194>
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	f040 80f5 	bne.w	8003fec <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	61bb      	str	r3, [r7, #24]
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	085b      	lsrs	r3, r3, #1
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	899b      	ldrh	r3, [r3, #12]
 8003e18:	4619      	mov	r1, r3
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e20:	4413      	add	r3, r2
 8003e22:	4619      	mov	r1, r3
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f7ff feb3 	bl	8003b90 <move_window>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003e2e:	7ffb      	ldrb	r3, [r7, #31]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f040 80d4 	bne.w	8003fde <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	1c5a      	adds	r2, r3, #1
 8003e40:	61ba      	str	r2, [r7, #24]
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	8992      	ldrh	r2, [r2, #12]
 8003e46:	fbb3 f0f2 	udiv	r0, r3, r2
 8003e4a:	fb02 f200 	mul.w	r2, r2, r0
 8003e4e:	1a9b      	subs	r3, r3, r2
 8003e50:	440b      	add	r3, r1
 8003e52:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00d      	beq.n	8003e7a <put_fat+0xb2>
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	b25b      	sxtb	r3, r3
 8003e64:	f003 030f 	and.w	r3, r3, #15
 8003e68:	b25a      	sxtb	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	011b      	lsls	r3, r3, #4
 8003e70:	b25b      	sxtb	r3, r3
 8003e72:	4313      	orrs	r3, r2
 8003e74:	b25b      	sxtb	r3, r3
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	e001      	b.n	8003e7e <put_fat+0xb6>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2201      	movs	r2, #1
 8003e86:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	899b      	ldrh	r3, [r3, #12]
 8003e90:	4619      	mov	r1, r3
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e98:	4413      	add	r3, r2
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f7ff fe77 	bl	8003b90 <move_window>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003ea6:	7ffb      	ldrb	r3, [r7, #31]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f040 809a 	bne.w	8003fe2 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	899b      	ldrh	r3, [r3, #12]
 8003eb8:	461a      	mov	r2, r3
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	fbb3 f0f2 	udiv	r0, r3, r2
 8003ec0:	fb02 f200 	mul.w	r2, r2, r0
 8003ec4:	1a9b      	subs	r3, r3, r2
 8003ec6:	440b      	add	r3, r1
 8003ec8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d003      	beq.n	8003edc <put_fat+0x114>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	091b      	lsrs	r3, r3, #4
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	e00e      	b.n	8003efa <put_fat+0x132>
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	b25b      	sxtb	r3, r3
 8003ee2:	f023 030f 	bic.w	r3, r3, #15
 8003ee6:	b25a      	sxtb	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	0a1b      	lsrs	r3, r3, #8
 8003eec:	b25b      	sxtb	r3, r3
 8003eee:	f003 030f 	and.w	r3, r3, #15
 8003ef2:	b25b      	sxtb	r3, r3
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	b25b      	sxtb	r3, r3
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2201      	movs	r2, #1
 8003f02:	70da      	strb	r2, [r3, #3]
			break;
 8003f04:	e072      	b.n	8003fec <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	899b      	ldrh	r3, [r3, #12]
 8003f0e:	085b      	lsrs	r3, r3, #1
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	4619      	mov	r1, r3
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f1a:	4413      	add	r3, r2
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f7ff fe36 	bl	8003b90 <move_window>
 8003f24:	4603      	mov	r3, r0
 8003f26:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003f28:	7ffb      	ldrb	r3, [r7, #31]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d15b      	bne.n	8003fe6 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	005b      	lsls	r3, r3, #1
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	8992      	ldrh	r2, [r2, #12]
 8003f3c:	fbb3 f0f2 	udiv	r0, r3, r2
 8003f40:	fb02 f200 	mul.w	r2, r2, r0
 8003f44:	1a9b      	subs	r3, r3, r2
 8003f46:	440b      	add	r3, r1
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	b292      	uxth	r2, r2
 8003f4c:	4611      	mov	r1, r2
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7ff fc49 	bl	80037e6 <st_word>
			fs->wflag = 1;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2201      	movs	r2, #1
 8003f58:	70da      	strb	r2, [r3, #3]
			break;
 8003f5a:	e047      	b.n	8003fec <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	899b      	ldrh	r3, [r3, #12]
 8003f64:	089b      	lsrs	r3, r3, #2
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	4619      	mov	r1, r3
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f70:	4413      	add	r3, r2
 8003f72:	4619      	mov	r1, r3
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f7ff fe0b 	bl	8003b90 <move_window>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003f7e:	7ffb      	ldrb	r3, [r7, #31]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d132      	bne.n	8003fea <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	8992      	ldrh	r2, [r2, #12]
 8003f98:	fbb3 f0f2 	udiv	r0, r3, r2
 8003f9c:	fb02 f200 	mul.w	r2, r2, r0
 8003fa0:	1a9b      	subs	r3, r3, r2
 8003fa2:	440b      	add	r3, r1
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7ff fbfb 	bl	80037a0 <ld_dword>
 8003faa:	4603      	mov	r3, r0
 8003fac:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003fb0:	4323      	orrs	r3, r4
 8003fb2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	8992      	ldrh	r2, [r2, #12]
 8003fc2:	fbb3 f0f2 	udiv	r0, r3, r2
 8003fc6:	fb02 f200 	mul.w	r2, r2, r0
 8003fca:	1a9b      	subs	r3, r3, r2
 8003fcc:	440b      	add	r3, r1
 8003fce:	6879      	ldr	r1, [r7, #4]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7ff fc23 	bl	800381c <st_dword>
			fs->wflag = 1;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	70da      	strb	r2, [r3, #3]
			break;
 8003fdc:	e006      	b.n	8003fec <put_fat+0x224>
			if (res != FR_OK) break;
 8003fde:	bf00      	nop
 8003fe0:	e004      	b.n	8003fec <put_fat+0x224>
			if (res != FR_OK) break;
 8003fe2:	bf00      	nop
 8003fe4:	e002      	b.n	8003fec <put_fat+0x224>
			if (res != FR_OK) break;
 8003fe6:	bf00      	nop
 8003fe8:	e000      	b.n	8003fec <put_fat+0x224>
			if (res != FR_OK) break;
 8003fea:	bf00      	nop
		}
	}
	return res;
 8003fec:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3724      	adds	r7, #36	; 0x24
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd90      	pop	{r4, r7, pc}

08003ff6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b088      	sub	sp, #32
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
 8003ffe:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10d      	bne.n	8004028 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	695b      	ldr	r3, [r3, #20]
 8004010:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d004      	beq.n	8004022 <create_chain+0x2c>
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	69db      	ldr	r3, [r3, #28]
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	429a      	cmp	r2, r3
 8004020:	d31b      	bcc.n	800405a <create_chain+0x64>
 8004022:	2301      	movs	r3, #1
 8004024:	61bb      	str	r3, [r7, #24]
 8004026:	e018      	b.n	800405a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004028:	6839      	ldr	r1, [r7, #0]
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7ff fdfc 	bl	8003c28 <get_fat>
 8004030:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d801      	bhi.n	800403c <create_chain+0x46>
 8004038:	2301      	movs	r3, #1
 800403a:	e070      	b.n	800411e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004042:	d101      	bne.n	8004048 <create_chain+0x52>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	e06a      	b.n	800411e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	69db      	ldr	r3, [r3, #28]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	429a      	cmp	r2, r3
 8004050:	d201      	bcs.n	8004056 <create_chain+0x60>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	e063      	b.n	800411e <create_chain+0x128>
		scl = clst;
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	3301      	adds	r3, #1
 8004062:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	69db      	ldr	r3, [r3, #28]
 8004068:	69fa      	ldr	r2, [r7, #28]
 800406a:	429a      	cmp	r2, r3
 800406c:	d307      	bcc.n	800407e <create_chain+0x88>
				ncl = 2;
 800406e:	2302      	movs	r3, #2
 8004070:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004072:	69fa      	ldr	r2, [r7, #28]
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	429a      	cmp	r2, r3
 8004078:	d901      	bls.n	800407e <create_chain+0x88>
 800407a:	2300      	movs	r3, #0
 800407c:	e04f      	b.n	800411e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800407e:	69f9      	ldr	r1, [r7, #28]
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f7ff fdd1 	bl	8003c28 <get_fat>
 8004086:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00e      	beq.n	80040ac <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d003      	beq.n	800409c <create_chain+0xa6>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409a:	d101      	bne.n	80040a0 <create_chain+0xaa>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	e03e      	b.n	800411e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80040a0:	69fa      	ldr	r2, [r7, #28]
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d1da      	bne.n	800405e <create_chain+0x68>
 80040a8:	2300      	movs	r3, #0
 80040aa:	e038      	b.n	800411e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80040ac:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80040ae:	f04f 32ff 	mov.w	r2, #4294967295
 80040b2:	69f9      	ldr	r1, [r7, #28]
 80040b4:	6938      	ldr	r0, [r7, #16]
 80040b6:	f7ff fe87 	bl	8003dc8 <put_fat>
 80040ba:	4603      	mov	r3, r0
 80040bc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80040be:	7dfb      	ldrb	r3, [r7, #23]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d109      	bne.n	80040d8 <create_chain+0xe2>
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d006      	beq.n	80040d8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80040ca:	69fa      	ldr	r2, [r7, #28]
 80040cc:	6839      	ldr	r1, [r7, #0]
 80040ce:	6938      	ldr	r0, [r7, #16]
 80040d0:	f7ff fe7a 	bl	8003dc8 <put_fat>
 80040d4:	4603      	mov	r3, r0
 80040d6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80040d8:	7dfb      	ldrb	r3, [r7, #23]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d116      	bne.n	800410c <create_chain+0x116>
		fs->last_clst = ncl;
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	69fa      	ldr	r2, [r7, #28]
 80040e2:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	699a      	ldr	r2, [r3, #24]
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	69db      	ldr	r3, [r3, #28]
 80040ec:	3b02      	subs	r3, #2
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d804      	bhi.n	80040fc <create_chain+0x106>
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	1e5a      	subs	r2, r3, #1
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	791b      	ldrb	r3, [r3, #4]
 8004100:	f043 0301 	orr.w	r3, r3, #1
 8004104:	b2da      	uxtb	r2, r3
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	711a      	strb	r2, [r3, #4]
 800410a:	e007      	b.n	800411c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800410c:	7dfb      	ldrb	r3, [r7, #23]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d102      	bne.n	8004118 <create_chain+0x122>
 8004112:	f04f 33ff 	mov.w	r3, #4294967295
 8004116:	e000      	b.n	800411a <create_chain+0x124>
 8004118:	2301      	movs	r3, #1
 800411a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800411c:	69fb      	ldr	r3, [r7, #28]
}
 800411e:	4618      	mov	r0, r3
 8004120:	3720      	adds	r7, #32
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b086      	sub	sp, #24
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
 800412e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800413c:	d204      	bcs.n	8004148 <dir_sdi+0x22>
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	f003 031f 	and.w	r3, r3, #31
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <dir_sdi+0x26>
		return FR_INT_ERR;
 8004148:	2302      	movs	r3, #2
 800414a:	e071      	b.n	8004230 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	683a      	ldr	r2, [r7, #0]
 8004150:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d106      	bne.n	800416c <dir_sdi+0x46>
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	2b02      	cmp	r3, #2
 8004164:	d902      	bls.n	800416c <dir_sdi+0x46>
		clst = fs->dirbase;
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10c      	bne.n	800418c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	095b      	lsrs	r3, r3, #5
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	8912      	ldrh	r2, [r2, #8]
 800417a:	4293      	cmp	r3, r2
 800417c:	d301      	bcc.n	8004182 <dir_sdi+0x5c>
 800417e:	2302      	movs	r3, #2
 8004180:	e056      	b.n	8004230 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	61da      	str	r2, [r3, #28]
 800418a:	e02d      	b.n	80041e8 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	895b      	ldrh	r3, [r3, #10]
 8004190:	461a      	mov	r2, r3
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	899b      	ldrh	r3, [r3, #12]
 8004196:	fb03 f302 	mul.w	r3, r3, r2
 800419a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800419c:	e019      	b.n	80041d2 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6979      	ldr	r1, [r7, #20]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7ff fd40 	bl	8003c28 <get_fat>
 80041a8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b0:	d101      	bne.n	80041b6 <dir_sdi+0x90>
 80041b2:	2301      	movs	r3, #1
 80041b4:	e03c      	b.n	8004230 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d904      	bls.n	80041c6 <dir_sdi+0xa0>
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	69db      	ldr	r3, [r3, #28]
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d301      	bcc.n	80041ca <dir_sdi+0xa4>
 80041c6:	2302      	movs	r3, #2
 80041c8:	e032      	b.n	8004230 <dir_sdi+0x10a>
			ofs -= csz;
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80041d2:	683a      	ldr	r2, [r7, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d2e1      	bcs.n	800419e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80041da:	6979      	ldr	r1, [r7, #20]
 80041dc:	6938      	ldr	r0, [r7, #16]
 80041de:	f7ff fd04 	bl	8003bea <clust2sect>
 80041e2:	4602      	mov	r2, r0
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <dir_sdi+0xd4>
 80041f6:	2302      	movs	r3, #2
 80041f8:	e01a      	b.n	8004230 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	69da      	ldr	r2, [r3, #28]
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	899b      	ldrh	r3, [r3, #12]
 8004202:	4619      	mov	r1, r3
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	fbb3 f3f1 	udiv	r3, r3, r1
 800420a:	441a      	add	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	899b      	ldrh	r3, [r3, #12]
 800421a:	461a      	mov	r2, r3
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004222:	fb02 f200 	mul.w	r2, r2, r0
 8004226:	1a9b      	subs	r3, r3, r2
 8004228:	18ca      	adds	r2, r1, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3718      	adds	r7, #24
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	3320      	adds	r3, #32
 800424e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	69db      	ldr	r3, [r3, #28]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <dir_next+0x28>
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800425e:	d301      	bcc.n	8004264 <dir_next+0x2c>
 8004260:	2304      	movs	r3, #4
 8004262:	e0bb      	b.n	80043dc <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	899b      	ldrh	r3, [r3, #12]
 8004268:	461a      	mov	r2, r3
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004270:	fb02 f201 	mul.w	r2, r2, r1
 8004274:	1a9b      	subs	r3, r3, r2
 8004276:	2b00      	cmp	r3, #0
 8004278:	f040 809d 	bne.w	80043b6 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	69db      	ldr	r3, [r3, #28]
 8004280:	1c5a      	adds	r2, r3, #1
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10b      	bne.n	80042a6 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	095b      	lsrs	r3, r3, #5
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	8912      	ldrh	r2, [r2, #8]
 8004296:	4293      	cmp	r3, r2
 8004298:	f0c0 808d 	bcc.w	80043b6 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	61da      	str	r2, [r3, #28]
 80042a2:	2304      	movs	r3, #4
 80042a4:	e09a      	b.n	80043dc <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	899b      	ldrh	r3, [r3, #12]
 80042aa:	461a      	mov	r2, r3
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	8952      	ldrh	r2, [r2, #10]
 80042b6:	3a01      	subs	r2, #1
 80042b8:	4013      	ands	r3, r2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d17b      	bne.n	80043b6 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	4619      	mov	r1, r3
 80042c6:	4610      	mov	r0, r2
 80042c8:	f7ff fcae 	bl	8003c28 <get_fat>
 80042cc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d801      	bhi.n	80042d8 <dir_next+0xa0>
 80042d4:	2302      	movs	r3, #2
 80042d6:	e081      	b.n	80043dc <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042de:	d101      	bne.n	80042e4 <dir_next+0xac>
 80042e0:	2301      	movs	r3, #1
 80042e2:	e07b      	b.n	80043dc <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	69db      	ldr	r3, [r3, #28]
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d359      	bcc.n	80043a2 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d104      	bne.n	80042fe <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	61da      	str	r2, [r3, #28]
 80042fa:	2304      	movs	r3, #4
 80042fc:	e06e      	b.n	80043dc <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	4619      	mov	r1, r3
 8004306:	4610      	mov	r0, r2
 8004308:	f7ff fe75 	bl	8003ff6 <create_chain>
 800430c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d101      	bne.n	8004318 <dir_next+0xe0>
 8004314:	2307      	movs	r3, #7
 8004316:	e061      	b.n	80043dc <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d101      	bne.n	8004322 <dir_next+0xea>
 800431e:	2302      	movs	r3, #2
 8004320:	e05c      	b.n	80043dc <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004328:	d101      	bne.n	800432e <dir_next+0xf6>
 800432a:	2301      	movs	r3, #1
 800432c:	e056      	b.n	80043dc <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f7ff fbea 	bl	8003b08 <sync_window>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <dir_next+0x106>
 800433a:	2301      	movs	r3, #1
 800433c:	e04e      	b.n	80043dc <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	899b      	ldrh	r3, [r3, #12]
 8004348:	461a      	mov	r2, r3
 800434a:	2100      	movs	r1, #0
 800434c:	f7ff fa92 	bl	8003874 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004350:	2300      	movs	r3, #0
 8004352:	613b      	str	r3, [r7, #16]
 8004354:	6979      	ldr	r1, [r7, #20]
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f7ff fc47 	bl	8003bea <clust2sect>
 800435c:	4602      	mov	r2, r0
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	635a      	str	r2, [r3, #52]	; 0x34
 8004362:	e012      	b.n	800438a <dir_next+0x152>
						fs->wflag = 1;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2201      	movs	r2, #1
 8004368:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f7ff fbcc 	bl	8003b08 <sync_window>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <dir_next+0x142>
 8004376:	2301      	movs	r3, #1
 8004378:	e030      	b.n	80043dc <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	3301      	adds	r3, #1
 800437e:	613b      	str	r3, [r7, #16]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004384:	1c5a      	adds	r2, r3, #1
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	635a      	str	r2, [r3, #52]	; 0x34
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	895b      	ldrh	r3, [r3, #10]
 800438e:	461a      	mov	r2, r3
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	4293      	cmp	r3, r2
 8004394:	d3e6      	bcc.n	8004364 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1ad2      	subs	r2, r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80043a8:	6979      	ldr	r1, [r7, #20]
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f7ff fc1d 	bl	8003bea <clust2sect>
 80043b0:	4602      	mov	r2, r0
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	899b      	ldrh	r3, [r3, #12]
 80043c6:	461a      	mov	r2, r3
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80043ce:	fb02 f200 	mul.w	r2, r2, r0
 80043d2:	1a9b      	subs	r3, r3, r2
 80043d4:	18ca      	adds	r2, r1, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3718      	adds	r7, #24
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	331a      	adds	r3, #26
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7ff f9bc 	bl	8003770 <ld_word>
 80043f8:	4603      	mov	r3, r0
 80043fa:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	2b03      	cmp	r3, #3
 8004402:	d109      	bne.n	8004418 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	3314      	adds	r3, #20
 8004408:	4618      	mov	r0, r3
 800440a:	f7ff f9b1 	bl	8003770 <ld_word>
 800440e:	4603      	mov	r3, r0
 8004410:	041b      	lsls	r3, r3, #16
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	4313      	orrs	r3, r2
 8004416:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004418:	68fb      	ldr	r3, [r7, #12]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
	...

08004424 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8004424:	b590      	push	{r4, r7, lr}
 8004426:	b087      	sub	sp, #28
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	331a      	adds	r3, #26
 8004432:	4618      	mov	r0, r3
 8004434:	f7ff f99c 	bl	8003770 <ld_word>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <cmp_lfn+0x1e>
 800443e:	2300      	movs	r3, #0
 8004440:	e059      	b.n	80044f6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800444a:	1e5a      	subs	r2, r3, #1
 800444c:	4613      	mov	r3, r2
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	4413      	add	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4413      	add	r3, r2
 8004456:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004458:	2301      	movs	r3, #1
 800445a:	81fb      	strh	r3, [r7, #14]
 800445c:	2300      	movs	r3, #0
 800445e:	613b      	str	r3, [r7, #16]
 8004460:	e033      	b.n	80044ca <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8004462:	4a27      	ldr	r2, [pc, #156]	; (8004500 <cmp_lfn+0xdc>)
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	4413      	add	r3, r2
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	461a      	mov	r2, r3
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	4413      	add	r3, r2
 8004470:	4618      	mov	r0, r3
 8004472:	f7ff f97d 	bl	8003770 <ld_word>
 8004476:	4603      	mov	r3, r0
 8004478:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800447a:	89fb      	ldrh	r3, [r7, #14]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d01a      	beq.n	80044b6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	2bfe      	cmp	r3, #254	; 0xfe
 8004484:	d812      	bhi.n	80044ac <cmp_lfn+0x88>
 8004486:	89bb      	ldrh	r3, [r7, #12]
 8004488:	4618      	mov	r0, r3
 800448a:	f001 fbc9 	bl	8005c20 <ff_wtoupper>
 800448e:	4603      	mov	r3, r0
 8004490:	461c      	mov	r4, r3
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	1c5a      	adds	r2, r3, #1
 8004496:	617a      	str	r2, [r7, #20]
 8004498:	005b      	lsls	r3, r3, #1
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	4413      	add	r3, r2
 800449e:	881b      	ldrh	r3, [r3, #0]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f001 fbbd 	bl	8005c20 <ff_wtoupper>
 80044a6:	4603      	mov	r3, r0
 80044a8:	429c      	cmp	r4, r3
 80044aa:	d001      	beq.n	80044b0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80044ac:	2300      	movs	r3, #0
 80044ae:	e022      	b.n	80044f6 <cmp_lfn+0xd2>
			}
			wc = uc;
 80044b0:	89bb      	ldrh	r3, [r7, #12]
 80044b2:	81fb      	strh	r3, [r7, #14]
 80044b4:	e006      	b.n	80044c4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80044b6:	89bb      	ldrh	r3, [r7, #12]
 80044b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044bc:	4293      	cmp	r3, r2
 80044be:	d001      	beq.n	80044c4 <cmp_lfn+0xa0>
 80044c0:	2300      	movs	r3, #0
 80044c2:	e018      	b.n	80044f6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	3301      	adds	r3, #1
 80044c8:	613b      	str	r3, [r7, #16]
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	2b0c      	cmp	r3, #12
 80044ce:	d9c8      	bls.n	8004462 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00b      	beq.n	80044f4 <cmp_lfn+0xd0>
 80044dc:	89fb      	ldrh	r3, [r7, #14]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d008      	beq.n	80044f4 <cmp_lfn+0xd0>
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	4413      	add	r3, r2
 80044ea:	881b      	ldrh	r3, [r3, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <cmp_lfn+0xd0>
 80044f0:	2300      	movs	r3, #0
 80044f2:	e000      	b.n	80044f6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80044f4:	2301      	movs	r3, #1
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	371c      	adds	r7, #28
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd90      	pop	{r4, r7, pc}
 80044fe:	bf00      	nop
 8004500:	08008744 	.word	0x08008744

08004504 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	331a      	adds	r3, #26
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff f92c 	bl	8003770 <ld_word>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <pick_lfn+0x1e>
 800451e:	2300      	movs	r3, #0
 8004520:	e04d      	b.n	80045be <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800452a:	1e5a      	subs	r2, r3, #1
 800452c:	4613      	mov	r3, r2
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	4413      	add	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004538:	2301      	movs	r3, #1
 800453a:	81fb      	strh	r3, [r7, #14]
 800453c:	2300      	movs	r3, #0
 800453e:	613b      	str	r3, [r7, #16]
 8004540:	e028      	b.n	8004594 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8004542:	4a21      	ldr	r2, [pc, #132]	; (80045c8 <pick_lfn+0xc4>)
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	4413      	add	r3, r2
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	461a      	mov	r2, r3
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	4413      	add	r3, r2
 8004550:	4618      	mov	r0, r3
 8004552:	f7ff f90d 	bl	8003770 <ld_word>
 8004556:	4603      	mov	r3, r0
 8004558:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800455a:	89fb      	ldrh	r3, [r7, #14]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00f      	beq.n	8004580 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	2bfe      	cmp	r3, #254	; 0xfe
 8004564:	d901      	bls.n	800456a <pick_lfn+0x66>
 8004566:	2300      	movs	r3, #0
 8004568:	e029      	b.n	80045be <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800456a:	89bb      	ldrh	r3, [r7, #12]
 800456c:	81fb      	strh	r3, [r7, #14]
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	1c5a      	adds	r2, r3, #1
 8004572:	617a      	str	r2, [r7, #20]
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	4413      	add	r3, r2
 800457a:	89fa      	ldrh	r2, [r7, #14]
 800457c:	801a      	strh	r2, [r3, #0]
 800457e:	e006      	b.n	800458e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004580:	89bb      	ldrh	r3, [r7, #12]
 8004582:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004586:	4293      	cmp	r3, r2
 8004588:	d001      	beq.n	800458e <pick_lfn+0x8a>
 800458a:	2300      	movs	r3, #0
 800458c:	e017      	b.n	80045be <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	3301      	adds	r3, #1
 8004592:	613b      	str	r3, [r7, #16]
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	2b0c      	cmp	r3, #12
 8004598:	d9d3      	bls.n	8004542 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00a      	beq.n	80045bc <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	2bfe      	cmp	r3, #254	; 0xfe
 80045aa:	d901      	bls.n	80045b0 <pick_lfn+0xac>
 80045ac:	2300      	movs	r3, #0
 80045ae:	e006      	b.n	80045be <pick_lfn+0xba>
		lfnbuf[i] = 0;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	4413      	add	r3, r2
 80045b8:	2200      	movs	r2, #0
 80045ba:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 80045bc:	2301      	movs	r3, #1
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3718      	adds	r7, #24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	08008744 	.word	0x08008744

080045cc <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80045d4:	2300      	movs	r3, #0
 80045d6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80045d8:	230b      	movs	r3, #11
 80045da:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80045dc:	7bfb      	ldrb	r3, [r7, #15]
 80045de:	b2da      	uxtb	r2, r3
 80045e0:	0852      	lsrs	r2, r2, #1
 80045e2:	01db      	lsls	r3, r3, #7
 80045e4:	4313      	orrs	r3, r2
 80045e6:	b2da      	uxtb	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	1c59      	adds	r1, r3, #1
 80045ec:	6079      	str	r1, [r7, #4]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	4413      	add	r3, r2
 80045f2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	3b01      	subs	r3, #1
 80045f8:	60bb      	str	r3, [r7, #8]
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1ed      	bne.n	80045dc <sum_sfn+0x10>
	return sum;
 8004600:	7bfb      	ldrb	r3, [r7, #15]
}
 8004602:	4618      	mov	r0, r3
 8004604:	3714      	adds	r7, #20
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr

0800460e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b086      	sub	sp, #24
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
 8004616:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8004618:	2304      	movs	r3, #4
 800461a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8004622:	23ff      	movs	r3, #255	; 0xff
 8004624:	757b      	strb	r3, [r7, #21]
 8004626:	23ff      	movs	r3, #255	; 0xff
 8004628:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800462a:	e081      	b.n	8004730 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	69db      	ldr	r3, [r3, #28]
 8004630:	4619      	mov	r1, r3
 8004632:	6938      	ldr	r0, [r7, #16]
 8004634:	f7ff faac 	bl	8003b90 <move_window>
 8004638:	4603      	mov	r3, r0
 800463a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800463c:	7dfb      	ldrb	r3, [r7, #23]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d17c      	bne.n	800473c <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800464a:	7dbb      	ldrb	r3, [r7, #22]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d102      	bne.n	8004656 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8004650:	2304      	movs	r3, #4
 8004652:	75fb      	strb	r3, [r7, #23]
 8004654:	e077      	b.n	8004746 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	330b      	adds	r3, #11
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004662:	73fb      	strb	r3, [r7, #15]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	7bfa      	ldrb	r2, [r7, #15]
 8004668:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800466a:	7dbb      	ldrb	r3, [r7, #22]
 800466c:	2be5      	cmp	r3, #229	; 0xe5
 800466e:	d00e      	beq.n	800468e <dir_read+0x80>
 8004670:	7dbb      	ldrb	r3, [r7, #22]
 8004672:	2b2e      	cmp	r3, #46	; 0x2e
 8004674:	d00b      	beq.n	800468e <dir_read+0x80>
 8004676:	7bfb      	ldrb	r3, [r7, #15]
 8004678:	f023 0320 	bic.w	r3, r3, #32
 800467c:	2b08      	cmp	r3, #8
 800467e:	bf0c      	ite	eq
 8004680:	2301      	moveq	r3, #1
 8004682:	2300      	movne	r3, #0
 8004684:	b2db      	uxtb	r3, r3
 8004686:	461a      	mov	r2, r3
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	4293      	cmp	r3, r2
 800468c:	d002      	beq.n	8004694 <dir_read+0x86>
				ord = 0xFF;
 800468e:	23ff      	movs	r3, #255	; 0xff
 8004690:	757b      	strb	r3, [r7, #21]
 8004692:	e044      	b.n	800471e <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8004694:	7bfb      	ldrb	r3, [r7, #15]
 8004696:	2b0f      	cmp	r3, #15
 8004698:	d12f      	bne.n	80046fa <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800469a:	7dbb      	ldrb	r3, [r7, #22]
 800469c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00d      	beq.n	80046c0 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	7b5b      	ldrb	r3, [r3, #13]
 80046aa:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 80046ac:	7dbb      	ldrb	r3, [r7, #22]
 80046ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046b2:	75bb      	strb	r3, [r7, #22]
 80046b4:	7dbb      	ldrb	r3, [r7, #22]
 80046b6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	695a      	ldr	r2, [r3, #20]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80046c0:	7dba      	ldrb	r2, [r7, #22]
 80046c2:	7d7b      	ldrb	r3, [r7, #21]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d115      	bne.n	80046f4 <dir_read+0xe6>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a1b      	ldr	r3, [r3, #32]
 80046cc:	330d      	adds	r3, #13
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	7d3a      	ldrb	r2, [r7, #20]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d10e      	bne.n	80046f4 <dir_read+0xe6>
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	691a      	ldr	r2, [r3, #16]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	4619      	mov	r1, r3
 80046e0:	4610      	mov	r0, r2
 80046e2:	f7ff ff0f 	bl	8004504 <pick_lfn>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d003      	beq.n	80046f4 <dir_read+0xe6>
 80046ec:	7d7b      	ldrb	r3, [r7, #21]
 80046ee:	3b01      	subs	r3, #1
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	e000      	b.n	80046f6 <dir_read+0xe8>
 80046f4:	23ff      	movs	r3, #255	; 0xff
 80046f6:	757b      	strb	r3, [r7, #21]
 80046f8:	e011      	b.n	800471e <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80046fa:	7d7b      	ldrb	r3, [r7, #21]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d109      	bne.n	8004714 <dir_read+0x106>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a1b      	ldr	r3, [r3, #32]
 8004704:	4618      	mov	r0, r3
 8004706:	f7ff ff61 	bl	80045cc <sum_sfn>
 800470a:	4603      	mov	r3, r0
 800470c:	461a      	mov	r2, r3
 800470e:	7d3b      	ldrb	r3, [r7, #20]
 8004710:	4293      	cmp	r3, r2
 8004712:	d015      	beq.n	8004740 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f04f 32ff 	mov.w	r2, #4294967295
 800471a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800471c:	e010      	b.n	8004740 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800471e:	2100      	movs	r1, #0
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f7ff fd89 	bl	8004238 <dir_next>
 8004726:	4603      	mov	r3, r0
 8004728:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800472a:	7dfb      	ldrb	r3, [r7, #23]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d109      	bne.n	8004744 <dir_read+0x136>
	while (dp->sect) {
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	69db      	ldr	r3, [r3, #28]
 8004734:	2b00      	cmp	r3, #0
 8004736:	f47f af79 	bne.w	800462c <dir_read+0x1e>
 800473a:	e004      	b.n	8004746 <dir_read+0x138>
		if (res != FR_OK) break;
 800473c:	bf00      	nop
 800473e:	e002      	b.n	8004746 <dir_read+0x138>
					break;
 8004740:	bf00      	nop
 8004742:	e000      	b.n	8004746 <dir_read+0x138>
		if (res != FR_OK) break;
 8004744:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8004746:	7dfb      	ldrb	r3, [r7, #23]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d002      	beq.n	8004752 <dir_read+0x144>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	61da      	str	r2, [r3, #28]
	return res;
 8004752:	7dfb      	ldrb	r3, [r7, #23]
}
 8004754:	4618      	mov	r0, r3
 8004756:	3718      	adds	r7, #24
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800476a:	2100      	movs	r1, #0
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f7ff fcda 	bl	8004126 <dir_sdi>
 8004772:	4603      	mov	r3, r0
 8004774:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004776:	7dfb      	ldrb	r3, [r7, #23]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d001      	beq.n	8004780 <dir_find+0x24>
 800477c:	7dfb      	ldrb	r3, [r7, #23]
 800477e:	e0a9      	b.n	80048d4 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004780:	23ff      	movs	r3, #255	; 0xff
 8004782:	753b      	strb	r3, [r7, #20]
 8004784:	7d3b      	ldrb	r3, [r7, #20]
 8004786:	757b      	strb	r3, [r7, #21]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f04f 32ff 	mov.w	r2, #4294967295
 800478e:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	4619      	mov	r1, r3
 8004796:	6938      	ldr	r0, [r7, #16]
 8004798:	f7ff f9fa 	bl	8003b90 <move_window>
 800479c:	4603      	mov	r3, r0
 800479e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80047a0:	7dfb      	ldrb	r3, [r7, #23]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f040 8090 	bne.w	80048c8 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a1b      	ldr	r3, [r3, #32]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80047b0:	7dbb      	ldrb	r3, [r7, #22]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d102      	bne.n	80047bc <dir_find+0x60>
 80047b6:	2304      	movs	r3, #4
 80047b8:	75fb      	strb	r3, [r7, #23]
 80047ba:	e08a      	b.n	80048d2 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a1b      	ldr	r3, [r3, #32]
 80047c0:	330b      	adds	r3, #11
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047c8:	73fb      	strb	r3, [r7, #15]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	7bfa      	ldrb	r2, [r7, #15]
 80047ce:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80047d0:	7dbb      	ldrb	r3, [r7, #22]
 80047d2:	2be5      	cmp	r3, #229	; 0xe5
 80047d4:	d007      	beq.n	80047e6 <dir_find+0x8a>
 80047d6:	7bfb      	ldrb	r3, [r7, #15]
 80047d8:	f003 0308 	and.w	r3, r3, #8
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d009      	beq.n	80047f4 <dir_find+0x98>
 80047e0:	7bfb      	ldrb	r3, [r7, #15]
 80047e2:	2b0f      	cmp	r3, #15
 80047e4:	d006      	beq.n	80047f4 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80047e6:	23ff      	movs	r3, #255	; 0xff
 80047e8:	757b      	strb	r3, [r7, #21]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f04f 32ff 	mov.w	r2, #4294967295
 80047f0:	631a      	str	r2, [r3, #48]	; 0x30
 80047f2:	e05e      	b.n	80048b2 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80047f4:	7bfb      	ldrb	r3, [r7, #15]
 80047f6:	2b0f      	cmp	r3, #15
 80047f8:	d136      	bne.n	8004868 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004804:	2b00      	cmp	r3, #0
 8004806:	d154      	bne.n	80048b2 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8004808:	7dbb      	ldrb	r3, [r7, #22]
 800480a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00d      	beq.n	800482e <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	7b5b      	ldrb	r3, [r3, #13]
 8004818:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800481a:	7dbb      	ldrb	r3, [r7, #22]
 800481c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004820:	75bb      	strb	r3, [r7, #22]
 8004822:	7dbb      	ldrb	r3, [r7, #22]
 8004824:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	695a      	ldr	r2, [r3, #20]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800482e:	7dba      	ldrb	r2, [r7, #22]
 8004830:	7d7b      	ldrb	r3, [r7, #21]
 8004832:	429a      	cmp	r2, r3
 8004834:	d115      	bne.n	8004862 <dir_find+0x106>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	330d      	adds	r3, #13
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	7d3a      	ldrb	r2, [r7, #20]
 8004840:	429a      	cmp	r2, r3
 8004842:	d10e      	bne.n	8004862 <dir_find+0x106>
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	691a      	ldr	r2, [r3, #16]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a1b      	ldr	r3, [r3, #32]
 800484c:	4619      	mov	r1, r3
 800484e:	4610      	mov	r0, r2
 8004850:	f7ff fde8 	bl	8004424 <cmp_lfn>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <dir_find+0x106>
 800485a:	7d7b      	ldrb	r3, [r7, #21]
 800485c:	3b01      	subs	r3, #1
 800485e:	b2db      	uxtb	r3, r3
 8004860:	e000      	b.n	8004864 <dir_find+0x108>
 8004862:	23ff      	movs	r3, #255	; 0xff
 8004864:	757b      	strb	r3, [r7, #21]
 8004866:	e024      	b.n	80048b2 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8004868:	7d7b      	ldrb	r3, [r7, #21]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d109      	bne.n	8004882 <dir_find+0x126>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	4618      	mov	r0, r3
 8004874:	f7ff feaa 	bl	80045cc <sum_sfn>
 8004878:	4603      	mov	r3, r0
 800487a:	461a      	mov	r2, r3
 800487c:	7d3b      	ldrb	r3, [r7, #20]
 800487e:	4293      	cmp	r3, r2
 8004880:	d024      	beq.n	80048cc <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	2b00      	cmp	r3, #0
 800488e:	d10a      	bne.n	80048a6 <dir_find+0x14a>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a18      	ldr	r0, [r3, #32]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	3324      	adds	r3, #36	; 0x24
 8004898:	220b      	movs	r2, #11
 800489a:	4619      	mov	r1, r3
 800489c:	f7ff f804 	bl	80038a8 <mem_cmp>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d014      	beq.n	80048d0 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80048a6:	23ff      	movs	r3, #255	; 0xff
 80048a8:	757b      	strb	r3, [r7, #21]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f04f 32ff 	mov.w	r2, #4294967295
 80048b0:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80048b2:	2100      	movs	r1, #0
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f7ff fcbf 	bl	8004238 <dir_next>
 80048ba:	4603      	mov	r3, r0
 80048bc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80048be:	7dfb      	ldrb	r3, [r7, #23]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f43f af65 	beq.w	8004790 <dir_find+0x34>
 80048c6:	e004      	b.n	80048d2 <dir_find+0x176>
		if (res != FR_OK) break;
 80048c8:	bf00      	nop
 80048ca:	e002      	b.n	80048d2 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80048cc:	bf00      	nop
 80048ce:	e000      	b.n	80048d2 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80048d0:	bf00      	nop

	return res;
 80048d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3718      	adds	r7, #24
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b088      	sub	sp, #32
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	2200      	movs	r2, #0
 80048f0:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	69db      	ldr	r3, [r3, #28]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f000 80d7 	beq.w	8004aaa <get_fileinfo+0x1ce>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004904:	d040      	beq.n	8004988 <get_fileinfo+0xac>
			i = j = 0;
 8004906:	2300      	movs	r3, #0
 8004908:	61bb      	str	r3, [r7, #24]
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800490e:	e029      	b.n	8004964 <get_fileinfo+0x88>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8004910:	89fb      	ldrh	r3, [r7, #14]
 8004912:	2100      	movs	r1, #0
 8004914:	4618      	mov	r0, r3
 8004916:	f001 f923 	bl	8005b60 <ff_convert>
 800491a:	4603      	mov	r3, r0
 800491c:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800491e:	89fb      	ldrh	r3, [r7, #14]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d102      	bne.n	800492a <get_fileinfo+0x4e>
 8004924:	2300      	movs	r3, #0
 8004926:	61fb      	str	r3, [r7, #28]
 8004928:	e028      	b.n	800497c <get_fileinfo+0xa0>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
 800492a:	89fb      	ldrh	r3, [r7, #14]
 800492c:	2bff      	cmp	r3, #255	; 0xff
 800492e:	d90a      	bls.n	8004946 <get_fileinfo+0x6a>
					fno->fname[i++] = (char)(w >> 8);
 8004930:	89fb      	ldrh	r3, [r7, #14]
 8004932:	0a1b      	lsrs	r3, r3, #8
 8004934:	b299      	uxth	r1, r3
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	1c5a      	adds	r2, r3, #1
 800493a:	61fa      	str	r2, [r7, #28]
 800493c:	b2c9      	uxtb	r1, r1
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	4413      	add	r3, r2
 8004942:	460a      	mov	r2, r1
 8004944:	759a      	strb	r2, [r3, #22]
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	2bfe      	cmp	r3, #254	; 0xfe
 800494a:	d902      	bls.n	8004952 <get_fileinfo+0x76>
 800494c:	2300      	movs	r3, #0
 800494e:	61fb      	str	r3, [r7, #28]
 8004950:	e014      	b.n	800497c <get_fileinfo+0xa0>
				fno->fname[i++] = (TCHAR)w;
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	1c5a      	adds	r2, r3, #1
 8004956:	61fa      	str	r2, [r7, #28]
 8004958:	89fa      	ldrh	r2, [r7, #14]
 800495a:	b2d1      	uxtb	r1, r2
 800495c:	683a      	ldr	r2, [r7, #0]
 800495e:	4413      	add	r3, r2
 8004960:	460a      	mov	r2, r1
 8004962:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	691a      	ldr	r2, [r3, #16]
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	1c59      	adds	r1, r3, #1
 800496c:	61b9      	str	r1, [r7, #24]
 800496e:	005b      	lsls	r3, r3, #1
 8004970:	4413      	add	r3, r2
 8004972:	881b      	ldrh	r3, [r3, #0]
 8004974:	81fb      	strh	r3, [r7, #14]
 8004976:	89fb      	ldrh	r3, [r7, #14]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1c9      	bne.n	8004910 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800497c:	683a      	ldr	r2, [r7, #0]
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	4413      	add	r3, r2
 8004982:	3316      	adds	r3, #22
 8004984:	2200      	movs	r2, #0
 8004986:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8004988:	2300      	movs	r3, #0
 800498a:	61bb      	str	r3, [r7, #24]
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	4413      	add	r3, r2
 8004996:	3316      	adds	r3, #22
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800499c:	e04c      	b.n	8004a38 <get_fileinfo+0x15c>
		c = (TCHAR)dp->dir[i++];
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a1a      	ldr	r2, [r3, #32]
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	1c59      	adds	r1, r3, #1
 80049a6:	61f9      	str	r1, [r7, #28]
 80049a8:	4413      	add	r3, r2
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 80049ae:	7dfb      	ldrb	r3, [r7, #23]
 80049b0:	2b20      	cmp	r3, #32
 80049b2:	d100      	bne.n	80049b6 <get_fileinfo+0xda>
 80049b4:	e040      	b.n	8004a38 <get_fileinfo+0x15c>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80049b6:	7dfb      	ldrb	r3, [r7, #23]
 80049b8:	2b05      	cmp	r3, #5
 80049ba:	d101      	bne.n	80049c0 <get_fileinfo+0xe4>
 80049bc:	23e5      	movs	r3, #229	; 0xe5
 80049be:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	2b09      	cmp	r3, #9
 80049c4:	d10f      	bne.n	80049e6 <get_fileinfo+0x10a>
			if (!lfv) fno->fname[j] = '.';
 80049c6:	89bb      	ldrh	r3, [r7, #12]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d105      	bne.n	80049d8 <get_fileinfo+0xfc>
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	4413      	add	r3, r2
 80049d2:	3316      	adds	r3, #22
 80049d4:	222e      	movs	r2, #46	; 0x2e
 80049d6:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	1c5a      	adds	r2, r3, #1
 80049dc:	61ba      	str	r2, [r7, #24]
 80049de:	683a      	ldr	r2, [r7, #0]
 80049e0:	4413      	add	r3, r2
 80049e2:	222e      	movs	r2, #46	; 0x2e
 80049e4:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	4413      	add	r3, r2
 80049ec:	3309      	adds	r3, #9
 80049ee:	7dfa      	ldrb	r2, [r7, #23]
 80049f0:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 80049f2:	89bb      	ldrh	r3, [r7, #12]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d11c      	bne.n	8004a32 <get_fileinfo+0x156>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 80049f8:	7dfb      	ldrb	r3, [r7, #23]
 80049fa:	2b40      	cmp	r3, #64	; 0x40
 80049fc:	d913      	bls.n	8004a26 <get_fileinfo+0x14a>
 80049fe:	7dfb      	ldrb	r3, [r7, #23]
 8004a00:	2b5a      	cmp	r3, #90	; 0x5a
 8004a02:	d810      	bhi.n	8004a26 <get_fileinfo+0x14a>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	330c      	adds	r3, #12
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	2b08      	cmp	r3, #8
 8004a12:	d901      	bls.n	8004a18 <get_fileinfo+0x13c>
 8004a14:	2310      	movs	r3, #16
 8004a16:	e000      	b.n	8004a1a <get_fileinfo+0x13e>
 8004a18:	2308      	movs	r3, #8
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d002      	beq.n	8004a26 <get_fileinfo+0x14a>
				c += 0x20;			/* To lower */
 8004a20:	7dfb      	ldrb	r3, [r7, #23]
 8004a22:	3320      	adds	r3, #32
 8004a24:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	3316      	adds	r3, #22
 8004a2e:	7dfa      	ldrb	r2, [r7, #23]
 8004a30:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	3301      	adds	r3, #1
 8004a36:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	2b0a      	cmp	r3, #10
 8004a3c:	d9af      	bls.n	800499e <get_fileinfo+0xc2>
	}
	if (!lfv) {
 8004a3e:	89bb      	ldrh	r3, [r7, #12]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10d      	bne.n	8004a60 <get_fileinfo+0x184>
		fno->fname[j] = 0;
 8004a44:	683a      	ldr	r2, [r7, #0]
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	4413      	add	r3, r2
 8004a4a:	3316      	adds	r3, #22
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a1b      	ldr	r3, [r3, #32]
 8004a54:	330c      	adds	r3, #12
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d101      	bne.n	8004a60 <get_fileinfo+0x184>
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	4413      	add	r3, r2
 8004a66:	3309      	adds	r3, #9
 8004a68:	2200      	movs	r2, #0
 8004a6a:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	7ada      	ldrb	r2, [r3, #11]
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	331c      	adds	r3, #28
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7fe fe8f 	bl	80037a0 <ld_dword>
 8004a82:	4602      	mov	r2, r0
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a1b      	ldr	r3, [r3, #32]
 8004a8c:	3316      	adds	r3, #22
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7fe fe86 	bl	80037a0 <ld_dword>
 8004a94:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	80da      	strh	r2, [r3, #6]
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	0c1b      	lsrs	r3, r3, #16
 8004aa2:	b29a      	uxth	r2, r3
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	809a      	strh	r2, [r3, #4]
 8004aa8:	e000      	b.n	8004aac <get_fileinfo+0x1d0>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8004aaa:	bf00      	nop
}
 8004aac:	3720      	adds	r7, #32
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b085      	sub	sp, #20
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	1c59      	adds	r1, r3, #1
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	6011      	str	r1, [r2, #0]
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8004ac8:	89fb      	ldrh	r3, [r7, #14]
 8004aca:	2b60      	cmp	r3, #96	; 0x60
 8004acc:	d905      	bls.n	8004ada <get_achar+0x28>
 8004ace:	89fb      	ldrh	r3, [r7, #14]
 8004ad0:	2b7a      	cmp	r3, #122	; 0x7a
 8004ad2:	d802      	bhi.n	8004ada <get_achar+0x28>
 8004ad4:	89fb      	ldrh	r3, [r7, #14]
 8004ad6:	3b20      	subs	r3, #32
 8004ad8:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
 8004ada:	89fb      	ldrh	r3, [r7, #14]
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b80      	cmp	r3, #128	; 0x80
 8004ae0:	d92e      	bls.n	8004b40 <get_achar+0x8e>
 8004ae2:	89fb      	ldrh	r3, [r7, #14]
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2bff      	cmp	r3, #255	; 0xff
 8004ae8:	d02a      	beq.n	8004b40 <get_achar+0x8e>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	2b40      	cmp	r3, #64	; 0x40
 8004af2:	d904      	bls.n	8004afe <get_achar+0x4c>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	2b5a      	cmp	r3, #90	; 0x5a
 8004afc:	d913      	bls.n	8004b26 <get_achar+0x74>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	2b60      	cmp	r3, #96	; 0x60
 8004b06:	d904      	bls.n	8004b12 <get_achar+0x60>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	2b7a      	cmp	r3, #122	; 0x7a
 8004b10:	d909      	bls.n	8004b26 <get_achar+0x74>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	2b80      	cmp	r3, #128	; 0x80
 8004b1a:	d911      	bls.n	8004b40 <get_achar+0x8e>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	2bff      	cmp	r3, #255	; 0xff
 8004b24:	d00c      	beq.n	8004b40 <get_achar+0x8e>
		chr = chr << 8 | (BYTE)*(*ptr)++;
 8004b26:	89fb      	ldrh	r3, [r7, #14]
 8004b28:	021b      	lsls	r3, r3, #8
 8004b2a:	b21a      	sxth	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	1c58      	adds	r0, r3, #1
 8004b32:	6879      	ldr	r1, [r7, #4]
 8004b34:	6008      	str	r0, [r1, #0]
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	b21b      	sxth	r3, r3
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	b21b      	sxth	r3, r3
 8004b3e:	81fb      	strh	r3, [r7, #14]
	}
#endif
	return chr;
 8004b40:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3714      	adds	r7, #20
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr

08004b4e <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b08a      	sub	sp, #40	; 0x28
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	60f8      	str	r0, [r7, #12]
 8004b56:	60b9      	str	r1, [r7, #8]
 8004b58:	607a      	str	r2, [r7, #4]
 8004b5a:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 8004b5c:	e009      	b.n	8004b72 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 8004b5e:	f107 0308 	add.w	r3, r7, #8
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7ff ffa5 	bl	8004ab2 <get_achar>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d101      	bne.n	8004b72 <pattern_matching+0x24>
 8004b6e:	2300      	movs	r3, #0
 8004b70:	e064      	b.n	8004c3c <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	1e5a      	subs	r2, r3, #1
 8004b76:	607a      	str	r2, [r7, #4]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1f0      	bne.n	8004b5e <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d104      	bne.n	8004b8e <pattern_matching+0x40>
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <pattern_matching+0x40>
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e056      	b.n	8004c3c <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	617b      	str	r3, [r7, #20]
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	2b3f      	cmp	r3, #63	; 0x3f
 8004b9c:	d003      	beq.n	8004ba6 <pattern_matching+0x58>
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	2b2a      	cmp	r3, #42	; 0x2a
 8004ba4:	d126      	bne.n	8004bf4 <pattern_matching+0xa6>
				nm = nx = 0;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	61fb      	str	r3, [r7, #28]
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	1c5a      	adds	r2, r3, #1
 8004bb2:	617a      	str	r2, [r7, #20]
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	2b3f      	cmp	r3, #63	; 0x3f
 8004bb8:	d103      	bne.n	8004bc2 <pattern_matching+0x74>
 8004bba:	6a3b      	ldr	r3, [r7, #32]
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	623b      	str	r3, [r7, #32]
 8004bc0:	e001      	b.n	8004bc6 <pattern_matching+0x78>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	2b3f      	cmp	r3, #63	; 0x3f
 8004bcc:	d0ef      	beq.n	8004bae <pattern_matching+0x60>
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	2b2a      	cmp	r3, #42	; 0x2a
 8004bd4:	d0eb      	beq.n	8004bae <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 8004bd6:	6978      	ldr	r0, [r7, #20]
 8004bd8:	6939      	ldr	r1, [r7, #16]
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	6a3a      	ldr	r2, [r7, #32]
 8004bde:	f7ff ffb6 	bl	8004b4e <pattern_matching>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d001      	beq.n	8004bec <pattern_matching+0x9e>
 8004be8:	2301      	movs	r3, #1
 8004bea:	e027      	b.n	8004c3c <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004bf2:	e017      	b.n	8004c24 <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 8004bf4:	f107 0314 	add.w	r3, r7, #20
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7ff ff5a 	bl	8004ab2 <get_achar>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 8004c02:	f107 0310 	add.w	r3, r7, #16
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7ff ff53 	bl	8004ab2 <get_achar>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 8004c10:	8b7a      	ldrh	r2, [r7, #26]
 8004c12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d104      	bne.n	8004c22 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 8004c18:	8b7b      	ldrh	r3, [r7, #26]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1bb      	bne.n	8004b96 <pattern_matching+0x48>
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e00c      	b.n	8004c3c <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 8004c22:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 8004c24:	f107 0308 	add.w	r3, r7, #8
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7ff ff42 	bl	8004ab2 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d002      	beq.n	8004c3a <pattern_matching+0xec>
 8004c34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1a9      	bne.n	8004b8e <pattern_matching+0x40>

	return 0;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3728      	adds	r7, #40	; 0x28
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b08a      	sub	sp, #40	; 0x28
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	613b      	str	r3, [r7, #16]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	60fb      	str	r3, [r7, #12]
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	617b      	str	r3, [r7, #20]
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	1c5a      	adds	r2, r3, #1
 8004c68:	61ba      	str	r2, [r7, #24]
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8004c72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c74:	2b1f      	cmp	r3, #31
 8004c76:	d972      	bls.n	8004d5e <create_name+0x11a>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8004c78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c7a:	2b2f      	cmp	r3, #47	; 0x2f
 8004c7c:	d006      	beq.n	8004c8c <create_name+0x48>
 8004c7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c80:	2b5c      	cmp	r3, #92	; 0x5c
 8004c82:	d110      	bne.n	8004ca6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004c84:	e002      	b.n	8004c8c <create_name+0x48>
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	3301      	adds	r3, #1
 8004c8a:	61bb      	str	r3, [r7, #24]
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	4413      	add	r3, r2
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	2b2f      	cmp	r3, #47	; 0x2f
 8004c96:	d0f6      	beq.n	8004c86 <create_name+0x42>
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	2b5c      	cmp	r3, #92	; 0x5c
 8004ca2:	d0f0      	beq.n	8004c86 <create_name+0x42>
			break;
 8004ca4:	e05c      	b.n	8004d60 <create_name+0x11c>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	2bfe      	cmp	r3, #254	; 0xfe
 8004caa:	d901      	bls.n	8004cb0 <create_name+0x6c>
 8004cac:	2306      	movs	r3, #6
 8004cae:	e1c7      	b.n	8005040 <create_name+0x3fc>
#if !_LFN_UNICODE
		w &= 0xFF;
 8004cb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
 8004cb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b80      	cmp	r3, #128	; 0x80
 8004cbc:	d92d      	bls.n	8004d1a <create_name+0xd6>
 8004cbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2bff      	cmp	r3, #255	; 0xff
 8004cc4:	d029      	beq.n	8004d1a <create_name+0xd6>
			b = (BYTE)p[si++];			/* Get 2nd byte */
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	1c5a      	adds	r2, r3, #1
 8004cca:	61ba      	str	r2, [r7, #24]
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	4413      	add	r3, r2
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			w = (w << 8) + b;			/* Create a DBC */
 8004cd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004cd8:	021b      	lsls	r3, r3, #8
 8004cda:	b29a      	uxth	r2, r3
 8004cdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	4413      	add	r3, r2
 8004ce4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
 8004ce6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cea:	2b40      	cmp	r3, #64	; 0x40
 8004cec:	d903      	bls.n	8004cf6 <create_name+0xb2>
 8004cee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cf2:	2b5a      	cmp	r3, #90	; 0x5a
 8004cf4:	d911      	bls.n	8004d1a <create_name+0xd6>
 8004cf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cfa:	2b60      	cmp	r3, #96	; 0x60
 8004cfc:	d903      	bls.n	8004d06 <create_name+0xc2>
 8004cfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d02:	2b7a      	cmp	r3, #122	; 0x7a
 8004d04:	d909      	bls.n	8004d1a <create_name+0xd6>
 8004d06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d0a:	2b80      	cmp	r3, #128	; 0x80
 8004d0c:	d903      	bls.n	8004d16 <create_name+0xd2>
 8004d0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d12:	2bff      	cmp	r3, #255	; 0xff
 8004d14:	d101      	bne.n	8004d1a <create_name+0xd6>
 8004d16:	2306      	movs	r3, #6
 8004d18:	e192      	b.n	8005040 <create_name+0x3fc>
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8004d1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d1c:	2101      	movs	r1, #1
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f000 ff1e 	bl	8005b60 <ff_convert>
 8004d24:	4603      	mov	r3, r0
 8004d26:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8004d28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <create_name+0xee>
 8004d2e:	2306      	movs	r3, #6
 8004d30:	e186      	b.n	8005040 <create_name+0x3fc>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8004d32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d34:	2b7f      	cmp	r3, #127	; 0x7f
 8004d36:	d809      	bhi.n	8004d4c <create_name+0x108>
 8004d38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	489a      	ldr	r0, [pc, #616]	; (8004fa8 <create_name+0x364>)
 8004d3e:	f7fe fdda 	bl	80038f6 <chk_chr>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <create_name+0x108>
 8004d48:	2306      	movs	r3, #6
 8004d4a:	e179      	b.n	8005040 <create_name+0x3fc>
		lfn[di++] = w;					/* Store the Unicode character */
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	1c5a      	adds	r2, r3, #1
 8004d50:	617a      	str	r2, [r7, #20]
 8004d52:	005b      	lsls	r3, r3, #1
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	4413      	add	r3, r2
 8004d58:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d5a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8004d5c:	e782      	b.n	8004c64 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8004d5e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	441a      	add	r2, r3
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004d6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d6c:	2b1f      	cmp	r3, #31
 8004d6e:	d801      	bhi.n	8004d74 <create_name+0x130>
 8004d70:	2304      	movs	r3, #4
 8004d72:	e000      	b.n	8004d76 <create_name+0x132>
 8004d74:	2300      	movs	r3, #0
 8004d76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8004d7a:	e011      	b.n	8004da0 <create_name+0x15c>
		w = lfn[di - 1];
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004d82:	3b01      	subs	r3, #1
 8004d84:	005b      	lsls	r3, r3, #1
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	4413      	add	r3, r2
 8004d8a:	881b      	ldrh	r3, [r3, #0]
 8004d8c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8004d8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d90:	2b20      	cmp	r3, #32
 8004d92:	d002      	beq.n	8004d9a <create_name+0x156>
 8004d94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d96:	2b2e      	cmp	r3, #46	; 0x2e
 8004d98:	d106      	bne.n	8004da8 <create_name+0x164>
		di--;
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1ea      	bne.n	8004d7c <create_name+0x138>
 8004da6:	e000      	b.n	8004daa <create_name+0x166>
		if (w != ' ' && w != '.') break;
 8004da8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	4413      	add	r3, r2
 8004db2:	2200      	movs	r2, #0
 8004db4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d101      	bne.n	8004dc0 <create_name+0x17c>
 8004dbc:	2306      	movs	r3, #6
 8004dbe:	e13f      	b.n	8005040 <create_name+0x3fc>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	3324      	adds	r3, #36	; 0x24
 8004dc4:	220b      	movs	r2, #11
 8004dc6:	2120      	movs	r1, #32
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7fe fd53 	bl	8003874 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8004dce:	2300      	movs	r3, #0
 8004dd0:	61bb      	str	r3, [r7, #24]
 8004dd2:	e002      	b.n	8004dda <create_name+0x196>
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	61bb      	str	r3, [r7, #24]
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	005b      	lsls	r3, r3, #1
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	4413      	add	r3, r2
 8004de2:	881b      	ldrh	r3, [r3, #0]
 8004de4:	2b20      	cmp	r3, #32
 8004de6:	d0f5      	beq.n	8004dd4 <create_name+0x190>
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	005b      	lsls	r3, r3, #1
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	4413      	add	r3, r2
 8004df0:	881b      	ldrh	r3, [r3, #0]
 8004df2:	2b2e      	cmp	r3, #46	; 0x2e
 8004df4:	d0ee      	beq.n	8004dd4 <create_name+0x190>
	if (si) cf |= NS_LOSS | NS_LFN;
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d009      	beq.n	8004e10 <create_name+0x1cc>
 8004dfc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004e00:	f043 0303 	orr.w	r3, r3, #3
 8004e04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8004e08:	e002      	b.n	8004e10 <create_name+0x1cc>
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	617b      	str	r3, [r7, #20]
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d009      	beq.n	8004e2a <create_name+0x1e6>
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	005b      	lsls	r3, r3, #1
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	4413      	add	r3, r2
 8004e24:	881b      	ldrh	r3, [r3, #0]
 8004e26:	2b2e      	cmp	r3, #46	; 0x2e
 8004e28:	d1ef      	bne.n	8004e0a <create_name+0x1c6>

	i = b = 0; ni = 8;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004e30:	2300      	movs	r3, #0
 8004e32:	623b      	str	r3, [r7, #32]
 8004e34:	2308      	movs	r3, #8
 8004e36:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	1c5a      	adds	r2, r3, #1
 8004e3c:	61ba      	str	r2, [r7, #24]
 8004e3e:	005b      	lsls	r3, r3, #1
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	4413      	add	r3, r2
 8004e44:	881b      	ldrh	r3, [r3, #0]
 8004e46:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8004e48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f000 80aa 	beq.w	8004fa4 <create_name+0x360>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8004e50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e52:	2b20      	cmp	r3, #32
 8004e54:	d006      	beq.n	8004e64 <create_name+0x220>
 8004e56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e58:	2b2e      	cmp	r3, #46	; 0x2e
 8004e5a:	d10a      	bne.n	8004e72 <create_name+0x22e>
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d006      	beq.n	8004e72 <create_name+0x22e>
			cf |= NS_LOSS | NS_LFN; continue;
 8004e64:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004e68:	f043 0303 	orr.w	r3, r3, #3
 8004e6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004e70:	e097      	b.n	8004fa2 <create_name+0x35e>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8004e72:	6a3a      	ldr	r2, [r7, #32]
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d203      	bcs.n	8004e82 <create_name+0x23e>
 8004e7a:	69ba      	ldr	r2, [r7, #24]
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d123      	bne.n	8004eca <create_name+0x286>
			if (ni == 11) {				/* Long extension */
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	2b0b      	cmp	r3, #11
 8004e86:	d106      	bne.n	8004e96 <create_name+0x252>
				cf |= NS_LOSS | NS_LFN; break;
 8004e88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004e8c:	f043 0303 	orr.w	r3, r3, #3
 8004e90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004e94:	e08d      	b.n	8004fb2 <create_name+0x36e>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d005      	beq.n	8004eaa <create_name+0x266>
 8004e9e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004ea2:	f043 0303 	orr.w	r3, r3, #3
 8004ea6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
 8004eaa:	69ba      	ldr	r2, [r7, #24]
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d87e      	bhi.n	8004fb0 <create_name+0x36c>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	61bb      	str	r3, [r7, #24]
 8004eb6:	2308      	movs	r3, #8
 8004eb8:	623b      	str	r3, [r7, #32]
 8004eba:	230b      	movs	r3, #11
 8004ebc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8004ebe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004ec8:	e06b      	b.n	8004fa2 <create_name+0x35e>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8004eca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ecc:	2b7f      	cmp	r3, #127	; 0x7f
 8004ece:	d910      	bls.n	8004ef2 <create_name+0x2ae>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
 8004ed0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 fea4 	bl	8005c20 <ff_wtoupper>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2100      	movs	r1, #0
 8004edc:	4618      	mov	r0, r3
 8004ede:	f000 fe3f 	bl	8005b60 <ff_convert>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	84bb      	strh	r3, [r7, #36]	; 0x24
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8004ee6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004eea:	f043 0302 	orr.w	r3, r3, #2
 8004eee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		}

		if (_DF1S && w >= 0x100) {		/* Is this DBC? (always false at SBCS cfg) */
 8004ef2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ef4:	2bff      	cmp	r3, #255	; 0xff
 8004ef6:	d91a      	bls.n	8004f2e <create_name+0x2ea>
			if (i >= ni - 1) {
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	3b01      	subs	r3, #1
 8004efc:	6a3a      	ldr	r2, [r7, #32]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d308      	bcc.n	8004f14 <create_name+0x2d0>
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
 8004f02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004f06:	f043 0303 	orr.w	r3, r3, #3
 8004f0a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	623b      	str	r3, [r7, #32]
 8004f12:	e046      	b.n	8004fa2 <create_name+0x35e>
			}
			dp->fn[i++] = (BYTE)(w >> 8);
 8004f14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f16:	0a1b      	lsrs	r3, r3, #8
 8004f18:	b299      	uxth	r1, r3
 8004f1a:	6a3b      	ldr	r3, [r7, #32]
 8004f1c:	1c5a      	adds	r2, r3, #1
 8004f1e:	623a      	str	r2, [r7, #32]
 8004f20:	b2c9      	uxtb	r1, r1
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	4413      	add	r3, r2
 8004f26:	460a      	mov	r2, r1
 8004f28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004f2c:	e02f      	b.n	8004f8e <create_name+0x34a>
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8004f2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d007      	beq.n	8004f44 <create_name+0x300>
 8004f34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f36:	4619      	mov	r1, r3
 8004f38:	481c      	ldr	r0, [pc, #112]	; (8004fac <create_name+0x368>)
 8004f3a:	f7fe fcdc 	bl	80038f6 <chk_chr>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d008      	beq.n	8004f56 <create_name+0x312>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8004f44:	235f      	movs	r3, #95	; 0x5f
 8004f46:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004f48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004f4c:	f043 0303 	orr.w	r3, r3, #3
 8004f50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004f54:	e01b      	b.n	8004f8e <create_name+0x34a>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8004f56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f58:	2b40      	cmp	r3, #64	; 0x40
 8004f5a:	d909      	bls.n	8004f70 <create_name+0x32c>
 8004f5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f5e:	2b5a      	cmp	r3, #90	; 0x5a
 8004f60:	d806      	bhi.n	8004f70 <create_name+0x32c>
					b |= 2;
 8004f62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f66:	f043 0302 	orr.w	r3, r3, #2
 8004f6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004f6e:	e00e      	b.n	8004f8e <create_name+0x34a>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8004f70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f72:	2b60      	cmp	r3, #96	; 0x60
 8004f74:	d90b      	bls.n	8004f8e <create_name+0x34a>
 8004f76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f78:	2b7a      	cmp	r3, #122	; 0x7a
 8004f7a:	d808      	bhi.n	8004f8e <create_name+0x34a>
						b |= 1; w -= 0x20;
 8004f7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f80:	f043 0301 	orr.w	r3, r3, #1
 8004f84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004f88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f8a:	3b20      	subs	r3, #32
 8004f8c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8004f8e:	6a3b      	ldr	r3, [r7, #32]
 8004f90:	1c5a      	adds	r2, r3, #1
 8004f92:	623a      	str	r2, [r7, #32]
 8004f94:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004f96:	b2d1      	uxtb	r1, r2
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	460a      	mov	r2, r1
 8004f9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8004fa2:	e749      	b.n	8004e38 <create_name+0x1f4>
		if (!w) break;					/* Break on end of the LFN */
 8004fa4:	bf00      	nop
 8004fa6:	e004      	b.n	8004fb2 <create_name+0x36e>
 8004fa8:	08008404 	.word	0x08008404
 8004fac:	08008410 	.word	0x08008410
			if (si > di) break;			/* No extension */
 8004fb0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004fb8:	2be5      	cmp	r3, #229	; 0xe5
 8004fba:	d103      	bne.n	8004fc4 <create_name+0x380>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2205      	movs	r2, #5
 8004fc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	2b08      	cmp	r3, #8
 8004fc8:	d104      	bne.n	8004fd4 <create_name+0x390>
 8004fca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8004fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fd8:	f003 030c 	and.w	r3, r3, #12
 8004fdc:	2b0c      	cmp	r3, #12
 8004fde:	d005      	beq.n	8004fec <create_name+0x3a8>
 8004fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fe4:	f003 0303 	and.w	r3, r3, #3
 8004fe8:	2b03      	cmp	r3, #3
 8004fea:	d105      	bne.n	8004ff8 <create_name+0x3b4>
 8004fec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004ff0:	f043 0302 	orr.w	r3, r3, #2
 8004ff4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8004ff8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	2b00      	cmp	r3, #0
 8005002:	d117      	bne.n	8005034 <create_name+0x3f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005004:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005008:	f003 0303 	and.w	r3, r3, #3
 800500c:	2b01      	cmp	r3, #1
 800500e:	d105      	bne.n	800501c <create_name+0x3d8>
 8005010:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005014:	f043 0310 	orr.w	r3, r3, #16
 8005018:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800501c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005020:	f003 030c 	and.w	r3, r3, #12
 8005024:	2b04      	cmp	r3, #4
 8005026:	d105      	bne.n	8005034 <create_name+0x3f0>
 8005028:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800502c:	f043 0308 	orr.w	r3, r3, #8
 8005030:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800503a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800503e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8005040:	4618      	mov	r0, r3
 8005042:	3728      	adds	r7, #40	; 0x28
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800505c:	e002      	b.n	8005064 <follow_path+0x1c>
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	3301      	adds	r3, #1
 8005062:	603b      	str	r3, [r7, #0]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	2b2f      	cmp	r3, #47	; 0x2f
 800506a:	d0f8      	beq.n	800505e <follow_path+0x16>
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	2b5c      	cmp	r3, #92	; 0x5c
 8005072:	d0f4      	beq.n	800505e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	2200      	movs	r2, #0
 8005078:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	2b1f      	cmp	r3, #31
 8005080:	d80a      	bhi.n	8005098 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2280      	movs	r2, #128	; 0x80
 8005086:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800508a:	2100      	movs	r1, #0
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f7ff f84a 	bl	8004126 <dir_sdi>
 8005092:	4603      	mov	r3, r0
 8005094:	75fb      	strb	r3, [r7, #23]
 8005096:	e048      	b.n	800512a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005098:	463b      	mov	r3, r7
 800509a:	4619      	mov	r1, r3
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f7ff fdd1 	bl	8004c44 <create_name>
 80050a2:	4603      	mov	r3, r0
 80050a4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80050a6:	7dfb      	ldrb	r3, [r7, #23]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d139      	bne.n	8005120 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f7ff fb55 	bl	800475c <dir_find>
 80050b2:	4603      	mov	r3, r0
 80050b4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80050bc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80050be:	7dfb      	ldrb	r3, [r7, #23]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00a      	beq.n	80050da <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80050c4:	7dfb      	ldrb	r3, [r7, #23]
 80050c6:	2b04      	cmp	r3, #4
 80050c8:	d12c      	bne.n	8005124 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80050ca:	7afb      	ldrb	r3, [r7, #11]
 80050cc:	f003 0304 	and.w	r3, r3, #4
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d127      	bne.n	8005124 <follow_path+0xdc>
 80050d4:	2305      	movs	r3, #5
 80050d6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80050d8:	e024      	b.n	8005124 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80050da:	7afb      	ldrb	r3, [r7, #11]
 80050dc:	f003 0304 	and.w	r3, r3, #4
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d121      	bne.n	8005128 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	799b      	ldrb	r3, [r3, #6]
 80050e8:	f003 0310 	and.w	r3, r3, #16
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d102      	bne.n	80050f6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80050f0:	2305      	movs	r3, #5
 80050f2:	75fb      	strb	r3, [r7, #23]
 80050f4:	e019      	b.n	800512a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	8992      	ldrh	r2, [r2, #12]
 8005104:	fbb3 f0f2 	udiv	r0, r3, r2
 8005108:	fb02 f200 	mul.w	r2, r2, r0
 800510c:	1a9b      	subs	r3, r3, r2
 800510e:	440b      	add	r3, r1
 8005110:	4619      	mov	r1, r3
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	f7ff f966 	bl	80043e4 <ld_clust>
 8005118:	4602      	mov	r2, r0
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800511e:	e7bb      	b.n	8005098 <follow_path+0x50>
			if (res != FR_OK) break;
 8005120:	bf00      	nop
 8005122:	e002      	b.n	800512a <follow_path+0xe2>
				break;
 8005124:	bf00      	nop
 8005126:	e000      	b.n	800512a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005128:	bf00      	nop
			}
		}
	}

	return res;
 800512a:	7dfb      	ldrb	r3, [r7, #23]
}
 800512c:	4618      	mov	r0, r3
 800512e:	3718      	adds	r7, #24
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005134:	b480      	push	{r7}
 8005136:	b087      	sub	sp, #28
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800513c:	f04f 33ff 	mov.w	r3, #4294967295
 8005140:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d031      	beq.n	80051ae <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	617b      	str	r3, [r7, #20]
 8005150:	e002      	b.n	8005158 <get_ldnumber+0x24>
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	3301      	adds	r3, #1
 8005156:	617b      	str	r3, [r7, #20]
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	2b1f      	cmp	r3, #31
 800515e:	d903      	bls.n	8005168 <get_ldnumber+0x34>
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	2b3a      	cmp	r3, #58	; 0x3a
 8005166:	d1f4      	bne.n	8005152 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	2b3a      	cmp	r3, #58	; 0x3a
 800516e:	d11c      	bne.n	80051aa <get_ldnumber+0x76>
			tp = *path;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	1c5a      	adds	r2, r3, #1
 800517a:	60fa      	str	r2, [r7, #12]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	3b30      	subs	r3, #48	; 0x30
 8005180:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	2b09      	cmp	r3, #9
 8005186:	d80e      	bhi.n	80051a6 <get_ldnumber+0x72>
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	429a      	cmp	r2, r3
 800518e:	d10a      	bne.n	80051a6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d107      	bne.n	80051a6 <get_ldnumber+0x72>
					vol = (int)i;
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	3301      	adds	r3, #1
 800519e:	617b      	str	r3, [r7, #20]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	e002      	b.n	80051b0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80051aa:	2300      	movs	r3, #0
 80051ac:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80051ae:	693b      	ldr	r3, [r7, #16]
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	371c      	adds	r7, #28
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	70da      	strb	r2, [r3, #3]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f04f 32ff 	mov.w	r2, #4294967295
 80051d2:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80051d4:	6839      	ldr	r1, [r7, #0]
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f7fe fcda 	bl	8003b90 <move_window>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d001      	beq.n	80051e6 <check_fs+0x2a>
 80051e2:	2304      	movs	r3, #4
 80051e4:	e038      	b.n	8005258 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	3338      	adds	r3, #56	; 0x38
 80051ea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7fe fabe 	bl	8003770 <ld_word>
 80051f4:	4603      	mov	r3, r0
 80051f6:	461a      	mov	r2, r3
 80051f8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d001      	beq.n	8005204 <check_fs+0x48>
 8005200:	2303      	movs	r3, #3
 8005202:	e029      	b.n	8005258 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800520a:	2be9      	cmp	r3, #233	; 0xe9
 800520c:	d009      	beq.n	8005222 <check_fs+0x66>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005214:	2beb      	cmp	r3, #235	; 0xeb
 8005216:	d11e      	bne.n	8005256 <check_fs+0x9a>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800521e:	2b90      	cmp	r3, #144	; 0x90
 8005220:	d119      	bne.n	8005256 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	3338      	adds	r3, #56	; 0x38
 8005226:	3336      	adds	r3, #54	; 0x36
 8005228:	4618      	mov	r0, r3
 800522a:	f7fe fab9 	bl	80037a0 <ld_dword>
 800522e:	4603      	mov	r3, r0
 8005230:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005234:	4a0a      	ldr	r2, [pc, #40]	; (8005260 <check_fs+0xa4>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d101      	bne.n	800523e <check_fs+0x82>
 800523a:	2300      	movs	r3, #0
 800523c:	e00c      	b.n	8005258 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	3338      	adds	r3, #56	; 0x38
 8005242:	3352      	adds	r3, #82	; 0x52
 8005244:	4618      	mov	r0, r3
 8005246:	f7fe faab 	bl	80037a0 <ld_dword>
 800524a:	4602      	mov	r2, r0
 800524c:	4b05      	ldr	r3, [pc, #20]	; (8005264 <check_fs+0xa8>)
 800524e:	429a      	cmp	r2, r3
 8005250:	d101      	bne.n	8005256 <check_fs+0x9a>
 8005252:	2300      	movs	r3, #0
 8005254:	e000      	b.n	8005258 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005256:	2302      	movs	r3, #2
}
 8005258:	4618      	mov	r0, r3
 800525a:	3708      	adds	r7, #8
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	00544146 	.word	0x00544146
 8005264:	33544146 	.word	0x33544146

08005268 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b096      	sub	sp, #88	; 0x58
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	4613      	mov	r3, r2
 8005274:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	2200      	movs	r2, #0
 800527a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f7ff ff59 	bl	8005134 <get_ldnumber>
 8005282:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005286:	2b00      	cmp	r3, #0
 8005288:	da01      	bge.n	800528e <find_volume+0x26>
 800528a:	230b      	movs	r3, #11
 800528c:	e268      	b.n	8005760 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800528e:	4ab0      	ldr	r2, [pc, #704]	; (8005550 <find_volume+0x2e8>)
 8005290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005296:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <find_volume+0x3a>
 800529e:	230c      	movs	r3, #12
 80052a0:	e25e      	b.n	8005760 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052a6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80052a8:	79fb      	ldrb	r3, [r7, #7]
 80052aa:	f023 0301 	bic.w	r3, r3, #1
 80052ae:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80052b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d01a      	beq.n	80052ee <find_volume+0x86>
		stat = disk_status(fs->drv);
 80052b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ba:	785b      	ldrb	r3, [r3, #1]
 80052bc:	4618      	mov	r0, r3
 80052be:	f7fe f9b9 	bl	8003634 <disk_status>
 80052c2:	4603      	mov	r3, r0
 80052c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80052c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80052cc:	f003 0301 	and.w	r3, r3, #1
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d10c      	bne.n	80052ee <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80052d4:	79fb      	ldrb	r3, [r7, #7]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d007      	beq.n	80052ea <find_volume+0x82>
 80052da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80052de:	f003 0304 	and.w	r3, r3, #4
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d001      	beq.n	80052ea <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80052e6:	230a      	movs	r3, #10
 80052e8:	e23a      	b.n	8005760 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 80052ea:	2300      	movs	r3, #0
 80052ec:	e238      	b.n	8005760 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80052ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f0:	2200      	movs	r2, #0
 80052f2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80052f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052f6:	b2da      	uxtb	r2, r3
 80052f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80052fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fe:	785b      	ldrb	r3, [r3, #1]
 8005300:	4618      	mov	r0, r3
 8005302:	f7fe f9b1 	bl	8003668 <disk_initialize>
 8005306:	4603      	mov	r3, r0
 8005308:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800530c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005310:	f003 0301 	and.w	r3, r3, #1
 8005314:	2b00      	cmp	r3, #0
 8005316:	d001      	beq.n	800531c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005318:	2303      	movs	r3, #3
 800531a:	e221      	b.n	8005760 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800531c:	79fb      	ldrb	r3, [r7, #7]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d007      	beq.n	8005332 <find_volume+0xca>
 8005322:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005326:	f003 0304 	and.w	r3, r3, #4
 800532a:	2b00      	cmp	r3, #0
 800532c:	d001      	beq.n	8005332 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800532e:	230a      	movs	r3, #10
 8005330:	e216      	b.n	8005760 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8005332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005334:	7858      	ldrb	r0, [r3, #1]
 8005336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005338:	330c      	adds	r3, #12
 800533a:	461a      	mov	r2, r3
 800533c:	2102      	movs	r1, #2
 800533e:	f7fe f9f9 	bl	8003734 <disk_ioctl>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d001      	beq.n	800534c <find_volume+0xe4>
 8005348:	2301      	movs	r3, #1
 800534a:	e209      	b.n	8005760 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800534c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800534e:	899b      	ldrh	r3, [r3, #12]
 8005350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005354:	d80d      	bhi.n	8005372 <find_volume+0x10a>
 8005356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005358:	899b      	ldrh	r3, [r3, #12]
 800535a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800535e:	d308      	bcc.n	8005372 <find_volume+0x10a>
 8005360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005362:	899b      	ldrh	r3, [r3, #12]
 8005364:	461a      	mov	r2, r3
 8005366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005368:	899b      	ldrh	r3, [r3, #12]
 800536a:	3b01      	subs	r3, #1
 800536c:	4013      	ands	r3, r2
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <find_volume+0x10e>
 8005372:	2301      	movs	r3, #1
 8005374:	e1f4      	b.n	8005760 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005376:	2300      	movs	r3, #0
 8005378:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800537a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800537c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800537e:	f7ff ff1d 	bl	80051bc <check_fs>
 8005382:	4603      	mov	r3, r0
 8005384:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005388:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800538c:	2b02      	cmp	r3, #2
 800538e:	d14b      	bne.n	8005428 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005390:	2300      	movs	r3, #0
 8005392:	643b      	str	r3, [r7, #64]	; 0x40
 8005394:	e01f      	b.n	80053d6 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005398:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800539c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800539e:	011b      	lsls	r3, r3, #4
 80053a0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80053a4:	4413      	add	r3, r2
 80053a6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80053a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053aa:	3304      	adds	r3, #4
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d006      	beq.n	80053c0 <find_volume+0x158>
 80053b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b4:	3308      	adds	r3, #8
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7fe f9f2 	bl	80037a0 <ld_dword>
 80053bc:	4602      	mov	r2, r0
 80053be:	e000      	b.n	80053c2 <find_volume+0x15a>
 80053c0:	2200      	movs	r2, #0
 80053c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80053ca:	440b      	add	r3, r1
 80053cc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80053d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053d2:	3301      	adds	r3, #1
 80053d4:	643b      	str	r3, [r7, #64]	; 0x40
 80053d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053d8:	2b03      	cmp	r3, #3
 80053da:	d9dc      	bls.n	8005396 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80053dc:	2300      	movs	r3, #0
 80053de:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80053e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d002      	beq.n	80053ec <find_volume+0x184>
 80053e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053e8:	3b01      	subs	r3, #1
 80053ea:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80053ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80053f4:	4413      	add	r3, r2
 80053f6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80053fa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80053fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d005      	beq.n	800540e <find_volume+0x1a6>
 8005402:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005404:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005406:	f7ff fed9 	bl	80051bc <check_fs>
 800540a:	4603      	mov	r3, r0
 800540c:	e000      	b.n	8005410 <find_volume+0x1a8>
 800540e:	2303      	movs	r3, #3
 8005410:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005414:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005418:	2b01      	cmp	r3, #1
 800541a:	d905      	bls.n	8005428 <find_volume+0x1c0>
 800541c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800541e:	3301      	adds	r3, #1
 8005420:	643b      	str	r3, [r7, #64]	; 0x40
 8005422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005424:	2b03      	cmp	r3, #3
 8005426:	d9e1      	bls.n	80053ec <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005428:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800542c:	2b04      	cmp	r3, #4
 800542e:	d101      	bne.n	8005434 <find_volume+0x1cc>
 8005430:	2301      	movs	r3, #1
 8005432:	e195      	b.n	8005760 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005434:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005438:	2b01      	cmp	r3, #1
 800543a:	d901      	bls.n	8005440 <find_volume+0x1d8>
 800543c:	230d      	movs	r3, #13
 800543e:	e18f      	b.n	8005760 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005442:	3338      	adds	r3, #56	; 0x38
 8005444:	330b      	adds	r3, #11
 8005446:	4618      	mov	r0, r3
 8005448:	f7fe f992 	bl	8003770 <ld_word>
 800544c:	4603      	mov	r3, r0
 800544e:	461a      	mov	r2, r3
 8005450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005452:	899b      	ldrh	r3, [r3, #12]
 8005454:	429a      	cmp	r2, r3
 8005456:	d001      	beq.n	800545c <find_volume+0x1f4>
 8005458:	230d      	movs	r3, #13
 800545a:	e181      	b.n	8005760 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800545c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545e:	3338      	adds	r3, #56	; 0x38
 8005460:	3316      	adds	r3, #22
 8005462:	4618      	mov	r0, r3
 8005464:	f7fe f984 	bl	8003770 <ld_word>
 8005468:	4603      	mov	r3, r0
 800546a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800546c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800546e:	2b00      	cmp	r3, #0
 8005470:	d106      	bne.n	8005480 <find_volume+0x218>
 8005472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005474:	3338      	adds	r3, #56	; 0x38
 8005476:	3324      	adds	r3, #36	; 0x24
 8005478:	4618      	mov	r0, r3
 800547a:	f7fe f991 	bl	80037a0 <ld_dword>
 800547e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005482:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005484:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005488:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800548c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005492:	789b      	ldrb	r3, [r3, #2]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d005      	beq.n	80054a4 <find_volume+0x23c>
 8005498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549a:	789b      	ldrb	r3, [r3, #2]
 800549c:	2b02      	cmp	r3, #2
 800549e:	d001      	beq.n	80054a4 <find_volume+0x23c>
 80054a0:	230d      	movs	r3, #13
 80054a2:	e15d      	b.n	8005760 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80054a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a6:	789b      	ldrb	r3, [r3, #2]
 80054a8:	461a      	mov	r2, r3
 80054aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054ac:	fb02 f303 	mul.w	r3, r2, r3
 80054b0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80054b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054bc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80054be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c0:	895b      	ldrh	r3, [r3, #10]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d008      	beq.n	80054d8 <find_volume+0x270>
 80054c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c8:	895b      	ldrh	r3, [r3, #10]
 80054ca:	461a      	mov	r2, r3
 80054cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ce:	895b      	ldrh	r3, [r3, #10]
 80054d0:	3b01      	subs	r3, #1
 80054d2:	4013      	ands	r3, r2
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d001      	beq.n	80054dc <find_volume+0x274>
 80054d8:	230d      	movs	r3, #13
 80054da:	e141      	b.n	8005760 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80054dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054de:	3338      	adds	r3, #56	; 0x38
 80054e0:	3311      	adds	r3, #17
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7fe f944 	bl	8003770 <ld_word>
 80054e8:	4603      	mov	r3, r0
 80054ea:	461a      	mov	r2, r3
 80054ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ee:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80054f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f2:	891b      	ldrh	r3, [r3, #8]
 80054f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054f6:	8992      	ldrh	r2, [r2, #12]
 80054f8:	0952      	lsrs	r2, r2, #5
 80054fa:	b292      	uxth	r2, r2
 80054fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8005500:	fb02 f201 	mul.w	r2, r2, r1
 8005504:	1a9b      	subs	r3, r3, r2
 8005506:	b29b      	uxth	r3, r3
 8005508:	2b00      	cmp	r3, #0
 800550a:	d001      	beq.n	8005510 <find_volume+0x2a8>
 800550c:	230d      	movs	r3, #13
 800550e:	e127      	b.n	8005760 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005512:	3338      	adds	r3, #56	; 0x38
 8005514:	3313      	adds	r3, #19
 8005516:	4618      	mov	r0, r3
 8005518:	f7fe f92a 	bl	8003770 <ld_word>
 800551c:	4603      	mov	r3, r0
 800551e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005520:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005522:	2b00      	cmp	r3, #0
 8005524:	d106      	bne.n	8005534 <find_volume+0x2cc>
 8005526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005528:	3338      	adds	r3, #56	; 0x38
 800552a:	3320      	adds	r3, #32
 800552c:	4618      	mov	r0, r3
 800552e:	f7fe f937 	bl	80037a0 <ld_dword>
 8005532:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005536:	3338      	adds	r3, #56	; 0x38
 8005538:	330e      	adds	r3, #14
 800553a:	4618      	mov	r0, r3
 800553c:	f7fe f918 	bl	8003770 <ld_word>
 8005540:	4603      	mov	r3, r0
 8005542:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005544:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005546:	2b00      	cmp	r3, #0
 8005548:	d104      	bne.n	8005554 <find_volume+0x2ec>
 800554a:	230d      	movs	r3, #13
 800554c:	e108      	b.n	8005760 <find_volume+0x4f8>
 800554e:	bf00      	nop
 8005550:	200000a0 	.word	0x200000a0

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005554:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005558:	4413      	add	r3, r2
 800555a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800555c:	8911      	ldrh	r1, [r2, #8]
 800555e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005560:	8992      	ldrh	r2, [r2, #12]
 8005562:	0952      	lsrs	r2, r2, #5
 8005564:	b292      	uxth	r2, r2
 8005566:	fbb1 f2f2 	udiv	r2, r1, r2
 800556a:	b292      	uxth	r2, r2
 800556c:	4413      	add	r3, r2
 800556e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005570:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005574:	429a      	cmp	r2, r3
 8005576:	d201      	bcs.n	800557c <find_volume+0x314>
 8005578:	230d      	movs	r3, #13
 800557a:	e0f1      	b.n	8005760 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800557c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800557e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005584:	8952      	ldrh	r2, [r2, #10]
 8005586:	fbb3 f3f2 	udiv	r3, r3, r2
 800558a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558e:	2b00      	cmp	r3, #0
 8005590:	d101      	bne.n	8005596 <find_volume+0x32e>
 8005592:	230d      	movs	r3, #13
 8005594:	e0e4      	b.n	8005760 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8005596:	2303      	movs	r3, #3
 8005598:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800559c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d802      	bhi.n	80055ac <find_volume+0x344>
 80055a6:	2302      	movs	r3, #2
 80055a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80055ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ae:	f640 72f5 	movw	r2, #4085	; 0xff5
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d802      	bhi.n	80055bc <find_volume+0x354>
 80055b6:	2301      	movs	r3, #1
 80055b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80055bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055be:	1c9a      	adds	r2, r3, #2
 80055c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c2:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80055c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80055c8:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80055ca:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80055cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055ce:	441a      	add	r2, r3
 80055d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d2:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80055d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80055d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d8:	441a      	add	r2, r3
 80055da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055dc:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80055de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055e2:	2b03      	cmp	r3, #3
 80055e4:	d11e      	bne.n	8005624 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80055e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e8:	3338      	adds	r3, #56	; 0x38
 80055ea:	332a      	adds	r3, #42	; 0x2a
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7fe f8bf 	bl	8003770 <ld_word>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d001      	beq.n	80055fc <find_volume+0x394>
 80055f8:	230d      	movs	r3, #13
 80055fa:	e0b1      	b.n	8005760 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80055fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055fe:	891b      	ldrh	r3, [r3, #8]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d001      	beq.n	8005608 <find_volume+0x3a0>
 8005604:	230d      	movs	r3, #13
 8005606:	e0ab      	b.n	8005760 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560a:	3338      	adds	r3, #56	; 0x38
 800560c:	332c      	adds	r3, #44	; 0x2c
 800560e:	4618      	mov	r0, r3
 8005610:	f7fe f8c6 	bl	80037a0 <ld_dword>
 8005614:	4602      	mov	r2, r0
 8005616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005618:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800561a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561c:	69db      	ldr	r3, [r3, #28]
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	647b      	str	r3, [r7, #68]	; 0x44
 8005622:	e01f      	b.n	8005664 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005626:	891b      	ldrh	r3, [r3, #8]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d101      	bne.n	8005630 <find_volume+0x3c8>
 800562c:	230d      	movs	r3, #13
 800562e:	e097      	b.n	8005760 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005632:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005636:	441a      	add	r2, r3
 8005638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800563c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005640:	2b02      	cmp	r3, #2
 8005642:	d103      	bne.n	800564c <find_volume+0x3e4>
 8005644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005646:	69db      	ldr	r3, [r3, #28]
 8005648:	005b      	lsls	r3, r3, #1
 800564a:	e00a      	b.n	8005662 <find_volume+0x3fa>
 800564c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564e:	69da      	ldr	r2, [r3, #28]
 8005650:	4613      	mov	r3, r2
 8005652:	005b      	lsls	r3, r3, #1
 8005654:	4413      	add	r3, r2
 8005656:	085a      	lsrs	r2, r3, #1
 8005658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565a:	69db      	ldr	r3, [r3, #28]
 800565c:	f003 0301 	and.w	r3, r3, #1
 8005660:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005662:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005666:	6a1a      	ldr	r2, [r3, #32]
 8005668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566a:	899b      	ldrh	r3, [r3, #12]
 800566c:	4619      	mov	r1, r3
 800566e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005670:	440b      	add	r3, r1
 8005672:	3b01      	subs	r3, #1
 8005674:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005676:	8989      	ldrh	r1, [r1, #12]
 8005678:	fbb3 f3f1 	udiv	r3, r3, r1
 800567c:	429a      	cmp	r2, r3
 800567e:	d201      	bcs.n	8005684 <find_volume+0x41c>
 8005680:	230d      	movs	r3, #13
 8005682:	e06d      	b.n	8005760 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005686:	f04f 32ff 	mov.w	r2, #4294967295
 800568a:	619a      	str	r2, [r3, #24]
 800568c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800568e:	699a      	ldr	r2, [r3, #24]
 8005690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005692:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8005694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005696:	2280      	movs	r2, #128	; 0x80
 8005698:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800569a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800569e:	2b03      	cmp	r3, #3
 80056a0:	d149      	bne.n	8005736 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80056a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a4:	3338      	adds	r3, #56	; 0x38
 80056a6:	3330      	adds	r3, #48	; 0x30
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7fe f861 	bl	8003770 <ld_word>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d140      	bne.n	8005736 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 80056b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056b6:	3301      	adds	r3, #1
 80056b8:	4619      	mov	r1, r3
 80056ba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80056bc:	f7fe fa68 	bl	8003b90 <move_window>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d137      	bne.n	8005736 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 80056c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c8:	2200      	movs	r2, #0
 80056ca:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80056cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ce:	3338      	adds	r3, #56	; 0x38
 80056d0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80056d4:	4618      	mov	r0, r3
 80056d6:	f7fe f84b 	bl	8003770 <ld_word>
 80056da:	4603      	mov	r3, r0
 80056dc:	461a      	mov	r2, r3
 80056de:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d127      	bne.n	8005736 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80056e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e8:	3338      	adds	r3, #56	; 0x38
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7fe f858 	bl	80037a0 <ld_dword>
 80056f0:	4602      	mov	r2, r0
 80056f2:	4b1d      	ldr	r3, [pc, #116]	; (8005768 <find_volume+0x500>)
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d11e      	bne.n	8005736 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80056f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056fa:	3338      	adds	r3, #56	; 0x38
 80056fc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005700:	4618      	mov	r0, r3
 8005702:	f7fe f84d 	bl	80037a0 <ld_dword>
 8005706:	4602      	mov	r2, r0
 8005708:	4b18      	ldr	r3, [pc, #96]	; (800576c <find_volume+0x504>)
 800570a:	429a      	cmp	r2, r3
 800570c:	d113      	bne.n	8005736 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800570e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005710:	3338      	adds	r3, #56	; 0x38
 8005712:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005716:	4618      	mov	r0, r3
 8005718:	f7fe f842 	bl	80037a0 <ld_dword>
 800571c:	4602      	mov	r2, r0
 800571e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005720:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005724:	3338      	adds	r3, #56	; 0x38
 8005726:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800572a:	4618      	mov	r0, r3
 800572c:	f7fe f838 	bl	80037a0 <ld_dword>
 8005730:	4602      	mov	r2, r0
 8005732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005734:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005738:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800573c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800573e:	4b0c      	ldr	r3, [pc, #48]	; (8005770 <find_volume+0x508>)
 8005740:	881b      	ldrh	r3, [r3, #0]
 8005742:	3301      	adds	r3, #1
 8005744:	b29a      	uxth	r2, r3
 8005746:	4b0a      	ldr	r3, [pc, #40]	; (8005770 <find_volume+0x508>)
 8005748:	801a      	strh	r2, [r3, #0]
 800574a:	4b09      	ldr	r3, [pc, #36]	; (8005770 <find_volume+0x508>)
 800574c:	881a      	ldrh	r2, [r3, #0]
 800574e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005750:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8005752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005754:	4a07      	ldr	r2, [pc, #28]	; (8005774 <find_volume+0x50c>)
 8005756:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005758:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800575a:	f7fe f9b1 	bl	8003ac0 <clear_lock>
#endif
	return FR_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3758      	adds	r7, #88	; 0x58
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	41615252 	.word	0x41615252
 800576c:	61417272 	.word	0x61417272
 8005770:	200000a4 	.word	0x200000a4
 8005774:	200000c8 	.word	0x200000c8

08005778 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005782:	2309      	movs	r3, #9
 8005784:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d01c      	beq.n	80057c6 <validate+0x4e>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d018      	beq.n	80057c6 <validate+0x4e>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d013      	beq.n	80057c6 <validate+0x4e>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	889a      	ldrh	r2, [r3, #4]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	88db      	ldrh	r3, [r3, #6]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d10c      	bne.n	80057c6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	785b      	ldrb	r3, [r3, #1]
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7fd ff3e 	bl	8003634 <disk_status>
 80057b8:	4603      	mov	r3, r0
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <validate+0x4e>
			res = FR_OK;
 80057c2:	2300      	movs	r3, #0
 80057c4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80057c6:	7bfb      	ldrb	r3, [r7, #15]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d102      	bne.n	80057d2 <validate+0x5a>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	e000      	b.n	80057d4 <validate+0x5c>
 80057d2:	2300      	movs	r3, #0
 80057d4:	683a      	ldr	r2, [r7, #0]
 80057d6:	6013      	str	r3, [r2, #0]
	return res;
 80057d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3710      	adds	r7, #16
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
	...

080057e4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b088      	sub	sp, #32
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	4613      	mov	r3, r2
 80057f0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80057f6:	f107 0310 	add.w	r3, r7, #16
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7ff fc9a 	bl	8005134 <get_ldnumber>
 8005800:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	2b00      	cmp	r3, #0
 8005806:	da01      	bge.n	800580c <f_mount+0x28>
 8005808:	230b      	movs	r3, #11
 800580a:	e02b      	b.n	8005864 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800580c:	4a17      	ldr	r2, [pc, #92]	; (800586c <f_mount+0x88>)
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005814:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d005      	beq.n	8005828 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800581c:	69b8      	ldr	r0, [r7, #24]
 800581e:	f7fe f94f 	bl	8003ac0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	2200      	movs	r2, #0
 8005826:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d002      	beq.n	8005834 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	490d      	ldr	r1, [pc, #52]	; (800586c <f_mount+0x88>)
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d002      	beq.n	800584a <f_mount+0x66>
 8005844:	79fb      	ldrb	r3, [r7, #7]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d001      	beq.n	800584e <f_mount+0x6a>
 800584a:	2300      	movs	r3, #0
 800584c:	e00a      	b.n	8005864 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800584e:	f107 010c 	add.w	r1, r7, #12
 8005852:	f107 0308 	add.w	r3, r7, #8
 8005856:	2200      	movs	r2, #0
 8005858:	4618      	mov	r0, r3
 800585a:	f7ff fd05 	bl	8005268 <find_volume>
 800585e:	4603      	mov	r3, r0
 8005860:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005862:	7dfb      	ldrb	r3, [r7, #23]
}
 8005864:	4618      	mov	r0, r3
 8005866:	3720      	adds	r7, #32
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	200000a0 	.word	0x200000a0

08005870 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b086      	sub	sp, #24
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d101      	bne.n	8005884 <f_opendir+0x14>
 8005880:	2309      	movs	r3, #9
 8005882:	e064      	b.n	800594e <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8005888:	f107 010c 	add.w	r1, r7, #12
 800588c:	463b      	mov	r3, r7
 800588e:	2200      	movs	r2, #0
 8005890:	4618      	mov	r0, r3
 8005892:	f7ff fce9 	bl	8005268 <find_volume>
 8005896:	4603      	mov	r3, r0
 8005898:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800589a:	7dfb      	ldrb	r3, [r7, #23]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d14f      	bne.n	8005940 <f_opendir+0xd0>
		obj->fs = fs;
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	4619      	mov	r1, r3
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f7ff fbcc 	bl	8005048 <follow_path>
 80058b0:	4603      	mov	r3, r0
 80058b2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80058b4:	7dfb      	ldrb	r3, [r7, #23]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d13d      	bne.n	8005936 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80058c0:	b25b      	sxtb	r3, r3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	db12      	blt.n	80058ec <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	799b      	ldrb	r3, [r3, #6]
 80058ca:	f003 0310 	and.w	r3, r3, #16
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00a      	beq.n	80058e8 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a1b      	ldr	r3, [r3, #32]
 80058d8:	4619      	mov	r1, r3
 80058da:	4610      	mov	r0, r2
 80058dc:	f7fe fd82 	bl	80043e4 <ld_clust>
 80058e0:	4602      	mov	r2, r0
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	609a      	str	r2, [r3, #8]
 80058e6:	e001      	b.n	80058ec <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80058e8:	2305      	movs	r3, #5
 80058ea:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80058ec:	7dfb      	ldrb	r3, [r7, #23]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d121      	bne.n	8005936 <f_opendir+0xc6>
				obj->id = fs->id;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	88da      	ldrh	r2, [r3, #6]
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80058fa:	2100      	movs	r1, #0
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f7fe fc12 	bl	8004126 <dir_sdi>
 8005902:	4603      	mov	r3, r0
 8005904:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8005906:	7dfb      	ldrb	r3, [r7, #23]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d114      	bne.n	8005936 <f_opendir+0xc6>
					if (obj->sclust) {
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00d      	beq.n	8005930 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8005914:	2100      	movs	r1, #0
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f7fe f808 	bl	800392c <inc_lock>
 800591c:	4602      	mov	r2, r0
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d105      	bne.n	8005936 <f_opendir+0xc6>
 800592a:	2312      	movs	r3, #18
 800592c:	75fb      	strb	r3, [r7, #23]
 800592e:	e002      	b.n	8005936 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	2200      	movs	r2, #0
 8005934:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8005936:	7dfb      	ldrb	r3, [r7, #23]
 8005938:	2b04      	cmp	r3, #4
 800593a:	d101      	bne.n	8005940 <f_opendir+0xd0>
 800593c:	2305      	movs	r3, #5
 800593e:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8005940:	7dfb      	ldrb	r3, [r7, #23]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d002      	beq.n	800594c <f_opendir+0xdc>
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	2200      	movs	r2, #0
 800594a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800594c:	7dfb      	ldrb	r3, [r7, #23]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3718      	adds	r7, #24
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b084      	sub	sp, #16
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f107 0208 	add.w	r2, r7, #8
 8005964:	4611      	mov	r1, r2
 8005966:	4618      	mov	r0, r3
 8005968:	f7ff ff06 	bl	8005778 <validate>
 800596c:	4603      	mov	r3, r0
 800596e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005970:	7bfb      	ldrb	r3, [r7, #15]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d110      	bne.n	8005998 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d006      	beq.n	800598c <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	4618      	mov	r0, r3
 8005984:	f7fe f860 	bl	8003a48 <dec_lock>
 8005988:	4603      	mov	r3, r0
 800598a:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800598c:	7bfb      	ldrb	r3, [r7, #15]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d102      	bne.n	8005998 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8005998:	7bfb      	ldrb	r3, [r7, #15]
}
 800599a:	4618      	mov	r0, r3
 800599c:	3710      	adds	r7, #16
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b084      	sub	sp, #16
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
 80059aa:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f107 0208 	add.w	r2, r7, #8
 80059b2:	4611      	mov	r1, r2
 80059b4:	4618      	mov	r0, r3
 80059b6:	f7ff fedf 	bl	8005778 <validate>
 80059ba:	4603      	mov	r3, r0
 80059bc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80059be:	7bfb      	ldrb	r3, [r7, #15]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d126      	bne.n	8005a12 <f_readdir+0x70>
		if (!fno) {
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d106      	bne.n	80059d8 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80059ca:	2100      	movs	r1, #0
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f7fe fbaa 	bl	8004126 <dir_sdi>
 80059d2:	4603      	mov	r3, r0
 80059d4:	73fb      	strb	r3, [r7, #15]
 80059d6:	e01c      	b.n	8005a12 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 80059d8:	2100      	movs	r1, #0
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7fe fe17 	bl	800460e <dir_read>
 80059e0:	4603      	mov	r3, r0
 80059e2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80059e4:	7bfb      	ldrb	r3, [r7, #15]
 80059e6:	2b04      	cmp	r3, #4
 80059e8:	d101      	bne.n	80059ee <f_readdir+0x4c>
 80059ea:	2300      	movs	r3, #0
 80059ec:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 80059ee:	7bfb      	ldrb	r3, [r7, #15]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d10e      	bne.n	8005a12 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 80059f4:	6839      	ldr	r1, [r7, #0]
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f7fe ff70 	bl	80048dc <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80059fc:	2100      	movs	r1, #0
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7fe fc1a 	bl	8004238 <dir_next>
 8005a04:	4603      	mov	r3, r0
 8005a06:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8005a08:	7bfb      	ldrb	r3, [r7, #15]
 8005a0a:	2b04      	cmp	r3, #4
 8005a0c:	d101      	bne.n	8005a12 <f_readdir+0x70>
 8005a0e:	2300      	movs	r3, #0
 8005a10:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8005a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3710      	adds	r7, #16
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 8005a26:	6839      	ldr	r1, [r7, #0]
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f7ff ffba 	bl	80059a2 <f_readdir>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 8005a32:	7bfb      	ldrb	r3, [r7, #15]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d114      	bne.n	8005a62 <f_findnext+0x46>
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d011      	beq.n	8005a62 <f_findnext+0x46>
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	7d9b      	ldrb	r3, [r3, #22]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00d      	beq.n	8005a62 <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	f103 0116 	add.w	r1, r3, #22
 8005a50:	2300      	movs	r3, #0
 8005a52:	2200      	movs	r2, #0
 8005a54:	f7ff f87b 	bl	8004b4e <pattern_matching>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d100      	bne.n	8005a60 <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 8005a5e:	e7e2      	b.n	8005a26 <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8005a60:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 8005a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3710      	adds	r7, #16
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b086      	sub	sp, #24
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
 8005a78:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	683a      	ldr	r2, [r7, #0]
 8005a7e:	635a      	str	r2, [r3, #52]	; 0x34
	res = f_opendir(dp, path);		/* Open the target directory */
 8005a80:	6879      	ldr	r1, [r7, #4]
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f7ff fef4 	bl	8005870 <f_opendir>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005a8c:	7dfb      	ldrb	r3, [r7, #23]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d105      	bne.n	8005a9e <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 8005a92:	68b9      	ldr	r1, [r7, #8]
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f7ff ffc1 	bl	8005a1c <f_findnext>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 8005a9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3718      	adds	r7, #24
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b087      	sub	sp, #28
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005aba:	2300      	movs	r3, #0
 8005abc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005abe:	4b1f      	ldr	r3, [pc, #124]	; (8005b3c <FATFS_LinkDriverEx+0x94>)
 8005ac0:	7a5b      	ldrb	r3, [r3, #9]
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d131      	bne.n	8005b2c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005ac8:	4b1c      	ldr	r3, [pc, #112]	; (8005b3c <FATFS_LinkDriverEx+0x94>)
 8005aca:	7a5b      	ldrb	r3, [r3, #9]
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	461a      	mov	r2, r3
 8005ad0:	4b1a      	ldr	r3, [pc, #104]	; (8005b3c <FATFS_LinkDriverEx+0x94>)
 8005ad2:	2100      	movs	r1, #0
 8005ad4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005ad6:	4b19      	ldr	r3, [pc, #100]	; (8005b3c <FATFS_LinkDriverEx+0x94>)
 8005ad8:	7a5b      	ldrb	r3, [r3, #9]
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	4a17      	ldr	r2, [pc, #92]	; (8005b3c <FATFS_LinkDriverEx+0x94>)
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	4413      	add	r3, r2
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005ae6:	4b15      	ldr	r3, [pc, #84]	; (8005b3c <FATFS_LinkDriverEx+0x94>)
 8005ae8:	7a5b      	ldrb	r3, [r3, #9]
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	461a      	mov	r2, r3
 8005aee:	4b13      	ldr	r3, [pc, #76]	; (8005b3c <FATFS_LinkDriverEx+0x94>)
 8005af0:	4413      	add	r3, r2
 8005af2:	79fa      	ldrb	r2, [r7, #7]
 8005af4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005af6:	4b11      	ldr	r3, [pc, #68]	; (8005b3c <FATFS_LinkDriverEx+0x94>)
 8005af8:	7a5b      	ldrb	r3, [r3, #9]
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	1c5a      	adds	r2, r3, #1
 8005afe:	b2d1      	uxtb	r1, r2
 8005b00:	4a0e      	ldr	r2, [pc, #56]	; (8005b3c <FATFS_LinkDriverEx+0x94>)
 8005b02:	7251      	strb	r1, [r2, #9]
 8005b04:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005b06:	7dbb      	ldrb	r3, [r7, #22]
 8005b08:	3330      	adds	r3, #48	; 0x30
 8005b0a:	b2da      	uxtb	r2, r3
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	3301      	adds	r3, #1
 8005b14:	223a      	movs	r2, #58	; 0x3a
 8005b16:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	3302      	adds	r3, #2
 8005b1c:	222f      	movs	r2, #47	; 0x2f
 8005b1e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	3303      	adds	r3, #3
 8005b24:	2200      	movs	r2, #0
 8005b26:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005b2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	371c      	adds	r7, #28
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	200002c8 	.word	0x200002c8

08005b40 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	6839      	ldr	r1, [r7, #0]
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f7ff ffaa 	bl	8005aa8 <FATFS_LinkDriverEx>
 8005b54:	4603      	mov	r3, r0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3708      	adds	r7, #8
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
	...

08005b60 <ff_convert>:

WCHAR ff_convert (	/* Converted code, 0 means conversion error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b089      	sub	sp, #36	; 0x24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	4603      	mov	r3, r0
 8005b68:	6039      	str	r1, [r7, #0]
 8005b6a:	80fb      	strh	r3, [r7, #6]
	const WCHAR *p;
	WCHAR c;
	int i, n, li, hi;


	if (chr < 0x80) {	/* ASCII */
 8005b6c:	88fb      	ldrh	r3, [r7, #6]
 8005b6e:	2b7f      	cmp	r3, #127	; 0x7f
 8005b70:	d802      	bhi.n	8005b78 <ff_convert+0x18>
		c = chr;
 8005b72:	88fb      	ldrh	r3, [r7, #6]
 8005b74:	837b      	strh	r3, [r7, #26]
 8005b76:	e047      	b.n	8005c08 <ff_convert+0xa8>
	} else {
		if (dir) {		/* OEM code to unicode */
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d005      	beq.n	8005b8a <ff_convert+0x2a>
			p = oem2uni;
 8005b7e:	4b26      	ldr	r3, [pc, #152]	; (8005c18 <ff_convert+0xb8>)
 8005b80:	61fb      	str	r3, [r7, #28]
			hi = sizeof oem2uni / 4 - 1;
 8005b82:	f244 2398 	movw	r3, #17048	; 0x4298
 8005b86:	60bb      	str	r3, [r7, #8]
 8005b88:	e004      	b.n	8005b94 <ff_convert+0x34>
		} else {		/* Unicode to OEM code */
			p = uni2oem;
 8005b8a:	4b24      	ldr	r3, [pc, #144]	; (8005c1c <ff_convert+0xbc>)
 8005b8c:	61fb      	str	r3, [r7, #28]
			hi = sizeof uni2oem / 4 - 1;
 8005b8e:	f244 2398 	movw	r3, #17048	; 0x4298
 8005b92:	60bb      	str	r3, [r7, #8]
		}
		li = 0;
 8005b94:	2300      	movs	r3, #0
 8005b96:	60fb      	str	r3, [r7, #12]
		for (n = 16; n; n--) {
 8005b98:	2310      	movs	r3, #16
 8005b9a:	613b      	str	r3, [r7, #16]
 8005b9c:	e023      	b.n	8005be6 <ff_convert+0x86>
			i = li + (hi - li) / 2;
 8005b9e:	68ba      	ldr	r2, [r7, #8]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	0fda      	lsrs	r2, r3, #31
 8005ba6:	4413      	add	r3, r2
 8005ba8:	105b      	asrs	r3, r3, #1
 8005baa:	461a      	mov	r2, r3
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	4413      	add	r3, r2
 8005bb0:	617b      	str	r3, [r7, #20]
			if (chr == p[i * 2]) break;
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	4413      	add	r3, r2
 8005bbc:	881b      	ldrh	r3, [r3, #0]
 8005bbe:	88fa      	ldrh	r2, [r7, #6]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d014      	beq.n	8005bee <ff_convert+0x8e>
			if (chr > p[i * 2])
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	461a      	mov	r2, r3
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	4413      	add	r3, r2
 8005bce:	881b      	ldrh	r3, [r3, #0]
 8005bd0:	88fa      	ldrh	r2, [r7, #6]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d902      	bls.n	8005bdc <ff_convert+0x7c>
				li = i;
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	60fb      	str	r3, [r7, #12]
 8005bda:	e001      	b.n	8005be0 <ff_convert+0x80>
			else
				hi = i;
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	60bb      	str	r3, [r7, #8]
		for (n = 16; n; n--) {
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	3b01      	subs	r3, #1
 8005be4:	613b      	str	r3, [r7, #16]
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1d8      	bne.n	8005b9e <ff_convert+0x3e>
 8005bec:	e000      	b.n	8005bf0 <ff_convert+0x90>
			if (chr == p[i * 2]) break;
 8005bee:	bf00      	nop
		}
		c = n ? p[i * 2 + 1] : 0;
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d006      	beq.n	8005c04 <ff_convert+0xa4>
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	3302      	adds	r3, #2
 8005bfc:	69fa      	ldr	r2, [r7, #28]
 8005bfe:	4413      	add	r3, r2
 8005c00:	881b      	ldrh	r3, [r3, #0]
 8005c02:	e000      	b.n	8005c06 <ff_convert+0xa6>
 8005c04:	2300      	movs	r3, #0
 8005c06:	837b      	strh	r3, [r7, #26]
	}

	return c;
 8005c08:	8b7b      	ldrh	r3, [r7, #26]
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3724      	adds	r7, #36	; 0x24
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	080191b8 	.word	0x080191b8
 8005c1c:	08008754 	.word	0x08008754

08005c20 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b087      	sub	sp, #28
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	4603      	mov	r3, r0
 8005c28:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8005c2a:	88fb      	ldrh	r3, [r7, #6]
 8005c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c30:	d201      	bcs.n	8005c36 <ff_wtoupper+0x16>
 8005c32:	4b3e      	ldr	r3, [pc, #248]	; (8005d2c <ff_wtoupper+0x10c>)
 8005c34:	e000      	b.n	8005c38 <ff_wtoupper+0x18>
 8005c36:	4b3e      	ldr	r3, [pc, #248]	; (8005d30 <ff_wtoupper+0x110>)
 8005c38:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	1c9a      	adds	r2, r3, #2
 8005c3e:	617a      	str	r2, [r7, #20]
 8005c40:	881b      	ldrh	r3, [r3, #0]
 8005c42:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8005c44:	8a7b      	ldrh	r3, [r7, #18]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d068      	beq.n	8005d1c <ff_wtoupper+0xfc>
 8005c4a:	88fa      	ldrh	r2, [r7, #6]
 8005c4c:	8a7b      	ldrh	r3, [r7, #18]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d364      	bcc.n	8005d1c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	1c9a      	adds	r2, r3, #2
 8005c56:	617a      	str	r2, [r7, #20]
 8005c58:	881b      	ldrh	r3, [r3, #0]
 8005c5a:	823b      	strh	r3, [r7, #16]
 8005c5c:	8a3b      	ldrh	r3, [r7, #16]
 8005c5e:	0a1b      	lsrs	r3, r3, #8
 8005c60:	81fb      	strh	r3, [r7, #14]
 8005c62:	8a3b      	ldrh	r3, [r7, #16]
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8005c68:	88fa      	ldrh	r2, [r7, #6]
 8005c6a:	8a79      	ldrh	r1, [r7, #18]
 8005c6c:	8a3b      	ldrh	r3, [r7, #16]
 8005c6e:	440b      	add	r3, r1
 8005c70:	429a      	cmp	r2, r3
 8005c72:	da49      	bge.n	8005d08 <ff_wtoupper+0xe8>
			switch (cmd) {
 8005c74:	89fb      	ldrh	r3, [r7, #14]
 8005c76:	2b08      	cmp	r3, #8
 8005c78:	d84f      	bhi.n	8005d1a <ff_wtoupper+0xfa>
 8005c7a:	a201      	add	r2, pc, #4	; (adr r2, 8005c80 <ff_wtoupper+0x60>)
 8005c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c80:	08005ca5 	.word	0x08005ca5
 8005c84:	08005cb7 	.word	0x08005cb7
 8005c88:	08005ccd 	.word	0x08005ccd
 8005c8c:	08005cd5 	.word	0x08005cd5
 8005c90:	08005cdd 	.word	0x08005cdd
 8005c94:	08005ce5 	.word	0x08005ce5
 8005c98:	08005ced 	.word	0x08005ced
 8005c9c:	08005cf5 	.word	0x08005cf5
 8005ca0:	08005cfd 	.word	0x08005cfd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8005ca4:	88fa      	ldrh	r2, [r7, #6]
 8005ca6:	8a7b      	ldrh	r3, [r7, #18]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	005b      	lsls	r3, r3, #1
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	4413      	add	r3, r2
 8005cb0:	881b      	ldrh	r3, [r3, #0]
 8005cb2:	80fb      	strh	r3, [r7, #6]
 8005cb4:	e027      	b.n	8005d06 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8005cb6:	88fa      	ldrh	r2, [r7, #6]
 8005cb8:	8a7b      	ldrh	r3, [r7, #18]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	f003 0301 	and.w	r3, r3, #1
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	88fa      	ldrh	r2, [r7, #6]
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	80fb      	strh	r3, [r7, #6]
 8005cca:	e01c      	b.n	8005d06 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8005ccc:	88fb      	ldrh	r3, [r7, #6]
 8005cce:	3b10      	subs	r3, #16
 8005cd0:	80fb      	strh	r3, [r7, #6]
 8005cd2:	e018      	b.n	8005d06 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8005cd4:	88fb      	ldrh	r3, [r7, #6]
 8005cd6:	3b20      	subs	r3, #32
 8005cd8:	80fb      	strh	r3, [r7, #6]
 8005cda:	e014      	b.n	8005d06 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8005cdc:	88fb      	ldrh	r3, [r7, #6]
 8005cde:	3b30      	subs	r3, #48	; 0x30
 8005ce0:	80fb      	strh	r3, [r7, #6]
 8005ce2:	e010      	b.n	8005d06 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8005ce4:	88fb      	ldrh	r3, [r7, #6]
 8005ce6:	3b1a      	subs	r3, #26
 8005ce8:	80fb      	strh	r3, [r7, #6]
 8005cea:	e00c      	b.n	8005d06 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8005cec:	88fb      	ldrh	r3, [r7, #6]
 8005cee:	3308      	adds	r3, #8
 8005cf0:	80fb      	strh	r3, [r7, #6]
 8005cf2:	e008      	b.n	8005d06 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8005cf4:	88fb      	ldrh	r3, [r7, #6]
 8005cf6:	3b50      	subs	r3, #80	; 0x50
 8005cf8:	80fb      	strh	r3, [r7, #6]
 8005cfa:	e004      	b.n	8005d06 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8005cfc:	88fb      	ldrh	r3, [r7, #6]
 8005cfe:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8005d02:	80fb      	strh	r3, [r7, #6]
 8005d04:	bf00      	nop
			}
			break;
 8005d06:	e008      	b.n	8005d1a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8005d08:	89fb      	ldrh	r3, [r7, #14]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d195      	bne.n	8005c3a <ff_wtoupper+0x1a>
 8005d0e:	8a3b      	ldrh	r3, [r7, #16]
 8005d10:	005b      	lsls	r3, r3, #1
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	4413      	add	r3, r2
 8005d16:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8005d18:	e78f      	b.n	8005c3a <ff_wtoupper+0x1a>
			break;
 8005d1a:	bf00      	nop
	}

	return chr;
 8005d1c:	88fb      	ldrh	r3, [r7, #6]
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	371c      	adds	r7, #28
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	08029c1c 	.word	0x08029c1c
 8005d30:	08029e10 	.word	0x08029e10

08005d34 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005d38:	4904      	ldr	r1, [pc, #16]	; (8005d4c <MX_FATFS_Init+0x18>)
 8005d3a:	4805      	ldr	r0, [pc, #20]	; (8005d50 <MX_FATFS_Init+0x1c>)
 8005d3c:	f7ff ff00 	bl	8005b40 <FATFS_LinkDriver>
 8005d40:	4603      	mov	r3, r0
 8005d42:	461a      	mov	r2, r3
 8005d44:	4b03      	ldr	r3, [pc, #12]	; (8005d54 <MX_FATFS_Init+0x20>)
 8005d46:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8005d48:	bf00      	nop
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	200002e8 	.word	0x200002e8
 8005d50:	2000000c 	.word	0x2000000c
 8005d54:	200002ec 	.word	0x200002ec

08005d58 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005d62:	4804      	ldr	r0, [pc, #16]	; (8005d74 <SELECT+0x1c>)
 8005d64:	f7fb f96e 	bl	8001044 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8005d68:	2001      	movs	r0, #1
 8005d6a:	f7fa fc8b 	bl	8000684 <HAL_Delay>
}
 8005d6e:	bf00      	nop
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	40020400 	.word	0x40020400

08005d78 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005d82:	4804      	ldr	r0, [pc, #16]	; (8005d94 <DESELECT+0x1c>)
 8005d84:	f7fb f95e 	bl	8001044 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8005d88:	2001      	movs	r0, #1
 8005d8a:	f7fa fc7b 	bl	8000684 <HAL_Delay>
}
 8005d8e:	bf00      	nop
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	40020400 	.word	0x40020400

08005d98 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	4603      	mov	r3, r0
 8005da0:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005da2:	bf00      	nop
 8005da4:	4b08      	ldr	r3, [pc, #32]	; (8005dc8 <SPI_TxByte+0x30>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f003 0302 	and.w	r3, r3, #2
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d1f8      	bne.n	8005da4 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8005db2:	1df9      	adds	r1, r7, #7
 8005db4:	2364      	movs	r3, #100	; 0x64
 8005db6:	2201      	movs	r2, #1
 8005db8:	4803      	ldr	r0, [pc, #12]	; (8005dc8 <SPI_TxByte+0x30>)
 8005dba:	f7fb fe2a 	bl	8001a12 <HAL_SPI_Transmit>
}
 8005dbe:	bf00      	nop
 8005dc0:	3708      	adds	r7, #8
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	20002598 	.word	0x20002598

08005dcc <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005dd8:	bf00      	nop
 8005dda:	4b08      	ldr	r3, [pc, #32]	; (8005dfc <SPI_TxBuffer+0x30>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f003 0302 	and.w	r3, r3, #2
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d1f8      	bne.n	8005dda <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8005de8:	887a      	ldrh	r2, [r7, #2]
 8005dea:	2364      	movs	r3, #100	; 0x64
 8005dec:	6879      	ldr	r1, [r7, #4]
 8005dee:	4803      	ldr	r0, [pc, #12]	; (8005dfc <SPI_TxBuffer+0x30>)
 8005df0:	f7fb fe0f 	bl	8001a12 <HAL_SPI_Transmit>
}
 8005df4:	bf00      	nop
 8005df6:	3708      	adds	r7, #8
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	20002598 	.word	0x20002598

08005e00 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8005e06:	23ff      	movs	r3, #255	; 0xff
 8005e08:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005e0a:	bf00      	nop
 8005e0c:	4b09      	ldr	r3, [pc, #36]	; (8005e34 <SPI_RxByte+0x34>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f003 0302 	and.w	r3, r3, #2
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d1f8      	bne.n	8005e0c <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8005e1a:	1dba      	adds	r2, r7, #6
 8005e1c:	1df9      	adds	r1, r7, #7
 8005e1e:	2364      	movs	r3, #100	; 0x64
 8005e20:	9300      	str	r3, [sp, #0]
 8005e22:	2301      	movs	r3, #1
 8005e24:	4803      	ldr	r0, [pc, #12]	; (8005e34 <SPI_RxByte+0x34>)
 8005e26:	f7fb ff53 	bl	8001cd0 <HAL_SPI_TransmitReceive>

	return data;
 8005e2a:	79bb      	ldrb	r3, [r7, #6]
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3708      	adds	r7, #8
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	20002598 	.word	0x20002598

08005e38 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8005e40:	f7ff ffde 	bl	8005e00 <SPI_RxByte>
 8005e44:	4603      	mov	r3, r0
 8005e46:	461a      	mov	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	701a      	strb	r2, [r3, #0]
}
 8005e4c:	bf00      	nop
 8005e4e:	3708      	adds	r7, #8
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8005e5a:	4b0a      	ldr	r3, [pc, #40]	; (8005e84 <SD_ReadyWait+0x30>)
 8005e5c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005e60:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8005e62:	f7ff ffcd 	bl	8005e00 <SPI_RxByte>
 8005e66:	4603      	mov	r3, r0
 8005e68:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8005e6a:	79fb      	ldrb	r3, [r7, #7]
 8005e6c:	2bff      	cmp	r3, #255	; 0xff
 8005e6e:	d003      	beq.n	8005e78 <SD_ReadyWait+0x24>
 8005e70:	4b04      	ldr	r3, [pc, #16]	; (8005e84 <SD_ReadyWait+0x30>)
 8005e72:	881b      	ldrh	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d1f4      	bne.n	8005e62 <SD_ReadyWait+0xe>

	return res;
 8005e78:	79fb      	ldrb	r3, [r7, #7]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3708      	adds	r7, #8
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	20002358 	.word	0x20002358

08005e88 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8005e8e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8005e92:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8005e94:	f7ff ff70 	bl	8005d78 <DESELECT>
	for(int i = 0; i < 10; i++)
 8005e98:	2300      	movs	r3, #0
 8005e9a:	60bb      	str	r3, [r7, #8]
 8005e9c:	e005      	b.n	8005eaa <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8005e9e:	20ff      	movs	r0, #255	; 0xff
 8005ea0:	f7ff ff7a 	bl	8005d98 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	60bb      	str	r3, [r7, #8]
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	2b09      	cmp	r3, #9
 8005eae:	ddf6      	ble.n	8005e9e <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8005eb0:	f7ff ff52 	bl	8005d58 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8005eb4:	2340      	movs	r3, #64	; 0x40
 8005eb6:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8005ec8:	2395      	movs	r3, #149	; 0x95
 8005eca:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8005ecc:	463b      	mov	r3, r7
 8005ece:	2106      	movs	r1, #6
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7ff ff7b 	bl	8005dcc <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8005ed6:	e002      	b.n	8005ede <SD_PowerOn+0x56>
	{
		cnt--;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	3b01      	subs	r3, #1
 8005edc:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8005ede:	f7ff ff8f 	bl	8005e00 <SPI_RxByte>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d002      	beq.n	8005eee <SD_PowerOn+0x66>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1f4      	bne.n	8005ed8 <SD_PowerOn+0x50>
	}

	DESELECT();
 8005eee:	f7ff ff43 	bl	8005d78 <DESELECT>
	SPI_TxByte(0XFF);
 8005ef2:	20ff      	movs	r0, #255	; 0xff
 8005ef4:	f7ff ff50 	bl	8005d98 <SPI_TxByte>

	PowerFlag = 1;
 8005ef8:	4b03      	ldr	r3, [pc, #12]	; (8005f08 <SD_PowerOn+0x80>)
 8005efa:	2201      	movs	r2, #1
 8005efc:	701a      	strb	r2, [r3, #0]
}
 8005efe:	bf00      	nop
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	200002d5 	.word	0x200002d5

08005f0c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8005f10:	4b03      	ldr	r3, [pc, #12]	; (8005f20 <SD_PowerOff+0x14>)
 8005f12:	2200      	movs	r2, #0
 8005f14:	701a      	strb	r2, [r3, #0]
}
 8005f16:	bf00      	nop
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr
 8005f20:	200002d5 	.word	0x200002d5

08005f24 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8005f24:	b480      	push	{r7}
 8005f26:	af00      	add	r7, sp, #0
	return PowerFlag;
 8005f28:	4b03      	ldr	r3, [pc, #12]	; (8005f38 <SD_CheckPower+0x14>)
 8005f2a:	781b      	ldrb	r3, [r3, #0]
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	200002d5 	.word	0x200002d5

08005f3c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8005f46:	4b13      	ldr	r3, [pc, #76]	; (8005f94 <SD_RxDataBlock+0x58>)
 8005f48:	22c8      	movs	r2, #200	; 0xc8
 8005f4a:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8005f4c:	f7ff ff58 	bl	8005e00 <SPI_RxByte>
 8005f50:	4603      	mov	r3, r0
 8005f52:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8005f54:	7bfb      	ldrb	r3, [r7, #15]
 8005f56:	2bff      	cmp	r3, #255	; 0xff
 8005f58:	d103      	bne.n	8005f62 <SD_RxDataBlock+0x26>
 8005f5a:	4b0e      	ldr	r3, [pc, #56]	; (8005f94 <SD_RxDataBlock+0x58>)
 8005f5c:	881b      	ldrh	r3, [r3, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1f4      	bne.n	8005f4c <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8005f62:	7bfb      	ldrb	r3, [r7, #15]
 8005f64:	2bfe      	cmp	r3, #254	; 0xfe
 8005f66:	d001      	beq.n	8005f6c <SD_RxDataBlock+0x30>
 8005f68:	2300      	movs	r3, #0
 8005f6a:	e00f      	b.n	8005f8c <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	1c5a      	adds	r2, r3, #1
 8005f70:	607a      	str	r2, [r7, #4]
 8005f72:	4618      	mov	r0, r3
 8005f74:	f7ff ff60 	bl	8005e38 <SPI_RxBytePtr>
	} while(len--);
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	1e5a      	subs	r2, r3, #1
 8005f7c:	603a      	str	r2, [r7, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1f4      	bne.n	8005f6c <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8005f82:	f7ff ff3d 	bl	8005e00 <SPI_RxByte>
	SPI_RxByte();
 8005f86:	f7ff ff3b 	bl	8005e00 <SPI_RxByte>

	return TRUE;
 8005f8a:	2301      	movs	r3, #1
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	2000235a 	.word	0x2000235a

08005f98 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8005fa8:	f7ff ff54 	bl	8005e54 <SD_ReadyWait>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2bff      	cmp	r3, #255	; 0xff
 8005fb0:	d001      	beq.n	8005fb6 <SD_TxDataBlock+0x1e>
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	e02f      	b.n	8006016 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8005fb6:	78fb      	ldrb	r3, [r7, #3]
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f7ff feed 	bl	8005d98 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8005fbe:	78fb      	ldrb	r3, [r7, #3]
 8005fc0:	2bfd      	cmp	r3, #253	; 0xfd
 8005fc2:	d020      	beq.n	8006006 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8005fc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f7ff feff 	bl	8005dcc <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8005fce:	f7ff ff17 	bl	8005e00 <SPI_RxByte>
		SPI_RxByte();
 8005fd2:	f7ff ff15 	bl	8005e00 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8005fd6:	e00b      	b.n	8005ff0 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8005fd8:	f7ff ff12 	bl	8005e00 <SPI_RxByte>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8005fe0:	7bfb      	ldrb	r3, [r7, #15]
 8005fe2:	f003 031f 	and.w	r3, r3, #31
 8005fe6:	2b05      	cmp	r3, #5
 8005fe8:	d006      	beq.n	8005ff8 <SD_TxDataBlock+0x60>
			i++;
 8005fea:	7bbb      	ldrb	r3, [r7, #14]
 8005fec:	3301      	adds	r3, #1
 8005fee:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8005ff0:	7bbb      	ldrb	r3, [r7, #14]
 8005ff2:	2b40      	cmp	r3, #64	; 0x40
 8005ff4:	d9f0      	bls.n	8005fd8 <SD_TxDataBlock+0x40>
 8005ff6:	e000      	b.n	8005ffa <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8005ff8:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8005ffa:	bf00      	nop
 8005ffc:	f7ff ff00 	bl	8005e00 <SPI_RxByte>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d0fa      	beq.n	8005ffc <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8006006:	7bfb      	ldrb	r3, [r7, #15]
 8006008:	f003 031f 	and.w	r3, r3, #31
 800600c:	2b05      	cmp	r3, #5
 800600e:	d101      	bne.n	8006014 <SD_TxDataBlock+0x7c>
 8006010:	2301      	movs	r3, #1
 8006012:	e000      	b.n	8006016 <SD_TxDataBlock+0x7e>

	return FALSE;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3710      	adds	r7, #16
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800601e:	b580      	push	{r7, lr}
 8006020:	b084      	sub	sp, #16
 8006022:	af00      	add	r7, sp, #0
 8006024:	4603      	mov	r3, r0
 8006026:	6039      	str	r1, [r7, #0]
 8006028:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800602a:	f7ff ff13 	bl	8005e54 <SD_ReadyWait>
 800602e:	4603      	mov	r3, r0
 8006030:	2bff      	cmp	r3, #255	; 0xff
 8006032:	d001      	beq.n	8006038 <SD_SendCmd+0x1a>
 8006034:	23ff      	movs	r3, #255	; 0xff
 8006036:	e042      	b.n	80060be <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8006038:	79fb      	ldrb	r3, [r7, #7]
 800603a:	4618      	mov	r0, r3
 800603c:	f7ff feac 	bl	8005d98 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	0e1b      	lsrs	r3, r3, #24
 8006044:	b2db      	uxtb	r3, r3
 8006046:	4618      	mov	r0, r3
 8006048:	f7ff fea6 	bl	8005d98 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	0c1b      	lsrs	r3, r3, #16
 8006050:	b2db      	uxtb	r3, r3
 8006052:	4618      	mov	r0, r3
 8006054:	f7ff fea0 	bl	8005d98 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	0a1b      	lsrs	r3, r3, #8
 800605c:	b2db      	uxtb	r3, r3
 800605e:	4618      	mov	r0, r3
 8006060:	f7ff fe9a 	bl	8005d98 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	b2db      	uxtb	r3, r3
 8006068:	4618      	mov	r0, r3
 800606a:	f7ff fe95 	bl	8005d98 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800606e:	79fb      	ldrb	r3, [r7, #7]
 8006070:	2b40      	cmp	r3, #64	; 0x40
 8006072:	d102      	bne.n	800607a <SD_SendCmd+0x5c>
 8006074:	2395      	movs	r3, #149	; 0x95
 8006076:	73fb      	strb	r3, [r7, #15]
 8006078:	e007      	b.n	800608a <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800607a:	79fb      	ldrb	r3, [r7, #7]
 800607c:	2b48      	cmp	r3, #72	; 0x48
 800607e:	d102      	bne.n	8006086 <SD_SendCmd+0x68>
 8006080:	2387      	movs	r3, #135	; 0x87
 8006082:	73fb      	strb	r3, [r7, #15]
 8006084:	e001      	b.n	800608a <SD_SendCmd+0x6c>
	else crc = 1;
 8006086:	2301      	movs	r3, #1
 8006088:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800608a:	7bfb      	ldrb	r3, [r7, #15]
 800608c:	4618      	mov	r0, r3
 800608e:	f7ff fe83 	bl	8005d98 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8006092:	79fb      	ldrb	r3, [r7, #7]
 8006094:	2b4c      	cmp	r3, #76	; 0x4c
 8006096:	d101      	bne.n	800609c <SD_SendCmd+0x7e>
 8006098:	f7ff feb2 	bl	8005e00 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 800609c:	230a      	movs	r3, #10
 800609e:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80060a0:	f7ff feae 	bl	8005e00 <SPI_RxByte>
 80060a4:	4603      	mov	r3, r0
 80060a6:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80060a8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	da05      	bge.n	80060bc <SD_SendCmd+0x9e>
 80060b0:	7bbb      	ldrb	r3, [r7, #14]
 80060b2:	3b01      	subs	r3, #1
 80060b4:	73bb      	strb	r3, [r7, #14]
 80060b6:	7bbb      	ldrb	r3, [r7, #14]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1f1      	bne.n	80060a0 <SD_SendCmd+0x82>

	return res;
 80060bc:	7b7b      	ldrb	r3, [r7, #13]
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
	...

080060c8 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80060c8:	b590      	push	{r4, r7, lr}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	4603      	mov	r3, r0
 80060d0:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80060d2:	79fb      	ldrb	r3, [r7, #7]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d001      	beq.n	80060dc <SD_disk_initialize+0x14>
 80060d8:	2301      	movs	r3, #1
 80060da:	e0d1      	b.n	8006280 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80060dc:	4b6a      	ldr	r3, [pc, #424]	; (8006288 <SD_disk_initialize+0x1c0>)
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	f003 0302 	and.w	r3, r3, #2
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d003      	beq.n	80060f2 <SD_disk_initialize+0x2a>
 80060ea:	4b67      	ldr	r3, [pc, #412]	; (8006288 <SD_disk_initialize+0x1c0>)
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	e0c6      	b.n	8006280 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80060f2:	f7ff fec9 	bl	8005e88 <SD_PowerOn>

	/* slave select */
	SELECT();
 80060f6:	f7ff fe2f 	bl	8005d58 <SELECT>

	/* check disk type */
	type = 0;
 80060fa:	2300      	movs	r3, #0
 80060fc:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80060fe:	2100      	movs	r1, #0
 8006100:	2040      	movs	r0, #64	; 0x40
 8006102:	f7ff ff8c 	bl	800601e <SD_SendCmd>
 8006106:	4603      	mov	r3, r0
 8006108:	2b01      	cmp	r3, #1
 800610a:	f040 80a1 	bne.w	8006250 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800610e:	4b5f      	ldr	r3, [pc, #380]	; (800628c <SD_disk_initialize+0x1c4>)
 8006110:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006114:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8006116:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800611a:	2048      	movs	r0, #72	; 0x48
 800611c:	f7ff ff7f 	bl	800601e <SD_SendCmd>
 8006120:	4603      	mov	r3, r0
 8006122:	2b01      	cmp	r3, #1
 8006124:	d155      	bne.n	80061d2 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8006126:	2300      	movs	r3, #0
 8006128:	73fb      	strb	r3, [r7, #15]
 800612a:	e00c      	b.n	8006146 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 800612c:	7bfc      	ldrb	r4, [r7, #15]
 800612e:	f7ff fe67 	bl	8005e00 <SPI_RxByte>
 8006132:	4603      	mov	r3, r0
 8006134:	461a      	mov	r2, r3
 8006136:	f107 0310 	add.w	r3, r7, #16
 800613a:	4423      	add	r3, r4
 800613c:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8006140:	7bfb      	ldrb	r3, [r7, #15]
 8006142:	3301      	adds	r3, #1
 8006144:	73fb      	strb	r3, [r7, #15]
 8006146:	7bfb      	ldrb	r3, [r7, #15]
 8006148:	2b03      	cmp	r3, #3
 800614a:	d9ef      	bls.n	800612c <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800614c:	7abb      	ldrb	r3, [r7, #10]
 800614e:	2b01      	cmp	r3, #1
 8006150:	d17e      	bne.n	8006250 <SD_disk_initialize+0x188>
 8006152:	7afb      	ldrb	r3, [r7, #11]
 8006154:	2baa      	cmp	r3, #170	; 0xaa
 8006156:	d17b      	bne.n	8006250 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8006158:	2100      	movs	r1, #0
 800615a:	2077      	movs	r0, #119	; 0x77
 800615c:	f7ff ff5f 	bl	800601e <SD_SendCmd>
 8006160:	4603      	mov	r3, r0
 8006162:	2b01      	cmp	r3, #1
 8006164:	d807      	bhi.n	8006176 <SD_disk_initialize+0xae>
 8006166:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800616a:	2069      	movs	r0, #105	; 0x69
 800616c:	f7ff ff57 	bl	800601e <SD_SendCmd>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d004      	beq.n	8006180 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8006176:	4b45      	ldr	r3, [pc, #276]	; (800628c <SD_disk_initialize+0x1c4>)
 8006178:	881b      	ldrh	r3, [r3, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1ec      	bne.n	8006158 <SD_disk_initialize+0x90>
 800617e:	e000      	b.n	8006182 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8006180:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8006182:	4b42      	ldr	r3, [pc, #264]	; (800628c <SD_disk_initialize+0x1c4>)
 8006184:	881b      	ldrh	r3, [r3, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d062      	beq.n	8006250 <SD_disk_initialize+0x188>
 800618a:	2100      	movs	r1, #0
 800618c:	207a      	movs	r0, #122	; 0x7a
 800618e:	f7ff ff46 	bl	800601e <SD_SendCmd>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d15b      	bne.n	8006250 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8006198:	2300      	movs	r3, #0
 800619a:	73fb      	strb	r3, [r7, #15]
 800619c:	e00c      	b.n	80061b8 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 800619e:	7bfc      	ldrb	r4, [r7, #15]
 80061a0:	f7ff fe2e 	bl	8005e00 <SPI_RxByte>
 80061a4:	4603      	mov	r3, r0
 80061a6:	461a      	mov	r2, r3
 80061a8:	f107 0310 	add.w	r3, r7, #16
 80061ac:	4423      	add	r3, r4
 80061ae:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80061b2:	7bfb      	ldrb	r3, [r7, #15]
 80061b4:	3301      	adds	r3, #1
 80061b6:	73fb      	strb	r3, [r7, #15]
 80061b8:	7bfb      	ldrb	r3, [r7, #15]
 80061ba:	2b03      	cmp	r3, #3
 80061bc:	d9ef      	bls.n	800619e <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80061be:	7a3b      	ldrb	r3, [r7, #8]
 80061c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d001      	beq.n	80061cc <SD_disk_initialize+0x104>
 80061c8:	230c      	movs	r3, #12
 80061ca:	e000      	b.n	80061ce <SD_disk_initialize+0x106>
 80061cc:	2304      	movs	r3, #4
 80061ce:	73bb      	strb	r3, [r7, #14]
 80061d0:	e03e      	b.n	8006250 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80061d2:	2100      	movs	r1, #0
 80061d4:	2077      	movs	r0, #119	; 0x77
 80061d6:	f7ff ff22 	bl	800601e <SD_SendCmd>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d808      	bhi.n	80061f2 <SD_disk_initialize+0x12a>
 80061e0:	2100      	movs	r1, #0
 80061e2:	2069      	movs	r0, #105	; 0x69
 80061e4:	f7ff ff1b 	bl	800601e <SD_SendCmd>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d801      	bhi.n	80061f2 <SD_disk_initialize+0x12a>
 80061ee:	2302      	movs	r3, #2
 80061f0:	e000      	b.n	80061f4 <SD_disk_initialize+0x12c>
 80061f2:	2301      	movs	r3, #1
 80061f4:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80061f6:	7bbb      	ldrb	r3, [r7, #14]
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d10e      	bne.n	800621a <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80061fc:	2100      	movs	r1, #0
 80061fe:	2077      	movs	r0, #119	; 0x77
 8006200:	f7ff ff0d 	bl	800601e <SD_SendCmd>
 8006204:	4603      	mov	r3, r0
 8006206:	2b01      	cmp	r3, #1
 8006208:	d80e      	bhi.n	8006228 <SD_disk_initialize+0x160>
 800620a:	2100      	movs	r1, #0
 800620c:	2069      	movs	r0, #105	; 0x69
 800620e:	f7ff ff06 	bl	800601e <SD_SendCmd>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d107      	bne.n	8006228 <SD_disk_initialize+0x160>
 8006218:	e00c      	b.n	8006234 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800621a:	2100      	movs	r1, #0
 800621c:	2041      	movs	r0, #65	; 0x41
 800621e:	f7ff fefe 	bl	800601e <SD_SendCmd>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d004      	beq.n	8006232 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8006228:	4b18      	ldr	r3, [pc, #96]	; (800628c <SD_disk_initialize+0x1c4>)
 800622a:	881b      	ldrh	r3, [r3, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d1e2      	bne.n	80061f6 <SD_disk_initialize+0x12e>
 8006230:	e000      	b.n	8006234 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8006232:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8006234:	4b15      	ldr	r3, [pc, #84]	; (800628c <SD_disk_initialize+0x1c4>)
 8006236:	881b      	ldrh	r3, [r3, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d007      	beq.n	800624c <SD_disk_initialize+0x184>
 800623c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006240:	2050      	movs	r0, #80	; 0x50
 8006242:	f7ff feec 	bl	800601e <SD_SendCmd>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d001      	beq.n	8006250 <SD_disk_initialize+0x188>
 800624c:	2300      	movs	r3, #0
 800624e:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8006250:	4a0f      	ldr	r2, [pc, #60]	; (8006290 <SD_disk_initialize+0x1c8>)
 8006252:	7bbb      	ldrb	r3, [r7, #14]
 8006254:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8006256:	f7ff fd8f 	bl	8005d78 <DESELECT>
	SPI_RxByte();
 800625a:	f7ff fdd1 	bl	8005e00 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800625e:	7bbb      	ldrb	r3, [r7, #14]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d008      	beq.n	8006276 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8006264:	4b08      	ldr	r3, [pc, #32]	; (8006288 <SD_disk_initialize+0x1c0>)
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	b2db      	uxtb	r3, r3
 800626a:	f023 0301 	bic.w	r3, r3, #1
 800626e:	b2da      	uxtb	r2, r3
 8006270:	4b05      	ldr	r3, [pc, #20]	; (8006288 <SD_disk_initialize+0x1c0>)
 8006272:	701a      	strb	r2, [r3, #0]
 8006274:	e001      	b.n	800627a <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8006276:	f7ff fe49 	bl	8005f0c <SD_PowerOff>
	}

	return Stat;
 800627a:	4b03      	ldr	r3, [pc, #12]	; (8006288 <SD_disk_initialize+0x1c0>)
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	b2db      	uxtb	r3, r3
}
 8006280:	4618      	mov	r0, r3
 8006282:	3714      	adds	r7, #20
 8006284:	46bd      	mov	sp, r7
 8006286:	bd90      	pop	{r4, r7, pc}
 8006288:	20000005 	.word	0x20000005
 800628c:	2000235a 	.word	0x2000235a
 8006290:	200002d4 	.word	0x200002d4

08006294 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	4603      	mov	r3, r0
 800629c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800629e:	79fb      	ldrb	r3, [r7, #7]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <SD_disk_status+0x14>
 80062a4:	2301      	movs	r3, #1
 80062a6:	e002      	b.n	80062ae <SD_disk_status+0x1a>
	return Stat;
 80062a8:	4b04      	ldr	r3, [pc, #16]	; (80062bc <SD_disk_status+0x28>)
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	b2db      	uxtb	r3, r3
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	370c      	adds	r7, #12
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	20000005 	.word	0x20000005

080062c0 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60b9      	str	r1, [r7, #8]
 80062c8:	607a      	str	r2, [r7, #4]
 80062ca:	603b      	str	r3, [r7, #0]
 80062cc:	4603      	mov	r3, r0
 80062ce:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80062d0:	7bfb      	ldrb	r3, [r7, #15]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d102      	bne.n	80062dc <SD_disk_read+0x1c>
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d101      	bne.n	80062e0 <SD_disk_read+0x20>
 80062dc:	2304      	movs	r3, #4
 80062de:	e051      	b.n	8006384 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80062e0:	4b2a      	ldr	r3, [pc, #168]	; (800638c <SD_disk_read+0xcc>)
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d001      	beq.n	80062f2 <SD_disk_read+0x32>
 80062ee:	2303      	movs	r3, #3
 80062f0:	e048      	b.n	8006384 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80062f2:	4b27      	ldr	r3, [pc, #156]	; (8006390 <SD_disk_read+0xd0>)
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	f003 0304 	and.w	r3, r3, #4
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d102      	bne.n	8006304 <SD_disk_read+0x44>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	025b      	lsls	r3, r3, #9
 8006302:	607b      	str	r3, [r7, #4]

	SELECT();
 8006304:	f7ff fd28 	bl	8005d58 <SELECT>

	if (count == 1)
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	2b01      	cmp	r3, #1
 800630c:	d111      	bne.n	8006332 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800630e:	6879      	ldr	r1, [r7, #4]
 8006310:	2051      	movs	r0, #81	; 0x51
 8006312:	f7ff fe84 	bl	800601e <SD_SendCmd>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d129      	bne.n	8006370 <SD_disk_read+0xb0>
 800631c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006320:	68b8      	ldr	r0, [r7, #8]
 8006322:	f7ff fe0b 	bl	8005f3c <SD_RxDataBlock>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d021      	beq.n	8006370 <SD_disk_read+0xb0>
 800632c:	2300      	movs	r3, #0
 800632e:	603b      	str	r3, [r7, #0]
 8006330:	e01e      	b.n	8006370 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8006332:	6879      	ldr	r1, [r7, #4]
 8006334:	2052      	movs	r0, #82	; 0x52
 8006336:	f7ff fe72 	bl	800601e <SD_SendCmd>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d117      	bne.n	8006370 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8006340:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006344:	68b8      	ldr	r0, [r7, #8]
 8006346:	f7ff fdf9 	bl	8005f3c <SD_RxDataBlock>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00a      	beq.n	8006366 <SD_disk_read+0xa6>
				buff += 512;
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006356:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	3b01      	subs	r3, #1
 800635c:	603b      	str	r3, [r7, #0]
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d1ed      	bne.n	8006340 <SD_disk_read+0x80>
 8006364:	e000      	b.n	8006368 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8006366:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8006368:	2100      	movs	r1, #0
 800636a:	204c      	movs	r0, #76	; 0x4c
 800636c:	f7ff fe57 	bl	800601e <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8006370:	f7ff fd02 	bl	8005d78 <DESELECT>
	SPI_RxByte();
 8006374:	f7ff fd44 	bl	8005e00 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	bf14      	ite	ne
 800637e:	2301      	movne	r3, #1
 8006380:	2300      	moveq	r3, #0
 8006382:	b2db      	uxtb	r3, r3
}
 8006384:	4618      	mov	r0, r3
 8006386:	3710      	adds	r7, #16
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	20000005 	.word	0x20000005
 8006390:	200002d4 	.word	0x200002d4

08006394 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	60b9      	str	r1, [r7, #8]
 800639c:	607a      	str	r2, [r7, #4]
 800639e:	603b      	str	r3, [r7, #0]
 80063a0:	4603      	mov	r3, r0
 80063a2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80063a4:	7bfb      	ldrb	r3, [r7, #15]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d102      	bne.n	80063b0 <SD_disk_write+0x1c>
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d101      	bne.n	80063b4 <SD_disk_write+0x20>
 80063b0:	2304      	movs	r3, #4
 80063b2:	e06b      	b.n	800648c <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80063b4:	4b37      	ldr	r3, [pc, #220]	; (8006494 <SD_disk_write+0x100>)
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	f003 0301 	and.w	r3, r3, #1
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d001      	beq.n	80063c6 <SD_disk_write+0x32>
 80063c2:	2303      	movs	r3, #3
 80063c4:	e062      	b.n	800648c <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80063c6:	4b33      	ldr	r3, [pc, #204]	; (8006494 <SD_disk_write+0x100>)
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	f003 0304 	and.w	r3, r3, #4
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d001      	beq.n	80063d8 <SD_disk_write+0x44>
 80063d4:	2302      	movs	r3, #2
 80063d6:	e059      	b.n	800648c <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80063d8:	4b2f      	ldr	r3, [pc, #188]	; (8006498 <SD_disk_write+0x104>)
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	f003 0304 	and.w	r3, r3, #4
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d102      	bne.n	80063ea <SD_disk_write+0x56>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	025b      	lsls	r3, r3, #9
 80063e8:	607b      	str	r3, [r7, #4]

	SELECT();
 80063ea:	f7ff fcb5 	bl	8005d58 <SELECT>

	if (count == 1)
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d110      	bne.n	8006416 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80063f4:	6879      	ldr	r1, [r7, #4]
 80063f6:	2058      	movs	r0, #88	; 0x58
 80063f8:	f7ff fe11 	bl	800601e <SD_SendCmd>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d13a      	bne.n	8006478 <SD_disk_write+0xe4>
 8006402:	21fe      	movs	r1, #254	; 0xfe
 8006404:	68b8      	ldr	r0, [r7, #8]
 8006406:	f7ff fdc7 	bl	8005f98 <SD_TxDataBlock>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d033      	beq.n	8006478 <SD_disk_write+0xe4>
			count = 0;
 8006410:	2300      	movs	r3, #0
 8006412:	603b      	str	r3, [r7, #0]
 8006414:	e030      	b.n	8006478 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8006416:	4b20      	ldr	r3, [pc, #128]	; (8006498 <SD_disk_write+0x104>)
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	f003 0302 	and.w	r3, r3, #2
 800641e:	2b00      	cmp	r3, #0
 8006420:	d007      	beq.n	8006432 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8006422:	2100      	movs	r1, #0
 8006424:	2077      	movs	r0, #119	; 0x77
 8006426:	f7ff fdfa 	bl	800601e <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800642a:	6839      	ldr	r1, [r7, #0]
 800642c:	2057      	movs	r0, #87	; 0x57
 800642e:	f7ff fdf6 	bl	800601e <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8006432:	6879      	ldr	r1, [r7, #4]
 8006434:	2059      	movs	r0, #89	; 0x59
 8006436:	f7ff fdf2 	bl	800601e <SD_SendCmd>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d11b      	bne.n	8006478 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8006440:	21fc      	movs	r1, #252	; 0xfc
 8006442:	68b8      	ldr	r0, [r7, #8]
 8006444:	f7ff fda8 	bl	8005f98 <SD_TxDataBlock>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00a      	beq.n	8006464 <SD_disk_write+0xd0>
				buff += 512;
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006454:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	3b01      	subs	r3, #1
 800645a:	603b      	str	r3, [r7, #0]
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1ee      	bne.n	8006440 <SD_disk_write+0xac>
 8006462:	e000      	b.n	8006466 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8006464:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8006466:	21fd      	movs	r1, #253	; 0xfd
 8006468:	2000      	movs	r0, #0
 800646a:	f7ff fd95 	bl	8005f98 <SD_TxDataBlock>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d101      	bne.n	8006478 <SD_disk_write+0xe4>
			{
				count = 1;
 8006474:	2301      	movs	r3, #1
 8006476:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8006478:	f7ff fc7e 	bl	8005d78 <DESELECT>
	SPI_RxByte();
 800647c:	f7ff fcc0 	bl	8005e00 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	bf14      	ite	ne
 8006486:	2301      	movne	r3, #1
 8006488:	2300      	moveq	r3, #0
 800648a:	b2db      	uxtb	r3, r3
}
 800648c:	4618      	mov	r0, r3
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	20000005 	.word	0x20000005
 8006498:	200002d4 	.word	0x200002d4

0800649c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 800649c:	b590      	push	{r4, r7, lr}
 800649e:	b08b      	sub	sp, #44	; 0x2c
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	4603      	mov	r3, r0
 80064a4:	603a      	str	r2, [r7, #0]
 80064a6:	71fb      	strb	r3, [r7, #7]
 80064a8:	460b      	mov	r3, r1
 80064aa:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80064b0:	79fb      	ldrb	r3, [r7, #7]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d001      	beq.n	80064ba <SD_disk_ioctl+0x1e>
 80064b6:	2304      	movs	r3, #4
 80064b8:	e113      	b.n	80066e2 <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80064c0:	79bb      	ldrb	r3, [r7, #6]
 80064c2:	2b05      	cmp	r3, #5
 80064c4:	d121      	bne.n	800650a <SD_disk_ioctl+0x6e>
	{
		switch (*ptr)
 80064c6:	6a3b      	ldr	r3, [r7, #32]
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d009      	beq.n	80064e2 <SD_disk_ioctl+0x46>
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d00d      	beq.n	80064ee <SD_disk_ioctl+0x52>
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d115      	bne.n	8006502 <SD_disk_ioctl+0x66>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80064d6:	f7ff fd19 	bl	8005f0c <SD_PowerOff>
			res = RES_OK;
 80064da:	2300      	movs	r3, #0
 80064dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80064e0:	e0fd      	b.n	80066de <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 80064e2:	f7ff fcd1 	bl	8005e88 <SD_PowerOn>
			res = RES_OK;
 80064e6:	2300      	movs	r3, #0
 80064e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80064ec:	e0f7      	b.n	80066de <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80064ee:	6a3b      	ldr	r3, [r7, #32]
 80064f0:	1c5c      	adds	r4, r3, #1
 80064f2:	f7ff fd17 	bl	8005f24 <SD_CheckPower>
 80064f6:	4603      	mov	r3, r0
 80064f8:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80064fa:	2300      	movs	r3, #0
 80064fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8006500:	e0ed      	b.n	80066de <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8006502:	2304      	movs	r3, #4
 8006504:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006508:	e0e9      	b.n	80066de <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 800650a:	4b78      	ldr	r3, [pc, #480]	; (80066ec <SD_disk_ioctl+0x250>)
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	b2db      	uxtb	r3, r3
 8006510:	f003 0301 	and.w	r3, r3, #1
 8006514:	2b00      	cmp	r3, #0
 8006516:	d001      	beq.n	800651c <SD_disk_ioctl+0x80>
 8006518:	2303      	movs	r3, #3
 800651a:	e0e2      	b.n	80066e2 <SD_disk_ioctl+0x246>

		SELECT();
 800651c:	f7ff fc1c 	bl	8005d58 <SELECT>

		switch (ctrl)
 8006520:	79bb      	ldrb	r3, [r7, #6]
 8006522:	2b0d      	cmp	r3, #13
 8006524:	f200 80cc 	bhi.w	80066c0 <SD_disk_ioctl+0x224>
 8006528:	a201      	add	r2, pc, #4	; (adr r2, 8006530 <SD_disk_ioctl+0x94>)
 800652a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800652e:	bf00      	nop
 8006530:	0800662b 	.word	0x0800662b
 8006534:	08006569 	.word	0x08006569
 8006538:	0800661b 	.word	0x0800661b
 800653c:	080066c1 	.word	0x080066c1
 8006540:	080066c1 	.word	0x080066c1
 8006544:	080066c1 	.word	0x080066c1
 8006548:	080066c1 	.word	0x080066c1
 800654c:	080066c1 	.word	0x080066c1
 8006550:	080066c1 	.word	0x080066c1
 8006554:	080066c1 	.word	0x080066c1
 8006558:	080066c1 	.word	0x080066c1
 800655c:	0800663d 	.word	0x0800663d
 8006560:	08006661 	.word	0x08006661
 8006564:	08006685 	.word	0x08006685
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8006568:	2100      	movs	r1, #0
 800656a:	2049      	movs	r0, #73	; 0x49
 800656c:	f7ff fd57 	bl	800601e <SD_SendCmd>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	f040 80a8 	bne.w	80066c8 <SD_disk_ioctl+0x22c>
 8006578:	f107 030c 	add.w	r3, r7, #12
 800657c:	2110      	movs	r1, #16
 800657e:	4618      	mov	r0, r3
 8006580:	f7ff fcdc 	bl	8005f3c <SD_RxDataBlock>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	f000 809e 	beq.w	80066c8 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 800658c:	7b3b      	ldrb	r3, [r7, #12]
 800658e:	099b      	lsrs	r3, r3, #6
 8006590:	b2db      	uxtb	r3, r3
 8006592:	2b01      	cmp	r3, #1
 8006594:	d10e      	bne.n	80065b4 <SD_disk_ioctl+0x118>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8006596:	7d7b      	ldrb	r3, [r7, #21]
 8006598:	b29a      	uxth	r2, r3
 800659a:	7d3b      	ldrb	r3, [r7, #20]
 800659c:	b29b      	uxth	r3, r3
 800659e:	021b      	lsls	r3, r3, #8
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	4413      	add	r3, r2
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	3301      	adds	r3, #1
 80065a8:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80065aa:	8bfb      	ldrh	r3, [r7, #30]
 80065ac:	029a      	lsls	r2, r3, #10
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	601a      	str	r2, [r3, #0]
 80065b2:	e02e      	b.n	8006612 <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80065b4:	7c7b      	ldrb	r3, [r7, #17]
 80065b6:	f003 030f 	and.w	r3, r3, #15
 80065ba:	b2da      	uxtb	r2, r3
 80065bc:	7dbb      	ldrb	r3, [r7, #22]
 80065be:	09db      	lsrs	r3, r3, #7
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	4413      	add	r3, r2
 80065c4:	b2da      	uxtb	r2, r3
 80065c6:	7d7b      	ldrb	r3, [r7, #21]
 80065c8:	005b      	lsls	r3, r3, #1
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	f003 0306 	and.w	r3, r3, #6
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	4413      	add	r3, r2
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	3302      	adds	r3, #2
 80065d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80065dc:	7d3b      	ldrb	r3, [r7, #20]
 80065de:	099b      	lsrs	r3, r3, #6
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	b29a      	uxth	r2, r3
 80065e4:	7cfb      	ldrb	r3, [r7, #19]
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	4413      	add	r3, r2
 80065ee:	b29a      	uxth	r2, r3
 80065f0:	7cbb      	ldrb	r3, [r7, #18]
 80065f2:	029b      	lsls	r3, r3, #10
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	4413      	add	r3, r2
 80065fe:	b29b      	uxth	r3, r3
 8006600:	3301      	adds	r3, #1
 8006602:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8006604:	8bfa      	ldrh	r2, [r7, #30]
 8006606:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800660a:	3b09      	subs	r3, #9
 800660c:	409a      	lsls	r2, r3
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8006612:	2300      	movs	r3, #0
 8006614:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8006618:	e056      	b.n	80066c8 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006620:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8006622:	2300      	movs	r3, #0
 8006624:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8006628:	e055      	b.n	80066d6 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800662a:	f7ff fc13 	bl	8005e54 <SD_ReadyWait>
 800662e:	4603      	mov	r3, r0
 8006630:	2bff      	cmp	r3, #255	; 0xff
 8006632:	d14b      	bne.n	80066cc <SD_disk_ioctl+0x230>
 8006634:	2300      	movs	r3, #0
 8006636:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800663a:	e047      	b.n	80066cc <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800663c:	2100      	movs	r1, #0
 800663e:	2049      	movs	r0, #73	; 0x49
 8006640:	f7ff fced 	bl	800601e <SD_SendCmd>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d142      	bne.n	80066d0 <SD_disk_ioctl+0x234>
 800664a:	2110      	movs	r1, #16
 800664c:	6a38      	ldr	r0, [r7, #32]
 800664e:	f7ff fc75 	bl	8005f3c <SD_RxDataBlock>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d03b      	beq.n	80066d0 <SD_disk_ioctl+0x234>
 8006658:	2300      	movs	r3, #0
 800665a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800665e:	e037      	b.n	80066d0 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8006660:	2100      	movs	r1, #0
 8006662:	204a      	movs	r0, #74	; 0x4a
 8006664:	f7ff fcdb 	bl	800601e <SD_SendCmd>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d132      	bne.n	80066d4 <SD_disk_ioctl+0x238>
 800666e:	2110      	movs	r1, #16
 8006670:	6a38      	ldr	r0, [r7, #32]
 8006672:	f7ff fc63 	bl	8005f3c <SD_RxDataBlock>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d02b      	beq.n	80066d4 <SD_disk_ioctl+0x238>
 800667c:	2300      	movs	r3, #0
 800667e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8006682:	e027      	b.n	80066d4 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8006684:	2100      	movs	r1, #0
 8006686:	207a      	movs	r0, #122	; 0x7a
 8006688:	f7ff fcc9 	bl	800601e <SD_SendCmd>
 800668c:	4603      	mov	r3, r0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d116      	bne.n	80066c0 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8006692:	2300      	movs	r3, #0
 8006694:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006698:	e00b      	b.n	80066b2 <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 800669a:	6a3c      	ldr	r4, [r7, #32]
 800669c:	1c63      	adds	r3, r4, #1
 800669e:	623b      	str	r3, [r7, #32]
 80066a0:	f7ff fbae 	bl	8005e00 <SPI_RxByte>
 80066a4:	4603      	mov	r3, r0
 80066a6:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80066a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80066ac:	3301      	adds	r3, #1
 80066ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80066b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80066b6:	2b03      	cmp	r3, #3
 80066b8:	d9ef      	bls.n	800669a <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 80066ba:	2300      	movs	r3, #0
 80066bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80066c0:	2304      	movs	r3, #4
 80066c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80066c6:	e006      	b.n	80066d6 <SD_disk_ioctl+0x23a>
			break;
 80066c8:	bf00      	nop
 80066ca:	e004      	b.n	80066d6 <SD_disk_ioctl+0x23a>
			break;
 80066cc:	bf00      	nop
 80066ce:	e002      	b.n	80066d6 <SD_disk_ioctl+0x23a>
			break;
 80066d0:	bf00      	nop
 80066d2:	e000      	b.n	80066d6 <SD_disk_ioctl+0x23a>
			break;
 80066d4:	bf00      	nop
		}

		DESELECT();
 80066d6:	f7ff fb4f 	bl	8005d78 <DESELECT>
		SPI_RxByte();
 80066da:	f7ff fb91 	bl	8005e00 <SPI_RxByte>
	}

	return res;
 80066de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	372c      	adds	r7, #44	; 0x2c
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd90      	pop	{r4, r7, pc}
 80066ea:	bf00      	nop
 80066ec:	20000005 	.word	0x20000005

080066f0 <transmit_uart>:
/* Private function prototypes -----------------------------------------------*/
static void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);

void transmit_uart(char *string){
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f7f9 fd71 	bl	80001e0 <strlen>
 80066fe:	4603      	mov	r3, r0
 8006700:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t*) string, len, 200);
 8006702:	7bfb      	ldrb	r3, [r7, #15]
 8006704:	b29a      	uxth	r2, r3
 8006706:	23c8      	movs	r3, #200	; 0xc8
 8006708:	6879      	ldr	r1, [r7, #4]
 800670a:	4803      	ldr	r0, [pc, #12]	; (8006718 <transmit_uart+0x28>)
 800670c:	f7fc fb32 	bl	8002d74 <HAL_UART_Transmit>
}
 8006710:	bf00      	nop
 8006712:	3710      	adds	r7, #16
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	20002454 	.word	0x20002454

0800671c <main>:
  * @brief  Main program.
  * @param  None
  * @retval None
  */
int main(void)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8006720:	f7f9 ff36 	bl	8000590 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();		// Configure system clock to 180MHz
 8006724:	f000 f854 	bl	80067d0 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006728:	f000 f8be 	bl	80068a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800672c:	f000 f942 	bl	80069b4 <MX_USART2_UART_Init>

  // microSD Setup
  microSD_init();
 8006730:	f000 f9c6 	bl	8006ac0 <microSD_init>
  MX_FATFS_Init();
 8006734:	f7ff fafe 	bl	8005d34 <MX_FATFS_Init>

  // WS2812B Setup
  LED_Init();
 8006738:	f001 f8fa 	bl	8007930 <LED_Init>
  LED_set_color_all(0x00, 0x00, 0x00);	//Set color order of array. Ex: R0,G0,B0,R1,G1,B1
 800673c:	2200      	movs	r2, #0
 800673e:	2100      	movs	r1, #0
 8006740:	2000      	movs	r0, #0
 8006742:	f000 fd8f 	bl	8007264 <LED_set_color_all>
  LED_update(1);
 8006746:	2001      	movs	r0, #1
 8006748:	f000 ff04 	bl	8007554 <LED_update>
  // ------------------------------ //
  //       microSD Card Init        //
  // -------------------------------//

  /* Wait for microSD to initialize */
  HAL_Delay(500);
 800674c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006750:	f7f9 ff98 	bl	8000684 <HAL_Delay>

  /* Check if microSD is connected physically */
	transmit_uart("-----------------------\r\n");
 8006754:	481b      	ldr	r0, [pc, #108]	; (80067c4 <main+0xa8>)
 8006756:	f7ff ffcb 	bl	80066f0 <transmit_uart>
	while (!check_microSD_conn()){
 800675a:	e004      	b.n	8006766 <main+0x4a>
  	transmit_uart("MicroSD card not detected!\r\n");
 800675c:	481a      	ldr	r0, [pc, #104]	; (80067c8 <main+0xac>)
 800675e:	f7ff ffc7 	bl	80066f0 <transmit_uart>
  	pulse_red();
 8006762:	f000 fd4d 	bl	8007200 <pulse_red>
	while (!check_microSD_conn()){
 8006766:	f000 fa37 	bl	8006bd8 <check_microSD_conn>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d0f5      	beq.n	800675c <main+0x40>
  	//HAL_Delay(1000);
	}
	transmit_uart("MicroSD card detected!\r\n");
 8006770:	4816      	ldr	r0, [pc, #88]	; (80067cc <main+0xb0>)
 8006772:	f7ff ffbd 	bl	80066f0 <transmit_uart>
	transmit_uart("-----------------------\r\n");
 8006776:	4813      	ldr	r0, [pc, #76]	; (80067c4 <main+0xa8>)
 8006778:	f7ff ffba 	bl	80066f0 <transmit_uart>

	mount_sd();
 800677c:	f000 fa3c 	bl	8006bf8 <mount_sd>

	//open_file(file_name);
	//read_file();
	//close_file();

	find_file(TXT);
 8006780:	2002      	movs	r0, #2
 8006782:	f000 fa7d 	bl	8006c80 <find_file>
	find_file(MP3);
 8006786:	2000      	movs	r0, #0
 8006788:	f000 fa7a 	bl	8006c80 <find_file>
	find_file(WAV);
 800678c:	2001      	movs	r0, #1
 800678e:	f000 fa77 	bl	8006c80 <find_file>

	unmount();
 8006792:	f000 fa53 	bl	8006c3c <unmount>

	// ------------- //
	// Infinite Loop //
	// ------------- //
  while (1) {
  	if (check_microSD_conn()){
 8006796:	f000 fa1f 	bl	8006bd8 <check_microSD_conn>
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d007      	beq.n	80067b0 <main+0x94>
  		pulse();	// Send pulse lighting to W2812B LED Strip
 80067a0:	f000 fcfc 	bl	800719c <pulse>
 80067a4:	e7f7      	b.n	8006796 <main+0x7a>
  	} else {
  		while (!(check_microSD_conn())){
  			transmit_uart("MicroSD card not detected!\r\n");
 80067a6:	4808      	ldr	r0, [pc, #32]	; (80067c8 <main+0xac>)
 80067a8:	f7ff ffa2 	bl	80066f0 <transmit_uart>
  			pulse_red();
 80067ac:	f000 fd28 	bl	8007200 <pulse_red>
  		while (!(check_microSD_conn())){
 80067b0:	f000 fa12 	bl	8006bd8 <check_microSD_conn>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d0f5      	beq.n	80067a6 <main+0x8a>
  			//HAL_Delay(1000);
  		}
			transmit_uart("MicroSD card detected!\r\n");
 80067ba:	4804      	ldr	r0, [pc, #16]	; (80067cc <main+0xb0>)
 80067bc:	f7ff ff98 	bl	80066f0 <transmit_uart>
  	if (check_microSD_conn()){
 80067c0:	e7e9      	b.n	8006796 <main+0x7a>
 80067c2:	bf00      	nop
 80067c4:	0800844c 	.word	0x0800844c
 80067c8:	08008468 	.word	0x08008468
 80067cc:	08008488 	.word	0x08008488

080067d0 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b094      	sub	sp, #80	; 0x50
 80067d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80067d6:	f107 0320 	add.w	r3, r7, #32
 80067da:	2230      	movs	r2, #48	; 0x30
 80067dc:	2100      	movs	r1, #0
 80067de:	4618      	mov	r0, r3
 80067e0:	f001 f9f6 	bl	8007bd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80067e4:	f107 030c 	add.w	r3, r7, #12
 80067e8:	2200      	movs	r2, #0
 80067ea:	601a      	str	r2, [r3, #0]
 80067ec:	605a      	str	r2, [r3, #4]
 80067ee:	609a      	str	r2, [r3, #8]
 80067f0:	60da      	str	r2, [r3, #12]
 80067f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80067f4:	2300      	movs	r3, #0
 80067f6:	60bb      	str	r3, [r7, #8]
 80067f8:	4b29      	ldr	r3, [pc, #164]	; (80068a0 <SystemClock_Config+0xd0>)
 80067fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fc:	4a28      	ldr	r2, [pc, #160]	; (80068a0 <SystemClock_Config+0xd0>)
 80067fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006802:	6413      	str	r3, [r2, #64]	; 0x40
 8006804:	4b26      	ldr	r3, [pc, #152]	; (80068a0 <SystemClock_Config+0xd0>)
 8006806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800680c:	60bb      	str	r3, [r7, #8]
 800680e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006810:	2300      	movs	r3, #0
 8006812:	607b      	str	r3, [r7, #4]
 8006814:	4b23      	ldr	r3, [pc, #140]	; (80068a4 <SystemClock_Config+0xd4>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a22      	ldr	r2, [pc, #136]	; (80068a4 <SystemClock_Config+0xd4>)
 800681a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800681e:	6013      	str	r3, [r2, #0]
 8006820:	4b20      	ldr	r3, [pc, #128]	; (80068a4 <SystemClock_Config+0xd4>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006828:	607b      	str	r3, [r7, #4]
 800682a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800682c:	2302      	movs	r3, #2
 800682e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006830:	2301      	movs	r3, #1
 8006832:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006834:	2310      	movs	r3, #16
 8006836:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006838:	2302      	movs	r3, #2
 800683a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800683c:	2300      	movs	r3, #0
 800683e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8006840:	2310      	movs	r3, #16
 8006842:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8006844:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8006848:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800684a:	2304      	movs	r3, #4
 800684c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800684e:	2304      	movs	r3, #4
 8006850:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006852:	f107 0320 	add.w	r3, r7, #32
 8006856:	4618      	mov	r0, r3
 8006858:	f7fa fc0e 	bl	8001078 <HAL_RCC_OscConfig>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d002      	beq.n	8006868 <SystemClock_Config+0x98>
  {
    Error_Handler(SYSCONF_ERROR1);
 8006862:	2000      	movs	r0, #0
 8006864:	f000 f8d0 	bl	8006a08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006868:	230f      	movs	r3, #15
 800686a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800686c:	2302      	movs	r3, #2
 800686e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006870:	2300      	movs	r3, #0
 8006872:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006878:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800687a:	2300      	movs	r3, #0
 800687c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800687e:	f107 030c 	add.w	r3, r7, #12
 8006882:	2102      	movs	r1, #2
 8006884:	4618      	mov	r0, r3
 8006886:	f7fa fe67 	bl	8001558 <HAL_RCC_ClockConfig>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d002      	beq.n	8006896 <SystemClock_Config+0xc6>
  {
    Error_Handler(SYSCONF_ERROR2);
 8006890:	2001      	movs	r0, #1
 8006892:	f000 f8b9 	bl	8006a08 <Error_Handler>
  }
}
 8006896:	bf00      	nop
 8006898:	3750      	adds	r7, #80	; 0x50
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	40023800 	.word	0x40023800
 80068a4:	40007000 	.word	0x40007000

080068a8 <MX_GPIO_Init>:
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void){
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b08a      	sub	sp, #40	; 0x28
 80068ac:	af00      	add	r7, sp, #0
  // GPIO Ports Clock Enable
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80068ae:	2300      	movs	r3, #0
 80068b0:	613b      	str	r3, [r7, #16]
 80068b2:	4b3b      	ldr	r3, [pc, #236]	; (80069a0 <MX_GPIO_Init+0xf8>)
 80068b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b6:	4a3a      	ldr	r2, [pc, #232]	; (80069a0 <MX_GPIO_Init+0xf8>)
 80068b8:	f043 0304 	orr.w	r3, r3, #4
 80068bc:	6313      	str	r3, [r2, #48]	; 0x30
 80068be:	4b38      	ldr	r3, [pc, #224]	; (80069a0 <MX_GPIO_Init+0xf8>)
 80068c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c2:	f003 0304 	and.w	r3, r3, #4
 80068c6:	613b      	str	r3, [r7, #16]
 80068c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80068ca:	2300      	movs	r3, #0
 80068cc:	60fb      	str	r3, [r7, #12]
 80068ce:	4b34      	ldr	r3, [pc, #208]	; (80069a0 <MX_GPIO_Init+0xf8>)
 80068d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d2:	4a33      	ldr	r2, [pc, #204]	; (80069a0 <MX_GPIO_Init+0xf8>)
 80068d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068d8:	6313      	str	r3, [r2, #48]	; 0x30
 80068da:	4b31      	ldr	r3, [pc, #196]	; (80069a0 <MX_GPIO_Init+0xf8>)
 80068dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068e2:	60fb      	str	r3, [r7, #12]
 80068e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80068e6:	2300      	movs	r3, #0
 80068e8:	60bb      	str	r3, [r7, #8]
 80068ea:	4b2d      	ldr	r3, [pc, #180]	; (80069a0 <MX_GPIO_Init+0xf8>)
 80068ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ee:	4a2c      	ldr	r2, [pc, #176]	; (80069a0 <MX_GPIO_Init+0xf8>)
 80068f0:	f043 0301 	orr.w	r3, r3, #1
 80068f4:	6313      	str	r3, [r2, #48]	; 0x30
 80068f6:	4b2a      	ldr	r3, [pc, #168]	; (80069a0 <MX_GPIO_Init+0xf8>)
 80068f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fa:	f003 0301 	and.w	r3, r3, #1
 80068fe:	60bb      	str	r3, [r7, #8]
 8006900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006902:	2300      	movs	r3, #0
 8006904:	607b      	str	r3, [r7, #4]
 8006906:	4b26      	ldr	r3, [pc, #152]	; (80069a0 <MX_GPIO_Init+0xf8>)
 8006908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800690a:	4a25      	ldr	r2, [pc, #148]	; (80069a0 <MX_GPIO_Init+0xf8>)
 800690c:	f043 0302 	orr.w	r3, r3, #2
 8006910:	6313      	str	r3, [r2, #48]	; 0x30
 8006912:	4b23      	ldr	r3, [pc, #140]	; (80069a0 <MX_GPIO_Init+0xf8>)
 8006914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006916:	f003 0302 	and.w	r3, r3, #2
 800691a:	607b      	str	r3, [r7, #4]
 800691c:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800691e:	f107 0314 	add.w	r3, r7, #20
 8006922:	2200      	movs	r2, #0
 8006924:	601a      	str	r2, [r3, #0]
 8006926:	605a      	str	r2, [r3, #4]
 8006928:	609a      	str	r2, [r3, #8]
 800692a:	60da      	str	r2, [r3, #12]
 800692c:	611a      	str	r2, [r3, #16]

  // Configure GPIO pin Output Level
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800692e:	2200      	movs	r2, #0
 8006930:	2120      	movs	r1, #32
 8006932:	481c      	ldr	r0, [pc, #112]	; (80069a4 <MX_GPIO_Init+0xfc>)
 8006934:	f7fa fb86 	bl	8001044 <HAL_GPIO_WritePin>

  // Configure GPIO pin : B1_Pin
  GPIO_InitStruct.Pin = B1_Pin;
 8006938:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800693c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800693e:	4b1a      	ldr	r3, [pc, #104]	; (80069a8 <MX_GPIO_Init+0x100>)
 8006940:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006942:	2300      	movs	r3, #0
 8006944:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8006946:	f107 0314 	add.w	r3, r7, #20
 800694a:	4619      	mov	r1, r3
 800694c:	4817      	ldr	r0, [pc, #92]	; (80069ac <MX_GPIO_Init+0x104>)
 800694e:	f7fa f9df 	bl	8000d10 <HAL_GPIO_Init>

  // Configure GPIO pin : LD2_Pin
  GPIO_InitStruct.Pin = LD2_Pin;
 8006952:	2320      	movs	r3, #32
 8006954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006956:	2301      	movs	r3, #1
 8006958:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800695a:	2300      	movs	r3, #0
 800695c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800695e:	2300      	movs	r3, #0
 8006960:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8006962:	f107 0314 	add.w	r3, r7, #20
 8006966:	4619      	mov	r1, r3
 8006968:	480e      	ldr	r0, [pc, #56]	; (80069a4 <MX_GPIO_Init+0xfc>)
 800696a:	f7fa f9d1 	bl	8000d10 <HAL_GPIO_Init>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800696e:	2200      	movs	r2, #0
 8006970:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006974:	480e      	ldr	r0, [pc, #56]	; (80069b0 <MX_GPIO_Init+0x108>)
 8006976:	f7fa fb65 	bl	8001044 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : SD_CS_Pin */
	GPIO_InitStruct.Pin = SD_CS_Pin;
 800697a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800697e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006980:	2301      	movs	r3, #1
 8006982:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006984:	2300      	movs	r3, #0
 8006986:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006988:	2300      	movs	r3, #0
 800698a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800698c:	f107 0314 	add.w	r3, r7, #20
 8006990:	4619      	mov	r1, r3
 8006992:	4807      	ldr	r0, [pc, #28]	; (80069b0 <MX_GPIO_Init+0x108>)
 8006994:	f7fa f9bc 	bl	8000d10 <HAL_GPIO_Init>
}
 8006998:	bf00      	nop
 800699a:	3728      	adds	r7, #40	; 0x28
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	40023800 	.word	0x40023800
 80069a4:	40020000 	.word	0x40020000
 80069a8:	10210000 	.word	0x10210000
 80069ac:	40020800 	.word	0x40020800
 80069b0:	40020400 	.word	0x40020400

080069b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80069b8:	4b11      	ldr	r3, [pc, #68]	; (8006a00 <MX_USART2_UART_Init+0x4c>)
 80069ba:	4a12      	ldr	r2, [pc, #72]	; (8006a04 <MX_USART2_UART_Init+0x50>)
 80069bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80069be:	4b10      	ldr	r3, [pc, #64]	; (8006a00 <MX_USART2_UART_Init+0x4c>)
 80069c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80069c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80069c6:	4b0e      	ldr	r3, [pc, #56]	; (8006a00 <MX_USART2_UART_Init+0x4c>)
 80069c8:	2200      	movs	r2, #0
 80069ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80069cc:	4b0c      	ldr	r3, [pc, #48]	; (8006a00 <MX_USART2_UART_Init+0x4c>)
 80069ce:	2200      	movs	r2, #0
 80069d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80069d2:	4b0b      	ldr	r3, [pc, #44]	; (8006a00 <MX_USART2_UART_Init+0x4c>)
 80069d4:	2200      	movs	r2, #0
 80069d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80069d8:	4b09      	ldr	r3, [pc, #36]	; (8006a00 <MX_USART2_UART_Init+0x4c>)
 80069da:	220c      	movs	r2, #12
 80069dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80069de:	4b08      	ldr	r3, [pc, #32]	; (8006a00 <MX_USART2_UART_Init+0x4c>)
 80069e0:	2200      	movs	r2, #0
 80069e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80069e4:	4b06      	ldr	r3, [pc, #24]	; (8006a00 <MX_USART2_UART_Init+0x4c>)
 80069e6:	2200      	movs	r2, #0
 80069e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80069ea:	4805      	ldr	r0, [pc, #20]	; (8006a00 <MX_USART2_UART_Init+0x4c>)
 80069ec:	f7fc f975 	bl	8002cda <HAL_UART_Init>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d002      	beq.n	80069fc <MX_USART2_UART_Init+0x48>
  {
    Error_Handler(UART_ERROR);
 80069f6:	2007      	movs	r0, #7
 80069f8:	f000 f806 	bl	8006a08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80069fc:	bf00      	nop
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	20002454 	.word	0x20002454
 8006a04:	40004400 	.word	0x40004400

08006a08 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(uint8_t ERROR)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	4603      	mov	r3, r0
 8006a10:	71fb      	strb	r3, [r7, #7]
  while (1) {
    /* Turn LED2 on */
  	switch(ERROR) {
 8006a12:	79fb      	ldrb	r3, [r7, #7]
 8006a14:	2b08      	cmp	r3, #8
 8006a16:	d84b      	bhi.n	8006ab0 <Error_Handler+0xa8>
 8006a18:	a201      	add	r2, pc, #4	; (adr r2, 8006a20 <Error_Handler+0x18>)
 8006a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1e:	bf00      	nop
 8006a20:	08006a45 	.word	0x08006a45
 8006a24:	08006a51 	.word	0x08006a51
 8006a28:	08006a69 	.word	0x08006a69
 8006a2c:	08006a75 	.word	0x08006a75
 8006a30:	08006a5d 	.word	0x08006a5d
 8006a34:	08006a8d 	.word	0x08006a8d
 8006a38:	08006a81 	.word	0x08006a81
 8006a3c:	08006a99 	.word	0x08006a99
 8006a40:	08006aa5 	.word	0x08006aa5
  	case SYSCONF_ERROR1:
  		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8006a44:	2201      	movs	r2, #1
 8006a46:	2120      	movs	r1, #32
 8006a48:	481c      	ldr	r0, [pc, #112]	; (8006abc <Error_Handler+0xb4>)
 8006a4a:	f7fa fafb 	bl	8001044 <HAL_GPIO_WritePin>
  		break;
 8006a4e:	e034      	b.n	8006aba <Error_Handler+0xb2>
  	case SYSCONF_ERROR2:
  		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8006a50:	2201      	movs	r2, #1
 8006a52:	2120      	movs	r1, #32
 8006a54:	4819      	ldr	r0, [pc, #100]	; (8006abc <Error_Handler+0xb4>)
 8006a56:	f7fa faf5 	bl	8001044 <HAL_GPIO_WritePin>
  		break;
 8006a5a:	e02e      	b.n	8006aba <Error_Handler+0xb2>
  	case TIM_INIT_ERROR:
  	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	2120      	movs	r1, #32
 8006a60:	4816      	ldr	r0, [pc, #88]	; (8006abc <Error_Handler+0xb4>)
 8006a62:	f7fa faef 	bl	8001044 <HAL_GPIO_WritePin>
  	  break;
 8006a66:	e028      	b.n	8006aba <Error_Handler+0xb2>
  	case EN_PWM_ERROR:
  	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8006a68:	2201      	movs	r2, #1
 8006a6a:	2120      	movs	r1, #32
 8006a6c:	4813      	ldr	r0, [pc, #76]	; (8006abc <Error_Handler+0xb4>)
 8006a6e:	f7fa fae9 	bl	8001044 <HAL_GPIO_WritePin>
  	  break;
 8006a72:	e022      	b.n	8006aba <Error_Handler+0xb2>
  	case TIM_CONFIG_ERROR:
  	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8006a74:	2201      	movs	r2, #1
 8006a76:	2120      	movs	r1, #32
 8006a78:	4810      	ldr	r0, [pc, #64]	; (8006abc <Error_Handler+0xb4>)
 8006a7a:	f7fa fae3 	bl	8001044 <HAL_GPIO_WritePin>
  	  break;
 8006a7e:	e01c      	b.n	8006aba <Error_Handler+0xb2>
  	case DMA_ERROR:
  	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8006a80:	2201      	movs	r2, #1
 8006a82:	2120      	movs	r1, #32
 8006a84:	480d      	ldr	r0, [pc, #52]	; (8006abc <Error_Handler+0xb4>)
 8006a86:	f7fa fadd 	bl	8001044 <HAL_GPIO_WritePin>
  	  break;
 8006a8a:	e016      	b.n	8006aba <Error_Handler+0xb2>
  	case GPIO_ERROR:
  	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	2120      	movs	r1, #32
 8006a90:	480a      	ldr	r0, [pc, #40]	; (8006abc <Error_Handler+0xb4>)
 8006a92:	f7fa fad7 	bl	8001044 <HAL_GPIO_WritePin>
  	  break;
 8006a96:	e010      	b.n	8006aba <Error_Handler+0xb2>
  	case UART_ERROR:
  		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8006a98:	2201      	movs	r2, #1
 8006a9a:	2120      	movs	r1, #32
 8006a9c:	4807      	ldr	r0, [pc, #28]	; (8006abc <Error_Handler+0xb4>)
 8006a9e:	f7fa fad1 	bl	8001044 <HAL_GPIO_WritePin>
  		break;
 8006aa2:	e00a      	b.n	8006aba <Error_Handler+0xb2>
  	case OPEN_ERROR:
  		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	2120      	movs	r1, #32
 8006aa8:	4804      	ldr	r0, [pc, #16]	; (8006abc <Error_Handler+0xb4>)
 8006aaa:	f7fa facb 	bl	8001044 <HAL_GPIO_WritePin>
  		break;
 8006aae:	e004      	b.n	8006aba <Error_Handler+0xb2>
  	default:
  	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	2120      	movs	r1, #32
 8006ab4:	4801      	ldr	r0, [pc, #4]	; (8006abc <Error_Handler+0xb4>)
 8006ab6:	f7fa fac5 	bl	8001044 <HAL_GPIO_WritePin>
  	switch(ERROR) {
 8006aba:	e7aa      	b.n	8006a12 <Error_Handler+0xa>
 8006abc:	40020000 	.word	0x40020000

08006ac0 <microSD_init>:
uint32_t totalSpace, freeSpace;

char buffer[100];
char file_name[50];

void microSD_init (void){
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	603b      	str	r3, [r7, #0]
 8006aca:	4b33      	ldr	r3, [pc, #204]	; (8006b98 <microSD_init+0xd8>)
 8006acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ace:	4a32      	ldr	r2, [pc, #200]	; (8006b98 <microSD_init+0xd8>)
 8006ad0:	f043 0302 	orr.w	r3, r3, #2
 8006ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8006ad6:	4b30      	ldr	r3, [pc, #192]	; (8006b98 <microSD_init+0xd8>)
 8006ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ada:	f003 0302 	and.w	r3, r3, #2
 8006ade:	603b      	str	r3, [r7, #0]
 8006ae0:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ae2:	1d3b      	adds	r3, r7, #4
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	601a      	str	r2, [r3, #0]
 8006ae8:	605a      	str	r2, [r3, #4]
 8006aea:	609a      	str	r2, [r3, #8]
 8006aec:	60da      	str	r2, [r3, #12]
 8006aee:	611a      	str	r2, [r3, #16]

  // Configure GPIO pin : PH1_Pin
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_1, GPIO_PIN_RESET);
 8006af0:	2200      	movs	r2, #0
 8006af2:	2102      	movs	r1, #2
 8006af4:	4829      	ldr	r0, [pc, #164]	; (8006b9c <microSD_init+0xdc>)
 8006af6:	f7fa faa5 	bl	8001044 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006afa:	2302      	movs	r3, #2
 8006afc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006afe:	2300      	movs	r3, #0
 8006b00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b02:	2300      	movs	r3, #0
 8006b04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b06:	2300      	movs	r3, #0
 8006b08:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006b0a:	1d3b      	adds	r3, r7, #4
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	4823      	ldr	r0, [pc, #140]	; (8006b9c <microSD_init+0xdc>)
 8006b10:	f7fa f8fe 	bl	8000d10 <HAL_GPIO_Init>

  // Configure GPIO pin : SD_CS_Pin
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8006b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b18:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b22:	2300      	movs	r3, #0
 8006b24:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8006b26:	1d3b      	adds	r3, r7, #4
 8006b28:	4619      	mov	r1, r3
 8006b2a:	481d      	ldr	r0, [pc, #116]	; (8006ba0 <microSD_init+0xe0>)
 8006b2c:	f7fa f8f0 	bl	8000d10 <HAL_GPIO_Init>


  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006b30:	4b1c      	ldr	r3, [pc, #112]	; (8006ba4 <microSD_init+0xe4>)
 8006b32:	4a1d      	ldr	r2, [pc, #116]	; (8006ba8 <microSD_init+0xe8>)
 8006b34:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006b36:	4b1b      	ldr	r3, [pc, #108]	; (8006ba4 <microSD_init+0xe4>)
 8006b38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006b3c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006b3e:	4b19      	ldr	r3, [pc, #100]	; (8006ba4 <microSD_init+0xe4>)
 8006b40:	2200      	movs	r2, #0
 8006b42:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006b44:	4b17      	ldr	r3, [pc, #92]	; (8006ba4 <microSD_init+0xe4>)
 8006b46:	2200      	movs	r2, #0
 8006b48:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b4a:	4b16      	ldr	r3, [pc, #88]	; (8006ba4 <microSD_init+0xe4>)
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006b50:	4b14      	ldr	r3, [pc, #80]	; (8006ba4 <microSD_init+0xe4>)
 8006b52:	2200      	movs	r2, #0
 8006b54:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8006b56:	4b13      	ldr	r3, [pc, #76]	; (8006ba4 <microSD_init+0xe4>)
 8006b58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b5c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;	//SPI_BAUDRATEPRESCALER_2
 8006b5e:	4b11      	ldr	r3, [pc, #68]	; (8006ba4 <microSD_init+0xe4>)
 8006b60:	2200      	movs	r2, #0
 8006b62:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006b64:	4b0f      	ldr	r3, [pc, #60]	; (8006ba4 <microSD_init+0xe4>)
 8006b66:	2200      	movs	r2, #0
 8006b68:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006b6a:	4b0e      	ldr	r3, [pc, #56]	; (8006ba4 <microSD_init+0xe4>)
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b70:	4b0c      	ldr	r3, [pc, #48]	; (8006ba4 <microSD_init+0xe4>)
 8006b72:	2200      	movs	r2, #0
 8006b74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8006b76:	4b0b      	ldr	r3, [pc, #44]	; (8006ba4 <microSD_init+0xe4>)
 8006b78:	220a      	movs	r2, #10
 8006b7a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006b7c:	4809      	ldr	r0, [pc, #36]	; (8006ba4 <microSD_init+0xe4>)
 8006b7e:	f7fa fedd 	bl	800193c <HAL_SPI_Init>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d002      	beq.n	8006b8e <microSD_init+0xce>
  {
    Error_Handler(SPI_ERROR);
 8006b88:	2009      	movs	r0, #9
 8006b8a:	f7ff ff3d 	bl	8006a08 <Error_Handler>
  }
}
 8006b8e:	bf00      	nop
 8006b90:	3718      	adds	r7, #24
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	40023800 	.word	0x40023800
 8006b9c:	40021c00 	.word	0x40021c00
 8006ba0:	40020400 	.word	0x40020400
 8006ba4:	20002598 	.word	0x20002598
 8006ba8:	40003800 	.word	0x40003800

08006bac <transmit_uart_SD>:

void transmit_uart_SD(char *string){
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f7f9 fb13 	bl	80001e0 <strlen>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t*) string, len, 200);
 8006bbe:	7bfb      	ldrb	r3, [r7, #15]
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	23c8      	movs	r3, #200	; 0xc8
 8006bc4:	6879      	ldr	r1, [r7, #4]
 8006bc6:	4803      	ldr	r0, [pc, #12]	; (8006bd4 <transmit_uart_SD+0x28>)
 8006bc8:	f7fc f8d4 	bl	8002d74 <HAL_UART_Transmit>
}
 8006bcc:	bf00      	nop
 8006bce:	3710      	adds	r7, #16
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	20002454 	.word	0x20002454

08006bd8 <check_microSD_conn>:

uint8_t check_microSD_conn (void) {
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	af00      	add	r7, sp, #0
	if(!(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_1))){
 8006bdc:	2102      	movs	r1, #2
 8006bde:	4805      	ldr	r0, [pc, #20]	; (8006bf4 <check_microSD_conn+0x1c>)
 8006be0:	f7fa fa18 	bl	8001014 <HAL_GPIO_ReadPin>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d101      	bne.n	8006bee <check_microSD_conn+0x16>
		return 0;
 8006bea:	2300      	movs	r3, #0
 8006bec:	e000      	b.n	8006bf0 <check_microSD_conn+0x18>
	}
	return 1;
 8006bee:	2301      	movs	r3, #1
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	40021c00 	.word	0x40021c00

08006bf8 <mount_sd>:

void mount_sd(void){
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	af00      	add	r7, sp, #0
	fres = f_mount(&fs, "", 0);
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	490a      	ldr	r1, [pc, #40]	; (8006c28 <mount_sd+0x30>)
 8006c00:	480a      	ldr	r0, [pc, #40]	; (8006c2c <mount_sd+0x34>)
 8006c02:	f7fe fdef 	bl	80057e4 <f_mount>
 8006c06:	4603      	mov	r3, r0
 8006c08:	461a      	mov	r2, r3
 8006c0a:	4b09      	ldr	r3, [pc, #36]	; (8006c30 <mount_sd+0x38>)
 8006c0c:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK) {
 8006c0e:	4b08      	ldr	r3, [pc, #32]	; (8006c30 <mount_sd+0x38>)
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d103      	bne.n	8006c1e <mount_sd+0x26>
		transmit_uart_SD("PASS - MicroSD card mounted successfully!\r\n");
 8006c16:	4807      	ldr	r0, [pc, #28]	; (8006c34 <mount_sd+0x3c>)
 8006c18:	f7ff ffc8 	bl	8006bac <transmit_uart_SD>
	} else {
		transmit_uart_SD("FAIL - MicroSD card's mount error!\r\n");
	}
	return;
 8006c1c:	e003      	b.n	8006c26 <mount_sd+0x2e>
		transmit_uart_SD("FAIL - MicroSD card's mount error!\r\n");
 8006c1e:	4806      	ldr	r0, [pc, #24]	; (8006c38 <mount_sd+0x40>)
 8006c20:	f7ff ffc4 	bl	8006bac <transmit_uart_SD>
	return;
 8006c24:	bf00      	nop
}
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	080084a4 	.word	0x080084a4
 8006c2c:	200025f0 	.word	0x200025f0
 8006c30:	200036cc 	.word	0x200036cc
 8006c34:	080084a8 	.word	0x080084a8
 8006c38:	080084d4 	.word	0x080084d4

08006c3c <unmount>:

	transmit_uart_SD("-----------------\r\n");
	return;
}

void unmount(void){
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	af00      	add	r7, sp, #0
	f_mount(NULL, "", 1);
 8006c40:	2201      	movs	r2, #1
 8006c42:	490b      	ldr	r1, [pc, #44]	; (8006c70 <unmount+0x34>)
 8006c44:	2000      	movs	r0, #0
 8006c46:	f7fe fdcd 	bl	80057e4 <f_mount>
	if (fres == FR_OK) {
 8006c4a:	4b0a      	ldr	r3, [pc, #40]	; (8006c74 <unmount+0x38>)
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d103      	bne.n	8006c5a <unmount+0x1e>
		transmit_uart_SD("PASS - MicroSD successfully unmounted.\r\n");
 8006c52:	4809      	ldr	r0, [pc, #36]	; (8006c78 <unmount+0x3c>)
 8006c54:	f7ff ffaa 	bl	8006bac <transmit_uart_SD>
	} else if (fres != FR_OK) {
		transmit_uart_SD("FAIL - MicroSD failed to unmount.\r\n");
	}
	return;
 8006c58:	e007      	b.n	8006c6a <unmount+0x2e>
	} else if (fres != FR_OK) {
 8006c5a:	4b06      	ldr	r3, [pc, #24]	; (8006c74 <unmount+0x38>)
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d003      	beq.n	8006c6a <unmount+0x2e>
		transmit_uart_SD("FAIL - MicroSD failed to unmount.\r\n");
 8006c62:	4806      	ldr	r0, [pc, #24]	; (8006c7c <unmount+0x40>)
 8006c64:	f7ff ffa2 	bl	8006bac <transmit_uart_SD>
	return;
 8006c68:	bf00      	nop
 8006c6a:	bf00      	nop
}
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	080084a4 	.word	0x080084a4
 8006c74:	200036cc 	.word	0x200036cc
 8006c78:	08008650 	.word	0x08008650
 8006c7c:	0800867c 	.word	0x0800867c

08006c80 <find_file>:

void find_file (filetype f_type)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b0e2      	sub	sp, #392	; 0x188
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	4602      	mov	r2, r0
 8006c88:	1dfb      	adds	r3, r7, #7
 8006c8a:	701a      	strb	r2, [r3, #0]
    FRESULT fr;     /* Return value */
    DIR dj;         /* Directory object */
    FILINFO fno;    /* File information */

    uint8_t idx = 1;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
    char file_size[10];

    char file_fmt_name[5];
    char file_fmt[10];

    switch(f_type) {
 8006c92:	1dfb      	adds	r3, r7, #7
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d00e      	beq.n	8006cb8 <find_file+0x38>
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	d017      	beq.n	8006cce <find_file+0x4e>
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d120      	bne.n	8006ce4 <find_file+0x64>
    case MP3:
    	strcpy(file_fmt_name, "MP3");
 8006ca2:	f107 0314 	add.w	r3, r7, #20
 8006ca6:	4a4d      	ldr	r2, [pc, #308]	; (8006ddc <find_file+0x15c>)
 8006ca8:	601a      	str	r2, [r3, #0]
    	strcpy(file_fmt, "???*.mp3");
 8006caa:	f107 0308 	add.w	r3, r7, #8
 8006cae:	4a4c      	ldr	r2, [pc, #304]	; (8006de0 <find_file+0x160>)
 8006cb0:	ca07      	ldmia	r2, {r0, r1, r2}
 8006cb2:	c303      	stmia	r3!, {r0, r1}
 8006cb4:	701a      	strb	r2, [r3, #0]
    	break;
 8006cb6:	e019      	b.n	8006cec <find_file+0x6c>
    case WAV:
    	strcpy(file_fmt_name, "WAV");
 8006cb8:	f107 0314 	add.w	r3, r7, #20
 8006cbc:	4a49      	ldr	r2, [pc, #292]	; (8006de4 <find_file+0x164>)
 8006cbe:	601a      	str	r2, [r3, #0]
    	strcpy(file_fmt, "???*.wav");
 8006cc0:	f107 0308 	add.w	r3, r7, #8
 8006cc4:	4a48      	ldr	r2, [pc, #288]	; (8006de8 <find_file+0x168>)
 8006cc6:	ca07      	ldmia	r2, {r0, r1, r2}
 8006cc8:	c303      	stmia	r3!, {r0, r1}
 8006cca:	701a      	strb	r2, [r3, #0]
    	break;
 8006ccc:	e00e      	b.n	8006cec <find_file+0x6c>
    case TXT:
    	strcpy(file_fmt_name, "TXT");
 8006cce:	f107 0314 	add.w	r3, r7, #20
 8006cd2:	4a46      	ldr	r2, [pc, #280]	; (8006dec <find_file+0x16c>)
 8006cd4:	601a      	str	r2, [r3, #0]
    	strcpy(file_fmt, "???*.txt");
 8006cd6:	f107 0308 	add.w	r3, r7, #8
 8006cda:	4a45      	ldr	r2, [pc, #276]	; (8006df0 <find_file+0x170>)
 8006cdc:	ca07      	ldmia	r2, {r0, r1, r2}
 8006cde:	c303      	stmia	r3!, {r0, r1}
 8006ce0:	701a      	strb	r2, [r3, #0]
    	break;
 8006ce2:	e003      	b.n	8006cec <find_file+0x6c>
    default:
    	transmit_uart_SD("FAIL - Invalid file type, find_file().");
 8006ce4:	4843      	ldr	r0, [pc, #268]	; (8006df4 <find_file+0x174>)
 8006ce6:	f7ff ff61 	bl	8006bac <transmit_uart_SD>
 8006cea:	e073      	b.n	8006dd4 <find_file+0x154>
    	return;
    }

    transmit_uart_SD("\r\n");
 8006cec:	4842      	ldr	r0, [pc, #264]	; (8006df8 <find_file+0x178>)
 8006cee:	f7ff ff5d 	bl	8006bac <transmit_uart_SD>
    transmit_uart_SD(file_fmt_name);
 8006cf2:	f107 0314 	add.w	r3, r7, #20
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7ff ff58 	bl	8006bac <transmit_uart_SD>
    transmit_uart_SD(" Files Found:\n\r");
 8006cfc:	483f      	ldr	r0, [pc, #252]	; (8006dfc <find_file+0x17c>)
 8006cfe:	f7ff ff55 	bl	8006bac <transmit_uart_SD>
    transmit_uart_SD("----------------\n\r");
 8006d02:	483f      	ldr	r0, [pc, #252]	; (8006e00 <find_file+0x180>)
 8006d04:	f7ff ff52 	bl	8006bac <transmit_uart_SD>
    //fr = f_findfirst(&dj, &fno, "", "dsc*.mp3");  /* Start to search for photo files */
    fr = f_findfirst(&dj, &fno, "", file_fmt);
 8006d08:	f107 0308 	add.w	r3, r7, #8
 8006d0c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8006d10:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8006d14:	4a3b      	ldr	r2, [pc, #236]	; (8006e04 <find_file+0x184>)
 8006d16:	f7fe fea9 	bl	8005a6c <f_findfirst>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187

    while (fr == FR_OK && fno.fname[0]) {         /* Repeat while an item is found */
 8006d20:	e047      	b.n	8006db2 <find_file+0x132>

    	// Determine file number
      sprintf(index, "%u", idx);
 8006d22:	f897 2186 	ldrb.w	r2, [r7, #390]	; 0x186
 8006d26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d2a:	4937      	ldr	r1, [pc, #220]	; (8006e08 <find_file+0x188>)
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f000 ff57 	bl	8007be0 <siprintf>

      // Determine file size in Kilobytes
      file_size_kB = fno.fsize / 1000;
 8006d32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a34      	ldr	r2, [pc, #208]	; (8006e0c <find_file+0x18c>)
 8006d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d3e:	099b      	lsrs	r3, r3, #6
 8006d40:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
      sprintf(file_size, "%lu", file_size_kB);
 8006d44:	f107 031c 	add.w	r3, r7, #28
 8006d48:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8006d4c:	4930      	ldr	r1, [pc, #192]	; (8006e10 <find_file+0x190>)
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f000 ff46 	bl	8007be0 <siprintf>

      // Print out file index
      transmit_uart_SD("File ");
 8006d54:	482f      	ldr	r0, [pc, #188]	; (8006e14 <find_file+0x194>)
 8006d56:	f7ff ff29 	bl	8006bac <transmit_uart_SD>
    	transmit_uart_SD(index);
 8006d5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7ff ff24 	bl	8006bac <transmit_uart_SD>
    	transmit_uart_SD(" - ");
 8006d64:	482c      	ldr	r0, [pc, #176]	; (8006e18 <find_file+0x198>)
 8006d66:	f7ff ff21 	bl	8006bac <transmit_uart_SD>

    	// Print out file name
    	transmit_uart_SD("Name: ");
 8006d6a:	482c      	ldr	r0, [pc, #176]	; (8006e1c <find_file+0x19c>)
 8006d6c:	f7ff ff1e 	bl	8006bac <transmit_uart_SD>
    	transmit_uart_SD(fno.fname);							/* Print the object name */
 8006d70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006d74:	3316      	adds	r3, #22
 8006d76:	4618      	mov	r0, r3
 8006d78:	f7ff ff18 	bl	8006bac <transmit_uart_SD>

    	// Print out file size
    	transmit_uart_SD(" | Size: ");
 8006d7c:	4828      	ldr	r0, [pc, #160]	; (8006e20 <find_file+0x1a0>)
 8006d7e:	f7ff ff15 	bl	8006bac <transmit_uart_SD>
    	transmit_uart_SD(file_size);
 8006d82:	f107 031c 	add.w	r3, r7, #28
 8006d86:	4618      	mov	r0, r3
 8006d88:	f7ff ff10 	bl	8006bac <transmit_uart_SD>
    	transmit_uart_SD(" kB\r\n");
 8006d8c:	4825      	ldr	r0, [pc, #148]	; (8006e24 <find_file+0x1a4>)
 8006d8e:	f7ff ff0d 	bl	8006bac <transmit_uart_SD>

    	fr = f_findnext(&dj, &fno);               /* Search for next item */
 8006d92:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006d96:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d9a:	4611      	mov	r1, r2
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f7fe fe3d 	bl	8005a1c <f_findnext>
 8006da2:	4603      	mov	r3, r0
 8006da4:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187

    	idx++;
 8006da8:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 8006dac:	3301      	adds	r3, #1
 8006dae:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
    while (fr == FR_OK && fno.fname[0]) {         /* Repeat while an item is found */
 8006db2:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d104      	bne.n	8006dc4 <find_file+0x144>
 8006dba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006dbe:	7d9b      	ldrb	r3, [r3, #22]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d1ae      	bne.n	8006d22 <find_file+0xa2>
    }
    transmit_uart_SD("----------------\n\r");
 8006dc4:	480e      	ldr	r0, [pc, #56]	; (8006e00 <find_file+0x180>)
 8006dc6:	f7ff fef1 	bl	8006bac <transmit_uart_SD>
    f_closedir(&dj);
 8006dca:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f7fe fdc1 	bl	8005956 <f_closedir>
}
 8006dd4:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	0033504d 	.word	0x0033504d
 8006de0:	080086a0 	.word	0x080086a0
 8006de4:	00564157 	.word	0x00564157
 8006de8:	080086ac 	.word	0x080086ac
 8006dec:	00545854 	.word	0x00545854
 8006df0:	080086b8 	.word	0x080086b8
 8006df4:	080086c4 	.word	0x080086c4
 8006df8:	0800855c 	.word	0x0800855c
 8006dfc:	080086ec 	.word	0x080086ec
 8006e00:	080086fc 	.word	0x080086fc
 8006e04:	080084a4 	.word	0x080084a4
 8006e08:	08008710 	.word	0x08008710
 8006e0c:	10624dd3 	.word	0x10624dd3
 8006e10:	0800853c 	.word	0x0800853c
 8006e14:	08008714 	.word	0x08008714
 8006e18:	0800871c 	.word	0x0800871c
 8006e1c:	08008720 	.word	0x08008720
 8006e20:	08008728 	.word	0x08008728
 8006e24:	08008734 	.word	0x08008734

08006e28 <HAL_TIM_PWM_MspInit>:
  */

//Msp = MCU Support Package

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  // ##-2- Configure the NVIC for DMA #########################################
  // NVIC configuration for DMA transfer complete interrupt
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
  */
}
 8006e30:	bf00      	nop
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b08a      	sub	sp, #40	; 0x28
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e44:	f107 0314 	add.w	r3, r7, #20
 8006e48:	2200      	movs	r2, #0
 8006e4a:	601a      	str	r2, [r3, #0]
 8006e4c:	605a      	str	r2, [r3, #4]
 8006e4e:	609a      	str	r2, [r3, #8]
 8006e50:	60da      	str	r2, [r3, #12]
 8006e52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a19      	ldr	r2, [pc, #100]	; (8006ec0 <HAL_UART_MspInit+0x84>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d12b      	bne.n	8006eb6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006e5e:	2300      	movs	r3, #0
 8006e60:	613b      	str	r3, [r7, #16]
 8006e62:	4b18      	ldr	r3, [pc, #96]	; (8006ec4 <HAL_UART_MspInit+0x88>)
 8006e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e66:	4a17      	ldr	r2, [pc, #92]	; (8006ec4 <HAL_UART_MspInit+0x88>)
 8006e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8006e6e:	4b15      	ldr	r3, [pc, #84]	; (8006ec4 <HAL_UART_MspInit+0x88>)
 8006e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e76:	613b      	str	r3, [r7, #16]
 8006e78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	60fb      	str	r3, [r7, #12]
 8006e7e:	4b11      	ldr	r3, [pc, #68]	; (8006ec4 <HAL_UART_MspInit+0x88>)
 8006e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e82:	4a10      	ldr	r2, [pc, #64]	; (8006ec4 <HAL_UART_MspInit+0x88>)
 8006e84:	f043 0301 	orr.w	r3, r3, #1
 8006e88:	6313      	str	r3, [r2, #48]	; 0x30
 8006e8a:	4b0e      	ldr	r3, [pc, #56]	; (8006ec4 <HAL_UART_MspInit+0x88>)
 8006e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e8e:	f003 0301 	and.w	r3, r3, #1
 8006e92:	60fb      	str	r3, [r7, #12]
 8006e94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8006e96:	230c      	movs	r3, #12
 8006e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e9a:	2302      	movs	r3, #2
 8006e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006ea6:	2307      	movs	r3, #7
 8006ea8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006eaa:	f107 0314 	add.w	r3, r7, #20
 8006eae:	4619      	mov	r1, r3
 8006eb0:	4805      	ldr	r0, [pc, #20]	; (8006ec8 <HAL_UART_MspInit+0x8c>)
 8006eb2:	f7f9 ff2d 	bl	8000d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006eb6:	bf00      	nop
 8006eb8:	3728      	adds	r7, #40	; 0x28
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	40004400 	.word	0x40004400
 8006ec4:	40023800 	.word	0x40023800
 8006ec8:	40020000 	.word	0x40020000

08006ecc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b08a      	sub	sp, #40	; 0x28
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ed4:	f107 0314 	add.w	r3, r7, #20
 8006ed8:	2200      	movs	r2, #0
 8006eda:	601a      	str	r2, [r3, #0]
 8006edc:	605a      	str	r2, [r3, #4]
 8006ede:	609a      	str	r2, [r3, #8]
 8006ee0:	60da      	str	r2, [r3, #12]
 8006ee2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a28      	ldr	r2, [pc, #160]	; (8006f8c <HAL_SPI_MspInit+0xc0>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d14a      	bne.n	8006f84 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006eee:	2300      	movs	r3, #0
 8006ef0:	613b      	str	r3, [r7, #16]
 8006ef2:	4b27      	ldr	r3, [pc, #156]	; (8006f90 <HAL_SPI_MspInit+0xc4>)
 8006ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef6:	4a26      	ldr	r2, [pc, #152]	; (8006f90 <HAL_SPI_MspInit+0xc4>)
 8006ef8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006efc:	6413      	str	r3, [r2, #64]	; 0x40
 8006efe:	4b24      	ldr	r3, [pc, #144]	; (8006f90 <HAL_SPI_MspInit+0xc4>)
 8006f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f06:	613b      	str	r3, [r7, #16]
 8006f08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	60fb      	str	r3, [r7, #12]
 8006f0e:	4b20      	ldr	r3, [pc, #128]	; (8006f90 <HAL_SPI_MspInit+0xc4>)
 8006f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f12:	4a1f      	ldr	r2, [pc, #124]	; (8006f90 <HAL_SPI_MspInit+0xc4>)
 8006f14:	f043 0304 	orr.w	r3, r3, #4
 8006f18:	6313      	str	r3, [r2, #48]	; 0x30
 8006f1a:	4b1d      	ldr	r3, [pc, #116]	; (8006f90 <HAL_SPI_MspInit+0xc4>)
 8006f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f1e:	f003 0304 	and.w	r3, r3, #4
 8006f22:	60fb      	str	r3, [r7, #12]
 8006f24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f26:	2300      	movs	r3, #0
 8006f28:	60bb      	str	r3, [r7, #8]
 8006f2a:	4b19      	ldr	r3, [pc, #100]	; (8006f90 <HAL_SPI_MspInit+0xc4>)
 8006f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f2e:	4a18      	ldr	r2, [pc, #96]	; (8006f90 <HAL_SPI_MspInit+0xc4>)
 8006f30:	f043 0302 	orr.w	r3, r3, #2
 8006f34:	6313      	str	r3, [r2, #48]	; 0x30
 8006f36:	4b16      	ldr	r3, [pc, #88]	; (8006f90 <HAL_SPI_MspInit+0xc4>)
 8006f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f3a:	f003 0302 	and.w	r3, r3, #2
 8006f3e:	60bb      	str	r3, [r7, #8]
 8006f40:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO  --> DO
    PC3     ------> SPI2_MOSI  --> DI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006f42:	230c      	movs	r3, #12
 8006f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f46:	2302      	movs	r3, #2
 8006f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f4e:	2303      	movs	r3, #3
 8006f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006f52:	2305      	movs	r3, #5
 8006f54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006f56:	f107 0314 	add.w	r3, r7, #20
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	480d      	ldr	r0, [pc, #52]	; (8006f94 <HAL_SPI_MspInit+0xc8>)
 8006f5e:	f7f9 fed7 	bl	8000d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006f62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f68:	2302      	movs	r3, #2
 8006f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f70:	2303      	movs	r3, #3
 8006f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006f74:	2305      	movs	r3, #5
 8006f76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f78:	f107 0314 	add.w	r3, r7, #20
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	4806      	ldr	r0, [pc, #24]	; (8006f98 <HAL_SPI_MspInit+0xcc>)
 8006f80:	f7f9 fec6 	bl	8000d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006f84:	bf00      	nop
 8006f86:	3728      	adds	r7, #40	; 0x28
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	40003800 	.word	0x40003800
 8006f90:	40023800 	.word	0x40023800
 8006f94:	40020800 	.word	0x40020800
 8006f98:	40020400 	.word	0x40020400

08006f9c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	af00      	add	r7, sp, #0
}
 8006fa0:	bf00      	nop
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr

08006faa <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8006faa:	b480      	push	{r7}
 8006fac:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8006fae:	e7fe      	b.n	8006fae <HardFault_Handler+0x4>

08006fb0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8006fb4:	e7fe      	b.n	8006fb4 <MemManage_Handler+0x4>

08006fb6 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8006fb6:	b480      	push	{r7}
 8006fb8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8006fba:	e7fe      	b.n	8006fba <BusFault_Handler+0x4>

08006fbc <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8006fc0:	e7fe      	b.n	8006fc0 <UsageFault_Handler+0x4>

08006fc2 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8006fc2:	b480      	push	{r7}
 8006fc4:	af00      	add	r7, sp, #0
}
 8006fc6:	bf00      	nop
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	af00      	add	r7, sp, #0
}
 8006fd4:	bf00      	nop
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr

08006fde <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8006fde:	b480      	push	{r7}
 8006fe0:	af00      	add	r7, sp, #0
}
 8006fe2:	bf00      	nop
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	af00      	add	r7, sp, #0
	/* USER CODE 1 */
	// For SPI microSD
	if(Timer1 > 0)
 8006ff0:	4b0c      	ldr	r3, [pc, #48]	; (8007024 <SysTick_Handler+0x38>)
 8006ff2:	881b      	ldrh	r3, [r3, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d005      	beq.n	8007004 <SysTick_Handler+0x18>
		Timer1--;
 8006ff8:	4b0a      	ldr	r3, [pc, #40]	; (8007024 <SysTick_Handler+0x38>)
 8006ffa:	881b      	ldrh	r3, [r3, #0]
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	4b08      	ldr	r3, [pc, #32]	; (8007024 <SysTick_Handler+0x38>)
 8007002:	801a      	strh	r2, [r3, #0]

	if(Timer2 > 0)
 8007004:	4b08      	ldr	r3, [pc, #32]	; (8007028 <SysTick_Handler+0x3c>)
 8007006:	881b      	ldrh	r3, [r3, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d005      	beq.n	8007018 <SysTick_Handler+0x2c>
		Timer2--;
 800700c:	4b06      	ldr	r3, [pc, #24]	; (8007028 <SysTick_Handler+0x3c>)
 800700e:	881b      	ldrh	r3, [r3, #0]
 8007010:	3b01      	subs	r3, #1
 8007012:	b29a      	uxth	r2, r3
 8007014:	4b04      	ldr	r3, [pc, #16]	; (8007028 <SysTick_Handler+0x3c>)
 8007016:	801a      	strh	r2, [r3, #0]

	/* USER CODE 1 END */
  HAL_IncTick();
 8007018:	f7f9 fb14 	bl	8000644 <HAL_IncTick>

  /* USER CODE 2 */
  HAL_SYSTICK_IRQHandler();
 800701c:	f7f9 fc65 	bl	80008ea <HAL_SYSTICK_IRQHandler>
  /* USER CODE 2 END */
}
 8007020:	bf00      	nop
 8007022:	bd80      	pop	{r7, pc}
 8007024:	2000235a 	.word	0x2000235a
 8007028:	20002358 	.word	0x20002358

0800702c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007034:	4b11      	ldr	r3, [pc, #68]	; (800707c <_sbrk+0x50>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d102      	bne.n	8007042 <_sbrk+0x16>
		heap_end = &end;
 800703c:	4b0f      	ldr	r3, [pc, #60]	; (800707c <_sbrk+0x50>)
 800703e:	4a10      	ldr	r2, [pc, #64]	; (8007080 <_sbrk+0x54>)
 8007040:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007042:	4b0e      	ldr	r3, [pc, #56]	; (800707c <_sbrk+0x50>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007048:	4b0c      	ldr	r3, [pc, #48]	; (800707c <_sbrk+0x50>)
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4413      	add	r3, r2
 8007050:	466a      	mov	r2, sp
 8007052:	4293      	cmp	r3, r2
 8007054:	d907      	bls.n	8007066 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007056:	f000 fd91 	bl	8007b7c <__errno>
 800705a:	4602      	mov	r2, r0
 800705c:	230c      	movs	r3, #12
 800705e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007060:	f04f 33ff 	mov.w	r3, #4294967295
 8007064:	e006      	b.n	8007074 <_sbrk+0x48>
	}

	heap_end += incr;
 8007066:	4b05      	ldr	r3, [pc, #20]	; (800707c <_sbrk+0x50>)
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4413      	add	r3, r2
 800706e:	4a03      	ldr	r2, [pc, #12]	; (800707c <_sbrk+0x50>)
 8007070:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007072:	68fb      	ldr	r3, [r7, #12]
}
 8007074:	4618      	mov	r0, r3
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	200002d8 	.word	0x200002d8
 8007080:	20004708 	.word	0x20004708

08007084 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007084:	b480      	push	{r7}
 8007086:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007088:	4b16      	ldr	r3, [pc, #88]	; (80070e4 <SystemInit+0x60>)
 800708a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800708e:	4a15      	ldr	r2, [pc, #84]	; (80070e4 <SystemInit+0x60>)
 8007090:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007094:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007098:	4b13      	ldr	r3, [pc, #76]	; (80070e8 <SystemInit+0x64>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a12      	ldr	r2, [pc, #72]	; (80070e8 <SystemInit+0x64>)
 800709e:	f043 0301 	orr.w	r3, r3, #1
 80070a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80070a4:	4b10      	ldr	r3, [pc, #64]	; (80070e8 <SystemInit+0x64>)
 80070a6:	2200      	movs	r2, #0
 80070a8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80070aa:	4b0f      	ldr	r3, [pc, #60]	; (80070e8 <SystemInit+0x64>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a0e      	ldr	r2, [pc, #56]	; (80070e8 <SystemInit+0x64>)
 80070b0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80070b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070b8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80070ba:	4b0b      	ldr	r3, [pc, #44]	; (80070e8 <SystemInit+0x64>)
 80070bc:	4a0b      	ldr	r2, [pc, #44]	; (80070ec <SystemInit+0x68>)
 80070be:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80070c0:	4b09      	ldr	r3, [pc, #36]	; (80070e8 <SystemInit+0x64>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a08      	ldr	r2, [pc, #32]	; (80070e8 <SystemInit+0x64>)
 80070c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80070cc:	4b06      	ldr	r3, [pc, #24]	; (80070e8 <SystemInit+0x64>)
 80070ce:	2200      	movs	r2, #0
 80070d0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80070d2:	4b04      	ldr	r3, [pc, #16]	; (80070e4 <SystemInit+0x60>)
 80070d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80070d8:	609a      	str	r2, [r3, #8]
#endif
}
 80070da:	bf00      	nop
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr
 80070e4:	e000ed00 	.word	0xe000ed00
 80070e8:	40023800 	.word	0x40023800
 80070ec:	24003010 	.word	0x24003010

080070f0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	4603      	mov	r3, r0
 80070f8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 80070fa:	79fb      	ldrb	r3, [r7, #7]
 80070fc:	4618      	mov	r0, r3
 80070fe:	f7fe ffe3 	bl	80060c8 <SD_disk_initialize>
 8007102:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007104:	4618      	mov	r0, r3
 8007106:	3708      	adds	r7, #8
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	4603      	mov	r3, r0
 8007114:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8007116:	79fb      	ldrb	r3, [r7, #7]
 8007118:	4618      	mov	r0, r3
 800711a:	f7ff f8bb 	bl	8006294 <SD_disk_status>
 800711e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007120:	4618      	mov	r0, r3
 8007122:	3708      	adds	r7, #8
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	60b9      	str	r1, [r7, #8]
 8007130:	607a      	str	r2, [r7, #4]
 8007132:	603b      	str	r3, [r7, #0]
 8007134:	4603      	mov	r3, r0
 8007136:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8007138:	7bf8      	ldrb	r0, [r7, #15]
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	68b9      	ldr	r1, [r7, #8]
 8007140:	f7ff f8be 	bl	80062c0 <SD_disk_read>
 8007144:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007146:	4618      	mov	r0, r3
 8007148:	3710      	adds	r7, #16
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}

0800714e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 800714e:	b580      	push	{r7, lr}
 8007150:	b084      	sub	sp, #16
 8007152:	af00      	add	r7, sp, #0
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
 8007158:	603b      	str	r3, [r7, #0]
 800715a:	4603      	mov	r3, r0
 800715c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800715e:	7bf8      	ldrb	r0, [r7, #15]
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	68b9      	ldr	r1, [r7, #8]
 8007166:	f7ff f915 	bl	8006394 <SD_disk_write>
 800716a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800716c:	4618      	mov	r0, r3
 800716e:	3710      	adds	r7, #16
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
 800717a:	4603      	mov	r3, r0
 800717c:	603a      	str	r2, [r7, #0]
 800717e:	71fb      	strb	r3, [r7, #7]
 8007180:	460b      	mov	r3, r1
 8007182:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8007184:	79b9      	ldrb	r1, [r7, #6]
 8007186:	79fb      	ldrb	r3, [r7, #7]
 8007188:	683a      	ldr	r2, [r7, #0]
 800718a:	4618      	mov	r0, r3
 800718c:	f7ff f986 	bl	800649c <SD_disk_ioctl>
 8007190:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007192:	4618      	mov	r0, r3
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
	...

0800719c <pulse>:
	}
	return;
}

// Pulse
void pulse(void){
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
	volatile uint32_t timeout;
	for (size_t i = 0; i < LED_CFG_STRIP_CNT; i++) {
 80071a2:	2300      	movs	r3, #0
 80071a4:	607b      	str	r3, [r7, #4]
 80071a6:	e020      	b.n	80071ea <pulse+0x4e>
		set_LED_colors((i + 0) % LED_CFG_STRIP_CNT, 0x1F, 0x0, 0x1F);
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	4b13      	ldr	r3, [pc, #76]	; (80071f8 <pulse+0x5c>)
 80071ac:	fba3 1302 	umull	r1, r3, r3, r2
 80071b0:	0898      	lsrs	r0, r3, #2
 80071b2:	4603      	mov	r3, r0
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	4403      	add	r3, r0
 80071b8:	1ad0      	subs	r0, r2, r3
 80071ba:	231f      	movs	r3, #31
 80071bc:	2200      	movs	r2, #0
 80071be:	211f      	movs	r1, #31
 80071c0:	f000 f882 	bl	80072c8 <set_LED_colors>
		//set_LED_colors((i + 5) % LED_CFG_STRIP_CNT, 0, 0x1F, 0);
		//set_LED_colors((i + 6) % LED_CFG_STRIP_CNT, 0, 0x1F, 0);
		//set_LED_colors((i + 7) % LED_CFG_STRIP_CNT, 0, 0x7, 0);
		//set_LED_colors((i + 8) % LED_CFG_STRIP_CNT, 0, 0x7, 0);

		LED_update(1);
 80071c4:	2001      	movs	r0, #1
 80071c6:	f000 f9c5 	bl	8007554 <LED_update>
		LED_set_color_all(0, 0, 0);
 80071ca:	2200      	movs	r2, #0
 80071cc:	2100      	movs	r1, #0
 80071ce:	2000      	movs	r0, #0
 80071d0:	f000 f848 	bl	8007264 <LED_set_color_all>
		timeout = 0x7FFFF;
 80071d4:	4b09      	ldr	r3, [pc, #36]	; (80071fc <pulse+0x60>)
 80071d6:	603b      	str	r3, [r7, #0]
		while (--timeout) {}
 80071d8:	bf00      	nop
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	3b01      	subs	r3, #1
 80071de:	603b      	str	r3, [r7, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d1fa      	bne.n	80071da <pulse+0x3e>
	for (size_t i = 0; i < LED_CFG_STRIP_CNT; i++) {
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	3301      	adds	r3, #1
 80071e8:	607b      	str	r3, [r7, #4]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2b04      	cmp	r3, #4
 80071ee:	d9db      	bls.n	80071a8 <pulse+0xc>
	}
	return;
 80071f0:	bf00      	nop
}
 80071f2:	3708      	adds	r7, #8
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	cccccccd 	.word	0xcccccccd
 80071fc:	0007ffff 	.word	0x0007ffff

08007200 <pulse_red>:

void pulse_red(void){
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
	volatile uint32_t timeout;
	for (size_t i = 0; i < LED_CFG_STRIP_CNT; i++) {
 8007206:	2300      	movs	r3, #0
 8007208:	607b      	str	r3, [r7, #4]
 800720a:	e020      	b.n	800724e <pulse_red+0x4e>
		set_LED_colors((i + 0) % LED_CFG_STRIP_CNT, 0x1F, 0x0, 0x0);
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	4b13      	ldr	r3, [pc, #76]	; (800725c <pulse_red+0x5c>)
 8007210:	fba3 1302 	umull	r1, r3, r3, r2
 8007214:	0898      	lsrs	r0, r3, #2
 8007216:	4603      	mov	r3, r0
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	4403      	add	r3, r0
 800721c:	1ad0      	subs	r0, r2, r3
 800721e:	2300      	movs	r3, #0
 8007220:	2200      	movs	r2, #0
 8007222:	211f      	movs	r1, #31
 8007224:	f000 f850 	bl	80072c8 <set_LED_colors>
		//set_LED_colors((i + 5) % LED_CFG_STRIP_CNT, 0, 0x1F, 0);
		//set_LED_colors((i + 6) % LED_CFG_STRIP_CNT, 0, 0x1F, 0);
		//set_LED_colors((i + 7) % LED_CFG_STRIP_CNT, 0, 0x7, 0);
		//set_LED_colors((i + 8) % LED_CFG_STRIP_CNT, 0, 0x7, 0);

		LED_update(1);
 8007228:	2001      	movs	r0, #1
 800722a:	f000 f993 	bl	8007554 <LED_update>
		LED_set_color_all(0, 0, 0);
 800722e:	2200      	movs	r2, #0
 8007230:	2100      	movs	r1, #0
 8007232:	2000      	movs	r0, #0
 8007234:	f000 f816 	bl	8007264 <LED_set_color_all>
		timeout = 0x7FFFF;
 8007238:	4b09      	ldr	r3, [pc, #36]	; (8007260 <pulse_red+0x60>)
 800723a:	603b      	str	r3, [r7, #0]
		while (--timeout) {}
 800723c:	bf00      	nop
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	3b01      	subs	r3, #1
 8007242:	603b      	str	r3, [r7, #0]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d1fa      	bne.n	800723e <pulse_red+0x3e>
	for (size_t i = 0; i < LED_CFG_STRIP_CNT; i++) {
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	3301      	adds	r3, #1
 800724c:	607b      	str	r3, [r7, #4]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2b04      	cmp	r3, #4
 8007252:	d9db      	bls.n	800720c <pulse_red+0xc>
	}
	return;
 8007254:	bf00      	nop
}
 8007256:	3708      	adds	r7, #8
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}
 800725c:	cccccccd 	.word	0xcccccccd
 8007260:	0007ffff 	.word	0x0007ffff

08007264 <LED_set_color_all>:
	}
	return;
}


uint8_t LED_set_color_all(uint8_t red, uint8_t green, uint8_t blue){
 8007264:	b480      	push	{r7}
 8007266:	b085      	sub	sp, #20
 8007268:	af00      	add	r7, sp, #0
 800726a:	4603      	mov	r3, r0
 800726c:	71fb      	strb	r3, [r7, #7]
 800726e:	460b      	mov	r3, r1
 8007270:	71bb      	strb	r3, [r7, #6]
 8007272:	4613      	mov	r3, r2
 8007274:	717b      	strb	r3, [r7, #5]
	for (size_t led_idx = 0; led_idx < LED_CFG_STRIP_CNT; led_idx++){
 8007276:	2300      	movs	r3, #0
 8007278:	60fb      	str	r3, [r7, #12]
 800727a:	e019      	b.n	80072b0 <LED_set_color_all+0x4c>
		LED_colors[led_idx * LED_CFG_BYTES_PER_LED + 0] = green;
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	4613      	mov	r3, r2
 8007280:	005b      	lsls	r3, r3, #1
 8007282:	4413      	add	r3, r2
 8007284:	490f      	ldr	r1, [pc, #60]	; (80072c4 <LED_set_color_all+0x60>)
 8007286:	79ba      	ldrb	r2, [r7, #6]
 8007288:	54ca      	strb	r2, [r1, r3]
		LED_colors[led_idx * LED_CFG_BYTES_PER_LED + 1] = red;
 800728a:	68fa      	ldr	r2, [r7, #12]
 800728c:	4613      	mov	r3, r2
 800728e:	005b      	lsls	r3, r3, #1
 8007290:	4413      	add	r3, r2
 8007292:	3301      	adds	r3, #1
 8007294:	490b      	ldr	r1, [pc, #44]	; (80072c4 <LED_set_color_all+0x60>)
 8007296:	79fa      	ldrb	r2, [r7, #7]
 8007298:	54ca      	strb	r2, [r1, r3]
		LED_colors[led_idx * LED_CFG_BYTES_PER_LED + 2] = blue;
 800729a:	68fa      	ldr	r2, [r7, #12]
 800729c:	4613      	mov	r3, r2
 800729e:	005b      	lsls	r3, r3, #1
 80072a0:	4413      	add	r3, r2
 80072a2:	3302      	adds	r3, #2
 80072a4:	4907      	ldr	r1, [pc, #28]	; (80072c4 <LED_set_color_all+0x60>)
 80072a6:	797a      	ldrb	r2, [r7, #5]
 80072a8:	54ca      	strb	r2, [r1, r3]
	for (size_t led_idx = 0; led_idx < LED_CFG_STRIP_CNT; led_idx++){
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	3301      	adds	r3, #1
 80072ae:	60fb      	str	r3, [r7, #12]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2b04      	cmp	r3, #4
 80072b4:	d9e2      	bls.n	800727c <LED_set_color_all+0x18>
	}
	return 1;
 80072b6:	2301      	movs	r3, #1
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3714      	adds	r7, #20
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr
 80072c4:	200024c4 	.word	0x200024c4

080072c8 <set_LED_colors>:

// Set R,G,B values for a specific LED
// index: LED index in array, starting from '0'
// return 1 if successful, else 0 for fail
uint8_t set_LED_colors(size_t led_idx, uint8_t red, uint8_t green, uint8_t blue){
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	4608      	mov	r0, r1
 80072d2:	4611      	mov	r1, r2
 80072d4:	461a      	mov	r2, r3
 80072d6:	4603      	mov	r3, r0
 80072d8:	70fb      	strb	r3, [r7, #3]
 80072da:	460b      	mov	r3, r1
 80072dc:	70bb      	strb	r3, [r7, #2]
 80072de:	4613      	mov	r3, r2
 80072e0:	707b      	strb	r3, [r7, #1]
	if (led_idx < LED_CFG_STRIP_CNT){
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2b04      	cmp	r3, #4
 80072e6:	d818      	bhi.n	800731a <set_LED_colors+0x52>
		LED_colors[led_idx * LED_CFG_BYTES_PER_LED + 0] = green;
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	4613      	mov	r3, r2
 80072ec:	005b      	lsls	r3, r3, #1
 80072ee:	4413      	add	r3, r2
 80072f0:	490d      	ldr	r1, [pc, #52]	; (8007328 <set_LED_colors+0x60>)
 80072f2:	78ba      	ldrb	r2, [r7, #2]
 80072f4:	54ca      	strb	r2, [r1, r3]
		LED_colors[led_idx * LED_CFG_BYTES_PER_LED + 1] = red;
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	4613      	mov	r3, r2
 80072fa:	005b      	lsls	r3, r3, #1
 80072fc:	4413      	add	r3, r2
 80072fe:	3301      	adds	r3, #1
 8007300:	4909      	ldr	r1, [pc, #36]	; (8007328 <set_LED_colors+0x60>)
 8007302:	78fa      	ldrb	r2, [r7, #3]
 8007304:	54ca      	strb	r2, [r1, r3]
		LED_colors[led_idx * LED_CFG_BYTES_PER_LED + 2] = blue;
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	4613      	mov	r3, r2
 800730a:	005b      	lsls	r3, r3, #1
 800730c:	4413      	add	r3, r2
 800730e:	3302      	adds	r3, #2
 8007310:	4905      	ldr	r1, [pc, #20]	; (8007328 <set_LED_colors+0x60>)
 8007312:	787a      	ldrb	r2, [r7, #1]
 8007314:	54ca      	strb	r2, [r1, r3]
		return 1;
 8007316:	2301      	movs	r3, #1
 8007318:	e000      	b.n	800731c <set_LED_colors+0x54>
	}
	return 0;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	370c      	adds	r7, #12
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr
 8007328:	200024c4 	.word	0x200024c4

0800732c <write_PWM_data>:

// Iterate through each byte of LED_colors[] and determine if bit in LED_array[] is a HIGH_BIT or LOW_BIT
uint8_t write_PWM_data(size_t led_idx, uint32_t* LED_array){
 800732c:	b480      	push	{r7}
 800732e:	b085      	sub	sp, #20
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]

	if (led_idx < LED_CFG_STRIP_CNT){
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2b04      	cmp	r3, #4
 800733a:	d859      	bhi.n	80073f0 <write_PWM_data+0xc4>

		// Retrieve color hex values for RGB
		uint8_t green_hex_val = LED_colors[LED_CFG_BYTES_PER_LED * led_idx + 0];
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	4613      	mov	r3, r2
 8007340:	005b      	lsls	r3, r3, #1
 8007342:	4413      	add	r3, r2
 8007344:	4a2e      	ldr	r2, [pc, #184]	; (8007400 <write_PWM_data+0xd4>)
 8007346:	5cd3      	ldrb	r3, [r2, r3]
 8007348:	72fb      	strb	r3, [r7, #11]
		uint8_t red_hex_val = LED_colors[LED_CFG_BYTES_PER_LED * led_idx + 1];
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	4613      	mov	r3, r2
 800734e:	005b      	lsls	r3, r3, #1
 8007350:	4413      	add	r3, r2
 8007352:	3301      	adds	r3, #1
 8007354:	4a2a      	ldr	r2, [pc, #168]	; (8007400 <write_PWM_data+0xd4>)
 8007356:	5cd3      	ldrb	r3, [r2, r3]
 8007358:	72bb      	strb	r3, [r7, #10]
		uint8_t blue_hex_val = LED_colors[LED_CFG_BYTES_PER_LED * led_idx + 2];
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	4613      	mov	r3, r2
 800735e:	005b      	lsls	r3, r3, #1
 8007360:	4413      	add	r3, r2
 8007362:	3302      	adds	r3, #2
 8007364:	4a26      	ldr	r2, [pc, #152]	; (8007400 <write_PWM_data+0xd4>)
 8007366:	5cd3      	ldrb	r3, [r2, r3]
 8007368:	727b      	strb	r3, [r7, #9]

		// Set each 24 bits in LED_array based on hex value. Ex: 0x1F = 8'b00011111, therefore LED_array[0] = LOW_BIT
		for (size_t i = 0; i < NUM_BITS_PER_COLOR; i++){
 800736a:	2300      	movs	r3, #0
 800736c:	60fb      	str	r3, [r7, #12]
 800736e:	e03a      	b.n	80073e6 <write_PWM_data+0xba>
			LED_array[i] = 			(green_hex_val & (1 << (7 - i))) ? HIGH_BIT : LOW_BIT;		// Set green color
 8007370:	7afa      	ldrb	r2, [r7, #11]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f1c3 0307 	rsb	r3, r3, #7
 8007378:	fa42 f303 	asr.w	r3, r2, r3
 800737c:	f003 0301 	and.w	r3, r3, #1
 8007380:	2b00      	cmp	r3, #0
 8007382:	d001      	beq.n	8007388 <write_PWM_data+0x5c>
 8007384:	2244      	movs	r2, #68	; 0x44
 8007386:	e000      	b.n	800738a <write_PWM_data+0x5e>
 8007388:	2222      	movs	r2, #34	; 0x22
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	6839      	ldr	r1, [r7, #0]
 8007390:	440b      	add	r3, r1
 8007392:	601a      	str	r2, [r3, #0]
			LED_array[i + 8] = 	(red_hex_val & (1 << (7 - i))) ? HIGH_BIT : LOW_BIT;			// Set blue color
 8007394:	7aba      	ldrb	r2, [r7, #10]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f1c3 0307 	rsb	r3, r3, #7
 800739c:	fa42 f303 	asr.w	r3, r2, r3
 80073a0:	f003 0301 	and.w	r3, r3, #1
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d001      	beq.n	80073ac <write_PWM_data+0x80>
 80073a8:	2244      	movs	r2, #68	; 0x44
 80073aa:	e000      	b.n	80073ae <write_PWM_data+0x82>
 80073ac:	2222      	movs	r2, #34	; 0x22
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	3308      	adds	r3, #8
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	6839      	ldr	r1, [r7, #0]
 80073b6:	440b      	add	r3, r1
 80073b8:	601a      	str	r2, [r3, #0]
			LED_array[i + 16] = (blue_hex_val & (1 << (7 - i))) ? HIGH_BIT : LOW_BIT;		// Set red color
 80073ba:	7a7a      	ldrb	r2, [r7, #9]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f1c3 0307 	rsb	r3, r3, #7
 80073c2:	fa42 f303 	asr.w	r3, r2, r3
 80073c6:	f003 0301 	and.w	r3, r3, #1
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d001      	beq.n	80073d2 <write_PWM_data+0xa6>
 80073ce:	2244      	movs	r2, #68	; 0x44
 80073d0:	e000      	b.n	80073d4 <write_PWM_data+0xa8>
 80073d2:	2222      	movs	r2, #34	; 0x22
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	3310      	adds	r3, #16
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	6839      	ldr	r1, [r7, #0]
 80073dc:	440b      	add	r3, r1
 80073de:	601a      	str	r2, [r3, #0]
		for (size_t i = 0; i < NUM_BITS_PER_COLOR; i++){
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	3301      	adds	r3, #1
 80073e4:	60fb      	str	r3, [r7, #12]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2b07      	cmp	r3, #7
 80073ea:	d9c1      	bls.n	8007370 <write_PWM_data+0x44>
		}

		return 1;
 80073ec:	2301      	movs	r3, #1
 80073ee:	e000      	b.n	80073f2 <write_PWM_data+0xc6>
	}
	return 0;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3714      	adds	r7, #20
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	200024c4 	.word	0x200024c4

08007404 <LED_reset_pulse>:

uint8_t LED_reset_pulse(uint8_t rst){
 8007404:	b580      	push	{r7, lr}
 8007406:	b082      	sub	sp, #8
 8007408:	af00      	add	r7, sp, #0
 800740a:	4603      	mov	r3, r0
 800740c:	71fb      	strb	r3, [r7, #7]
	rst_flag = rst;		// Set reset flag
 800740e:	4a3f      	ldr	r2, [pc, #252]	; (800750c <LED_reset_pulse+0x108>)
 8007410:	79fb      	ldrb	r3, [r7, #7]
 8007412:	7013      	strb	r3, [r2, #0]

  hdma_tim2_ch1.Init.Mode = DMA_NORMAL;							// Modify DMA config to Normal Mode
 8007414:	4b3e      	ldr	r3, [pc, #248]	; (8007510 <LED_reset_pulse+0x10c>)
 8007416:	2200      	movs	r2, #0
 8007418:	61da      	str	r2, [r3, #28]
  memset(tmp_led_data, 0, sizeof(tmp_led_data));	  // Set all data for tmp_led_data to 0
 800741a:	22c0      	movs	r2, #192	; 0xc0
 800741c:	2100      	movs	r1, #0
 800741e:	483d      	ldr	r0, [pc, #244]	; (8007514 <LED_reset_pulse+0x110>)
 8007420:	f000 fbd6 	bl	8007bd0 <memset>

  // Initialize TIM2 DMA handle
  if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK) {
 8007424:	483a      	ldr	r0, [pc, #232]	; (8007510 <LED_reset_pulse+0x10c>)
 8007426:	f7f9 fa6d 	bl	8000904 <HAL_DMA_Init>
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d002      	beq.n	8007436 <LED_reset_pulse+0x32>
    Error_Handler(DMA_ERROR);
 8007430:	2006      	movs	r0, #6
 8007432:	f7ff fae9 	bl	8006a08 <Error_Handler>
  }

  // Clear Half Transfer and Transfer Complete flags for DMA1 Stream5
  __HAL_DMA_CLEAR_FLAG(&hdma_tim2_ch1, DMA_FLAG_HTIF1_5);
 8007436:	4b36      	ldr	r3, [pc, #216]	; (8007510 <LED_reset_pulse+0x10c>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	461a      	mov	r2, r3
 800743c:	4b36      	ldr	r3, [pc, #216]	; (8007518 <LED_reset_pulse+0x114>)
 800743e:	429a      	cmp	r2, r3
 8007440:	d904      	bls.n	800744c <LED_reset_pulse+0x48>
 8007442:	4b36      	ldr	r3, [pc, #216]	; (800751c <LED_reset_pulse+0x118>)
 8007444:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007448:	60da      	str	r2, [r3, #12]
 800744a:	e019      	b.n	8007480 <LED_reset_pulse+0x7c>
 800744c:	4b30      	ldr	r3, [pc, #192]	; (8007510 <LED_reset_pulse+0x10c>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	461a      	mov	r2, r3
 8007452:	4b33      	ldr	r3, [pc, #204]	; (8007520 <LED_reset_pulse+0x11c>)
 8007454:	429a      	cmp	r2, r3
 8007456:	d904      	bls.n	8007462 <LED_reset_pulse+0x5e>
 8007458:	4b30      	ldr	r3, [pc, #192]	; (800751c <LED_reset_pulse+0x118>)
 800745a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800745e:	609a      	str	r2, [r3, #8]
 8007460:	e00e      	b.n	8007480 <LED_reset_pulse+0x7c>
 8007462:	4b2b      	ldr	r3, [pc, #172]	; (8007510 <LED_reset_pulse+0x10c>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	461a      	mov	r2, r3
 8007468:	4b2e      	ldr	r3, [pc, #184]	; (8007524 <LED_reset_pulse+0x120>)
 800746a:	429a      	cmp	r2, r3
 800746c:	d904      	bls.n	8007478 <LED_reset_pulse+0x74>
 800746e:	4b2e      	ldr	r3, [pc, #184]	; (8007528 <LED_reset_pulse+0x124>)
 8007470:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007474:	60da      	str	r2, [r3, #12]
 8007476:	e003      	b.n	8007480 <LED_reset_pulse+0x7c>
 8007478:	4b2b      	ldr	r3, [pc, #172]	; (8007528 <LED_reset_pulse+0x124>)
 800747a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800747e:	609a      	str	r2, [r3, #8]
  __HAL_DMA_CLEAR_FLAG(&hdma_tim2_ch1, DMA_FLAG_TCIF1_5);
 8007480:	4b23      	ldr	r3, [pc, #140]	; (8007510 <LED_reset_pulse+0x10c>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	461a      	mov	r2, r3
 8007486:	4b24      	ldr	r3, [pc, #144]	; (8007518 <LED_reset_pulse+0x114>)
 8007488:	429a      	cmp	r2, r3
 800748a:	d904      	bls.n	8007496 <LED_reset_pulse+0x92>
 800748c:	4b23      	ldr	r3, [pc, #140]	; (800751c <LED_reset_pulse+0x118>)
 800748e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007492:	60da      	str	r2, [r3, #12]
 8007494:	e019      	b.n	80074ca <LED_reset_pulse+0xc6>
 8007496:	4b1e      	ldr	r3, [pc, #120]	; (8007510 <LED_reset_pulse+0x10c>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	461a      	mov	r2, r3
 800749c:	4b20      	ldr	r3, [pc, #128]	; (8007520 <LED_reset_pulse+0x11c>)
 800749e:	429a      	cmp	r2, r3
 80074a0:	d904      	bls.n	80074ac <LED_reset_pulse+0xa8>
 80074a2:	4b1e      	ldr	r3, [pc, #120]	; (800751c <LED_reset_pulse+0x118>)
 80074a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074a8:	609a      	str	r2, [r3, #8]
 80074aa:	e00e      	b.n	80074ca <LED_reset_pulse+0xc6>
 80074ac:	4b18      	ldr	r3, [pc, #96]	; (8007510 <LED_reset_pulse+0x10c>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	461a      	mov	r2, r3
 80074b2:	4b1c      	ldr	r3, [pc, #112]	; (8007524 <LED_reset_pulse+0x120>)
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d904      	bls.n	80074c2 <LED_reset_pulse+0xbe>
 80074b8:	4b1b      	ldr	r3, [pc, #108]	; (8007528 <LED_reset_pulse+0x124>)
 80074ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074be:	60da      	str	r2, [r3, #12]
 80074c0:	e003      	b.n	80074ca <LED_reset_pulse+0xc6>
 80074c2:	4b19      	ldr	r3, [pc, #100]	; (8007528 <LED_reset_pulse+0x124>)
 80074c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074c8:	609a      	str	r2, [r3, #8]

  // Disable Half Transfer Interrupt
  __HAL_DMA_DISABLE_IT(&hdma_tim2_ch1, DMA_IT_HT);
 80074ca:	4b11      	ldr	r3, [pc, #68]	; (8007510 <LED_reset_pulse+0x10c>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	4b0f      	ldr	r3, [pc, #60]	; (8007510 <LED_reset_pulse+0x10c>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f022 0208 	bic.w	r2, r2, #8
 80074d8:	601a      	str	r2, [r3, #0]

  // Enable Complete Transfer Interrupt
  __HAL_DMA_ENABLE_IT(&hdma_tim2_ch1, DMA_IT_TC);
 80074da:	4b0d      	ldr	r3, [pc, #52]	; (8007510 <LED_reset_pulse+0x10c>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	4b0b      	ldr	r3, [pc, #44]	; (8007510 <LED_reset_pulse+0x10c>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f042 0210 	orr.w	r2, r2, #16
 80074e8:	601a      	str	r2, [r3, #0]

  // Start Reset Pulse. Contains 40 low pulses: 40 x 800kHz = ~50us
  if (HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*)tmp_led_data, 2 * LED_CFG_RAW_BITS_PER_LED) != HAL_OK){
 80074ea:	2330      	movs	r3, #48	; 0x30
 80074ec:	4a09      	ldr	r2, [pc, #36]	; (8007514 <LED_reset_pulse+0x110>)
 80074ee:	2100      	movs	r1, #0
 80074f0:	480e      	ldr	r0, [pc, #56]	; (800752c <LED_reset_pulse+0x128>)
 80074f2:	f7fa feaf 	bl	8002254 <HAL_TIM_PWM_Start_DMA>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d002      	beq.n	8007502 <LED_reset_pulse+0xfe>
    Error_Handler(EN_PWM_ERROR);
 80074fc:	2002      	movs	r0, #2
 80074fe:	f7ff fa83 	bl	8006a08 <Error_Handler>
  }
  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
  return 1;
 8007502:	2301      	movs	r3, #1
}
 8007504:	4618      	mov	r0, r3
 8007506:	3708      	adds	r7, #8
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}
 800750c:	2000235c 	.word	0x2000235c
 8007510:	20002360 	.word	0x20002360
 8007514:	200024d4 	.word	0x200024d4
 8007518:	40026458 	.word	0x40026458
 800751c:	40026400 	.word	0x40026400
 8007520:	400260b8 	.word	0x400260b8
 8007524:	40026058 	.word	0x40026058
 8007528:	40026000 	.word	0x40026000
 800752c:	20002414 	.word	0x20002414

08007530 <led_is_update_finished>:

// return 1 if not updating, 0 if updating process is in progress
uint8_t led_is_update_finished(void) {
 8007530:	b480      	push	{r7}
 8007532:	af00      	add	r7, sp, #0
	return !update_flag;
 8007534:	4b06      	ldr	r3, [pc, #24]	; (8007550 <led_is_update_finished+0x20>)
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	b2db      	uxtb	r3, r3
 800753a:	2b00      	cmp	r3, #0
 800753c:	bf0c      	ite	eq
 800753e:	2301      	moveq	r3, #1
 8007540:	2300      	movne	r3, #0
 8007542:	b2db      	uxtb	r3, r3
	//return !is_updating;                        /* Return updating flag status */
}
 8007544:	4618      	mov	r0, r3
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	200023c0 	.word	0x200023c0

08007554 <LED_update>:

// Block = 1 if want to wait until update process is finished
uint8_t LED_update(uint8_t block){
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	4603      	mov	r3, r0
 800755c:	71fb      	strb	r3, [r7, #7]
	if (update_flag) {
 800755e:	4b0d      	ldr	r3, [pc, #52]	; (8007594 <LED_update+0x40>)
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	b2db      	uxtb	r3, r3
 8007564:	2b00      	cmp	r3, #0
 8007566:	d001      	beq.n	800756c <LED_update+0x18>
		return 0;
 8007568:	2300      	movs	r3, #0
 800756a:	e00f      	b.n	800758c <LED_update+0x38>
	}
	update_flag = 1;		// Signify that LEDs are being updated
 800756c:	4b09      	ldr	r3, [pc, #36]	; (8007594 <LED_update+0x40>)
 800756e:	2201      	movs	r2, #1
 8007570:	701a      	strb	r2, [r3, #0]

	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
	LED_reset_pulse(RESET_AT_START);	// Reset LED scheme with 50us pulse low
 8007572:	2001      	movs	r0, #1
 8007574:	f7ff ff46 	bl	8007404 <LED_reset_pulse>

	if (block){
 8007578:	79fb      	ldrb	r3, [r7, #7]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d005      	beq.n	800758a <LED_update+0x36>
		while(!led_is_update_finished());
 800757e:	bf00      	nop
 8007580:	f7ff ffd6 	bl	8007530 <led_is_update_finished>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d0fa      	beq.n	8007580 <LED_update+0x2c>
	}

	return 1;
 800758a:	2301      	movs	r3, #1
}
 800758c:	4618      	mov	r0, r3
 800758e:	3708      	adds	r7, #8
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}
 8007594:	200023c0 	.word	0x200023c0

08007598 <led_update_sequence>:

// Update led sequence. Called on TC and HT events.
// At HT event, first 24 elements are transferred
// At TC event, second 24 elements are transferred
void led_update_sequence(uint8_t event) {
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	4603      	mov	r3, r0
 80075a0:	71fb      	strb	r3, [r7, #7]

	event = !!event;       // Toggle transfer-complete flag
 80075a2:	79fb      	ldrb	r3, [r7, #7]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	bf14      	ite	ne
 80075a8:	2301      	movne	r3, #1
 80075aa:	2300      	moveq	r3, #0
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	71fb      	strb	r3, [r7, #7]

	// Check for reset pulse at the end of the PWM stream
	if (rst_flag == RESET_AT_END){
 80075b0:	4b66      	ldr	r3, [pc, #408]	; (800774c <led_update_sequence+0x1b4>)
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d107      	bne.n	80075c8 <led_update_sequence+0x30>

		HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);	// Stop DMA
 80075b8:	2100      	movs	r1, #0
 80075ba:	4865      	ldr	r0, [pc, #404]	; (8007750 <led_update_sequence+0x1b8>)
 80075bc:	f7fa ff50 	bl	8002460 <HAL_TIM_PWM_Stop_DMA>
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);

		update_flag = NOT_UPDATING;										// No longer updating
 80075c0:	4b64      	ldr	r3, [pc, #400]	; (8007754 <led_update_sequence+0x1bc>)
 80075c2:	2200      	movs	r2, #0
 80075c4:	701a      	strb	r2, [r3, #0]
		return;
 80075c6:	e0bd      	b.n	8007744 <led_update_sequence+0x1ac>
	}

	// Check if reset pulse happened at the start of the PWM stream
	if (rst_flag == RESET_AT_START){
 80075c8:	4b60      	ldr	r3, [pc, #384]	; (800774c <led_update_sequence+0x1b4>)
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d10e      	bne.n	80075ee <led_update_sequence+0x56>
		if (!event) { return; }		// If HT event, return and wait until TC event
 80075d0:	79fb      	ldrb	r3, [r7, #7]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f000 80b5 	beq.w	8007742 <led_update_sequence+0x1aa>

		HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);	// Disable PWM generation to update LED sequence
 80075d8:	2100      	movs	r1, #0
 80075da:	485d      	ldr	r0, [pc, #372]	; (8007750 <led_update_sequence+0x1b8>)
 80075dc:	f7fa ff40 	bl	8002460 <HAL_TIM_PWM_Stop_DMA>
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);

		rst_flag = NOT_RESETTING;											// No longer resetting
 80075e0:	4b5a      	ldr	r3, [pc, #360]	; (800774c <led_update_sequence+0x1b4>)
 80075e2:	2200      	movs	r2, #0
 80075e4:	701a      	strb	r2, [r3, #0]

		current_led = 0;
 80075e6:	4b5c      	ldr	r3, [pc, #368]	; (8007758 <led_update_sequence+0x1c0>)
 80075e8:	2200      	movs	r2, #0
 80075ea:	601a      	str	r2, [r3, #0]
 80075ec:	e004      	b.n	80075f8 <led_update_sequence+0x60>
	} else {

	// Not resetting, move to next LED and process data
		current_led++;	// Move to next LED
 80075ee:	4b5a      	ldr	r3, [pc, #360]	; (8007758 <led_update_sequence+0x1c0>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	3301      	adds	r3, #1
 80075f4:	4a58      	ldr	r2, [pc, #352]	; (8007758 <led_update_sequence+0x1c0>)
 80075f6:	6013      	str	r3, [r2, #0]
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
	}

	// Prepare data for the next LED
	if (current_led < LED_CFG_STRIP_CNT){
 80075f8:	4b57      	ldr	r3, [pc, #348]	; (8007758 <led_update_sequence+0x1c0>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2b04      	cmp	r3, #4
 80075fe:	f200 8095 	bhi.w	800772c <led_update_sequence+0x194>

		// 1. Write PWM signal for first LED (current_led = 0) into first-half of DMA buffer
		// 2. Write PWM signal for second LED (current_led = 1) into second-half of DMA buffer
		// 3. Set DMA to circular, clear interrupt flags and start DMA PWM generation
		// 4. Write PWM signal for third and beyond LEDs (current_led >= 2)
		if ((current_led == 0) || !event) {
 8007602:	4b55      	ldr	r3, [pc, #340]	; (8007758 <led_update_sequence+0x1c0>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d002      	beq.n	8007610 <led_update_sequence+0x78>
 800760a:	79fb      	ldrb	r3, [r7, #7]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d106      	bne.n	800761e <led_update_sequence+0x86>
			write_PWM_data(current_led, &tmp_led_data[0]);	// Step 1
 8007610:	4b51      	ldr	r3, [pc, #324]	; (8007758 <led_update_sequence+0x1c0>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4951      	ldr	r1, [pc, #324]	; (800775c <led_update_sequence+0x1c4>)
 8007616:	4618      	mov	r0, r3
 8007618:	f7ff fe88 	bl	800732c <write_PWM_data>
 800761c:	e005      	b.n	800762a <led_update_sequence+0x92>
		} else {
			write_PWM_data(current_led, &tmp_led_data[LED_CFG_RAW_BITS_PER_LED]);	// Step 4
 800761e:	4b4e      	ldr	r3, [pc, #312]	; (8007758 <led_update_sequence+0x1c0>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	494f      	ldr	r1, [pc, #316]	; (8007760 <led_update_sequence+0x1c8>)
 8007624:	4618      	mov	r0, r3
 8007626:	f7ff fe81 	bl	800732c <write_PWM_data>
		}

		if (current_led == 0){
 800762a:	4b4b      	ldr	r3, [pc, #300]	; (8007758 <led_update_sequence+0x1c0>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	f040 8088 	bne.w	8007744 <led_update_sequence+0x1ac>

			current_led++;
 8007634:	4b48      	ldr	r3, [pc, #288]	; (8007758 <led_update_sequence+0x1c0>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	3301      	adds	r3, #1
 800763a:	4a47      	ldr	r2, [pc, #284]	; (8007758 <led_update_sequence+0x1c0>)
 800763c:	6013      	str	r3, [r2, #0]
			write_PWM_data(current_led, &tmp_led_data[LED_CFG_RAW_BITS_PER_LED]);	// Step 2
 800763e:	4b46      	ldr	r3, [pc, #280]	; (8007758 <led_update_sequence+0x1c0>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4947      	ldr	r1, [pc, #284]	; (8007760 <led_update_sequence+0x1c8>)
 8007644:	4618      	mov	r0, r3
 8007646:	f7ff fe71 	bl	800732c <write_PWM_data>

		  hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;										// Step 3
 800764a:	4b46      	ldr	r3, [pc, #280]	; (8007764 <led_update_sequence+0x1cc>)
 800764c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007650:	61da      	str	r2, [r3, #28]
		  // Initialize TIM2 DMA handle
		  if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK) {
 8007652:	4844      	ldr	r0, [pc, #272]	; (8007764 <led_update_sequence+0x1cc>)
 8007654:	f7f9 f956 	bl	8000904 <HAL_DMA_Init>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d002      	beq.n	8007664 <led_update_sequence+0xcc>
		    Error_Handler(DMA_ERROR);
 800765e:	2006      	movs	r0, #6
 8007660:	f7ff f9d2 	bl	8006a08 <Error_Handler>
		  }

		  __HAL_DMA_CLEAR_FLAG(&hdma_tim2_ch1, DMA_FLAG_HTIF1_5);
 8007664:	4b3f      	ldr	r3, [pc, #252]	; (8007764 <led_update_sequence+0x1cc>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	461a      	mov	r2, r3
 800766a:	4b3f      	ldr	r3, [pc, #252]	; (8007768 <led_update_sequence+0x1d0>)
 800766c:	429a      	cmp	r2, r3
 800766e:	d904      	bls.n	800767a <led_update_sequence+0xe2>
 8007670:	4b3e      	ldr	r3, [pc, #248]	; (800776c <led_update_sequence+0x1d4>)
 8007672:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007676:	60da      	str	r2, [r3, #12]
 8007678:	e019      	b.n	80076ae <led_update_sequence+0x116>
 800767a:	4b3a      	ldr	r3, [pc, #232]	; (8007764 <led_update_sequence+0x1cc>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	461a      	mov	r2, r3
 8007680:	4b3b      	ldr	r3, [pc, #236]	; (8007770 <led_update_sequence+0x1d8>)
 8007682:	429a      	cmp	r2, r3
 8007684:	d904      	bls.n	8007690 <led_update_sequence+0xf8>
 8007686:	4b39      	ldr	r3, [pc, #228]	; (800776c <led_update_sequence+0x1d4>)
 8007688:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800768c:	609a      	str	r2, [r3, #8]
 800768e:	e00e      	b.n	80076ae <led_update_sequence+0x116>
 8007690:	4b34      	ldr	r3, [pc, #208]	; (8007764 <led_update_sequence+0x1cc>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	461a      	mov	r2, r3
 8007696:	4b37      	ldr	r3, [pc, #220]	; (8007774 <led_update_sequence+0x1dc>)
 8007698:	429a      	cmp	r2, r3
 800769a:	d904      	bls.n	80076a6 <led_update_sequence+0x10e>
 800769c:	4b36      	ldr	r3, [pc, #216]	; (8007778 <led_update_sequence+0x1e0>)
 800769e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80076a2:	60da      	str	r2, [r3, #12]
 80076a4:	e003      	b.n	80076ae <led_update_sequence+0x116>
 80076a6:	4b34      	ldr	r3, [pc, #208]	; (8007778 <led_update_sequence+0x1e0>)
 80076a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80076ac:	609a      	str	r2, [r3, #8]
		  __HAL_DMA_CLEAR_FLAG(&hdma_tim2_ch1, DMA_FLAG_TCIF1_5);
 80076ae:	4b2d      	ldr	r3, [pc, #180]	; (8007764 <led_update_sequence+0x1cc>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	461a      	mov	r2, r3
 80076b4:	4b2c      	ldr	r3, [pc, #176]	; (8007768 <led_update_sequence+0x1d0>)
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d904      	bls.n	80076c4 <led_update_sequence+0x12c>
 80076ba:	4b2c      	ldr	r3, [pc, #176]	; (800776c <led_update_sequence+0x1d4>)
 80076bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80076c0:	60da      	str	r2, [r3, #12]
 80076c2:	e019      	b.n	80076f8 <led_update_sequence+0x160>
 80076c4:	4b27      	ldr	r3, [pc, #156]	; (8007764 <led_update_sequence+0x1cc>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	461a      	mov	r2, r3
 80076ca:	4b29      	ldr	r3, [pc, #164]	; (8007770 <led_update_sequence+0x1d8>)
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d904      	bls.n	80076da <led_update_sequence+0x142>
 80076d0:	4b26      	ldr	r3, [pc, #152]	; (800776c <led_update_sequence+0x1d4>)
 80076d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80076d6:	609a      	str	r2, [r3, #8]
 80076d8:	e00e      	b.n	80076f8 <led_update_sequence+0x160>
 80076da:	4b22      	ldr	r3, [pc, #136]	; (8007764 <led_update_sequence+0x1cc>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	461a      	mov	r2, r3
 80076e0:	4b24      	ldr	r3, [pc, #144]	; (8007774 <led_update_sequence+0x1dc>)
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d904      	bls.n	80076f0 <led_update_sequence+0x158>
 80076e6:	4b24      	ldr	r3, [pc, #144]	; (8007778 <led_update_sequence+0x1e0>)
 80076e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80076ec:	60da      	str	r2, [r3, #12]
 80076ee:	e003      	b.n	80076f8 <led_update_sequence+0x160>
 80076f0:	4b21      	ldr	r3, [pc, #132]	; (8007778 <led_update_sequence+0x1e0>)
 80076f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80076f6:	609a      	str	r2, [r3, #8]

		  __HAL_DMA_ENABLE_IT(&hdma_tim2_ch1, DMA_IT_HT);	// Enable interrupt for half-transfer event
 80076f8:	4b1a      	ldr	r3, [pc, #104]	; (8007764 <led_update_sequence+0x1cc>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	4b19      	ldr	r3, [pc, #100]	; (8007764 <led_update_sequence+0x1cc>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f042 0208 	orr.w	r2, r2, #8
 8007706:	601a      	str	r2, [r3, #0]

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8007708:	2201      	movs	r2, #1
 800770a:	2101      	movs	r1, #1
 800770c:	481b      	ldr	r0, [pc, #108]	; (800777c <led_update_sequence+0x1e4>)
 800770e:	f7f9 fc99 	bl	8001044 <HAL_GPIO_WritePin>
		  // Start PWM generation
		  if (HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*)tmp_led_data, 2 * LED_CFG_RAW_BITS_PER_LED) != HAL_OK){
 8007712:	2330      	movs	r3, #48	; 0x30
 8007714:	4a11      	ldr	r2, [pc, #68]	; (800775c <led_update_sequence+0x1c4>)
 8007716:	2100      	movs	r1, #0
 8007718:	480d      	ldr	r0, [pc, #52]	; (8007750 <led_update_sequence+0x1b8>)
 800771a:	f7fa fd9b 	bl	8002254 <HAL_TIM_PWM_Start_DMA>
 800771e:	4603      	mov	r3, r0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d00f      	beq.n	8007744 <led_update_sequence+0x1ac>
		    Error_Handler(EN_PWM_ERROR);
 8007724:	2002      	movs	r0, #2
 8007726:	f7ff f96f 	bl	8006a08 <Error_Handler>
 800772a:	e00b      	b.n	8007744 <led_update_sequence+0x1ac>
		}

	// When all LEDs have been lit up, wait for all data to be transmitted before modifying DMA
	// !TC && (LED_CFG_STRIP_CNT & 0x01): Half-Transfer event occurred and even-numbered LED
	// TC && !(LED_CFG_STRIP_CNT & 0x01): Transfer-Complete event occured and odd-numbered LED
	} else if ((!event && (LED_CFG_STRIP_CNT & 0x01)) || (event && !(LED_CFG_STRIP_CNT & 0x01))) {
 800772c:	79fb      	ldrb	r3, [r7, #7]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d108      	bne.n	8007744 <led_update_sequence+0x1ac>
		HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 8007732:	2100      	movs	r1, #0
 8007734:	4806      	ldr	r0, [pc, #24]	; (8007750 <led_update_sequence+0x1b8>)
 8007736:	f7fa fe93 	bl	8002460 <HAL_TIM_PWM_Stop_DMA>
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
		LED_reset_pulse(RESET_AT_END);
 800773a:	2002      	movs	r0, #2
 800773c:	f7ff fe62 	bl	8007404 <LED_reset_pulse>
 8007740:	e000      	b.n	8007744 <led_update_sequence+0x1ac>
		if (!event) { return; }		// If HT event, return and wait until TC event
 8007742:	bf00      	nop
	}

}
 8007744:	3708      	adds	r7, #8
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	2000235c 	.word	0x2000235c
 8007750:	20002414 	.word	0x20002414
 8007754:	200023c0 	.word	0x200023c0
 8007758:	200023f4 	.word	0x200023f4
 800775c:	200024d4 	.word	0x200024d4
 8007760:	20002534 	.word	0x20002534
 8007764:	20002360 	.word	0x20002360
 8007768:	40026458 	.word	0x40026458
 800776c:	40026400 	.word	0x40026400
 8007770:	400260b8 	.word	0x400260b8
 8007774:	40026058 	.word	0x40026058
 8007778:	40026000 	.word	0x40026000
 800777c:	40020400 	.word	0x40020400

08007780 <DMA1_Stream5_IRQHandler>:


// DMA1 Stream 5 Global Interrupt
void DMA1_Stream5_IRQHandler(void){
 8007780:	b580      	push	{r7, lr}
 8007782:	af00      	add	r7, sp, #0
	// Check for Half-Transfer (HT) event
	if (__HAL_DMA_GET_FLAG(&hdma_tim2_ch1, DMA_FLAG_HTIF1_5)){
 8007784:	4b64      	ldr	r3, [pc, #400]	; (8007918 <DMA1_Stream5_IRQHandler+0x198>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	461a      	mov	r2, r3
 800778a:	4b64      	ldr	r3, [pc, #400]	; (800791c <DMA1_Stream5_IRQHandler+0x19c>)
 800778c:	429a      	cmp	r2, r3
 800778e:	d909      	bls.n	80077a4 <DMA1_Stream5_IRQHandler+0x24>
 8007790:	4b63      	ldr	r3, [pc, #396]	; (8007920 <DMA1_Stream5_IRQHandler+0x1a0>)
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007798:	2b00      	cmp	r3, #0
 800779a:	bf14      	ite	ne
 800779c:	2301      	movne	r3, #1
 800779e:	2300      	moveq	r3, #0
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	e028      	b.n	80077f6 <DMA1_Stream5_IRQHandler+0x76>
 80077a4:	4b5c      	ldr	r3, [pc, #368]	; (8007918 <DMA1_Stream5_IRQHandler+0x198>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	461a      	mov	r2, r3
 80077aa:	4b5e      	ldr	r3, [pc, #376]	; (8007924 <DMA1_Stream5_IRQHandler+0x1a4>)
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d909      	bls.n	80077c4 <DMA1_Stream5_IRQHandler+0x44>
 80077b0:	4b5b      	ldr	r3, [pc, #364]	; (8007920 <DMA1_Stream5_IRQHandler+0x1a0>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	bf14      	ite	ne
 80077bc:	2301      	movne	r3, #1
 80077be:	2300      	moveq	r3, #0
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	e018      	b.n	80077f6 <DMA1_Stream5_IRQHandler+0x76>
 80077c4:	4b54      	ldr	r3, [pc, #336]	; (8007918 <DMA1_Stream5_IRQHandler+0x198>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	461a      	mov	r2, r3
 80077ca:	4b57      	ldr	r3, [pc, #348]	; (8007928 <DMA1_Stream5_IRQHandler+0x1a8>)
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d909      	bls.n	80077e4 <DMA1_Stream5_IRQHandler+0x64>
 80077d0:	4b56      	ldr	r3, [pc, #344]	; (800792c <DMA1_Stream5_IRQHandler+0x1ac>)
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077d8:	2b00      	cmp	r3, #0
 80077da:	bf14      	ite	ne
 80077dc:	2301      	movne	r3, #1
 80077de:	2300      	moveq	r3, #0
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	e008      	b.n	80077f6 <DMA1_Stream5_IRQHandler+0x76>
 80077e4:	4b51      	ldr	r3, [pc, #324]	; (800792c <DMA1_Stream5_IRQHandler+0x1ac>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	bf14      	ite	ne
 80077f0:	2301      	movne	r3, #1
 80077f2:	2300      	moveq	r3, #0
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d028      	beq.n	800784c <DMA1_Stream5_IRQHandler+0xcc>
	  __HAL_DMA_CLEAR_FLAG(&hdma_tim2_ch1, DMA_FLAG_HTIF1_5);
 80077fa:	4b47      	ldr	r3, [pc, #284]	; (8007918 <DMA1_Stream5_IRQHandler+0x198>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	461a      	mov	r2, r3
 8007800:	4b46      	ldr	r3, [pc, #280]	; (800791c <DMA1_Stream5_IRQHandler+0x19c>)
 8007802:	429a      	cmp	r2, r3
 8007804:	d904      	bls.n	8007810 <DMA1_Stream5_IRQHandler+0x90>
 8007806:	4b46      	ldr	r3, [pc, #280]	; (8007920 <DMA1_Stream5_IRQHandler+0x1a0>)
 8007808:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800780c:	60da      	str	r2, [r3, #12]
 800780e:	e019      	b.n	8007844 <DMA1_Stream5_IRQHandler+0xc4>
 8007810:	4b41      	ldr	r3, [pc, #260]	; (8007918 <DMA1_Stream5_IRQHandler+0x198>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	461a      	mov	r2, r3
 8007816:	4b43      	ldr	r3, [pc, #268]	; (8007924 <DMA1_Stream5_IRQHandler+0x1a4>)
 8007818:	429a      	cmp	r2, r3
 800781a:	d904      	bls.n	8007826 <DMA1_Stream5_IRQHandler+0xa6>
 800781c:	4b40      	ldr	r3, [pc, #256]	; (8007920 <DMA1_Stream5_IRQHandler+0x1a0>)
 800781e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007822:	609a      	str	r2, [r3, #8]
 8007824:	e00e      	b.n	8007844 <DMA1_Stream5_IRQHandler+0xc4>
 8007826:	4b3c      	ldr	r3, [pc, #240]	; (8007918 <DMA1_Stream5_IRQHandler+0x198>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	461a      	mov	r2, r3
 800782c:	4b3e      	ldr	r3, [pc, #248]	; (8007928 <DMA1_Stream5_IRQHandler+0x1a8>)
 800782e:	429a      	cmp	r2, r3
 8007830:	d904      	bls.n	800783c <DMA1_Stream5_IRQHandler+0xbc>
 8007832:	4b3e      	ldr	r3, [pc, #248]	; (800792c <DMA1_Stream5_IRQHandler+0x1ac>)
 8007834:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007838:	60da      	str	r2, [r3, #12]
 800783a:	e003      	b.n	8007844 <DMA1_Stream5_IRQHandler+0xc4>
 800783c:	4b3b      	ldr	r3, [pc, #236]	; (800792c <DMA1_Stream5_IRQHandler+0x1ac>)
 800783e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007842:	609a      	str	r2, [r3, #8]
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
	  led_update_sequence(HT_EVENT);
 8007844:	2000      	movs	r0, #0
 8007846:	f7ff fea7 	bl	8007598 <led_update_sequence>
	} else if (__HAL_DMA_GET_FLAG(&hdma_tim2_ch1, DMA_FLAG_TCIF1_5)) {
	  __HAL_DMA_CLEAR_FLAG(&hdma_tim2_ch1, DMA_FLAG_TCIF1_5);
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
	  led_update_sequence(TC_EVENT);
	}
}
 800784a:	e062      	b.n	8007912 <DMA1_Stream5_IRQHandler+0x192>
	} else if (__HAL_DMA_GET_FLAG(&hdma_tim2_ch1, DMA_FLAG_TCIF1_5)) {
 800784c:	4b32      	ldr	r3, [pc, #200]	; (8007918 <DMA1_Stream5_IRQHandler+0x198>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	461a      	mov	r2, r3
 8007852:	4b32      	ldr	r3, [pc, #200]	; (800791c <DMA1_Stream5_IRQHandler+0x19c>)
 8007854:	429a      	cmp	r2, r3
 8007856:	d909      	bls.n	800786c <DMA1_Stream5_IRQHandler+0xec>
 8007858:	4b31      	ldr	r3, [pc, #196]	; (8007920 <DMA1_Stream5_IRQHandler+0x1a0>)
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007860:	2b00      	cmp	r3, #0
 8007862:	bf14      	ite	ne
 8007864:	2301      	movne	r3, #1
 8007866:	2300      	moveq	r3, #0
 8007868:	b2db      	uxtb	r3, r3
 800786a:	e028      	b.n	80078be <DMA1_Stream5_IRQHandler+0x13e>
 800786c:	4b2a      	ldr	r3, [pc, #168]	; (8007918 <DMA1_Stream5_IRQHandler+0x198>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	461a      	mov	r2, r3
 8007872:	4b2c      	ldr	r3, [pc, #176]	; (8007924 <DMA1_Stream5_IRQHandler+0x1a4>)
 8007874:	429a      	cmp	r2, r3
 8007876:	d909      	bls.n	800788c <DMA1_Stream5_IRQHandler+0x10c>
 8007878:	4b29      	ldr	r3, [pc, #164]	; (8007920 <DMA1_Stream5_IRQHandler+0x1a0>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007880:	2b00      	cmp	r3, #0
 8007882:	bf14      	ite	ne
 8007884:	2301      	movne	r3, #1
 8007886:	2300      	moveq	r3, #0
 8007888:	b2db      	uxtb	r3, r3
 800788a:	e018      	b.n	80078be <DMA1_Stream5_IRQHandler+0x13e>
 800788c:	4b22      	ldr	r3, [pc, #136]	; (8007918 <DMA1_Stream5_IRQHandler+0x198>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	461a      	mov	r2, r3
 8007892:	4b25      	ldr	r3, [pc, #148]	; (8007928 <DMA1_Stream5_IRQHandler+0x1a8>)
 8007894:	429a      	cmp	r2, r3
 8007896:	d909      	bls.n	80078ac <DMA1_Stream5_IRQHandler+0x12c>
 8007898:	4b24      	ldr	r3, [pc, #144]	; (800792c <DMA1_Stream5_IRQHandler+0x1ac>)
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	bf14      	ite	ne
 80078a4:	2301      	movne	r3, #1
 80078a6:	2300      	moveq	r3, #0
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	e008      	b.n	80078be <DMA1_Stream5_IRQHandler+0x13e>
 80078ac:	4b1f      	ldr	r3, [pc, #124]	; (800792c <DMA1_Stream5_IRQHandler+0x1ac>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	bf14      	ite	ne
 80078b8:	2301      	movne	r3, #1
 80078ba:	2300      	moveq	r3, #0
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d027      	beq.n	8007912 <DMA1_Stream5_IRQHandler+0x192>
	  __HAL_DMA_CLEAR_FLAG(&hdma_tim2_ch1, DMA_FLAG_TCIF1_5);
 80078c2:	4b15      	ldr	r3, [pc, #84]	; (8007918 <DMA1_Stream5_IRQHandler+0x198>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	461a      	mov	r2, r3
 80078c8:	4b14      	ldr	r3, [pc, #80]	; (800791c <DMA1_Stream5_IRQHandler+0x19c>)
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d904      	bls.n	80078d8 <DMA1_Stream5_IRQHandler+0x158>
 80078ce:	4b14      	ldr	r3, [pc, #80]	; (8007920 <DMA1_Stream5_IRQHandler+0x1a0>)
 80078d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078d4:	60da      	str	r2, [r3, #12]
 80078d6:	e019      	b.n	800790c <DMA1_Stream5_IRQHandler+0x18c>
 80078d8:	4b0f      	ldr	r3, [pc, #60]	; (8007918 <DMA1_Stream5_IRQHandler+0x198>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	461a      	mov	r2, r3
 80078de:	4b11      	ldr	r3, [pc, #68]	; (8007924 <DMA1_Stream5_IRQHandler+0x1a4>)
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d904      	bls.n	80078ee <DMA1_Stream5_IRQHandler+0x16e>
 80078e4:	4b0e      	ldr	r3, [pc, #56]	; (8007920 <DMA1_Stream5_IRQHandler+0x1a0>)
 80078e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078ea:	609a      	str	r2, [r3, #8]
 80078ec:	e00e      	b.n	800790c <DMA1_Stream5_IRQHandler+0x18c>
 80078ee:	4b0a      	ldr	r3, [pc, #40]	; (8007918 <DMA1_Stream5_IRQHandler+0x198>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	461a      	mov	r2, r3
 80078f4:	4b0c      	ldr	r3, [pc, #48]	; (8007928 <DMA1_Stream5_IRQHandler+0x1a8>)
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d904      	bls.n	8007904 <DMA1_Stream5_IRQHandler+0x184>
 80078fa:	4b0c      	ldr	r3, [pc, #48]	; (800792c <DMA1_Stream5_IRQHandler+0x1ac>)
 80078fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007900:	60da      	str	r2, [r3, #12]
 8007902:	e003      	b.n	800790c <DMA1_Stream5_IRQHandler+0x18c>
 8007904:	4b09      	ldr	r3, [pc, #36]	; (800792c <DMA1_Stream5_IRQHandler+0x1ac>)
 8007906:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800790a:	609a      	str	r2, [r3, #8]
	  led_update_sequence(TC_EVENT);
 800790c:	2001      	movs	r0, #1
 800790e:	f7ff fe43 	bl	8007598 <led_update_sequence>
}
 8007912:	bf00      	nop
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	20002360 	.word	0x20002360
 800791c:	40026458 	.word	0x40026458
 8007920:	40026400 	.word	0x40026400
 8007924:	400260b8 	.word	0x400260b8
 8007928:	40026058 	.word	0x40026058
 800792c:	40026000 	.word	0x40026000

08007930 <LED_Init>:


void LED_Init(void)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
  /* ------------- */
  /*  GPIO Config  */
  /* ------------- */

  // Configure TIM2_Channel 1 (PA0) as output, push-pull and alternate function mode
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007936:	4b74      	ldr	r3, [pc, #464]	; (8007b08 <LED_Init+0x1d8>)
 8007938:	2201      	movs	r2, #1
 800793a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800793c:	4b72      	ldr	r3, [pc, #456]	; (8007b08 <LED_Init+0x1d8>)
 800793e:	2202      	movs	r2, #2
 8007940:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007942:	4b71      	ldr	r3, [pc, #452]	; (8007b08 <LED_Init+0x1d8>)
 8007944:	2200      	movs	r2, #0
 8007946:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007948:	4b6f      	ldr	r3, [pc, #444]	; (8007b08 <LED_Init+0x1d8>)
 800794a:	2203      	movs	r2, #3
 800794c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800794e:	4b6e      	ldr	r3, [pc, #440]	; (8007b08 <LED_Init+0x1d8>)
 8007950:	2201      	movs	r2, #1
 8007952:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007954:	496c      	ldr	r1, [pc, #432]	; (8007b08 <LED_Init+0x1d8>)
 8007956:	486d      	ldr	r0, [pc, #436]	; (8007b0c <LED_Init+0x1dc>)
 8007958:	f7f9 f9da 	bl	8000d10 <HAL_GPIO_Init>

  // Configure GPIO pin: PA8, debugging for DMA IRQ
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800795c:	2200      	movs	r2, #0
 800795e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007962:	486a      	ldr	r0, [pc, #424]	; (8007b0c <LED_Init+0x1dc>)
 8007964:	f7f9 fb6e 	bl	8001044 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007968:	4b67      	ldr	r3, [pc, #412]	; (8007b08 <LED_Init+0x1d8>)
 800796a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800796e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007970:	4b65      	ldr	r3, [pc, #404]	; (8007b08 <LED_Init+0x1d8>)
 8007972:	2201      	movs	r2, #1
 8007974:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007976:	4b64      	ldr	r3, [pc, #400]	; (8007b08 <LED_Init+0x1d8>)
 8007978:	2200      	movs	r2, #0
 800797a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800797c:	4962      	ldr	r1, [pc, #392]	; (8007b08 <LED_Init+0x1d8>)
 800797e:	4863      	ldr	r0, [pc, #396]	; (8007b0c <LED_Init+0x1dc>)
 8007980:	f7f9 f9c6 	bl	8000d10 <HAL_GPIO_Init>

  // Configure GPIO pin: PB0, PB10, debugging for is_updating flag
  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8007984:	2200      	movs	r2, #0
 8007986:	2101      	movs	r1, #1
 8007988:	4861      	ldr	r0, [pc, #388]	; (8007b10 <LED_Init+0x1e0>)
 800798a:	f7f9 fb5b 	bl	8001044 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800798e:	4b5e      	ldr	r3, [pc, #376]	; (8007b08 <LED_Init+0x1d8>)
 8007990:	2201      	movs	r2, #1
 8007992:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007994:	4b5c      	ldr	r3, [pc, #368]	; (8007b08 <LED_Init+0x1d8>)
 8007996:	2201      	movs	r2, #1
 8007998:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800799a:	4b5b      	ldr	r3, [pc, #364]	; (8007b08 <LED_Init+0x1d8>)
 800799c:	2200      	movs	r2, #0
 800799e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80079a0:	4959      	ldr	r1, [pc, #356]	; (8007b08 <LED_Init+0x1d8>)
 80079a2:	485b      	ldr	r0, [pc, #364]	; (8007b10 <LED_Init+0x1e0>)
 80079a4:	f7f9 f9b4 	bl	8000d10 <HAL_GPIO_Init>
  /* -------------- */
  /* TIM2 Channel 1 */
  /* -------------- */

  // Enable TIM2 clock
  __HAL_RCC_TIM2_CLK_ENABLE();
 80079a8:	2300      	movs	r3, #0
 80079aa:	607b      	str	r3, [r7, #4]
 80079ac:	4b59      	ldr	r3, [pc, #356]	; (8007b14 <LED_Init+0x1e4>)
 80079ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b0:	4a58      	ldr	r2, [pc, #352]	; (8007b14 <LED_Init+0x1e4>)
 80079b2:	f043 0301 	orr.w	r3, r3, #1
 80079b6:	6413      	str	r3, [r2, #64]	; 0x40
 80079b8:	4b56      	ldr	r3, [pc, #344]	; (8007b14 <LED_Init+0x1e4>)
 80079ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079bc:	f003 0301 	and.w	r3, r3, #1
 80079c0:	607b      	str	r3, [r7, #4]
 80079c2:	687b      	ldr	r3, [r7, #4]

  // TIM Time Base handle Structure definition
  // Period = TIM2_counter_clk / PWM_freq - 1
  // Period = 84MHz / 800kHz - 1 = 104
  htim2.Instance               = TIM2;
 80079c4:	4b54      	ldr	r3, [pc, #336]	; (8007b18 <LED_Init+0x1e8>)
 80079c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80079ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler         = 0;										// Set to 0 to acheive max frequency for timer at 84MHz
 80079cc:	4b52      	ldr	r3, [pc, #328]	; (8007b18 <LED_Init+0x1e8>)
 80079ce:	2200      	movs	r2, #0
 80079d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode       = TIM_COUNTERMODE_UP;
 80079d2:	4b51      	ldr	r3, [pc, #324]	; (8007b18 <LED_Init+0x1e8>)
 80079d4:	2200      	movs	r2, #0
 80079d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period            = TIM_PERIOD;
 80079d8:	4b4f      	ldr	r3, [pc, #316]	; (8007b18 <LED_Init+0x1e8>)
 80079da:	2268      	movs	r2, #104	; 0x68
 80079dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 80079de:	4b4e      	ldr	r3, [pc, #312]	; (8007b18 <LED_Init+0x1e8>)
 80079e0:	2200      	movs	r2, #0
 80079e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;	//TIM_AUTORELOAD_PRELOAD_DISABLE
 80079e4:	4b4c      	ldr	r3, [pc, #304]	; (8007b18 <LED_Init+0x1e8>)
 80079e6:	2280      	movs	r2, #128	; 0x80
 80079e8:	619a      	str	r2, [r3, #24]

  // TIM2 interrupt Init
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80079ea:	2200      	movs	r2, #0
 80079ec:	2100      	movs	r1, #0
 80079ee:	201c      	movs	r0, #28
 80079f0:	f7f8 ff45 	bl	800087e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80079f4:	201c      	movs	r0, #28
 80079f6:	f7f8 ff5e 	bl	80008b6 <HAL_NVIC_EnableIRQ>

  // Note: HAL_TIM_PWM_Init() calls HAL_TIM_PWM_MspInit()
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 80079fa:	4847      	ldr	r0, [pc, #284]	; (8007b18 <LED_Init+0x1e8>)
 80079fc:	f7fa fbff 	bl	80021fe <HAL_TIM_PWM_Init>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d002      	beq.n	8007a0c <LED_Init+0xdc>
    Error_Handler(TIM_INIT_ERROR);     // Initialization Error
 8007a06:	2004      	movs	r0, #4
 8007a08:	f7fe fffe 	bl	8006a08 <Error_Handler>
  }

  // Set TIM Output Compare (OC) Configuration Structure definition
  sConfigOC.OCMode       = TIM_OCMODE_PWM1;
 8007a0c:	4b43      	ldr	r3, [pc, #268]	; (8007b1c <LED_Init+0x1ec>)
 8007a0e:	2260      	movs	r2, #96	; 0x60
 8007a10:	601a      	str	r2, [r3, #0]
  sConfigOC.OCPolarity   = TIM_OCPOLARITY_HIGH;
 8007a12:	4b42      	ldr	r3, [pc, #264]	; (8007b1c <LED_Init+0x1ec>)
 8007a14:	2200      	movs	r2, #0
 8007a16:	609a      	str	r2, [r3, #8]
  sConfigOC.Pulse        = 0;
 8007a18:	4b40      	ldr	r3, [pc, #256]	; (8007b1c <LED_Init+0x1ec>)
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 8007a1e:	4b3f      	ldr	r3, [pc, #252]	; (8007b1c <LED_Init+0x1ec>)
 8007a20:	2200      	movs	r2, #0
 8007a22:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode   = TIM_OCFAST_DISABLE;
 8007a24:	4b3d      	ldr	r3, [pc, #244]	; (8007b1c <LED_Init+0x1ec>)
 8007a26:	2200      	movs	r2, #0
 8007a28:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState  = TIM_OCIDLESTATE_RESET;
 8007a2a:	4b3c      	ldr	r3, [pc, #240]	; (8007b1c <LED_Init+0x1ec>)
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007a30:	4b3a      	ldr	r3, [pc, #232]	; (8007b1c <LED_Init+0x1ec>)
 8007a32:	2200      	movs	r2, #0
 8007a34:	619a      	str	r2, [r3, #24]

  // Apply TIM OC configs to htim2 (TIM2)
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8007a36:	2200      	movs	r2, #0
 8007a38:	4938      	ldr	r1, [pc, #224]	; (8007b1c <LED_Init+0x1ec>)
 8007a3a:	4837      	ldr	r0, [pc, #220]	; (8007b18 <LED_Init+0x1e8>)
 8007a3c:	f7fa fdb6 	bl	80025ac <HAL_TIM_PWM_ConfigChannel>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d002      	beq.n	8007a4c <LED_Init+0x11c>
    Error_Handler(TIM_CONFIG_ERROR); // Configuration Error
 8007a46:	2003      	movs	r0, #3
 8007a48:	f7fe ffde 	bl	8006a08 <Error_Handler>
  /* ------------------------------ */
  /* DMA1 Channel 3 Stream 5 Config */
  /* ------------------------------ */

  // Enable DMA1 clock
	__HAL_RCC_DMA1_CLK_ENABLE();
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	603b      	str	r3, [r7, #0]
 8007a50:	4b30      	ldr	r3, [pc, #192]	; (8007b14 <LED_Init+0x1e4>)
 8007a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a54:	4a2f      	ldr	r2, [pc, #188]	; (8007b14 <LED_Init+0x1e4>)
 8007a56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a5a:	6313      	str	r3, [r2, #48]	; 0x30
 8007a5c:	4b2d      	ldr	r3, [pc, #180]	; (8007b14 <LED_Init+0x1e4>)
 8007a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a64:	603b      	str	r3, [r7, #0]
 8007a66:	683b      	ldr	r3, [r7, #0]

	// DMA handle Structure definition (Based on RM0383 STM32F411 Ref Manual (Table 27) TIM2_CH1 corresponds to DMA1 Channel 3 Stream 5)
  hdma_tim2_ch1.Instance = DMA1_Stream5;
 8007a68:	4b2d      	ldr	r3, [pc, #180]	; (8007b20 <LED_Init+0x1f0>)
 8007a6a:	4a2e      	ldr	r2, [pc, #184]	; (8007b24 <LED_Init+0x1f4>)
 8007a6c:	601a      	str	r2, [r3, #0]
  hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8007a6e:	4b2c      	ldr	r3, [pc, #176]	; (8007b20 <LED_Init+0x1f0>)
 8007a70:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8007a74:	605a      	str	r2, [r3, #4]
  hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;							// Memory to Peripheral mode
 8007a76:	4b2a      	ldr	r3, [pc, #168]	; (8007b20 <LED_Init+0x1f0>)
 8007a78:	2240      	movs	r2, #64	; 0x40
 8007a7a:	609a      	str	r2, [r3, #8]
  hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007a7c:	4b28      	ldr	r3, [pc, #160]	; (8007b20 <LED_Init+0x1f0>)
 8007a7e:	2200      	movs	r2, #0
 8007a80:	60da      	str	r2, [r3, #12]
  hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8007a82:	4b27      	ldr	r3, [pc, #156]	; (8007b20 <LED_Init+0x1f0>)
 8007a84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007a88:	611a      	str	r2, [r3, #16]
  hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD ;
 8007a8a:	4b25      	ldr	r3, [pc, #148]	; (8007b20 <LED_Init+0x1f0>)
 8007a8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007a90:	615a      	str	r2, [r3, #20]
  hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD ;
 8007a92:	4b23      	ldr	r3, [pc, #140]	; (8007b20 <LED_Init+0x1f0>)
 8007a94:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007a98:	619a      	str	r2, [r3, #24]
  hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;														// Set in circular mode
 8007a9a:	4b21      	ldr	r3, [pc, #132]	; (8007b20 <LED_Init+0x1f0>)
 8007a9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007aa0:	61da      	str	r2, [r3, #28]
  hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;										// Low priority
 8007aa2:	4b1f      	ldr	r3, [pc, #124]	; (8007b20 <LED_Init+0x1f0>)
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	621a      	str	r2, [r3, #32]
  hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007aa8:	4b1d      	ldr	r3, [pc, #116]	; (8007b20 <LED_Init+0x1f0>)
 8007aaa:	2200      	movs	r2, #0
 8007aac:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_tim2_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007aae:	4b1c      	ldr	r3, [pc, #112]	; (8007b20 <LED_Init+0x1f0>)
 8007ab0:	2203      	movs	r2, #3
 8007ab2:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_tim2_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 8007ab4:	4b1a      	ldr	r3, [pc, #104]	; (8007b20 <LED_Init+0x1f0>)
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_tim2_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8007aba:	4b19      	ldr	r3, [pc, #100]	; (8007b20 <LED_Init+0x1f0>)
 8007abc:	2200      	movs	r2, #0
 8007abe:	631a      	str	r2, [r3, #48]	; 0x30

  // Enable Half-Transfer and Full-Transfer complete interrupts
  __HAL_DMA_ENABLE_IT(&hdma_tim2_ch1, (DMA_IT_TC | DMA_IT_HT));
 8007ac0:	4b17      	ldr	r3, [pc, #92]	; (8007b20 <LED_Init+0x1f0>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	4b16      	ldr	r3, [pc, #88]	; (8007b20 <LED_Init+0x1f0>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f042 0218 	orr.w	r2, r2, #24
 8007ace:	601a      	str	r2, [r3, #0]

  // Linking a PPP peripheral to DMA structure pointer (PPP = STM32 peripheral or block)
  // hdma[TIM_DMA_ID_CC1] = Capture/Compare 1 DMA requests peripheral
  // Link htim2 (TIM peripheral) to hdma_tim2_ch1 (DMA struc pointer) with TIM_DMA_ID_CC1
  __HAL_LINKDMA(&htim2, hdma[TIM_DMA_ID_CC1], hdma_tim2_ch1);
 8007ad0:	4b11      	ldr	r3, [pc, #68]	; (8007b18 <LED_Init+0x1e8>)
 8007ad2:	4a13      	ldr	r2, [pc, #76]	; (8007b20 <LED_Init+0x1f0>)
 8007ad4:	625a      	str	r2, [r3, #36]	; 0x24
 8007ad6:	4b12      	ldr	r3, [pc, #72]	; (8007b20 <LED_Init+0x1f0>)
 8007ad8:	4a0f      	ldr	r2, [pc, #60]	; (8007b18 <LED_Init+0x1e8>)
 8007ada:	639a      	str	r2, [r3, #56]	; 0x38

  // Initialize TIM2 DMA handle
  if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK) {
 8007adc:	4810      	ldr	r0, [pc, #64]	; (8007b20 <LED_Init+0x1f0>)
 8007ade:	f7f8 ff11 	bl	8000904 <HAL_DMA_Init>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d002      	beq.n	8007aee <LED_Init+0x1be>
    Error_Handler(DMA_ERROR);
 8007ae8:	2006      	movs	r0, #6
 8007aea:	f7fe ff8d 	bl	8006a08 <Error_Handler>
  }

  // ##-2- Configure the NVIC for DMA #########################################
  // NVIC configuration for DMA transfer complete interrupt
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8007aee:	2200      	movs	r2, #0
 8007af0:	2100      	movs	r1, #0
 8007af2:	2010      	movs	r0, #16
 8007af4:	f7f8 fec3 	bl	800087e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8007af8:	2010      	movs	r0, #16
 8007afa:	f7f8 fedc 	bl	80008b6 <HAL_NVIC_EnableIRQ>
}
 8007afe:	bf00      	nop
 8007b00:	3708      	adds	r7, #8
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	200023e0 	.word	0x200023e0
 8007b0c:	40020000 	.word	0x40020000
 8007b10:	40020400 	.word	0x40020400
 8007b14:	40023800 	.word	0x40023800
 8007b18:	20002414 	.word	0x20002414
 8007b1c:	200023c4 	.word	0x200023c4
 8007b20:	20002360 	.word	0x20002360
 8007b24:	40026088 	.word	0x40026088

08007b28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8007b28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007b60 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007b2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007b2e:	e003      	b.n	8007b38 <LoopCopyDataInit>

08007b30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007b30:	4b0c      	ldr	r3, [pc, #48]	; (8007b64 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007b32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007b34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007b36:	3104      	adds	r1, #4

08007b38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007b38:	480b      	ldr	r0, [pc, #44]	; (8007b68 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007b3a:	4b0c      	ldr	r3, [pc, #48]	; (8007b6c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007b3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007b3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007b40:	d3f6      	bcc.n	8007b30 <CopyDataInit>
  ldr  r2, =_sbss
 8007b42:	4a0b      	ldr	r2, [pc, #44]	; (8007b70 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007b44:	e002      	b.n	8007b4c <LoopFillZerobss>

08007b46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007b46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007b48:	f842 3b04 	str.w	r3, [r2], #4

08007b4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007b4c:	4b09      	ldr	r3, [pc, #36]	; (8007b74 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007b4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007b50:	d3f9      	bcc.n	8007b46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007b52:	f7ff fa97 	bl	8007084 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007b56:	f000 f817 	bl	8007b88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007b5a:	f7fe fddf 	bl	800671c <main>
  bx  lr    
 8007b5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8007b60:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8007b64:	08029f28 	.word	0x08029f28
  ldr  r0, =_sdata
 8007b68:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007b6c:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8007b70:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 8007b74:	20004704 	.word	0x20004704

08007b78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007b78:	e7fe      	b.n	8007b78 <ADC_IRQHandler>
	...

08007b7c <__errno>:
 8007b7c:	4b01      	ldr	r3, [pc, #4]	; (8007b84 <__errno+0x8>)
 8007b7e:	6818      	ldr	r0, [r3, #0]
 8007b80:	4770      	bx	lr
 8007b82:	bf00      	nop
 8007b84:	20000020 	.word	0x20000020

08007b88 <__libc_init_array>:
 8007b88:	b570      	push	{r4, r5, r6, lr}
 8007b8a:	4e0d      	ldr	r6, [pc, #52]	; (8007bc0 <__libc_init_array+0x38>)
 8007b8c:	4c0d      	ldr	r4, [pc, #52]	; (8007bc4 <__libc_init_array+0x3c>)
 8007b8e:	1ba4      	subs	r4, r4, r6
 8007b90:	10a4      	asrs	r4, r4, #2
 8007b92:	2500      	movs	r5, #0
 8007b94:	42a5      	cmp	r5, r4
 8007b96:	d109      	bne.n	8007bac <__libc_init_array+0x24>
 8007b98:	4e0b      	ldr	r6, [pc, #44]	; (8007bc8 <__libc_init_array+0x40>)
 8007b9a:	4c0c      	ldr	r4, [pc, #48]	; (8007bcc <__libc_init_array+0x44>)
 8007b9c:	f000 fc26 	bl	80083ec <_init>
 8007ba0:	1ba4      	subs	r4, r4, r6
 8007ba2:	10a4      	asrs	r4, r4, #2
 8007ba4:	2500      	movs	r5, #0
 8007ba6:	42a5      	cmp	r5, r4
 8007ba8:	d105      	bne.n	8007bb6 <__libc_init_array+0x2e>
 8007baa:	bd70      	pop	{r4, r5, r6, pc}
 8007bac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007bb0:	4798      	blx	r3
 8007bb2:	3501      	adds	r5, #1
 8007bb4:	e7ee      	b.n	8007b94 <__libc_init_array+0xc>
 8007bb6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007bba:	4798      	blx	r3
 8007bbc:	3501      	adds	r5, #1
 8007bbe:	e7f2      	b.n	8007ba6 <__libc_init_array+0x1e>
 8007bc0:	08029f20 	.word	0x08029f20
 8007bc4:	08029f20 	.word	0x08029f20
 8007bc8:	08029f20 	.word	0x08029f20
 8007bcc:	08029f24 	.word	0x08029f24

08007bd0 <memset>:
 8007bd0:	4402      	add	r2, r0
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d100      	bne.n	8007bda <memset+0xa>
 8007bd8:	4770      	bx	lr
 8007bda:	f803 1b01 	strb.w	r1, [r3], #1
 8007bde:	e7f9      	b.n	8007bd4 <memset+0x4>

08007be0 <siprintf>:
 8007be0:	b40e      	push	{r1, r2, r3}
 8007be2:	b500      	push	{lr}
 8007be4:	b09c      	sub	sp, #112	; 0x70
 8007be6:	ab1d      	add	r3, sp, #116	; 0x74
 8007be8:	9002      	str	r0, [sp, #8]
 8007bea:	9006      	str	r0, [sp, #24]
 8007bec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007bf0:	4809      	ldr	r0, [pc, #36]	; (8007c18 <siprintf+0x38>)
 8007bf2:	9107      	str	r1, [sp, #28]
 8007bf4:	9104      	str	r1, [sp, #16]
 8007bf6:	4909      	ldr	r1, [pc, #36]	; (8007c1c <siprintf+0x3c>)
 8007bf8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bfc:	9105      	str	r1, [sp, #20]
 8007bfe:	6800      	ldr	r0, [r0, #0]
 8007c00:	9301      	str	r3, [sp, #4]
 8007c02:	a902      	add	r1, sp, #8
 8007c04:	f000 f866 	bl	8007cd4 <_svfiprintf_r>
 8007c08:	9b02      	ldr	r3, [sp, #8]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	701a      	strb	r2, [r3, #0]
 8007c0e:	b01c      	add	sp, #112	; 0x70
 8007c10:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c14:	b003      	add	sp, #12
 8007c16:	4770      	bx	lr
 8007c18:	20000020 	.word	0x20000020
 8007c1c:	ffff0208 	.word	0xffff0208

08007c20 <__ssputs_r>:
 8007c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c24:	688e      	ldr	r6, [r1, #8]
 8007c26:	429e      	cmp	r6, r3
 8007c28:	4682      	mov	sl, r0
 8007c2a:	460c      	mov	r4, r1
 8007c2c:	4690      	mov	r8, r2
 8007c2e:	4699      	mov	r9, r3
 8007c30:	d837      	bhi.n	8007ca2 <__ssputs_r+0x82>
 8007c32:	898a      	ldrh	r2, [r1, #12]
 8007c34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c38:	d031      	beq.n	8007c9e <__ssputs_r+0x7e>
 8007c3a:	6825      	ldr	r5, [r4, #0]
 8007c3c:	6909      	ldr	r1, [r1, #16]
 8007c3e:	1a6f      	subs	r7, r5, r1
 8007c40:	6965      	ldr	r5, [r4, #20]
 8007c42:	2302      	movs	r3, #2
 8007c44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c48:	fb95 f5f3 	sdiv	r5, r5, r3
 8007c4c:	f109 0301 	add.w	r3, r9, #1
 8007c50:	443b      	add	r3, r7
 8007c52:	429d      	cmp	r5, r3
 8007c54:	bf38      	it	cc
 8007c56:	461d      	movcc	r5, r3
 8007c58:	0553      	lsls	r3, r2, #21
 8007c5a:	d530      	bpl.n	8007cbe <__ssputs_r+0x9e>
 8007c5c:	4629      	mov	r1, r5
 8007c5e:	f000 fb2b 	bl	80082b8 <_malloc_r>
 8007c62:	4606      	mov	r6, r0
 8007c64:	b950      	cbnz	r0, 8007c7c <__ssputs_r+0x5c>
 8007c66:	230c      	movs	r3, #12
 8007c68:	f8ca 3000 	str.w	r3, [sl]
 8007c6c:	89a3      	ldrh	r3, [r4, #12]
 8007c6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c72:	81a3      	strh	r3, [r4, #12]
 8007c74:	f04f 30ff 	mov.w	r0, #4294967295
 8007c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c7c:	463a      	mov	r2, r7
 8007c7e:	6921      	ldr	r1, [r4, #16]
 8007c80:	f000 faa8 	bl	80081d4 <memcpy>
 8007c84:	89a3      	ldrh	r3, [r4, #12]
 8007c86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c8e:	81a3      	strh	r3, [r4, #12]
 8007c90:	6126      	str	r6, [r4, #16]
 8007c92:	6165      	str	r5, [r4, #20]
 8007c94:	443e      	add	r6, r7
 8007c96:	1bed      	subs	r5, r5, r7
 8007c98:	6026      	str	r6, [r4, #0]
 8007c9a:	60a5      	str	r5, [r4, #8]
 8007c9c:	464e      	mov	r6, r9
 8007c9e:	454e      	cmp	r6, r9
 8007ca0:	d900      	bls.n	8007ca4 <__ssputs_r+0x84>
 8007ca2:	464e      	mov	r6, r9
 8007ca4:	4632      	mov	r2, r6
 8007ca6:	4641      	mov	r1, r8
 8007ca8:	6820      	ldr	r0, [r4, #0]
 8007caa:	f000 fa9e 	bl	80081ea <memmove>
 8007cae:	68a3      	ldr	r3, [r4, #8]
 8007cb0:	1b9b      	subs	r3, r3, r6
 8007cb2:	60a3      	str	r3, [r4, #8]
 8007cb4:	6823      	ldr	r3, [r4, #0]
 8007cb6:	441e      	add	r6, r3
 8007cb8:	6026      	str	r6, [r4, #0]
 8007cba:	2000      	movs	r0, #0
 8007cbc:	e7dc      	b.n	8007c78 <__ssputs_r+0x58>
 8007cbe:	462a      	mov	r2, r5
 8007cc0:	f000 fb54 	bl	800836c <_realloc_r>
 8007cc4:	4606      	mov	r6, r0
 8007cc6:	2800      	cmp	r0, #0
 8007cc8:	d1e2      	bne.n	8007c90 <__ssputs_r+0x70>
 8007cca:	6921      	ldr	r1, [r4, #16]
 8007ccc:	4650      	mov	r0, sl
 8007cce:	f000 faa5 	bl	800821c <_free_r>
 8007cd2:	e7c8      	b.n	8007c66 <__ssputs_r+0x46>

08007cd4 <_svfiprintf_r>:
 8007cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cd8:	461d      	mov	r5, r3
 8007cda:	898b      	ldrh	r3, [r1, #12]
 8007cdc:	061f      	lsls	r7, r3, #24
 8007cde:	b09d      	sub	sp, #116	; 0x74
 8007ce0:	4680      	mov	r8, r0
 8007ce2:	460c      	mov	r4, r1
 8007ce4:	4616      	mov	r6, r2
 8007ce6:	d50f      	bpl.n	8007d08 <_svfiprintf_r+0x34>
 8007ce8:	690b      	ldr	r3, [r1, #16]
 8007cea:	b96b      	cbnz	r3, 8007d08 <_svfiprintf_r+0x34>
 8007cec:	2140      	movs	r1, #64	; 0x40
 8007cee:	f000 fae3 	bl	80082b8 <_malloc_r>
 8007cf2:	6020      	str	r0, [r4, #0]
 8007cf4:	6120      	str	r0, [r4, #16]
 8007cf6:	b928      	cbnz	r0, 8007d04 <_svfiprintf_r+0x30>
 8007cf8:	230c      	movs	r3, #12
 8007cfa:	f8c8 3000 	str.w	r3, [r8]
 8007cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8007d02:	e0c8      	b.n	8007e96 <_svfiprintf_r+0x1c2>
 8007d04:	2340      	movs	r3, #64	; 0x40
 8007d06:	6163      	str	r3, [r4, #20]
 8007d08:	2300      	movs	r3, #0
 8007d0a:	9309      	str	r3, [sp, #36]	; 0x24
 8007d0c:	2320      	movs	r3, #32
 8007d0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d12:	2330      	movs	r3, #48	; 0x30
 8007d14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d18:	9503      	str	r5, [sp, #12]
 8007d1a:	f04f 0b01 	mov.w	fp, #1
 8007d1e:	4637      	mov	r7, r6
 8007d20:	463d      	mov	r5, r7
 8007d22:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007d26:	b10b      	cbz	r3, 8007d2c <_svfiprintf_r+0x58>
 8007d28:	2b25      	cmp	r3, #37	; 0x25
 8007d2a:	d13e      	bne.n	8007daa <_svfiprintf_r+0xd6>
 8007d2c:	ebb7 0a06 	subs.w	sl, r7, r6
 8007d30:	d00b      	beq.n	8007d4a <_svfiprintf_r+0x76>
 8007d32:	4653      	mov	r3, sl
 8007d34:	4632      	mov	r2, r6
 8007d36:	4621      	mov	r1, r4
 8007d38:	4640      	mov	r0, r8
 8007d3a:	f7ff ff71 	bl	8007c20 <__ssputs_r>
 8007d3e:	3001      	adds	r0, #1
 8007d40:	f000 80a4 	beq.w	8007e8c <_svfiprintf_r+0x1b8>
 8007d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d46:	4453      	add	r3, sl
 8007d48:	9309      	str	r3, [sp, #36]	; 0x24
 8007d4a:	783b      	ldrb	r3, [r7, #0]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	f000 809d 	beq.w	8007e8c <_svfiprintf_r+0x1b8>
 8007d52:	2300      	movs	r3, #0
 8007d54:	f04f 32ff 	mov.w	r2, #4294967295
 8007d58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d5c:	9304      	str	r3, [sp, #16]
 8007d5e:	9307      	str	r3, [sp, #28]
 8007d60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d64:	931a      	str	r3, [sp, #104]	; 0x68
 8007d66:	462f      	mov	r7, r5
 8007d68:	2205      	movs	r2, #5
 8007d6a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007d6e:	4850      	ldr	r0, [pc, #320]	; (8007eb0 <_svfiprintf_r+0x1dc>)
 8007d70:	f7f8 fa3e 	bl	80001f0 <memchr>
 8007d74:	9b04      	ldr	r3, [sp, #16]
 8007d76:	b9d0      	cbnz	r0, 8007dae <_svfiprintf_r+0xda>
 8007d78:	06d9      	lsls	r1, r3, #27
 8007d7a:	bf44      	itt	mi
 8007d7c:	2220      	movmi	r2, #32
 8007d7e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007d82:	071a      	lsls	r2, r3, #28
 8007d84:	bf44      	itt	mi
 8007d86:	222b      	movmi	r2, #43	; 0x2b
 8007d88:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007d8c:	782a      	ldrb	r2, [r5, #0]
 8007d8e:	2a2a      	cmp	r2, #42	; 0x2a
 8007d90:	d015      	beq.n	8007dbe <_svfiprintf_r+0xea>
 8007d92:	9a07      	ldr	r2, [sp, #28]
 8007d94:	462f      	mov	r7, r5
 8007d96:	2000      	movs	r0, #0
 8007d98:	250a      	movs	r5, #10
 8007d9a:	4639      	mov	r1, r7
 8007d9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007da0:	3b30      	subs	r3, #48	; 0x30
 8007da2:	2b09      	cmp	r3, #9
 8007da4:	d94d      	bls.n	8007e42 <_svfiprintf_r+0x16e>
 8007da6:	b1b8      	cbz	r0, 8007dd8 <_svfiprintf_r+0x104>
 8007da8:	e00f      	b.n	8007dca <_svfiprintf_r+0xf6>
 8007daa:	462f      	mov	r7, r5
 8007dac:	e7b8      	b.n	8007d20 <_svfiprintf_r+0x4c>
 8007dae:	4a40      	ldr	r2, [pc, #256]	; (8007eb0 <_svfiprintf_r+0x1dc>)
 8007db0:	1a80      	subs	r0, r0, r2
 8007db2:	fa0b f000 	lsl.w	r0, fp, r0
 8007db6:	4318      	orrs	r0, r3
 8007db8:	9004      	str	r0, [sp, #16]
 8007dba:	463d      	mov	r5, r7
 8007dbc:	e7d3      	b.n	8007d66 <_svfiprintf_r+0x92>
 8007dbe:	9a03      	ldr	r2, [sp, #12]
 8007dc0:	1d11      	adds	r1, r2, #4
 8007dc2:	6812      	ldr	r2, [r2, #0]
 8007dc4:	9103      	str	r1, [sp, #12]
 8007dc6:	2a00      	cmp	r2, #0
 8007dc8:	db01      	blt.n	8007dce <_svfiprintf_r+0xfa>
 8007dca:	9207      	str	r2, [sp, #28]
 8007dcc:	e004      	b.n	8007dd8 <_svfiprintf_r+0x104>
 8007dce:	4252      	negs	r2, r2
 8007dd0:	f043 0302 	orr.w	r3, r3, #2
 8007dd4:	9207      	str	r2, [sp, #28]
 8007dd6:	9304      	str	r3, [sp, #16]
 8007dd8:	783b      	ldrb	r3, [r7, #0]
 8007dda:	2b2e      	cmp	r3, #46	; 0x2e
 8007ddc:	d10c      	bne.n	8007df8 <_svfiprintf_r+0x124>
 8007dde:	787b      	ldrb	r3, [r7, #1]
 8007de0:	2b2a      	cmp	r3, #42	; 0x2a
 8007de2:	d133      	bne.n	8007e4c <_svfiprintf_r+0x178>
 8007de4:	9b03      	ldr	r3, [sp, #12]
 8007de6:	1d1a      	adds	r2, r3, #4
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	9203      	str	r2, [sp, #12]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	bfb8      	it	lt
 8007df0:	f04f 33ff 	movlt.w	r3, #4294967295
 8007df4:	3702      	adds	r7, #2
 8007df6:	9305      	str	r3, [sp, #20]
 8007df8:	4d2e      	ldr	r5, [pc, #184]	; (8007eb4 <_svfiprintf_r+0x1e0>)
 8007dfa:	7839      	ldrb	r1, [r7, #0]
 8007dfc:	2203      	movs	r2, #3
 8007dfe:	4628      	mov	r0, r5
 8007e00:	f7f8 f9f6 	bl	80001f0 <memchr>
 8007e04:	b138      	cbz	r0, 8007e16 <_svfiprintf_r+0x142>
 8007e06:	2340      	movs	r3, #64	; 0x40
 8007e08:	1b40      	subs	r0, r0, r5
 8007e0a:	fa03 f000 	lsl.w	r0, r3, r0
 8007e0e:	9b04      	ldr	r3, [sp, #16]
 8007e10:	4303      	orrs	r3, r0
 8007e12:	3701      	adds	r7, #1
 8007e14:	9304      	str	r3, [sp, #16]
 8007e16:	7839      	ldrb	r1, [r7, #0]
 8007e18:	4827      	ldr	r0, [pc, #156]	; (8007eb8 <_svfiprintf_r+0x1e4>)
 8007e1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e1e:	2206      	movs	r2, #6
 8007e20:	1c7e      	adds	r6, r7, #1
 8007e22:	f7f8 f9e5 	bl	80001f0 <memchr>
 8007e26:	2800      	cmp	r0, #0
 8007e28:	d038      	beq.n	8007e9c <_svfiprintf_r+0x1c8>
 8007e2a:	4b24      	ldr	r3, [pc, #144]	; (8007ebc <_svfiprintf_r+0x1e8>)
 8007e2c:	bb13      	cbnz	r3, 8007e74 <_svfiprintf_r+0x1a0>
 8007e2e:	9b03      	ldr	r3, [sp, #12]
 8007e30:	3307      	adds	r3, #7
 8007e32:	f023 0307 	bic.w	r3, r3, #7
 8007e36:	3308      	adds	r3, #8
 8007e38:	9303      	str	r3, [sp, #12]
 8007e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e3c:	444b      	add	r3, r9
 8007e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8007e40:	e76d      	b.n	8007d1e <_svfiprintf_r+0x4a>
 8007e42:	fb05 3202 	mla	r2, r5, r2, r3
 8007e46:	2001      	movs	r0, #1
 8007e48:	460f      	mov	r7, r1
 8007e4a:	e7a6      	b.n	8007d9a <_svfiprintf_r+0xc6>
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	3701      	adds	r7, #1
 8007e50:	9305      	str	r3, [sp, #20]
 8007e52:	4619      	mov	r1, r3
 8007e54:	250a      	movs	r5, #10
 8007e56:	4638      	mov	r0, r7
 8007e58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e5c:	3a30      	subs	r2, #48	; 0x30
 8007e5e:	2a09      	cmp	r2, #9
 8007e60:	d903      	bls.n	8007e6a <_svfiprintf_r+0x196>
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d0c8      	beq.n	8007df8 <_svfiprintf_r+0x124>
 8007e66:	9105      	str	r1, [sp, #20]
 8007e68:	e7c6      	b.n	8007df8 <_svfiprintf_r+0x124>
 8007e6a:	fb05 2101 	mla	r1, r5, r1, r2
 8007e6e:	2301      	movs	r3, #1
 8007e70:	4607      	mov	r7, r0
 8007e72:	e7f0      	b.n	8007e56 <_svfiprintf_r+0x182>
 8007e74:	ab03      	add	r3, sp, #12
 8007e76:	9300      	str	r3, [sp, #0]
 8007e78:	4622      	mov	r2, r4
 8007e7a:	4b11      	ldr	r3, [pc, #68]	; (8007ec0 <_svfiprintf_r+0x1ec>)
 8007e7c:	a904      	add	r1, sp, #16
 8007e7e:	4640      	mov	r0, r8
 8007e80:	f3af 8000 	nop.w
 8007e84:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007e88:	4681      	mov	r9, r0
 8007e8a:	d1d6      	bne.n	8007e3a <_svfiprintf_r+0x166>
 8007e8c:	89a3      	ldrh	r3, [r4, #12]
 8007e8e:	065b      	lsls	r3, r3, #25
 8007e90:	f53f af35 	bmi.w	8007cfe <_svfiprintf_r+0x2a>
 8007e94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e96:	b01d      	add	sp, #116	; 0x74
 8007e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e9c:	ab03      	add	r3, sp, #12
 8007e9e:	9300      	str	r3, [sp, #0]
 8007ea0:	4622      	mov	r2, r4
 8007ea2:	4b07      	ldr	r3, [pc, #28]	; (8007ec0 <_svfiprintf_r+0x1ec>)
 8007ea4:	a904      	add	r1, sp, #16
 8007ea6:	4640      	mov	r0, r8
 8007ea8:	f000 f882 	bl	8007fb0 <_printf_i>
 8007eac:	e7ea      	b.n	8007e84 <_svfiprintf_r+0x1b0>
 8007eae:	bf00      	nop
 8007eb0:	08029ee4 	.word	0x08029ee4
 8007eb4:	08029eea 	.word	0x08029eea
 8007eb8:	08029eee 	.word	0x08029eee
 8007ebc:	00000000 	.word	0x00000000
 8007ec0:	08007c21 	.word	0x08007c21

08007ec4 <_printf_common>:
 8007ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ec8:	4691      	mov	r9, r2
 8007eca:	461f      	mov	r7, r3
 8007ecc:	688a      	ldr	r2, [r1, #8]
 8007ece:	690b      	ldr	r3, [r1, #16]
 8007ed0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	bfb8      	it	lt
 8007ed8:	4613      	movlt	r3, r2
 8007eda:	f8c9 3000 	str.w	r3, [r9]
 8007ede:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ee2:	4606      	mov	r6, r0
 8007ee4:	460c      	mov	r4, r1
 8007ee6:	b112      	cbz	r2, 8007eee <_printf_common+0x2a>
 8007ee8:	3301      	adds	r3, #1
 8007eea:	f8c9 3000 	str.w	r3, [r9]
 8007eee:	6823      	ldr	r3, [r4, #0]
 8007ef0:	0699      	lsls	r1, r3, #26
 8007ef2:	bf42      	ittt	mi
 8007ef4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007ef8:	3302      	addmi	r3, #2
 8007efa:	f8c9 3000 	strmi.w	r3, [r9]
 8007efe:	6825      	ldr	r5, [r4, #0]
 8007f00:	f015 0506 	ands.w	r5, r5, #6
 8007f04:	d107      	bne.n	8007f16 <_printf_common+0x52>
 8007f06:	f104 0a19 	add.w	sl, r4, #25
 8007f0a:	68e3      	ldr	r3, [r4, #12]
 8007f0c:	f8d9 2000 	ldr.w	r2, [r9]
 8007f10:	1a9b      	subs	r3, r3, r2
 8007f12:	42ab      	cmp	r3, r5
 8007f14:	dc28      	bgt.n	8007f68 <_printf_common+0xa4>
 8007f16:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007f1a:	6822      	ldr	r2, [r4, #0]
 8007f1c:	3300      	adds	r3, #0
 8007f1e:	bf18      	it	ne
 8007f20:	2301      	movne	r3, #1
 8007f22:	0692      	lsls	r2, r2, #26
 8007f24:	d42d      	bmi.n	8007f82 <_printf_common+0xbe>
 8007f26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f2a:	4639      	mov	r1, r7
 8007f2c:	4630      	mov	r0, r6
 8007f2e:	47c0      	blx	r8
 8007f30:	3001      	adds	r0, #1
 8007f32:	d020      	beq.n	8007f76 <_printf_common+0xb2>
 8007f34:	6823      	ldr	r3, [r4, #0]
 8007f36:	68e5      	ldr	r5, [r4, #12]
 8007f38:	f8d9 2000 	ldr.w	r2, [r9]
 8007f3c:	f003 0306 	and.w	r3, r3, #6
 8007f40:	2b04      	cmp	r3, #4
 8007f42:	bf08      	it	eq
 8007f44:	1aad      	subeq	r5, r5, r2
 8007f46:	68a3      	ldr	r3, [r4, #8]
 8007f48:	6922      	ldr	r2, [r4, #16]
 8007f4a:	bf0c      	ite	eq
 8007f4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f50:	2500      	movne	r5, #0
 8007f52:	4293      	cmp	r3, r2
 8007f54:	bfc4      	itt	gt
 8007f56:	1a9b      	subgt	r3, r3, r2
 8007f58:	18ed      	addgt	r5, r5, r3
 8007f5a:	f04f 0900 	mov.w	r9, #0
 8007f5e:	341a      	adds	r4, #26
 8007f60:	454d      	cmp	r5, r9
 8007f62:	d11a      	bne.n	8007f9a <_printf_common+0xd6>
 8007f64:	2000      	movs	r0, #0
 8007f66:	e008      	b.n	8007f7a <_printf_common+0xb6>
 8007f68:	2301      	movs	r3, #1
 8007f6a:	4652      	mov	r2, sl
 8007f6c:	4639      	mov	r1, r7
 8007f6e:	4630      	mov	r0, r6
 8007f70:	47c0      	blx	r8
 8007f72:	3001      	adds	r0, #1
 8007f74:	d103      	bne.n	8007f7e <_printf_common+0xba>
 8007f76:	f04f 30ff 	mov.w	r0, #4294967295
 8007f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f7e:	3501      	adds	r5, #1
 8007f80:	e7c3      	b.n	8007f0a <_printf_common+0x46>
 8007f82:	18e1      	adds	r1, r4, r3
 8007f84:	1c5a      	adds	r2, r3, #1
 8007f86:	2030      	movs	r0, #48	; 0x30
 8007f88:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f8c:	4422      	add	r2, r4
 8007f8e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f92:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f96:	3302      	adds	r3, #2
 8007f98:	e7c5      	b.n	8007f26 <_printf_common+0x62>
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	4622      	mov	r2, r4
 8007f9e:	4639      	mov	r1, r7
 8007fa0:	4630      	mov	r0, r6
 8007fa2:	47c0      	blx	r8
 8007fa4:	3001      	adds	r0, #1
 8007fa6:	d0e6      	beq.n	8007f76 <_printf_common+0xb2>
 8007fa8:	f109 0901 	add.w	r9, r9, #1
 8007fac:	e7d8      	b.n	8007f60 <_printf_common+0x9c>
	...

08007fb0 <_printf_i>:
 8007fb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007fb4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007fb8:	460c      	mov	r4, r1
 8007fba:	7e09      	ldrb	r1, [r1, #24]
 8007fbc:	b085      	sub	sp, #20
 8007fbe:	296e      	cmp	r1, #110	; 0x6e
 8007fc0:	4617      	mov	r7, r2
 8007fc2:	4606      	mov	r6, r0
 8007fc4:	4698      	mov	r8, r3
 8007fc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007fc8:	f000 80b3 	beq.w	8008132 <_printf_i+0x182>
 8007fcc:	d822      	bhi.n	8008014 <_printf_i+0x64>
 8007fce:	2963      	cmp	r1, #99	; 0x63
 8007fd0:	d036      	beq.n	8008040 <_printf_i+0x90>
 8007fd2:	d80a      	bhi.n	8007fea <_printf_i+0x3a>
 8007fd4:	2900      	cmp	r1, #0
 8007fd6:	f000 80b9 	beq.w	800814c <_printf_i+0x19c>
 8007fda:	2958      	cmp	r1, #88	; 0x58
 8007fdc:	f000 8083 	beq.w	80080e6 <_printf_i+0x136>
 8007fe0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fe4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007fe8:	e032      	b.n	8008050 <_printf_i+0xa0>
 8007fea:	2964      	cmp	r1, #100	; 0x64
 8007fec:	d001      	beq.n	8007ff2 <_printf_i+0x42>
 8007fee:	2969      	cmp	r1, #105	; 0x69
 8007ff0:	d1f6      	bne.n	8007fe0 <_printf_i+0x30>
 8007ff2:	6820      	ldr	r0, [r4, #0]
 8007ff4:	6813      	ldr	r3, [r2, #0]
 8007ff6:	0605      	lsls	r5, r0, #24
 8007ff8:	f103 0104 	add.w	r1, r3, #4
 8007ffc:	d52a      	bpl.n	8008054 <_printf_i+0xa4>
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	6011      	str	r1, [r2, #0]
 8008002:	2b00      	cmp	r3, #0
 8008004:	da03      	bge.n	800800e <_printf_i+0x5e>
 8008006:	222d      	movs	r2, #45	; 0x2d
 8008008:	425b      	negs	r3, r3
 800800a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800800e:	486f      	ldr	r0, [pc, #444]	; (80081cc <_printf_i+0x21c>)
 8008010:	220a      	movs	r2, #10
 8008012:	e039      	b.n	8008088 <_printf_i+0xd8>
 8008014:	2973      	cmp	r1, #115	; 0x73
 8008016:	f000 809d 	beq.w	8008154 <_printf_i+0x1a4>
 800801a:	d808      	bhi.n	800802e <_printf_i+0x7e>
 800801c:	296f      	cmp	r1, #111	; 0x6f
 800801e:	d020      	beq.n	8008062 <_printf_i+0xb2>
 8008020:	2970      	cmp	r1, #112	; 0x70
 8008022:	d1dd      	bne.n	8007fe0 <_printf_i+0x30>
 8008024:	6823      	ldr	r3, [r4, #0]
 8008026:	f043 0320 	orr.w	r3, r3, #32
 800802a:	6023      	str	r3, [r4, #0]
 800802c:	e003      	b.n	8008036 <_printf_i+0x86>
 800802e:	2975      	cmp	r1, #117	; 0x75
 8008030:	d017      	beq.n	8008062 <_printf_i+0xb2>
 8008032:	2978      	cmp	r1, #120	; 0x78
 8008034:	d1d4      	bne.n	8007fe0 <_printf_i+0x30>
 8008036:	2378      	movs	r3, #120	; 0x78
 8008038:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800803c:	4864      	ldr	r0, [pc, #400]	; (80081d0 <_printf_i+0x220>)
 800803e:	e055      	b.n	80080ec <_printf_i+0x13c>
 8008040:	6813      	ldr	r3, [r2, #0]
 8008042:	1d19      	adds	r1, r3, #4
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	6011      	str	r1, [r2, #0]
 8008048:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800804c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008050:	2301      	movs	r3, #1
 8008052:	e08c      	b.n	800816e <_printf_i+0x1be>
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	6011      	str	r1, [r2, #0]
 8008058:	f010 0f40 	tst.w	r0, #64	; 0x40
 800805c:	bf18      	it	ne
 800805e:	b21b      	sxthne	r3, r3
 8008060:	e7cf      	b.n	8008002 <_printf_i+0x52>
 8008062:	6813      	ldr	r3, [r2, #0]
 8008064:	6825      	ldr	r5, [r4, #0]
 8008066:	1d18      	adds	r0, r3, #4
 8008068:	6010      	str	r0, [r2, #0]
 800806a:	0628      	lsls	r0, r5, #24
 800806c:	d501      	bpl.n	8008072 <_printf_i+0xc2>
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	e002      	b.n	8008078 <_printf_i+0xc8>
 8008072:	0668      	lsls	r0, r5, #25
 8008074:	d5fb      	bpl.n	800806e <_printf_i+0xbe>
 8008076:	881b      	ldrh	r3, [r3, #0]
 8008078:	4854      	ldr	r0, [pc, #336]	; (80081cc <_printf_i+0x21c>)
 800807a:	296f      	cmp	r1, #111	; 0x6f
 800807c:	bf14      	ite	ne
 800807e:	220a      	movne	r2, #10
 8008080:	2208      	moveq	r2, #8
 8008082:	2100      	movs	r1, #0
 8008084:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008088:	6865      	ldr	r5, [r4, #4]
 800808a:	60a5      	str	r5, [r4, #8]
 800808c:	2d00      	cmp	r5, #0
 800808e:	f2c0 8095 	blt.w	80081bc <_printf_i+0x20c>
 8008092:	6821      	ldr	r1, [r4, #0]
 8008094:	f021 0104 	bic.w	r1, r1, #4
 8008098:	6021      	str	r1, [r4, #0]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d13d      	bne.n	800811a <_printf_i+0x16a>
 800809e:	2d00      	cmp	r5, #0
 80080a0:	f040 808e 	bne.w	80081c0 <_printf_i+0x210>
 80080a4:	4665      	mov	r5, ip
 80080a6:	2a08      	cmp	r2, #8
 80080a8:	d10b      	bne.n	80080c2 <_printf_i+0x112>
 80080aa:	6823      	ldr	r3, [r4, #0]
 80080ac:	07db      	lsls	r3, r3, #31
 80080ae:	d508      	bpl.n	80080c2 <_printf_i+0x112>
 80080b0:	6923      	ldr	r3, [r4, #16]
 80080b2:	6862      	ldr	r2, [r4, #4]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	bfde      	ittt	le
 80080b8:	2330      	movle	r3, #48	; 0x30
 80080ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 80080be:	f105 35ff 	addle.w	r5, r5, #4294967295
 80080c2:	ebac 0305 	sub.w	r3, ip, r5
 80080c6:	6123      	str	r3, [r4, #16]
 80080c8:	f8cd 8000 	str.w	r8, [sp]
 80080cc:	463b      	mov	r3, r7
 80080ce:	aa03      	add	r2, sp, #12
 80080d0:	4621      	mov	r1, r4
 80080d2:	4630      	mov	r0, r6
 80080d4:	f7ff fef6 	bl	8007ec4 <_printf_common>
 80080d8:	3001      	adds	r0, #1
 80080da:	d14d      	bne.n	8008178 <_printf_i+0x1c8>
 80080dc:	f04f 30ff 	mov.w	r0, #4294967295
 80080e0:	b005      	add	sp, #20
 80080e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080e6:	4839      	ldr	r0, [pc, #228]	; (80081cc <_printf_i+0x21c>)
 80080e8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80080ec:	6813      	ldr	r3, [r2, #0]
 80080ee:	6821      	ldr	r1, [r4, #0]
 80080f0:	1d1d      	adds	r5, r3, #4
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	6015      	str	r5, [r2, #0]
 80080f6:	060a      	lsls	r2, r1, #24
 80080f8:	d50b      	bpl.n	8008112 <_printf_i+0x162>
 80080fa:	07ca      	lsls	r2, r1, #31
 80080fc:	bf44      	itt	mi
 80080fe:	f041 0120 	orrmi.w	r1, r1, #32
 8008102:	6021      	strmi	r1, [r4, #0]
 8008104:	b91b      	cbnz	r3, 800810e <_printf_i+0x15e>
 8008106:	6822      	ldr	r2, [r4, #0]
 8008108:	f022 0220 	bic.w	r2, r2, #32
 800810c:	6022      	str	r2, [r4, #0]
 800810e:	2210      	movs	r2, #16
 8008110:	e7b7      	b.n	8008082 <_printf_i+0xd2>
 8008112:	064d      	lsls	r5, r1, #25
 8008114:	bf48      	it	mi
 8008116:	b29b      	uxthmi	r3, r3
 8008118:	e7ef      	b.n	80080fa <_printf_i+0x14a>
 800811a:	4665      	mov	r5, ip
 800811c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008120:	fb02 3311 	mls	r3, r2, r1, r3
 8008124:	5cc3      	ldrb	r3, [r0, r3]
 8008126:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800812a:	460b      	mov	r3, r1
 800812c:	2900      	cmp	r1, #0
 800812e:	d1f5      	bne.n	800811c <_printf_i+0x16c>
 8008130:	e7b9      	b.n	80080a6 <_printf_i+0xf6>
 8008132:	6813      	ldr	r3, [r2, #0]
 8008134:	6825      	ldr	r5, [r4, #0]
 8008136:	6961      	ldr	r1, [r4, #20]
 8008138:	1d18      	adds	r0, r3, #4
 800813a:	6010      	str	r0, [r2, #0]
 800813c:	0628      	lsls	r0, r5, #24
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	d501      	bpl.n	8008146 <_printf_i+0x196>
 8008142:	6019      	str	r1, [r3, #0]
 8008144:	e002      	b.n	800814c <_printf_i+0x19c>
 8008146:	066a      	lsls	r2, r5, #25
 8008148:	d5fb      	bpl.n	8008142 <_printf_i+0x192>
 800814a:	8019      	strh	r1, [r3, #0]
 800814c:	2300      	movs	r3, #0
 800814e:	6123      	str	r3, [r4, #16]
 8008150:	4665      	mov	r5, ip
 8008152:	e7b9      	b.n	80080c8 <_printf_i+0x118>
 8008154:	6813      	ldr	r3, [r2, #0]
 8008156:	1d19      	adds	r1, r3, #4
 8008158:	6011      	str	r1, [r2, #0]
 800815a:	681d      	ldr	r5, [r3, #0]
 800815c:	6862      	ldr	r2, [r4, #4]
 800815e:	2100      	movs	r1, #0
 8008160:	4628      	mov	r0, r5
 8008162:	f7f8 f845 	bl	80001f0 <memchr>
 8008166:	b108      	cbz	r0, 800816c <_printf_i+0x1bc>
 8008168:	1b40      	subs	r0, r0, r5
 800816a:	6060      	str	r0, [r4, #4]
 800816c:	6863      	ldr	r3, [r4, #4]
 800816e:	6123      	str	r3, [r4, #16]
 8008170:	2300      	movs	r3, #0
 8008172:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008176:	e7a7      	b.n	80080c8 <_printf_i+0x118>
 8008178:	6923      	ldr	r3, [r4, #16]
 800817a:	462a      	mov	r2, r5
 800817c:	4639      	mov	r1, r7
 800817e:	4630      	mov	r0, r6
 8008180:	47c0      	blx	r8
 8008182:	3001      	adds	r0, #1
 8008184:	d0aa      	beq.n	80080dc <_printf_i+0x12c>
 8008186:	6823      	ldr	r3, [r4, #0]
 8008188:	079b      	lsls	r3, r3, #30
 800818a:	d413      	bmi.n	80081b4 <_printf_i+0x204>
 800818c:	68e0      	ldr	r0, [r4, #12]
 800818e:	9b03      	ldr	r3, [sp, #12]
 8008190:	4298      	cmp	r0, r3
 8008192:	bfb8      	it	lt
 8008194:	4618      	movlt	r0, r3
 8008196:	e7a3      	b.n	80080e0 <_printf_i+0x130>
 8008198:	2301      	movs	r3, #1
 800819a:	464a      	mov	r2, r9
 800819c:	4639      	mov	r1, r7
 800819e:	4630      	mov	r0, r6
 80081a0:	47c0      	blx	r8
 80081a2:	3001      	adds	r0, #1
 80081a4:	d09a      	beq.n	80080dc <_printf_i+0x12c>
 80081a6:	3501      	adds	r5, #1
 80081a8:	68e3      	ldr	r3, [r4, #12]
 80081aa:	9a03      	ldr	r2, [sp, #12]
 80081ac:	1a9b      	subs	r3, r3, r2
 80081ae:	42ab      	cmp	r3, r5
 80081b0:	dcf2      	bgt.n	8008198 <_printf_i+0x1e8>
 80081b2:	e7eb      	b.n	800818c <_printf_i+0x1dc>
 80081b4:	2500      	movs	r5, #0
 80081b6:	f104 0919 	add.w	r9, r4, #25
 80081ba:	e7f5      	b.n	80081a8 <_printf_i+0x1f8>
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d1ac      	bne.n	800811a <_printf_i+0x16a>
 80081c0:	7803      	ldrb	r3, [r0, #0]
 80081c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80081c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081ca:	e76c      	b.n	80080a6 <_printf_i+0xf6>
 80081cc:	08029ef5 	.word	0x08029ef5
 80081d0:	08029f06 	.word	0x08029f06

080081d4 <memcpy>:
 80081d4:	b510      	push	{r4, lr}
 80081d6:	1e43      	subs	r3, r0, #1
 80081d8:	440a      	add	r2, r1
 80081da:	4291      	cmp	r1, r2
 80081dc:	d100      	bne.n	80081e0 <memcpy+0xc>
 80081de:	bd10      	pop	{r4, pc}
 80081e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081e8:	e7f7      	b.n	80081da <memcpy+0x6>

080081ea <memmove>:
 80081ea:	4288      	cmp	r0, r1
 80081ec:	b510      	push	{r4, lr}
 80081ee:	eb01 0302 	add.w	r3, r1, r2
 80081f2:	d807      	bhi.n	8008204 <memmove+0x1a>
 80081f4:	1e42      	subs	r2, r0, #1
 80081f6:	4299      	cmp	r1, r3
 80081f8:	d00a      	beq.n	8008210 <memmove+0x26>
 80081fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081fe:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008202:	e7f8      	b.n	80081f6 <memmove+0xc>
 8008204:	4283      	cmp	r3, r0
 8008206:	d9f5      	bls.n	80081f4 <memmove+0xa>
 8008208:	1881      	adds	r1, r0, r2
 800820a:	1ad2      	subs	r2, r2, r3
 800820c:	42d3      	cmn	r3, r2
 800820e:	d100      	bne.n	8008212 <memmove+0x28>
 8008210:	bd10      	pop	{r4, pc}
 8008212:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008216:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800821a:	e7f7      	b.n	800820c <memmove+0x22>

0800821c <_free_r>:
 800821c:	b538      	push	{r3, r4, r5, lr}
 800821e:	4605      	mov	r5, r0
 8008220:	2900      	cmp	r1, #0
 8008222:	d045      	beq.n	80082b0 <_free_r+0x94>
 8008224:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008228:	1f0c      	subs	r4, r1, #4
 800822a:	2b00      	cmp	r3, #0
 800822c:	bfb8      	it	lt
 800822e:	18e4      	addlt	r4, r4, r3
 8008230:	f000 f8d2 	bl	80083d8 <__malloc_lock>
 8008234:	4a1f      	ldr	r2, [pc, #124]	; (80082b4 <_free_r+0x98>)
 8008236:	6813      	ldr	r3, [r2, #0]
 8008238:	4610      	mov	r0, r2
 800823a:	b933      	cbnz	r3, 800824a <_free_r+0x2e>
 800823c:	6063      	str	r3, [r4, #4]
 800823e:	6014      	str	r4, [r2, #0]
 8008240:	4628      	mov	r0, r5
 8008242:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008246:	f000 b8c8 	b.w	80083da <__malloc_unlock>
 800824a:	42a3      	cmp	r3, r4
 800824c:	d90c      	bls.n	8008268 <_free_r+0x4c>
 800824e:	6821      	ldr	r1, [r4, #0]
 8008250:	1862      	adds	r2, r4, r1
 8008252:	4293      	cmp	r3, r2
 8008254:	bf04      	itt	eq
 8008256:	681a      	ldreq	r2, [r3, #0]
 8008258:	685b      	ldreq	r3, [r3, #4]
 800825a:	6063      	str	r3, [r4, #4]
 800825c:	bf04      	itt	eq
 800825e:	1852      	addeq	r2, r2, r1
 8008260:	6022      	streq	r2, [r4, #0]
 8008262:	6004      	str	r4, [r0, #0]
 8008264:	e7ec      	b.n	8008240 <_free_r+0x24>
 8008266:	4613      	mov	r3, r2
 8008268:	685a      	ldr	r2, [r3, #4]
 800826a:	b10a      	cbz	r2, 8008270 <_free_r+0x54>
 800826c:	42a2      	cmp	r2, r4
 800826e:	d9fa      	bls.n	8008266 <_free_r+0x4a>
 8008270:	6819      	ldr	r1, [r3, #0]
 8008272:	1858      	adds	r0, r3, r1
 8008274:	42a0      	cmp	r0, r4
 8008276:	d10b      	bne.n	8008290 <_free_r+0x74>
 8008278:	6820      	ldr	r0, [r4, #0]
 800827a:	4401      	add	r1, r0
 800827c:	1858      	adds	r0, r3, r1
 800827e:	4282      	cmp	r2, r0
 8008280:	6019      	str	r1, [r3, #0]
 8008282:	d1dd      	bne.n	8008240 <_free_r+0x24>
 8008284:	6810      	ldr	r0, [r2, #0]
 8008286:	6852      	ldr	r2, [r2, #4]
 8008288:	605a      	str	r2, [r3, #4]
 800828a:	4401      	add	r1, r0
 800828c:	6019      	str	r1, [r3, #0]
 800828e:	e7d7      	b.n	8008240 <_free_r+0x24>
 8008290:	d902      	bls.n	8008298 <_free_r+0x7c>
 8008292:	230c      	movs	r3, #12
 8008294:	602b      	str	r3, [r5, #0]
 8008296:	e7d3      	b.n	8008240 <_free_r+0x24>
 8008298:	6820      	ldr	r0, [r4, #0]
 800829a:	1821      	adds	r1, r4, r0
 800829c:	428a      	cmp	r2, r1
 800829e:	bf04      	itt	eq
 80082a0:	6811      	ldreq	r1, [r2, #0]
 80082a2:	6852      	ldreq	r2, [r2, #4]
 80082a4:	6062      	str	r2, [r4, #4]
 80082a6:	bf04      	itt	eq
 80082a8:	1809      	addeq	r1, r1, r0
 80082aa:	6021      	streq	r1, [r4, #0]
 80082ac:	605c      	str	r4, [r3, #4]
 80082ae:	e7c7      	b.n	8008240 <_free_r+0x24>
 80082b0:	bd38      	pop	{r3, r4, r5, pc}
 80082b2:	bf00      	nop
 80082b4:	200002dc 	.word	0x200002dc

080082b8 <_malloc_r>:
 80082b8:	b570      	push	{r4, r5, r6, lr}
 80082ba:	1ccd      	adds	r5, r1, #3
 80082bc:	f025 0503 	bic.w	r5, r5, #3
 80082c0:	3508      	adds	r5, #8
 80082c2:	2d0c      	cmp	r5, #12
 80082c4:	bf38      	it	cc
 80082c6:	250c      	movcc	r5, #12
 80082c8:	2d00      	cmp	r5, #0
 80082ca:	4606      	mov	r6, r0
 80082cc:	db01      	blt.n	80082d2 <_malloc_r+0x1a>
 80082ce:	42a9      	cmp	r1, r5
 80082d0:	d903      	bls.n	80082da <_malloc_r+0x22>
 80082d2:	230c      	movs	r3, #12
 80082d4:	6033      	str	r3, [r6, #0]
 80082d6:	2000      	movs	r0, #0
 80082d8:	bd70      	pop	{r4, r5, r6, pc}
 80082da:	f000 f87d 	bl	80083d8 <__malloc_lock>
 80082de:	4a21      	ldr	r2, [pc, #132]	; (8008364 <_malloc_r+0xac>)
 80082e0:	6814      	ldr	r4, [r2, #0]
 80082e2:	4621      	mov	r1, r4
 80082e4:	b991      	cbnz	r1, 800830c <_malloc_r+0x54>
 80082e6:	4c20      	ldr	r4, [pc, #128]	; (8008368 <_malloc_r+0xb0>)
 80082e8:	6823      	ldr	r3, [r4, #0]
 80082ea:	b91b      	cbnz	r3, 80082f4 <_malloc_r+0x3c>
 80082ec:	4630      	mov	r0, r6
 80082ee:	f000 f863 	bl	80083b8 <_sbrk_r>
 80082f2:	6020      	str	r0, [r4, #0]
 80082f4:	4629      	mov	r1, r5
 80082f6:	4630      	mov	r0, r6
 80082f8:	f000 f85e 	bl	80083b8 <_sbrk_r>
 80082fc:	1c43      	adds	r3, r0, #1
 80082fe:	d124      	bne.n	800834a <_malloc_r+0x92>
 8008300:	230c      	movs	r3, #12
 8008302:	6033      	str	r3, [r6, #0]
 8008304:	4630      	mov	r0, r6
 8008306:	f000 f868 	bl	80083da <__malloc_unlock>
 800830a:	e7e4      	b.n	80082d6 <_malloc_r+0x1e>
 800830c:	680b      	ldr	r3, [r1, #0]
 800830e:	1b5b      	subs	r3, r3, r5
 8008310:	d418      	bmi.n	8008344 <_malloc_r+0x8c>
 8008312:	2b0b      	cmp	r3, #11
 8008314:	d90f      	bls.n	8008336 <_malloc_r+0x7e>
 8008316:	600b      	str	r3, [r1, #0]
 8008318:	50cd      	str	r5, [r1, r3]
 800831a:	18cc      	adds	r4, r1, r3
 800831c:	4630      	mov	r0, r6
 800831e:	f000 f85c 	bl	80083da <__malloc_unlock>
 8008322:	f104 000b 	add.w	r0, r4, #11
 8008326:	1d23      	adds	r3, r4, #4
 8008328:	f020 0007 	bic.w	r0, r0, #7
 800832c:	1ac3      	subs	r3, r0, r3
 800832e:	d0d3      	beq.n	80082d8 <_malloc_r+0x20>
 8008330:	425a      	negs	r2, r3
 8008332:	50e2      	str	r2, [r4, r3]
 8008334:	e7d0      	b.n	80082d8 <_malloc_r+0x20>
 8008336:	428c      	cmp	r4, r1
 8008338:	684b      	ldr	r3, [r1, #4]
 800833a:	bf16      	itet	ne
 800833c:	6063      	strne	r3, [r4, #4]
 800833e:	6013      	streq	r3, [r2, #0]
 8008340:	460c      	movne	r4, r1
 8008342:	e7eb      	b.n	800831c <_malloc_r+0x64>
 8008344:	460c      	mov	r4, r1
 8008346:	6849      	ldr	r1, [r1, #4]
 8008348:	e7cc      	b.n	80082e4 <_malloc_r+0x2c>
 800834a:	1cc4      	adds	r4, r0, #3
 800834c:	f024 0403 	bic.w	r4, r4, #3
 8008350:	42a0      	cmp	r0, r4
 8008352:	d005      	beq.n	8008360 <_malloc_r+0xa8>
 8008354:	1a21      	subs	r1, r4, r0
 8008356:	4630      	mov	r0, r6
 8008358:	f000 f82e 	bl	80083b8 <_sbrk_r>
 800835c:	3001      	adds	r0, #1
 800835e:	d0cf      	beq.n	8008300 <_malloc_r+0x48>
 8008360:	6025      	str	r5, [r4, #0]
 8008362:	e7db      	b.n	800831c <_malloc_r+0x64>
 8008364:	200002dc 	.word	0x200002dc
 8008368:	200002e0 	.word	0x200002e0

0800836c <_realloc_r>:
 800836c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800836e:	4607      	mov	r7, r0
 8008370:	4614      	mov	r4, r2
 8008372:	460e      	mov	r6, r1
 8008374:	b921      	cbnz	r1, 8008380 <_realloc_r+0x14>
 8008376:	4611      	mov	r1, r2
 8008378:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800837c:	f7ff bf9c 	b.w	80082b8 <_malloc_r>
 8008380:	b922      	cbnz	r2, 800838c <_realloc_r+0x20>
 8008382:	f7ff ff4b 	bl	800821c <_free_r>
 8008386:	4625      	mov	r5, r4
 8008388:	4628      	mov	r0, r5
 800838a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800838c:	f000 f826 	bl	80083dc <_malloc_usable_size_r>
 8008390:	42a0      	cmp	r0, r4
 8008392:	d20f      	bcs.n	80083b4 <_realloc_r+0x48>
 8008394:	4621      	mov	r1, r4
 8008396:	4638      	mov	r0, r7
 8008398:	f7ff ff8e 	bl	80082b8 <_malloc_r>
 800839c:	4605      	mov	r5, r0
 800839e:	2800      	cmp	r0, #0
 80083a0:	d0f2      	beq.n	8008388 <_realloc_r+0x1c>
 80083a2:	4631      	mov	r1, r6
 80083a4:	4622      	mov	r2, r4
 80083a6:	f7ff ff15 	bl	80081d4 <memcpy>
 80083aa:	4631      	mov	r1, r6
 80083ac:	4638      	mov	r0, r7
 80083ae:	f7ff ff35 	bl	800821c <_free_r>
 80083b2:	e7e9      	b.n	8008388 <_realloc_r+0x1c>
 80083b4:	4635      	mov	r5, r6
 80083b6:	e7e7      	b.n	8008388 <_realloc_r+0x1c>

080083b8 <_sbrk_r>:
 80083b8:	b538      	push	{r3, r4, r5, lr}
 80083ba:	4c06      	ldr	r4, [pc, #24]	; (80083d4 <_sbrk_r+0x1c>)
 80083bc:	2300      	movs	r3, #0
 80083be:	4605      	mov	r5, r0
 80083c0:	4608      	mov	r0, r1
 80083c2:	6023      	str	r3, [r4, #0]
 80083c4:	f7fe fe32 	bl	800702c <_sbrk>
 80083c8:	1c43      	adds	r3, r0, #1
 80083ca:	d102      	bne.n	80083d2 <_sbrk_r+0x1a>
 80083cc:	6823      	ldr	r3, [r4, #0]
 80083ce:	b103      	cbz	r3, 80083d2 <_sbrk_r+0x1a>
 80083d0:	602b      	str	r3, [r5, #0]
 80083d2:	bd38      	pop	{r3, r4, r5, pc}
 80083d4:	20004700 	.word	0x20004700

080083d8 <__malloc_lock>:
 80083d8:	4770      	bx	lr

080083da <__malloc_unlock>:
 80083da:	4770      	bx	lr

080083dc <_malloc_usable_size_r>:
 80083dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083e0:	1f18      	subs	r0, r3, #4
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	bfbc      	itt	lt
 80083e6:	580b      	ldrlt	r3, [r1, r0]
 80083e8:	18c0      	addlt	r0, r0, r3
 80083ea:	4770      	bx	lr

080083ec <_init>:
 80083ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ee:	bf00      	nop
 80083f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083f2:	bc08      	pop	{r3}
 80083f4:	469e      	mov	lr, r3
 80083f6:	4770      	bx	lr

080083f8 <_fini>:
 80083f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083fa:	bf00      	nop
 80083fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083fe:	bc08      	pop	{r3}
 8008400:	469e      	mov	lr, r3
 8008402:	4770      	bx	lr
